// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_1_0/events/findings/findings.proto

package findings

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_1_0/events/findings/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_1_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event UID: 2
// URL: https://schema.ocsf.io/1.1.0/classes/vulnerability_finding
// Event: findings
type VulnerabilityFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          string                                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // Caption: Status;
	ConfidenceId    enums.VULNERABILITY_FINDING_CONFIDENCE_ID `protobuf:"varint,2,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	StatusId        enums.VULNERABILITY_FINDING_STATUS_ID     `protobuf:"varint,3,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_STATUS_ID" json:"status_id,omitempty"`                 // Caption: Status ID;
	Actor           *objects.Actor                            `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor; Profile: host;
	Device          *objects.Device                           `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	FindingInfo     *objects.FindingInfo                      `protobuf:"bytes,6,opt,name=finding_info,json=findingInfo,proto3" json:"finding_info,omitempty"`                                                                                // Caption: Finding Information;
	Observables     []*objects.Observable                     `protobuf:"bytes,7,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                   // Caption: Observables;
	StartTime       int64                                     `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
	CategoryUid     enums.VULNERABILITY_FINDING_CATEGORY_UID  `protobuf:"varint,9,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`     // Caption: Category ID;
	Resource        *objects.ResourceDetails                  `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                                        // Caption: Resource;
	Vulnerabilities []*objects.Vulnerability                  `protobuf:"bytes,11,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                                                                                          // Caption: Vulnerabilities;
	Severity        string                                    `protobuf:"bytes,12,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	ActivityId      enums.VULNERABILITY_FINDING_ACTIVITY_ID   `protobuf:"varint,13,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`        // Caption: Activity ID;
	Count           int32                                     `protobuf:"varint,14,opt,name=count,proto3" json:"count,omitempty"`                                                                                                             // Caption: Count;
	Unmapped        *objects.Object                           `protobuf:"bytes,15,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                        // Caption: Unmapped Data;
	TypeUid         enums.VULNERABILITY_FINDING_TYPE_UID      `protobuf:"varint,16,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_TYPE_UID" json:"type_uid,omitempty"`                    // Caption: Type ID;
	RawData         string                                    `protobuf:"bytes,17,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                           // Caption: Raw Data;
	Duration        int32                                     `protobuf:"varint,18,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                       // Caption: Duration;
	Message         string                                    `protobuf:"bytes,19,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	ConfidenceScore int32                                     `protobuf:"varint,20,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                                  // Caption: Confidence Score;
	ClassUid        enums.VULNERABILITY_FINDING_CLASS_UID     `protobuf:"varint,21,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CLASS_UID" json:"class_uid,omitempty"`                // Caption: Class ID;
	TimezoneOffset  int32                                     `protobuf:"varint,22,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                     // Caption: Timezone Offset;
	StatusDetail    string                                    `protobuf:"bytes,23,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                            // Caption: Status Details;
	Enrichments     []*objects.Enrichment                     `protobuf:"bytes,24,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                  // Caption: Enrichments;
	ClassName       string                                    `protobuf:"bytes,25,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                     // Caption: Class;
	Comment         string                                    `protobuf:"bytes,26,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                                          // Caption: Comment;
	Time            int64                                     `protobuf:"varint,27,opt,name=time,proto3" json:"time,omitempty"`                                                                                                               // Caption: Event Time;
	SeverityId      enums.VULNERABILITY_FINDING_SEVERITY_ID   `protobuf:"varint,28,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`        // Caption: Severity ID;
	Metadata        *objects.Metadata                         `protobuf:"bytes,29,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                        // Caption: Metadata;
	CategoryName    string                                    `protobuf:"bytes,30,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                            // Caption: Category;
	Cloud           *objects.Cloud                            `protobuf:"bytes,31,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                              // Caption: Cloud; Profile: cloud;
	TypeName        string                                    `protobuf:"bytes,32,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                        // Caption: Type Name;
	Confidence      string                                    `protobuf:"bytes,33,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                    // Caption: Confidence;
	StatusCode      string                                    `protobuf:"bytes,34,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                  // Caption: Status Code;
	Api             *objects.Api                              `protobuf:"bytes,35,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                  // Profile: cloud; Caption: API Details;
	EndTime         int64                                     `protobuf:"varint,36,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                          // Caption: End Time;
	ActivityName    string                                    `protobuf:"bytes,37,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                            // Caption: Activity;
}

func (x *VulnerabilityFinding) Reset() {
	*x = VulnerabilityFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityFinding) ProtoMessage() {}

func (x *VulnerabilityFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityFinding.ProtoReflect.Descriptor instead.
func (*VulnerabilityFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{0}
}

func (x *VulnerabilityFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VulnerabilityFinding) GetConfidenceId() enums.VULNERABILITY_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.VULNERABILITY_FINDING_CONFIDENCE_ID(0)
}

func (x *VulnerabilityFinding) GetStatusId() enums.VULNERABILITY_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.VULNERABILITY_FINDING_STATUS_ID(0)
}

func (x *VulnerabilityFinding) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *VulnerabilityFinding) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *VulnerabilityFinding) GetFindingInfo() *objects.FindingInfo {
	if x != nil {
		return x.FindingInfo
	}
	return nil
}

func (x *VulnerabilityFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *VulnerabilityFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VulnerabilityFinding) GetCategoryUid() enums.VULNERABILITY_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.VULNERABILITY_FINDING_CATEGORY_UID(0)
}

func (x *VulnerabilityFinding) GetResource() *objects.ResourceDetails {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *VulnerabilityFinding) GetVulnerabilities() []*objects.Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *VulnerabilityFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *VulnerabilityFinding) GetActivityId() enums.VULNERABILITY_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.VULNERABILITY_FINDING_ACTIVITY_ID(0)
}

func (x *VulnerabilityFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VulnerabilityFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *VulnerabilityFinding) GetTypeUid() enums.VULNERABILITY_FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.VULNERABILITY_FINDING_TYPE_UID(0)
}

func (x *VulnerabilityFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *VulnerabilityFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VulnerabilityFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VulnerabilityFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *VulnerabilityFinding) GetClassUid() enums.VULNERABILITY_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.VULNERABILITY_FINDING_CLASS_UID(0)
}

func (x *VulnerabilityFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *VulnerabilityFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *VulnerabilityFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *VulnerabilityFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *VulnerabilityFinding) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *VulnerabilityFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *VulnerabilityFinding) GetSeverityId() enums.VULNERABILITY_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.VULNERABILITY_FINDING_SEVERITY_ID(0)
}

func (x *VulnerabilityFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VulnerabilityFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *VulnerabilityFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *VulnerabilityFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *VulnerabilityFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *VulnerabilityFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *VulnerabilityFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *VulnerabilityFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VulnerabilityFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

// Event UID: 3
// URL: https://schema.ocsf.io/1.1.0/classes/compliance_finding
// Event: findings
type ComplianceFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message         string                                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                                                                                                        // Caption: Message;
	ClassUid        enums.COMPLIANCE_FINDING_CLASS_UID     `protobuf:"varint,2,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CLASS_UID" json:"class_uid,omitempty"`                 // Caption: Class ID;
	ConfidenceScore int32                                  `protobuf:"varint,3,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                                // Caption: Confidence Score;
	ConfidenceId    enums.COMPLIANCE_FINDING_CONFIDENCE_ID `protobuf:"varint,4,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	Status          string                                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                                          // Caption: Status;
	ClassName       string                                 `protobuf:"bytes,6,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                   // Caption: Class;
	Remediation     *objects.Remediation                   `protobuf:"bytes,7,opt,name=remediation,proto3" json:"remediation,omitempty"`                                                                                                // Caption: Remediation Guidance;
	Time            int64                                  `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`                                                                                                             // Caption: Event Time;
	TypeUid         enums.COMPLIANCE_FINDING_TYPE_UID      `protobuf:"varint,9,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_TYPE_UID" json:"type_uid,omitempty"`                     // Caption: Type ID;
	TypeName        string                                 `protobuf:"bytes,10,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	StatusCode      string                                 `protobuf:"bytes,11,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                               // Caption: Status Code;
	ActivityId      enums.COMPLIANCE_FINDING_ACTIVITY_ID   `protobuf:"varint,12,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`        // Caption: Activity ID;
	StatusId        enums.COMPLIANCE_FINDING_STATUS_ID     `protobuf:"varint,13,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_STATUS_ID" json:"status_id,omitempty"`                // Caption: Status ID;
	Duration        int32                                  `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                    // Caption: Duration;
	Severity        string                                 `protobuf:"bytes,15,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                     // Caption: Severity;
	Comment         string                                 `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                                       // Caption: Comment;
	Unmapped        *objects.Object                        `protobuf:"bytes,17,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                     // Caption: Unmapped Data;
	RawData         string                                 `protobuf:"bytes,18,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                        // Caption: Raw Data;
	Metadata        *objects.Metadata                      `protobuf:"bytes,19,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                     // Caption: Metadata;
	CategoryName    string                                 `protobuf:"bytes,20,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                         // Caption: Category;
	Resource        *objects.ResourceDetails               `protobuf:"bytes,21,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                                     // Caption: Resource;
	Device          *objects.Device                        `protobuf:"bytes,22,opt,name=device,proto3" json:"device,omitempty"`                                                                                                         // Caption: Device; Profile: host;
	ActivityName    string                                 `protobuf:"bytes,23,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                         // Caption: Activity;
	Actor           *objects.Actor                         `protobuf:"bytes,24,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                           // Caption: Actor; Profile: host;
	Confidence      string                                 `protobuf:"bytes,25,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                 // Caption: Confidence;
	StatusDetail    string                                 `protobuf:"bytes,26,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                         // Caption: Status Details;
	FindingInfo     *objects.FindingInfo                   `protobuf:"bytes,27,opt,name=finding_info,json=findingInfo,proto3" json:"finding_info,omitempty"`                                                                            // Caption: Finding Information;
	Observables     []*objects.Observable                  `protobuf:"bytes,28,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                               // Caption: Observables;
	Api             *objects.Api                           `protobuf:"bytes,29,opt,name=api,proto3" json:"api,omitempty"`                                                                                                               // Caption: API Details; Profile: cloud;
	SeverityId      enums.COMPLIANCE_FINDING_SEVERITY_ID   `protobuf:"varint,30,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`        // Caption: Severity ID;
	Enrichments     []*objects.Enrichment                  `protobuf:"bytes,31,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                               // Caption: Enrichments;
	Compliance      *objects.Compliance                    `protobuf:"bytes,32,opt,name=compliance,proto3" json:"compliance,omitempty"`                                                                                                 // Caption: Compliance;
	EndTime         int64                                  `protobuf:"varint,33,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                       // Caption: End Time;
	StartTime       int64                                  `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // Caption: Start Time;
	CategoryUid     enums.COMPLIANCE_FINDING_CATEGORY_UID  `protobuf:"varint,35,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`    // Caption: Category ID;
	TimezoneOffset  int32                                  `protobuf:"varint,36,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                  // Caption: Timezone Offset;
	Count           int32                                  `protobuf:"varint,37,opt,name=count,proto3" json:"count,omitempty"`                                                                                                          // Caption: Count;
	Cloud           *objects.Cloud                         `protobuf:"bytes,38,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                           // Caption: Cloud; Profile: cloud;
}

func (x *ComplianceFinding) Reset() {
	*x = ComplianceFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceFinding) ProtoMessage() {}

func (x *ComplianceFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceFinding.ProtoReflect.Descriptor instead.
func (*ComplianceFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ComplianceFinding) GetClassUid() enums.COMPLIANCE_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.COMPLIANCE_FINDING_CLASS_UID(0)
}

func (x *ComplianceFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *ComplianceFinding) GetConfidenceId() enums.COMPLIANCE_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.COMPLIANCE_FINDING_CONFIDENCE_ID(0)
}

func (x *ComplianceFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ComplianceFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ComplianceFinding) GetRemediation() *objects.Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *ComplianceFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ComplianceFinding) GetTypeUid() enums.COMPLIANCE_FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.COMPLIANCE_FINDING_TYPE_UID(0)
}

func (x *ComplianceFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ComplianceFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ComplianceFinding) GetActivityId() enums.COMPLIANCE_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.COMPLIANCE_FINDING_ACTIVITY_ID(0)
}

func (x *ComplianceFinding) GetStatusId() enums.COMPLIANCE_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.COMPLIANCE_FINDING_STATUS_ID(0)
}

func (x *ComplianceFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ComplianceFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ComplianceFinding) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ComplianceFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ComplianceFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ComplianceFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComplianceFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ComplianceFinding) GetResource() *objects.ResourceDetails {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ComplianceFinding) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ComplianceFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ComplianceFinding) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ComplianceFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *ComplianceFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ComplianceFinding) GetFindingInfo() *objects.FindingInfo {
	if x != nil {
		return x.FindingInfo
	}
	return nil
}

func (x *ComplianceFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ComplianceFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ComplianceFinding) GetSeverityId() enums.COMPLIANCE_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.COMPLIANCE_FINDING_SEVERITY_ID(0)
}

func (x *ComplianceFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ComplianceFinding) GetCompliance() *objects.Compliance {
	if x != nil {
		return x.Compliance
	}
	return nil
}

func (x *ComplianceFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ComplianceFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ComplianceFinding) GetCategoryUid() enums.COMPLIANCE_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.COMPLIANCE_FINDING_CATEGORY_UID(0)
}

func (x *ComplianceFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ComplianceFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ComplianceFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

// Event: findings
// Event UID: 1
// URL: https://schema.ocsf.io/1.1.0/classes/security_finding
type SecurityFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CisCsc          []*objects.CisCsc                    `protobuf:"bytes,1,rep,name=cis_csc,json=cisCsc,proto3" json:"cis_csc,omitempty"`                                                                                           // Caption: CIS CSC;
	Resources       []*objects.ResourceDetails           `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`                                                                                                   // Caption: Resources Array;
	KillChain       []*objects.KillChainPhase            `protobuf:"bytes,3,rep,name=kill_chain,json=killChain,proto3" json:"kill_chain,omitempty"`                                                                                  // Caption: Kill Chain;
	Status          string                               `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                                                                         // Caption: Status;
	Time            int64                                `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                                                                                            // Caption: Event Time;
	Analytic        *objects.Analytic                    `protobuf:"bytes,6,opt,name=analytic,proto3" json:"analytic,omitempty"`                                                                                                     // Caption: Analytic;
	ConfidenceScore int32                                `protobuf:"varint,7,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                               // Caption: Confidence Score;
	StateId         enums.SECURITY_FINDING_STATE_ID      `protobuf:"varint,8,opt,name=state_id,json=stateId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATE_ID" json:"state_id,omitempty"`                      // Caption: State ID;
	Unmapped        *objects.Object                      `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                     // Caption: Unmapped Data;
	ClassName       string                               `protobuf:"bytes,10,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Enrichments     []*objects.Enrichment                `protobuf:"bytes,11,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	Nist            []string                             `protobuf:"bytes,12,rep,name=nist,proto3" json:"nist,omitempty"`                                                                                                            // Caption: NIST List;
	DataSources     []string                             `protobuf:"bytes,13,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`                                                                           // Caption: Data Sources;
	RiskLevelId     enums.SECURITY_FINDING_RISK_LEVEL_ID `protobuf:"varint,14,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID" json:"risk_level_id,omitempty"`  // Caption: Risk Level ID;
	ActivityId      enums.SECURITY_FINDING_ACTIVITY_ID   `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`         // Caption: Activity ID;
	Finding         *Finding                             `protobuf:"bytes,16,opt,name=finding,proto3" json:"finding,omitempty"`                                                                                                      // Caption: Finding;
	ImpactScore     int32                                `protobuf:"varint,17,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`                                                                          // Caption: Impact;
	Impact          string                               `protobuf:"bytes,18,opt,name=impact,proto3" json:"impact,omitempty"`                                                                                                        // Caption: Impact;
	ImpactId        enums.SECURITY_FINDING_IMPACT_ID     `protobuf:"varint,19,opt,name=impact_id,json=impactId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID" json:"impact_id,omitempty"`                 // Caption: Impact ID;
	Message         string                               `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	Observables     []*objects.Observable                `protobuf:"bytes,21,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	StatusId        enums.SECURITY_FINDING_STATUS_ID     `protobuf:"varint,22,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATUS_ID" json:"status_id,omitempty"`                 // Caption: Status ID;
	StatusCode      string                               `protobuf:"bytes,23,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	RiskScore       int32                                `protobuf:"varint,24,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                                                // Caption: Risk Score;
	RiskLevel       string                               `protobuf:"bytes,25,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                                                 // Caption: Risk Level;
	Attacks         []*objects.Attack                    `protobuf:"bytes,26,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: MITRE ATT&CK® Details;
	Process         *objects.Process                     `protobuf:"bytes,27,opt,name=process,proto3" json:"process,omitempty"`                                                                                                      // Caption: Process;
	Api             *objects.Api                         `protobuf:"bytes,28,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	ClassUid        enums.SECURITY_FINDING_CLASS_UID     `protobuf:"varint,29,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CLASS_UID" json:"class_uid,omitempty"`                 // Caption: Class ID;
	ActivityName    string                               `protobuf:"bytes,30,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	SeverityId      enums.SECURITY_FINDING_SEVERITY_ID   `protobuf:"varint,31,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`         // Caption: Severity ID;
	Compliance      *objects.Compliance                  `protobuf:"bytes,32,opt,name=compliance,proto3" json:"compliance,omitempty"`                                                                                                // Caption: Compliance;
	CategoryName    string                               `protobuf:"bytes,33,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	Cloud           *objects.Cloud                       `protobuf:"bytes,34,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	TypeName        string                               `protobuf:"bytes,35,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                    // Caption: Type Name;
	Severity        string                               `protobuf:"bytes,36,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	CategoryUid     enums.SECURITY_FINDING_CATEGORY_UID  `protobuf:"varint,37,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`     // Caption: Category ID;
	StartTime       int64                                `protobuf:"varint,38,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                // Caption: Start Time;
	Vulnerabilities []*objects.Vulnerability             `protobuf:"bytes,39,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                                                                                      // Caption: Vulnerabilities;
	Confidence      string                               `protobuf:"bytes,40,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                // Caption: Confidence;
	Malware         []*objects.Malware                   `protobuf:"bytes,41,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                      // Caption: Malware;
	ConfidenceId    enums.SECURITY_FINDING_CONFIDENCE_ID `protobuf:"varint,42,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	Evidence        string                               `protobuf:"bytes,43,opt,name=evidence,proto3" json:"evidence,omitempty"`                                                                                                    // Caption: Evidence;
	State           string                               `protobuf:"bytes,44,opt,name=state,proto3" json:"state,omitempty"`                                                                                                          // Caption: State;
	StatusDetail    string                               `protobuf:"bytes,45,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	EndTime         int64                                `protobuf:"varint,46,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	TypeUid         enums.SECURITY_FINDING_TYPE_UID      `protobuf:"varint,47,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_TYPE_UID" json:"type_uid,omitempty"`                     // Caption: Type ID;
	RawData         string                               `protobuf:"bytes,48,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	Duration        int32                                `protobuf:"varint,49,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Metadata        *objects.Metadata                    `protobuf:"bytes,50,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	TimezoneOffset  int32                                `protobuf:"varint,51,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	Count           int32                                `protobuf:"varint,52,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
}

func (x *SecurityFinding) Reset() {
	*x = SecurityFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityFinding) ProtoMessage() {}

func (x *SecurityFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityFinding.ProtoReflect.Descriptor instead.
func (*SecurityFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityFinding) GetCisCsc() []*objects.CisCsc {
	if x != nil {
		return x.CisCsc
	}
	return nil
}

func (x *SecurityFinding) GetResources() []*objects.ResourceDetails {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SecurityFinding) GetKillChain() []*objects.KillChainPhase {
	if x != nil {
		return x.KillChain
	}
	return nil
}

func (x *SecurityFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SecurityFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SecurityFinding) GetAnalytic() *objects.Analytic {
	if x != nil {
		return x.Analytic
	}
	return nil
}

func (x *SecurityFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *SecurityFinding) GetStateId() enums.SECURITY_FINDING_STATE_ID {
	if x != nil {
		return x.StateId
	}
	return enums.SECURITY_FINDING_STATE_ID(0)
}

func (x *SecurityFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *SecurityFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SecurityFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *SecurityFinding) GetNist() []string {
	if x != nil {
		return x.Nist
	}
	return nil
}

func (x *SecurityFinding) GetDataSources() []string {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *SecurityFinding) GetRiskLevelId() enums.SECURITY_FINDING_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.SECURITY_FINDING_RISK_LEVEL_ID(0)
}

func (x *SecurityFinding) GetActivityId() enums.SECURITY_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SECURITY_FINDING_ACTIVITY_ID(0)
}

func (x *SecurityFinding) GetFinding() *Finding {
	if x != nil {
		return x.Finding
	}
	return nil
}

func (x *SecurityFinding) GetImpactScore() int32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *SecurityFinding) GetImpact() string {
	if x != nil {
		return x.Impact
	}
	return ""
}

func (x *SecurityFinding) GetImpactId() enums.SECURITY_FINDING_IMPACT_ID {
	if x != nil {
		return x.ImpactId
	}
	return enums.SECURITY_FINDING_IMPACT_ID(0)
}

func (x *SecurityFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SecurityFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *SecurityFinding) GetStatusId() enums.SECURITY_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SECURITY_FINDING_STATUS_ID(0)
}

func (x *SecurityFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SecurityFinding) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *SecurityFinding) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *SecurityFinding) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *SecurityFinding) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *SecurityFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *SecurityFinding) GetClassUid() enums.SECURITY_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SECURITY_FINDING_CLASS_UID(0)
}

func (x *SecurityFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *SecurityFinding) GetSeverityId() enums.SECURITY_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SECURITY_FINDING_SEVERITY_ID(0)
}

func (x *SecurityFinding) GetCompliance() *objects.Compliance {
	if x != nil {
		return x.Compliance
	}
	return nil
}

func (x *SecurityFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SecurityFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *SecurityFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SecurityFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SecurityFinding) GetCategoryUid() enums.SECURITY_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SECURITY_FINDING_CATEGORY_UID(0)
}

func (x *SecurityFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SecurityFinding) GetVulnerabilities() []*objects.Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *SecurityFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *SecurityFinding) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *SecurityFinding) GetConfidenceId() enums.SECURITY_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.SECURITY_FINDING_CONFIDENCE_ID(0)
}

func (x *SecurityFinding) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *SecurityFinding) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SecurityFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *SecurityFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SecurityFinding) GetTypeUid() enums.SECURITY_FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SECURITY_FINDING_TYPE_UID(0)
}

func (x *SecurityFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SecurityFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SecurityFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SecurityFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *SecurityFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Event: findings
// Event UID: 5
// URL: https://schema.ocsf.io/1.1.0/classes/incident_finding
type IncidentFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityId        enums.INCIDENT_FINDING_SEVERITY_ID   `protobuf:"varint,1,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`          // Caption: Severity ID;
	CategoryUid       enums.INCIDENT_FINDING_CATEGORY_UID  `protobuf:"varint,2,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`      // Caption: Category ID;
	Time              int64                                `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                            // Caption: Event Time;
	TypeName          string                               `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	Attacks           []*objects.Attack                    `protobuf:"bytes,5,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                       // Caption: MITRE ATT&CK® Details;
	Comment           string                               `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                                       // Caption: Comment;
	StatusDetail      string                               `protobuf:"bytes,7,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                         // Caption: Status Details;
	StartTime         int64                                `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // Caption: Start Time;
	Severity          string                               `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                     // Caption: Severity;
	Duration          int32                                `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	IsSuspectedBreach bool                                 `protobuf:"varint,11,opt,name=is_suspected_breach,json=isSuspectedBreach,proto3" json:"is_suspected_breach,omitempty"`                                                      // Caption: Suspected Breach;
	PriorityId        enums.INCIDENT_FINDING_PRIORITY_ID   `protobuf:"varint,12,opt,name=priority_id,json=priorityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_PRIORITY_ID" json:"priority_id,omitempty"`         // Caption: Priority ID;
	Status            string                               `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	EndTime           int64                                `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	FindingInfoList   []*objects.FindingInfo               `protobuf:"bytes,15,rep,name=finding_info_list,json=findingInfoList,proto3" json:"finding_info_list,omitempty"`                                                             // Caption: Finding Information List;
	ConfidenceId      enums.INCIDENT_FINDING_CONFIDENCE_ID `protobuf:"varint,16,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	Observables       []*objects.Observable                `protobuf:"bytes,17,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	ConfidenceScore   int32                                `protobuf:"varint,18,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                              // Caption: Confidence Score;
	ActivityId        enums.INCIDENT_FINDING_ACTIVITY_ID   `protobuf:"varint,19,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`         // Caption: Activity ID;
	Enrichments       []*objects.Enrichment                `protobuf:"bytes,20,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	CategoryName      string                               `protobuf:"bytes,21,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	ClassName         string                               `protobuf:"bytes,22,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Confidence        string                               `protobuf:"bytes,23,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                // Caption: Confidence;
	Priority          int32                                `protobuf:"varint,24,opt,name=priority,proto3" json:"priority,omitempty"`                                                                                                   // Caption: Priority;
	SrcUrl            string                               `protobuf:"bytes,25,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                                                                                          // Caption: Source URL;
	Assignee          *objects.User                        `protobuf:"bytes,26,opt,name=assignee,proto3" json:"assignee,omitempty"`                                                                                                    // Caption: Assignee;
	AssigneeGroup     *objects.Group                       `protobuf:"bytes,27,opt,name=assignee_group,json=assigneeGroup,proto3" json:"assignee_group,omitempty"`                                                                     // Caption: Assignee Group;
	VerdictId         enums.INCIDENT_FINDING_VERDICT_ID    `protobuf:"varint,28,opt,name=verdict_id,json=verdictId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_VERDICT_ID" json:"verdict_id,omitempty"`             // Caption: Verdict ID;
	StatusCode        string                               `protobuf:"bytes,29,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	StatusId          enums.INCIDENT_FINDING_STATUS_ID     `protobuf:"varint,30,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_STATUS_ID" json:"status_id,omitempty"`                 // Caption: Status ID;
	ActivityName      string                               `protobuf:"bytes,31,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	ImpactScore       int32                                `protobuf:"varint,32,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`                                                                          // Caption: Impact;
	RawData           string                               `protobuf:"bytes,33,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	Message           string                               `protobuf:"bytes,34,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	Unmapped          *objects.Object                      `protobuf:"bytes,35,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	Api               *objects.Api                         `protobuf:"bytes,36,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	TimezoneOffset    int32                                `protobuf:"varint,37,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	Verdict           string                               `protobuf:"bytes,38,opt,name=verdict,proto3" json:"verdict,omitempty"`                                                                                                      // Caption: Verdict;
	Impact            string                               `protobuf:"bytes,39,opt,name=impact,proto3" json:"impact,omitempty"`                                                                                                        // Caption: Impact;
	TypeUid           enums.INCIDENT_FINDING_TYPE_UID      `protobuf:"varint,40,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_TYPE_UID" json:"type_uid,omitempty"`                     // Caption: Type ID;
	Count             int32                                `protobuf:"varint,41,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	Metadata          *objects.Metadata                    `protobuf:"bytes,42,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	Cloud             *objects.Cloud                       `protobuf:"bytes,43,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Profile: cloud; Caption: Cloud;
	Desc              string                               `protobuf:"bytes,44,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                                            // Caption: Description;
	ImpactId          enums.INCIDENT_FINDING_IMPACT_ID     `protobuf:"varint,45,opt,name=impact_id,json=impactId,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_IMPACT_ID" json:"impact_id,omitempty"`                 // Caption: Impact ID;
	ClassUid          enums.INCIDENT_FINDING_CLASS_UID     `protobuf:"varint,46,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CLASS_UID" json:"class_uid,omitempty"`                 // Caption: Class ID;
}

func (x *IncidentFinding) Reset() {
	*x = IncidentFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentFinding) ProtoMessage() {}

func (x *IncidentFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentFinding.ProtoReflect.Descriptor instead.
func (*IncidentFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{3}
}

func (x *IncidentFinding) GetSeverityId() enums.INCIDENT_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.INCIDENT_FINDING_SEVERITY_ID(0)
}

func (x *IncidentFinding) GetCategoryUid() enums.INCIDENT_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.INCIDENT_FINDING_CATEGORY_UID(0)
}

func (x *IncidentFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IncidentFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *IncidentFinding) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *IncidentFinding) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *IncidentFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *IncidentFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IncidentFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *IncidentFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *IncidentFinding) GetIsSuspectedBreach() bool {
	if x != nil {
		return x.IsSuspectedBreach
	}
	return false
}

func (x *IncidentFinding) GetPriorityId() enums.INCIDENT_FINDING_PRIORITY_ID {
	if x != nil {
		return x.PriorityId
	}
	return enums.INCIDENT_FINDING_PRIORITY_ID(0)
}

func (x *IncidentFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IncidentFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IncidentFinding) GetFindingInfoList() []*objects.FindingInfo {
	if x != nil {
		return x.FindingInfoList
	}
	return nil
}

func (x *IncidentFinding) GetConfidenceId() enums.INCIDENT_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.INCIDENT_FINDING_CONFIDENCE_ID(0)
}

func (x *IncidentFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *IncidentFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *IncidentFinding) GetActivityId() enums.INCIDENT_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.INCIDENT_FINDING_ACTIVITY_ID(0)
}

func (x *IncidentFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *IncidentFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *IncidentFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *IncidentFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *IncidentFinding) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *IncidentFinding) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *IncidentFinding) GetAssignee() *objects.User {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *IncidentFinding) GetAssigneeGroup() *objects.Group {
	if x != nil {
		return x.AssigneeGroup
	}
	return nil
}

func (x *IncidentFinding) GetVerdictId() enums.INCIDENT_FINDING_VERDICT_ID {
	if x != nil {
		return x.VerdictId
	}
	return enums.INCIDENT_FINDING_VERDICT_ID(0)
}

func (x *IncidentFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *IncidentFinding) GetStatusId() enums.INCIDENT_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.INCIDENT_FINDING_STATUS_ID(0)
}

func (x *IncidentFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *IncidentFinding) GetImpactScore() int32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *IncidentFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *IncidentFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IncidentFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *IncidentFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *IncidentFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *IncidentFinding) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *IncidentFinding) GetImpact() string {
	if x != nil {
		return x.Impact
	}
	return ""
}

func (x *IncidentFinding) GetTypeUid() enums.INCIDENT_FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.INCIDENT_FINDING_TYPE_UID(0)
}

func (x *IncidentFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *IncidentFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IncidentFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *IncidentFinding) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *IncidentFinding) GetImpactId() enums.INCIDENT_FINDING_IMPACT_ID {
	if x != nil {
		return x.ImpactId
	}
	return enums.INCIDENT_FINDING_IMPACT_ID(0)
}

func (x *IncidentFinding) GetClassUid() enums.INCIDENT_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.INCIDENT_FINDING_CLASS_UID(0)
}

// URL: https://schema.ocsf.io/1.1.0/classes/detection_finding
// Event: findings
// Event UID: 4
type DetectionFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *objects.Metadata                      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                          // Caption: Metadata;
	ClassName       string                                 `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                       // Caption: Class;
	Actor           *objects.Actor                         `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                // Caption: Actor; Profile: host;
	ImpactScore     int32                                  `protobuf:"varint,4,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`                                                                                // Caption: Impact;
	Duration        int32                                  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                         // Caption: Duration;
	Count           int32                                  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                                                                                               // Caption: Count;
	StartTime       int64                                  `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                      // Caption: Start Time;
	TypeUid         enums.DETECTION_FINDING_TYPE_UID       `protobuf:"varint,8,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_TYPE_UID" json:"type_uid,omitempty"`                          // Caption: Type ID;
	ImpactId        enums.DETECTION_FINDING_IMPACT_ID      `protobuf:"varint,9,opt,name=impact_id,json=impactId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_IMPACT_ID" json:"impact_id,omitempty"`                      // Caption: Impact ID;
	Malware         []*objects.Malware                     `protobuf:"bytes,10,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                           // Caption: Malware; Profile: security_control;
	TypeName        string                                 `protobuf:"bytes,11,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	RiskLevel       string                                 `protobuf:"bytes,12,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                                                      // Caption: Risk Level;
	Message         string                                 `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`                                                                                                           // Caption: Message;
	ConfidenceId    enums.DETECTION_FINDING_CONFIDENCE_ID  `protobuf:"varint,14,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"`     // Caption: Confidence Id;
	ActivityId      enums.DETECTION_FINDING_ACTIVITY_ID    `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	Time            int64                                  `protobuf:"varint,16,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                // Caption: Event Time;
	RiskLevelId     enums.DETECTION_FINDING_RISK_LEVEL_ID  `protobuf:"varint,17,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_RISK_LEVEL_ID" json:"risk_level_id,omitempty"`      // Caption: Risk Level ID;
	RiskScore       int32                                  `protobuf:"varint,18,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                                                     // Caption: Risk Score;
	Disposition     string                                 `protobuf:"bytes,19,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                   // Caption: Disposition; Profile: security_control;
	Action          string                                 `protobuf:"bytes,20,opt,name=action,proto3" json:"action,omitempty"`                                                                                                             // Profile: security_control; Caption: Action;
	Impact          string                                 `protobuf:"bytes,21,opt,name=impact,proto3" json:"impact,omitempty"`                                                                                                             // Caption: Impact;
	Cloud           *objects.Cloud                         `protobuf:"bytes,22,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                               // Profile: cloud; Caption: Cloud;
	Resources       []*objects.ResourceDetails             `protobuf:"bytes,23,rep,name=resources,proto3" json:"resources,omitempty"`                                                                                                       // Caption: Resources Array;
	FindingInfo     *objects.FindingInfo                   `protobuf:"bytes,24,opt,name=finding_info,json=findingInfo,proto3" json:"finding_info,omitempty"`                                                                                // Caption: Finding Information;
	Confidence      string                                 `protobuf:"bytes,25,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                     // Caption: Confidence;
	Comment         string                                 `protobuf:"bytes,26,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                                           // Caption: Comment;
	ConfidenceScore int32                                  `protobuf:"varint,27,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                                   // Caption: Confidence Score;
	DispositionId   enums.DETECTION_FINDING_DISPOSITION_ID `protobuf:"varint,28,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Vulnerabilities []*objects.Vulnerability               `protobuf:"bytes,29,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                                                                                           // Caption: Vulnerabilities;
	Attacks         []*objects.Attack                      `protobuf:"bytes,30,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                           // Caption: MITRE ATT&CK® Details; Profile: security_control;
	Authorizations  []*objects.Authorization               `protobuf:"bytes,31,rep,name=authorizations,proto3" json:"authorizations,omitempty"`                                                                                             // Caption: Authorization Information; Profile: security_control;
	CategoryName    string                                 `protobuf:"bytes,32,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                             // Caption: Category;
	StatusDetail    string                                 `protobuf:"bytes,33,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	Api             *objects.Api                           `protobuf:"bytes,34,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                   // Caption: API Details; Profile: cloud;
	Evidences       []*objects.Evidences                   `protobuf:"bytes,35,rep,name=evidences,proto3" json:"evidences,omitempty"`                                                                                                       // Caption: Evidence Artifacts;
	RawData         string                                 `protobuf:"bytes,36,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
	Unmapped        *objects.Object                        `protobuf:"bytes,37,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	FirewallRule    *objects.FirewallRule                  `protobuf:"bytes,38,opt,name=firewall_rule,json=firewallRule,proto3" json:"firewall_rule,omitempty"`                                                                             // Caption: Firewall Rule; Profile: security_control;
	CategoryUid     enums.DETECTION_FINDING_CATEGORY_UID   `protobuf:"varint,39,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Enrichments     []*objects.Enrichment                  `protobuf:"bytes,40,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                   // Caption: Enrichments;
	StatusId        enums.DETECTION_FINDING_STATUS_ID      `protobuf:"varint,41,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Severity        string                                 `protobuf:"bytes,42,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                         // Caption: Severity;
	StatusCode      string                                 `protobuf:"bytes,43,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	Observables     []*objects.Observable                  `protobuf:"bytes,44,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                   // Caption: Observables;
	Remediation     *objects.Remediation                   `protobuf:"bytes,45,opt,name=remediation,proto3" json:"remediation,omitempty"`                                                                                                   // Caption: Remediation Guidance;
	Device          *objects.Device                        `protobuf:"bytes,46,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	TimezoneOffset  int32                                  `protobuf:"varint,47,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                      // Caption: Timezone Offset;
	Status          string                                 `protobuf:"bytes,48,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // Caption: Status;
	ActionId        enums.DETECTION_FINDING_ACTION_ID      `protobuf:"varint,49,opt,name=action_id,json=actionId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTION_ID" json:"action_id,omitempty"`                     // Caption: Action ID; Profile: security_control;
	ActivityName    string                                 `protobuf:"bytes,50,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                             // Caption: Activity;
	ClassUid        enums.DETECTION_FINDING_CLASS_UID      `protobuf:"varint,51,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	SeverityId      enums.DETECTION_FINDING_SEVERITY_ID    `protobuf:"varint,52,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	EndTime         int64                                  `protobuf:"varint,53,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                           // Caption: End Time;
}

func (x *DetectionFinding) Reset() {
	*x = DetectionFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionFinding) ProtoMessage() {}

func (x *DetectionFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionFinding.ProtoReflect.Descriptor instead.
func (*DetectionFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{4}
}

func (x *DetectionFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DetectionFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DetectionFinding) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DetectionFinding) GetImpactScore() int32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *DetectionFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DetectionFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DetectionFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DetectionFinding) GetTypeUid() enums.DETECTION_FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DETECTION_FINDING_TYPE_UID(0)
}

func (x *DetectionFinding) GetImpactId() enums.DETECTION_FINDING_IMPACT_ID {
	if x != nil {
		return x.ImpactId
	}
	return enums.DETECTION_FINDING_IMPACT_ID(0)
}

func (x *DetectionFinding) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *DetectionFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DetectionFinding) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *DetectionFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DetectionFinding) GetConfidenceId() enums.DETECTION_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.DETECTION_FINDING_CONFIDENCE_ID(0)
}

func (x *DetectionFinding) GetActivityId() enums.DETECTION_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DETECTION_FINDING_ACTIVITY_ID(0)
}

func (x *DetectionFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DetectionFinding) GetRiskLevelId() enums.DETECTION_FINDING_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.DETECTION_FINDING_RISK_LEVEL_ID(0)
}

func (x *DetectionFinding) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *DetectionFinding) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *DetectionFinding) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DetectionFinding) GetImpact() string {
	if x != nil {
		return x.Impact
	}
	return ""
}

func (x *DetectionFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DetectionFinding) GetResources() []*objects.ResourceDetails {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *DetectionFinding) GetFindingInfo() *objects.FindingInfo {
	if x != nil {
		return x.FindingInfo
	}
	return nil
}

func (x *DetectionFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *DetectionFinding) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DetectionFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *DetectionFinding) GetDispositionId() enums.DETECTION_FINDING_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.DETECTION_FINDING_DISPOSITION_ID(0)
}

func (x *DetectionFinding) GetVulnerabilities() []*objects.Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *DetectionFinding) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *DetectionFinding) GetAuthorizations() []*objects.Authorization {
	if x != nil {
		return x.Authorizations
	}
	return nil
}

func (x *DetectionFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DetectionFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DetectionFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DetectionFinding) GetEvidences() []*objects.Evidences {
	if x != nil {
		return x.Evidences
	}
	return nil
}

func (x *DetectionFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DetectionFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DetectionFinding) GetFirewallRule() *objects.FirewallRule {
	if x != nil {
		return x.FirewallRule
	}
	return nil
}

func (x *DetectionFinding) GetCategoryUid() enums.DETECTION_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DETECTION_FINDING_CATEGORY_UID(0)
}

func (x *DetectionFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DetectionFinding) GetStatusId() enums.DETECTION_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DETECTION_FINDING_STATUS_ID(0)
}

func (x *DetectionFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DetectionFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DetectionFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DetectionFinding) GetRemediation() *objects.Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *DetectionFinding) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DetectionFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DetectionFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DetectionFinding) GetActionId() enums.DETECTION_FINDING_ACTION_ID {
	if x != nil {
		return x.ActionId
	}
	return enums.DETECTION_FINDING_ACTION_ID(0)
}

func (x *DetectionFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DetectionFinding) GetClassUid() enums.DETECTION_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DETECTION_FINDING_CLASS_UID(0)
}

func (x *DetectionFinding) GetSeverityId() enums.DETECTION_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DETECTION_FINDING_SEVERITY_ID(0)
}

func (x *DetectionFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// Event: findings
// Event UID: 0
// URL: https://schema.ocsf.io/1.1.0/classes/finding
type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api             *objects.Api                `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Caption: API Details; Profile: cloud;
	Time            int64                       `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	SeverityId      enums.FINDING_SEVERITY_ID   `protobuf:"varint,3,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_SEVERITY_ID" json:"severity_id,omitempty"`          // Caption: Severity ID;
	TypeUid         enums.FINDING_TYPE_UID      `protobuf:"varint,4,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_TYPE_UID" json:"type_uid,omitempty"`                      // Caption: Type ID;
	Status          string                      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	RawData         string                      `protobuf:"bytes,6,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	Message         string                      `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	Enrichments     []*objects.Enrichment       `protobuf:"bytes,8,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                      // Caption: Enrichments;
	Metadata        *objects.Metadata           `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	ClassName       string                      `protobuf:"bytes,10,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                        // Caption: Class;
	ConfidenceScore int32                       `protobuf:"varint,11,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                     // Caption: Confidence Score;
	EndTime         int64                       `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                             // Caption: End Time;
	ConfidenceId    enums.FINDING_CONFIDENCE_ID `protobuf:"varint,13,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	CategoryUid     enums.FINDING_CATEGORY_UID  `protobuf:"varint,14,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_CATEGORY_UID" json:"category_uid,omitempty"`     // Caption: Category ID;
	ActivityName    string                      `protobuf:"bytes,15,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                               // Caption: Activity;
	StatusId        enums.FINDING_STATUS_ID     `protobuf:"varint,16,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_STATUS_ID" json:"status_id,omitempty"`                 // Caption: Status ID;
	ClassUid        enums.FINDING_CLASS_UID     `protobuf:"varint,17,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_CLASS_UID" json:"class_uid,omitempty"`                 // Caption: Class ID;
	TimezoneOffset  int32                       `protobuf:"varint,18,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                        // Caption: Timezone Offset;
	Actor           *objects.Actor              `protobuf:"bytes,19,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                 // Caption: Actor; Profile: host;
	Device          *objects.Device             `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`                                                                                               // Caption: Device; Profile: host;
	CategoryName    string                      `protobuf:"bytes,21,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                               // Caption: Category;
	Cloud           *objects.Cloud              `protobuf:"bytes,22,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                 // Caption: Cloud; Profile: cloud;
	Severity        string                      `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                           // Caption: Severity;
	ActivityId      enums.FINDING_ACTIVITY_ID   `protobuf:"varint,24,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.findings.enums.FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`         // Caption: Activity ID;
	FindingInfo     *objects.FindingInfo        `protobuf:"bytes,25,opt,name=finding_info,json=findingInfo,proto3" json:"finding_info,omitempty"`                                                                  // Caption: Finding Information;
	Duration        int32                       `protobuf:"varint,26,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                          // Caption: Duration;
	Count           int32                       `protobuf:"varint,27,opt,name=count,proto3" json:"count,omitempty"`                                                                                                // Caption: Count;
	TypeName        string                      `protobuf:"bytes,28,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                           // Caption: Type Name;
	StatusCode      string                      `protobuf:"bytes,29,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                     // Caption: Status Code;
	Observables     []*objects.Observable       `protobuf:"bytes,30,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                     // Caption: Observables;
	StatusDetail    string                      `protobuf:"bytes,31,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                               // Caption: Status Details;
	StartTime       int64                       `protobuf:"varint,32,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                       // Caption: Start Time;
	Confidence      string                      `protobuf:"bytes,33,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                       // Caption: Confidence;
	Comment         string                      `protobuf:"bytes,34,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                             // Caption: Comment;
	Unmapped        *objects.Object             `protobuf:"bytes,35,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                           // Caption: Unmapped Data;
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP(), []int{5}
}

func (x *Finding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Finding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Finding) GetSeverityId() enums.FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FINDING_SEVERITY_ID(0)
}

func (x *Finding) GetTypeUid() enums.FINDING_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.FINDING_TYPE_UID(0)
}

func (x *Finding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Finding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Finding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Finding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Finding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Finding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Finding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *Finding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Finding) GetConfidenceId() enums.FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.FINDING_CONFIDENCE_ID(0)
}

func (x *Finding) GetCategoryUid() enums.FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FINDING_CATEGORY_UID(0)
}

func (x *Finding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Finding) GetStatusId() enums.FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FINDING_STATUS_ID(0)
}

func (x *Finding) GetClassUid() enums.FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FINDING_CLASS_UID(0)
}

func (x *Finding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Finding) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Finding) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Finding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Finding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Finding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Finding) GetActivityId() enums.FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FINDING_ACTIVITY_ID(0)
}

func (x *Finding) GetFindingInfo() *objects.FindingInfo {
	if x != nil {
		return x.FindingInfo
	}
	return nil
}

func (x *Finding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Finding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Finding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Finding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Finding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Finding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Finding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Finding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *Finding) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Finding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

var File_ocsf_v1_1_0_events_findings_findings_proto protoreflect.FileDescriptor

var file_ocsf_v1_1_0_events_findings_findings_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x0f, 0x0a, 0x14,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x65,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x5f,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x65, 0x0a,
	0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xd1, 0x0f, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x62, 0x0a, 0x0b, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x22, 0xa1, 0x15, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x69, 0x73, 0x5f,
	0x63, 0x73, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x69, 0x73, 0x43, 0x73, 0x63, 0x52, 0x06, 0x63, 0x69, 0x73, 0x43, 0x73, 0x63, 0x12, 0x42,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x5a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x12, 0x0a, 0x0f, 0x49, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44,
	0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x09, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x5a, 0x0a, 0x09, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x22, 0xda, 0x16, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x5b, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a,
	0x0d, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x09, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55,
	0x69, 0x64, 0x12, 0x61, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb3, 0x0d, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x57,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0xfc, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68,
	0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xa2,
	0x02, 0x04, 0x4f, 0x56, 0x45, 0x46, 0xaa, 0x02, 0x19, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31,
	0x31, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0xca, 0x02, 0x19, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x31, 0x30, 0x5c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xe2, 0x02,
	0x25, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x31, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56,
	0x31, 0x31, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_1_0_events_findings_findings_proto_rawDescOnce sync.Once
	file_ocsf_v1_1_0_events_findings_findings_proto_rawDescData = file_ocsf_v1_1_0_events_findings_findings_proto_rawDesc
)

func file_ocsf_v1_1_0_events_findings_findings_proto_rawDescGZIP() []byte {
	file_ocsf_v1_1_0_events_findings_findings_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_1_0_events_findings_findings_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_1_0_events_findings_findings_proto_rawDescData)
	})
	return file_ocsf_v1_1_0_events_findings_findings_proto_rawDescData
}

var file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ocsf_v1_1_0_events_findings_findings_proto_goTypes = []interface{}{
	(*VulnerabilityFinding)(nil),                   // 0: ocsf.v1_1_0.events.findings.VulnerabilityFinding
	(*ComplianceFinding)(nil),                      // 1: ocsf.v1_1_0.events.findings.ComplianceFinding
	(*SecurityFinding)(nil),                        // 2: ocsf.v1_1_0.events.findings.SecurityFinding
	(*IncidentFinding)(nil),                        // 3: ocsf.v1_1_0.events.findings.IncidentFinding
	(*DetectionFinding)(nil),                       // 4: ocsf.v1_1_0.events.findings.DetectionFinding
	(*Finding)(nil),                                // 5: ocsf.v1_1_0.events.findings.Finding
	(enums.VULNERABILITY_FINDING_CONFIDENCE_ID)(0), // 6: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CONFIDENCE_ID
	(enums.VULNERABILITY_FINDING_STATUS_ID)(0),     // 7: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_STATUS_ID
	(*objects.Actor)(nil),                          // 8: ocsf.v1_1_0.objects.Actor
	(*objects.Device)(nil),                         // 9: ocsf.v1_1_0.objects.Device
	(*objects.FindingInfo)(nil),                    // 10: ocsf.v1_1_0.objects.FindingInfo
	(*objects.Observable)(nil),                     // 11: ocsf.v1_1_0.objects.Observable
	(enums.VULNERABILITY_FINDING_CATEGORY_UID)(0),  // 12: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CATEGORY_UID
	(*objects.ResourceDetails)(nil),                // 13: ocsf.v1_1_0.objects.ResourceDetails
	(*objects.Vulnerability)(nil),                  // 14: ocsf.v1_1_0.objects.Vulnerability
	(enums.VULNERABILITY_FINDING_ACTIVITY_ID)(0),   // 15: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_ACTIVITY_ID
	(*objects.Object)(nil),                         // 16: ocsf.v1_1_0.objects.Object
	(enums.VULNERABILITY_FINDING_TYPE_UID)(0),      // 17: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_TYPE_UID
	(enums.VULNERABILITY_FINDING_CLASS_UID)(0),     // 18: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CLASS_UID
	(*objects.Enrichment)(nil),                     // 19: ocsf.v1_1_0.objects.Enrichment
	(enums.VULNERABILITY_FINDING_SEVERITY_ID)(0),   // 20: ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_SEVERITY_ID
	(*objects.Metadata)(nil),                       // 21: ocsf.v1_1_0.objects.Metadata
	(*objects.Cloud)(nil),                          // 22: ocsf.v1_1_0.objects.Cloud
	(*objects.Api)(nil),                            // 23: ocsf.v1_1_0.objects.Api
	(enums.COMPLIANCE_FINDING_CLASS_UID)(0),        // 24: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CLASS_UID
	(enums.COMPLIANCE_FINDING_CONFIDENCE_ID)(0),    // 25: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CONFIDENCE_ID
	(*objects.Remediation)(nil),                    // 26: ocsf.v1_1_0.objects.Remediation
	(enums.COMPLIANCE_FINDING_TYPE_UID)(0),         // 27: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_TYPE_UID
	(enums.COMPLIANCE_FINDING_ACTIVITY_ID)(0),      // 28: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_ACTIVITY_ID
	(enums.COMPLIANCE_FINDING_STATUS_ID)(0),        // 29: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_STATUS_ID
	(enums.COMPLIANCE_FINDING_SEVERITY_ID)(0),      // 30: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_SEVERITY_ID
	(*objects.Compliance)(nil),                     // 31: ocsf.v1_1_0.objects.Compliance
	(enums.COMPLIANCE_FINDING_CATEGORY_UID)(0),     // 32: ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CATEGORY_UID
	(*objects.CisCsc)(nil),                         // 33: ocsf.v1_1_0.objects.CisCsc
	(*objects.KillChainPhase)(nil),                 // 34: ocsf.v1_1_0.objects.KillChainPhase
	(*objects.Analytic)(nil),                       // 35: ocsf.v1_1_0.objects.Analytic
	(enums.SECURITY_FINDING_STATE_ID)(0),           // 36: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	(enums.SECURITY_FINDING_RISK_LEVEL_ID)(0),      // 37: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	(enums.SECURITY_FINDING_ACTIVITY_ID)(0),        // 38: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	(enums.SECURITY_FINDING_IMPACT_ID)(0),          // 39: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	(enums.SECURITY_FINDING_STATUS_ID)(0),          // 40: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	(*objects.Attack)(nil),                         // 41: ocsf.v1_1_0.objects.Attack
	(*objects.Process)(nil),                        // 42: ocsf.v1_1_0.objects.Process
	(enums.SECURITY_FINDING_CLASS_UID)(0),          // 43: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	(enums.SECURITY_FINDING_SEVERITY_ID)(0),        // 44: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	(enums.SECURITY_FINDING_CATEGORY_UID)(0),       // 45: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	(*objects.Malware)(nil),                        // 46: ocsf.v1_1_0.objects.Malware
	(enums.SECURITY_FINDING_CONFIDENCE_ID)(0),      // 47: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	(enums.SECURITY_FINDING_TYPE_UID)(0),           // 48: ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_TYPE_UID
	(enums.INCIDENT_FINDING_SEVERITY_ID)(0),        // 49: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_SEVERITY_ID
	(enums.INCIDENT_FINDING_CATEGORY_UID)(0),       // 50: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CATEGORY_UID
	(enums.INCIDENT_FINDING_PRIORITY_ID)(0),        // 51: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_PRIORITY_ID
	(enums.INCIDENT_FINDING_CONFIDENCE_ID)(0),      // 52: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CONFIDENCE_ID
	(enums.INCIDENT_FINDING_ACTIVITY_ID)(0),        // 53: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_ACTIVITY_ID
	(*objects.User)(nil),                           // 54: ocsf.v1_1_0.objects.User
	(*objects.Group)(nil),                          // 55: ocsf.v1_1_0.objects.Group
	(enums.INCIDENT_FINDING_VERDICT_ID)(0),         // 56: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_VERDICT_ID
	(enums.INCIDENT_FINDING_STATUS_ID)(0),          // 57: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_STATUS_ID
	(enums.INCIDENT_FINDING_TYPE_UID)(0),           // 58: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_TYPE_UID
	(enums.INCIDENT_FINDING_IMPACT_ID)(0),          // 59: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_IMPACT_ID
	(enums.INCIDENT_FINDING_CLASS_UID)(0),          // 60: ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CLASS_UID
	(enums.DETECTION_FINDING_TYPE_UID)(0),          // 61: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_TYPE_UID
	(enums.DETECTION_FINDING_IMPACT_ID)(0),         // 62: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_IMPACT_ID
	(enums.DETECTION_FINDING_CONFIDENCE_ID)(0),     // 63: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CONFIDENCE_ID
	(enums.DETECTION_FINDING_ACTIVITY_ID)(0),       // 64: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTIVITY_ID
	(enums.DETECTION_FINDING_RISK_LEVEL_ID)(0),     // 65: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_RISK_LEVEL_ID
	(enums.DETECTION_FINDING_DISPOSITION_ID)(0),    // 66: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_DISPOSITION_ID
	(*objects.Authorization)(nil),                  // 67: ocsf.v1_1_0.objects.Authorization
	(*objects.Evidences)(nil),                      // 68: ocsf.v1_1_0.objects.Evidences
	(*objects.FirewallRule)(nil),                   // 69: ocsf.v1_1_0.objects.FirewallRule
	(enums.DETECTION_FINDING_CATEGORY_UID)(0),      // 70: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CATEGORY_UID
	(enums.DETECTION_FINDING_STATUS_ID)(0),         // 71: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_STATUS_ID
	(enums.DETECTION_FINDING_ACTION_ID)(0),         // 72: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTION_ID
	(enums.DETECTION_FINDING_CLASS_UID)(0),         // 73: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CLASS_UID
	(enums.DETECTION_FINDING_SEVERITY_ID)(0),       // 74: ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_SEVERITY_ID
	(enums.FINDING_SEVERITY_ID)(0),                 // 75: ocsf.v1_1_0.events.findings.enums.FINDING_SEVERITY_ID
	(enums.FINDING_TYPE_UID)(0),                    // 76: ocsf.v1_1_0.events.findings.enums.FINDING_TYPE_UID
	(enums.FINDING_CONFIDENCE_ID)(0),               // 77: ocsf.v1_1_0.events.findings.enums.FINDING_CONFIDENCE_ID
	(enums.FINDING_CATEGORY_UID)(0),                // 78: ocsf.v1_1_0.events.findings.enums.FINDING_CATEGORY_UID
	(enums.FINDING_STATUS_ID)(0),                   // 79: ocsf.v1_1_0.events.findings.enums.FINDING_STATUS_ID
	(enums.FINDING_CLASS_UID)(0),                   // 80: ocsf.v1_1_0.events.findings.enums.FINDING_CLASS_UID
	(enums.FINDING_ACTIVITY_ID)(0),                 // 81: ocsf.v1_1_0.events.findings.enums.FINDING_ACTIVITY_ID
}
var file_ocsf_v1_1_0_events_findings_findings_proto_depIdxs = []int32{
	6,   // 0: ocsf.v1_1_0.events.findings.VulnerabilityFinding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CONFIDENCE_ID
	7,   // 1: ocsf.v1_1_0.events.findings.VulnerabilityFinding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_STATUS_ID
	8,   // 2: ocsf.v1_1_0.events.findings.VulnerabilityFinding.actor:type_name -> ocsf.v1_1_0.objects.Actor
	9,   // 3: ocsf.v1_1_0.events.findings.VulnerabilityFinding.device:type_name -> ocsf.v1_1_0.objects.Device
	10,  // 4: ocsf.v1_1_0.events.findings.VulnerabilityFinding.finding_info:type_name -> ocsf.v1_1_0.objects.FindingInfo
	11,  // 5: ocsf.v1_1_0.events.findings.VulnerabilityFinding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	12,  // 6: ocsf.v1_1_0.events.findings.VulnerabilityFinding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CATEGORY_UID
	13,  // 7: ocsf.v1_1_0.events.findings.VulnerabilityFinding.resource:type_name -> ocsf.v1_1_0.objects.ResourceDetails
	14,  // 8: ocsf.v1_1_0.events.findings.VulnerabilityFinding.vulnerabilities:type_name -> ocsf.v1_1_0.objects.Vulnerability
	15,  // 9: ocsf.v1_1_0.events.findings.VulnerabilityFinding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_ACTIVITY_ID
	16,  // 10: ocsf.v1_1_0.events.findings.VulnerabilityFinding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	17,  // 11: ocsf.v1_1_0.events.findings.VulnerabilityFinding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_TYPE_UID
	18,  // 12: ocsf.v1_1_0.events.findings.VulnerabilityFinding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_CLASS_UID
	19,  // 13: ocsf.v1_1_0.events.findings.VulnerabilityFinding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	20,  // 14: ocsf.v1_1_0.events.findings.VulnerabilityFinding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.VULNERABILITY_FINDING_SEVERITY_ID
	21,  // 15: ocsf.v1_1_0.events.findings.VulnerabilityFinding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	22,  // 16: ocsf.v1_1_0.events.findings.VulnerabilityFinding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	23,  // 17: ocsf.v1_1_0.events.findings.VulnerabilityFinding.api:type_name -> ocsf.v1_1_0.objects.Api
	24,  // 18: ocsf.v1_1_0.events.findings.ComplianceFinding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CLASS_UID
	25,  // 19: ocsf.v1_1_0.events.findings.ComplianceFinding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CONFIDENCE_ID
	26,  // 20: ocsf.v1_1_0.events.findings.ComplianceFinding.remediation:type_name -> ocsf.v1_1_0.objects.Remediation
	27,  // 21: ocsf.v1_1_0.events.findings.ComplianceFinding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_TYPE_UID
	28,  // 22: ocsf.v1_1_0.events.findings.ComplianceFinding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_ACTIVITY_ID
	29,  // 23: ocsf.v1_1_0.events.findings.ComplianceFinding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_STATUS_ID
	16,  // 24: ocsf.v1_1_0.events.findings.ComplianceFinding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	21,  // 25: ocsf.v1_1_0.events.findings.ComplianceFinding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	13,  // 26: ocsf.v1_1_0.events.findings.ComplianceFinding.resource:type_name -> ocsf.v1_1_0.objects.ResourceDetails
	9,   // 27: ocsf.v1_1_0.events.findings.ComplianceFinding.device:type_name -> ocsf.v1_1_0.objects.Device
	8,   // 28: ocsf.v1_1_0.events.findings.ComplianceFinding.actor:type_name -> ocsf.v1_1_0.objects.Actor
	10,  // 29: ocsf.v1_1_0.events.findings.ComplianceFinding.finding_info:type_name -> ocsf.v1_1_0.objects.FindingInfo
	11,  // 30: ocsf.v1_1_0.events.findings.ComplianceFinding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	23,  // 31: ocsf.v1_1_0.events.findings.ComplianceFinding.api:type_name -> ocsf.v1_1_0.objects.Api
	30,  // 32: ocsf.v1_1_0.events.findings.ComplianceFinding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_SEVERITY_ID
	19,  // 33: ocsf.v1_1_0.events.findings.ComplianceFinding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	31,  // 34: ocsf.v1_1_0.events.findings.ComplianceFinding.compliance:type_name -> ocsf.v1_1_0.objects.Compliance
	32,  // 35: ocsf.v1_1_0.events.findings.ComplianceFinding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.COMPLIANCE_FINDING_CATEGORY_UID
	22,  // 36: ocsf.v1_1_0.events.findings.ComplianceFinding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	33,  // 37: ocsf.v1_1_0.events.findings.SecurityFinding.cis_csc:type_name -> ocsf.v1_1_0.objects.CisCsc
	13,  // 38: ocsf.v1_1_0.events.findings.SecurityFinding.resources:type_name -> ocsf.v1_1_0.objects.ResourceDetails
	34,  // 39: ocsf.v1_1_0.events.findings.SecurityFinding.kill_chain:type_name -> ocsf.v1_1_0.objects.KillChainPhase
	35,  // 40: ocsf.v1_1_0.events.findings.SecurityFinding.analytic:type_name -> ocsf.v1_1_0.objects.Analytic
	36,  // 41: ocsf.v1_1_0.events.findings.SecurityFinding.state_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	16,  // 42: ocsf.v1_1_0.events.findings.SecurityFinding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	19,  // 43: ocsf.v1_1_0.events.findings.SecurityFinding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	37,  // 44: ocsf.v1_1_0.events.findings.SecurityFinding.risk_level_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	38,  // 45: ocsf.v1_1_0.events.findings.SecurityFinding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	5,   // 46: ocsf.v1_1_0.events.findings.SecurityFinding.finding:type_name -> ocsf.v1_1_0.events.findings.Finding
	39,  // 47: ocsf.v1_1_0.events.findings.SecurityFinding.impact_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	11,  // 48: ocsf.v1_1_0.events.findings.SecurityFinding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	40,  // 49: ocsf.v1_1_0.events.findings.SecurityFinding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	41,  // 50: ocsf.v1_1_0.events.findings.SecurityFinding.attacks:type_name -> ocsf.v1_1_0.objects.Attack
	42,  // 51: ocsf.v1_1_0.events.findings.SecurityFinding.process:type_name -> ocsf.v1_1_0.objects.Process
	23,  // 52: ocsf.v1_1_0.events.findings.SecurityFinding.api:type_name -> ocsf.v1_1_0.objects.Api
	43,  // 53: ocsf.v1_1_0.events.findings.SecurityFinding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	44,  // 54: ocsf.v1_1_0.events.findings.SecurityFinding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	31,  // 55: ocsf.v1_1_0.events.findings.SecurityFinding.compliance:type_name -> ocsf.v1_1_0.objects.Compliance
	22,  // 56: ocsf.v1_1_0.events.findings.SecurityFinding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	45,  // 57: ocsf.v1_1_0.events.findings.SecurityFinding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	14,  // 58: ocsf.v1_1_0.events.findings.SecurityFinding.vulnerabilities:type_name -> ocsf.v1_1_0.objects.Vulnerability
	46,  // 59: ocsf.v1_1_0.events.findings.SecurityFinding.malware:type_name -> ocsf.v1_1_0.objects.Malware
	47,  // 60: ocsf.v1_1_0.events.findings.SecurityFinding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	48,  // 61: ocsf.v1_1_0.events.findings.SecurityFinding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.SECURITY_FINDING_TYPE_UID
	21,  // 62: ocsf.v1_1_0.events.findings.SecurityFinding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	49,  // 63: ocsf.v1_1_0.events.findings.IncidentFinding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_SEVERITY_ID
	50,  // 64: ocsf.v1_1_0.events.findings.IncidentFinding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CATEGORY_UID
	41,  // 65: ocsf.v1_1_0.events.findings.IncidentFinding.attacks:type_name -> ocsf.v1_1_0.objects.Attack
	51,  // 66: ocsf.v1_1_0.events.findings.IncidentFinding.priority_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_PRIORITY_ID
	10,  // 67: ocsf.v1_1_0.events.findings.IncidentFinding.finding_info_list:type_name -> ocsf.v1_1_0.objects.FindingInfo
	52,  // 68: ocsf.v1_1_0.events.findings.IncidentFinding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CONFIDENCE_ID
	11,  // 69: ocsf.v1_1_0.events.findings.IncidentFinding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	53,  // 70: ocsf.v1_1_0.events.findings.IncidentFinding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_ACTIVITY_ID
	19,  // 71: ocsf.v1_1_0.events.findings.IncidentFinding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	54,  // 72: ocsf.v1_1_0.events.findings.IncidentFinding.assignee:type_name -> ocsf.v1_1_0.objects.User
	55,  // 73: ocsf.v1_1_0.events.findings.IncidentFinding.assignee_group:type_name -> ocsf.v1_1_0.objects.Group
	56,  // 74: ocsf.v1_1_0.events.findings.IncidentFinding.verdict_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_VERDICT_ID
	57,  // 75: ocsf.v1_1_0.events.findings.IncidentFinding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_STATUS_ID
	16,  // 76: ocsf.v1_1_0.events.findings.IncidentFinding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	23,  // 77: ocsf.v1_1_0.events.findings.IncidentFinding.api:type_name -> ocsf.v1_1_0.objects.Api
	58,  // 78: ocsf.v1_1_0.events.findings.IncidentFinding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_TYPE_UID
	21,  // 79: ocsf.v1_1_0.events.findings.IncidentFinding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	22,  // 80: ocsf.v1_1_0.events.findings.IncidentFinding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	59,  // 81: ocsf.v1_1_0.events.findings.IncidentFinding.impact_id:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_IMPACT_ID
	60,  // 82: ocsf.v1_1_0.events.findings.IncidentFinding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.INCIDENT_FINDING_CLASS_UID
	21,  // 83: ocsf.v1_1_0.events.findings.DetectionFinding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	8,   // 84: ocsf.v1_1_0.events.findings.DetectionFinding.actor:type_name -> ocsf.v1_1_0.objects.Actor
	61,  // 85: ocsf.v1_1_0.events.findings.DetectionFinding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_TYPE_UID
	62,  // 86: ocsf.v1_1_0.events.findings.DetectionFinding.impact_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_IMPACT_ID
	46,  // 87: ocsf.v1_1_0.events.findings.DetectionFinding.malware:type_name -> ocsf.v1_1_0.objects.Malware
	63,  // 88: ocsf.v1_1_0.events.findings.DetectionFinding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CONFIDENCE_ID
	64,  // 89: ocsf.v1_1_0.events.findings.DetectionFinding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTIVITY_ID
	65,  // 90: ocsf.v1_1_0.events.findings.DetectionFinding.risk_level_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_RISK_LEVEL_ID
	22,  // 91: ocsf.v1_1_0.events.findings.DetectionFinding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	13,  // 92: ocsf.v1_1_0.events.findings.DetectionFinding.resources:type_name -> ocsf.v1_1_0.objects.ResourceDetails
	10,  // 93: ocsf.v1_1_0.events.findings.DetectionFinding.finding_info:type_name -> ocsf.v1_1_0.objects.FindingInfo
	66,  // 94: ocsf.v1_1_0.events.findings.DetectionFinding.disposition_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_DISPOSITION_ID
	14,  // 95: ocsf.v1_1_0.events.findings.DetectionFinding.vulnerabilities:type_name -> ocsf.v1_1_0.objects.Vulnerability
	41,  // 96: ocsf.v1_1_0.events.findings.DetectionFinding.attacks:type_name -> ocsf.v1_1_0.objects.Attack
	67,  // 97: ocsf.v1_1_0.events.findings.DetectionFinding.authorizations:type_name -> ocsf.v1_1_0.objects.Authorization
	23,  // 98: ocsf.v1_1_0.events.findings.DetectionFinding.api:type_name -> ocsf.v1_1_0.objects.Api
	68,  // 99: ocsf.v1_1_0.events.findings.DetectionFinding.evidences:type_name -> ocsf.v1_1_0.objects.Evidences
	16,  // 100: ocsf.v1_1_0.events.findings.DetectionFinding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	69,  // 101: ocsf.v1_1_0.events.findings.DetectionFinding.firewall_rule:type_name -> ocsf.v1_1_0.objects.FirewallRule
	70,  // 102: ocsf.v1_1_0.events.findings.DetectionFinding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CATEGORY_UID
	19,  // 103: ocsf.v1_1_0.events.findings.DetectionFinding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	71,  // 104: ocsf.v1_1_0.events.findings.DetectionFinding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_STATUS_ID
	11,  // 105: ocsf.v1_1_0.events.findings.DetectionFinding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	26,  // 106: ocsf.v1_1_0.events.findings.DetectionFinding.remediation:type_name -> ocsf.v1_1_0.objects.Remediation
	9,   // 107: ocsf.v1_1_0.events.findings.DetectionFinding.device:type_name -> ocsf.v1_1_0.objects.Device
	72,  // 108: ocsf.v1_1_0.events.findings.DetectionFinding.action_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_ACTION_ID
	73,  // 109: ocsf.v1_1_0.events.findings.DetectionFinding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_CLASS_UID
	74,  // 110: ocsf.v1_1_0.events.findings.DetectionFinding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.DETECTION_FINDING_SEVERITY_ID
	23,  // 111: ocsf.v1_1_0.events.findings.Finding.api:type_name -> ocsf.v1_1_0.objects.Api
	75,  // 112: ocsf.v1_1_0.events.findings.Finding.severity_id:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_SEVERITY_ID
	76,  // 113: ocsf.v1_1_0.events.findings.Finding.type_uid:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_TYPE_UID
	19,  // 114: ocsf.v1_1_0.events.findings.Finding.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	21,  // 115: ocsf.v1_1_0.events.findings.Finding.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	77,  // 116: ocsf.v1_1_0.events.findings.Finding.confidence_id:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_CONFIDENCE_ID
	78,  // 117: ocsf.v1_1_0.events.findings.Finding.category_uid:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_CATEGORY_UID
	79,  // 118: ocsf.v1_1_0.events.findings.Finding.status_id:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_STATUS_ID
	80,  // 119: ocsf.v1_1_0.events.findings.Finding.class_uid:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_CLASS_UID
	8,   // 120: ocsf.v1_1_0.events.findings.Finding.actor:type_name -> ocsf.v1_1_0.objects.Actor
	9,   // 121: ocsf.v1_1_0.events.findings.Finding.device:type_name -> ocsf.v1_1_0.objects.Device
	22,  // 122: ocsf.v1_1_0.events.findings.Finding.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	81,  // 123: ocsf.v1_1_0.events.findings.Finding.activity_id:type_name -> ocsf.v1_1_0.events.findings.enums.FINDING_ACTIVITY_ID
	10,  // 124: ocsf.v1_1_0.events.findings.Finding.finding_info:type_name -> ocsf.v1_1_0.objects.FindingInfo
	11,  // 125: ocsf.v1_1_0.events.findings.Finding.observables:type_name -> ocsf.v1_1_0.objects.Observable
	16,  // 126: ocsf.v1_1_0.events.findings.Finding.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	127, // [127:127] is the sub-list for method output_type
	127, // [127:127] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_ocsf_v1_1_0_events_findings_findings_proto_init() }
func file_ocsf_v1_1_0_events_findings_findings_proto_init() {
	if File_ocsf_v1_1_0_events_findings_findings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncidentFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_1_0_events_findings_findings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_1_0_events_findings_findings_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_1_0_events_findings_findings_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_1_0_events_findings_findings_proto_msgTypes,
	}.Build()
	File_ocsf_v1_1_0_events_findings_findings_proto = out.File
	file_ocsf_v1_1_0_events_findings_findings_proto_rawDesc = nil
	file_ocsf_v1_1_0_events_findings_findings_proto_goTypes = nil
	file_ocsf_v1_1_0_events_findings_findings_proto_depIdxs = nil
}
