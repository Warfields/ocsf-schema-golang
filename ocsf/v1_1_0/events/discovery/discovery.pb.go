// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_1_0/events/discovery/discovery.proto

package discovery

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_1_0/events/discovery/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_1_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: discovery
// Event UID: 4
// URL: https://schema.ocsf.io/1.1.0/classes/patch_state
type PatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device         *objects.Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 // Caption: Device;
	Api            *objects.Api                   `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`                                                                                                       // Caption: API Details; Profile: cloud;
	EndTime        int64                          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	ActivityId     enums.PATCH_STATE_ACTIVITY_ID  `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID" json:"activity_id,omitempty"`      // Caption: Activity ID;
	Unmapped       *objects.Object                `protobuf:"bytes,5,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                             // Caption: Unmapped Data;
	Time           int64                          `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                                    // Caption: Event Time;
	Enrichments    []*objects.Enrichment          `protobuf:"bytes,7,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
	Message        string                         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`                                                                                               // Caption: Message;
	Metadata       *objects.Metadata              `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                             // Caption: Metadata;
	TypeUid        enums.PATCH_STATE_TYPE_UID     `protobuf:"varint,10,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	StatusCode     string                         `protobuf:"bytes,11,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
	ClassUid       enums.PATCH_STATE_CLASS_UID    `protobuf:"varint,12,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	TypeName       string                         `protobuf:"bytes,13,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	CategoryName   string                         `protobuf:"bytes,14,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	ClassName      string                         `protobuf:"bytes,15,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                         // Caption: Class;
	Status         string                         `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	SeverityId     enums.PATCH_STATE_SEVERITY_ID  `protobuf:"varint,17,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Observables    []*objects.Observable          `protobuf:"bytes,18,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	Duration       int32                          `protobuf:"varint,19,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                           // Caption: Duration;
	RawData        string                         `protobuf:"bytes,20,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	StatusDetail   string                         `protobuf:"bytes,21,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                // Caption: Status Details;
	StatusId       enums.PATCH_STATE_STATUS_ID    `protobuf:"varint,22,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Severity       string                         `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	Cloud          *objects.Cloud                 `protobuf:"bytes,24,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	TimezoneOffset int32                          `protobuf:"varint,25,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                         // Caption: Timezone Offset;
	CategoryUid    enums.PATCH_STATE_CATEGORY_UID `protobuf:"varint,26,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Count          int32                          `protobuf:"varint,27,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	ActivityName   string                         `protobuf:"bytes,28,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	KbArticleList  []*objects.KbArticle           `protobuf:"bytes,29,rep,name=kb_article_list,json=kbArticleList,proto3" json:"kb_article_list,omitempty"`                                                           // Caption: Knowledgebase Articles;
	StartTime      int64                          `protobuf:"varint,30,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                        // Caption: Start Time;
}

func (x *PatchState) Reset() {
	*x = PatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchState) ProtoMessage() {}

func (x *PatchState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchState.ProtoReflect.Descriptor instead.
func (*PatchState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *PatchState) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PatchState) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PatchState) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PatchState) GetActivityId() enums.PATCH_STATE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PATCH_STATE_ACTIVITY_ID(0)
}

func (x *PatchState) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *PatchState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PatchState) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *PatchState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PatchState) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PatchState) GetTypeUid() enums.PATCH_STATE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PATCH_STATE_TYPE_UID(0)
}

func (x *PatchState) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PatchState) GetClassUid() enums.PATCH_STATE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PATCH_STATE_CLASS_UID(0)
}

func (x *PatchState) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PatchState) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PatchState) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PatchState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PatchState) GetSeverityId() enums.PATCH_STATE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PATCH_STATE_SEVERITY_ID(0)
}

func (x *PatchState) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *PatchState) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PatchState) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *PatchState) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PatchState) GetStatusId() enums.PATCH_STATE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PATCH_STATE_STATUS_ID(0)
}

func (x *PatchState) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PatchState) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *PatchState) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *PatchState) GetCategoryUid() enums.PATCH_STATE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PATCH_STATE_CATEGORY_UID(0)
}

func (x *PatchState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PatchState) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PatchState) GetKbArticleList() []*objects.KbArticle {
	if x != nil {
		return x.KbArticleList
	}
	return nil
}

func (x *PatchState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Event UID: 3
// URL: https://schema.ocsf.io/1.1.0/classes/user_inventory
// Event: discovery
type UserInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityId     enums.USER_INVENTORY_SEVERITY_ID  `protobuf:"varint,1,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID" json:"severity_id,omitempty"`      // Caption: Severity ID;
	StatusId       enums.USER_INVENTORY_STATUS_ID    `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	Api            *objects.Api                      `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`                                                                                                          // Caption: API Details; Profile: cloud;
	TimezoneOffset int32                             `protobuf:"varint,4,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                             // Caption: Timezone Offset;
	RawData        string                            `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                   // Caption: Raw Data;
	Duration       int32                             `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                               // Caption: Duration;
	EndTime        int64                             `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                  // Caption: End Time;
	ClassUid       enums.USER_INVENTORY_CLASS_UID    `protobuf:"varint,8,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CLASS_UID" json:"class_uid,omitempty"`              // Caption: Class ID;
	Severity       string                            `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                // Caption: Severity;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,10,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                         // Caption: Enrichments;
	StatusDetail   string                            `protobuf:"bytes,11,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                   // Caption: Status Details;
	User           *objects.User                     `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`                                                                                                       // Caption: User;
	Message        string                            `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`                                                                                                 // Caption: Message;
	ActivityName   string                            `protobuf:"bytes,14,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                   // Caption: Activity;
	Count          int32                             `protobuf:"varint,15,opt,name=count,proto3" json:"count,omitempty"`                                                                                                    // Caption: Count;
	StartTime      int64                             `protobuf:"varint,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                           // Caption: Start Time;
	ActivityId     enums.USER_INVENTORY_ACTIVITY_ID  `protobuf:"varint,17,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	TypeUid        enums.USER_INVENTORY_TYPE_UID     `protobuf:"varint,18,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Unmapped       *objects.Object                   `protobuf:"bytes,19,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                               // Caption: Unmapped Data;
	Cloud          *objects.Cloud                    `protobuf:"bytes,20,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                     // Profile: cloud; Caption: Cloud;
	Actor          *objects.Actor                    `protobuf:"bytes,21,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                     // Caption: Actor;
	ClassName      string                            `protobuf:"bytes,22,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                            // Caption: Class;
	CategoryUid    enums.USER_INVENTORY_CATEGORY_UID `protobuf:"varint,23,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Status         string                            `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // Caption: Status;
	CategoryName   string                            `protobuf:"bytes,25,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                   // Caption: Category;
	Time           int64                             `protobuf:"varint,26,opt,name=time,proto3" json:"time,omitempty"`                                                                                                      // Caption: Event Time;
	TypeName       string                            `protobuf:"bytes,27,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                               // Caption: Type Name;
	StatusCode     string                            `protobuf:"bytes,28,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                         // Caption: Status Code;
	Metadata       *objects.Metadata                 `protobuf:"bytes,29,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                               // Caption: Metadata;
	Observables    []*objects.Observable             `protobuf:"bytes,30,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                         // Caption: Observables;
}

func (x *UserInventory) Reset() {
	*x = UserInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventory) ProtoMessage() {}

func (x *UserInventory) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventory.ProtoReflect.Descriptor instead.
func (*UserInventory) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *UserInventory) GetSeverityId() enums.USER_INVENTORY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.USER_INVENTORY_SEVERITY_ID(0)
}

func (x *UserInventory) GetStatusId() enums.USER_INVENTORY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.USER_INVENTORY_STATUS_ID(0)
}

func (x *UserInventory) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *UserInventory) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *UserInventory) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *UserInventory) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserInventory) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserInventory) GetClassUid() enums.USER_INVENTORY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.USER_INVENTORY_CLASS_UID(0)
}

func (x *UserInventory) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UserInventory) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *UserInventory) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *UserInventory) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserInventory) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserInventory) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *UserInventory) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInventory) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserInventory) GetActivityId() enums.USER_INVENTORY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.USER_INVENTORY_ACTIVITY_ID(0)
}

func (x *UserInventory) GetTypeUid() enums.USER_INVENTORY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.USER_INVENTORY_TYPE_UID(0)
}

func (x *UserInventory) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *UserInventory) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *UserInventory) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UserInventory) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *UserInventory) GetCategoryUid() enums.USER_INVENTORY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.USER_INVENTORY_CATEGORY_UID(0)
}

func (x *UserInventory) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserInventory) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UserInventory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserInventory) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UserInventory) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *UserInventory) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserInventory) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

// Event UID: 19
// URL: https://schema.ocsf.io/1.1.0/classes/prefetch_info
// Event: discovery
type PrefetchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName       string                           `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                               // Caption: Type Name;
	Severity       string                           `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                               // Caption: Severity;
	Observables    []*objects.Observable            `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                         // Caption: Observables;
	Name           string                           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                                       // Caption: Name;
	Api            *objects.Api                     `protobuf:"bytes,5,opt,name=api,proto3" json:"api,omitempty"`                                                                                                         // Caption: API Details; Profile: cloud;
	Duration       int32                            `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                              // Caption: Duration;
	Message        string                           `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                                                                                 // Caption: Message;
	StatusId       enums.PREFETCH_INFO_STATUS_ID    `protobuf:"varint,8,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	EndTime        int64                            `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                 // Caption: End Time;
	TypeUid        enums.PREFETCH_INFO_TYPE_UID     `protobuf:"varint,10,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	CategoryUid    enums.PREFETCH_INFO_CATEGORY_UID `protobuf:"varint,11,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Device         *objects.Device                  `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`                                                                                                  // Caption: Device; Profile: host;
	Cloud          *objects.Cloud                   `protobuf:"bytes,13,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                    // Caption: Cloud; Profile: cloud;
	Enrichments    []*objects.Enrichment            `protobuf:"bytes,14,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                        // Caption: Enrichments;
	StatusCode     string                           `protobuf:"bytes,15,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                        // Caption: Status Code;
	StartTime      int64                            `protobuf:"varint,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                          // Caption: Start Time;
	ActivityId     enums.PREFETCH_INFO_ACTIVITY_ID  `protobuf:"varint,17,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	Metadata       *objects.Metadata                `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                              // Caption: Metadata;
	CategoryName   string                           `protobuf:"bytes,19,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                  // Caption: Category;
	Count          int32                            `protobuf:"varint,20,opt,name=count,proto3" json:"count,omitempty"`                                                                                                   // Caption: Count;
	Time           int64                            `protobuf:"varint,21,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     // Caption: Event Time;
	ClassName      string                           `protobuf:"bytes,22,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                           // Caption: Class;
	TimezoneOffset int32                            `protobuf:"varint,23,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                           // Caption: Timezone Offset;
	StatusDetail   string                           `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                  // Caption: Status Details;
	RawData        string                           `protobuf:"bytes,25,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                 // Caption: Raw Data;
	Actor          *objects.Actor                   `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                    // Caption: Actor; Profile: host;
	Unmapped       *objects.Object                  `protobuf:"bytes,27,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                              // Caption: Unmapped Data;
	ActivityName   string                           `protobuf:"bytes,28,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                  // Caption: Activity;
	SeverityId     enums.PREFETCH_INFO_SEVERITY_ID  `protobuf:"varint,29,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Status         string                           `protobuf:"bytes,30,opt,name=status,proto3" json:"status,omitempty"`                                                                                                  // Caption: Status;
	LastRunTime    int64                            `protobuf:"varint,31,opt,name=last_run_time,json=lastRunTime,proto3" json:"last_run_time,omitempty"`                                                                  // Caption: Last Run;
	RunCount       int32                            `protobuf:"varint,32,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`                                                                             // Caption: Run Count;
	ClassUid       enums.PREFETCH_INFO_CLASS_UID    `protobuf:"varint,33,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
}

func (x *PrefetchInfo) Reset() {
	*x = PrefetchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefetchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefetchInfo) ProtoMessage() {}

func (x *PrefetchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefetchInfo.ProtoReflect.Descriptor instead.
func (*PrefetchInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *PrefetchInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PrefetchInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PrefetchInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *PrefetchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrefetchInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PrefetchInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PrefetchInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PrefetchInfo) GetStatusId() enums.PREFETCH_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PREFETCH_INFO_STATUS_ID(0)
}

func (x *PrefetchInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PrefetchInfo) GetTypeUid() enums.PREFETCH_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PREFETCH_INFO_TYPE_UID(0)
}

func (x *PrefetchInfo) GetCategoryUid() enums.PREFETCH_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PREFETCH_INFO_CATEGORY_UID(0)
}

func (x *PrefetchInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PrefetchInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *PrefetchInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *PrefetchInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PrefetchInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PrefetchInfo) GetActivityId() enums.PREFETCH_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PREFETCH_INFO_ACTIVITY_ID(0)
}

func (x *PrefetchInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PrefetchInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PrefetchInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PrefetchInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PrefetchInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PrefetchInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *PrefetchInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PrefetchInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *PrefetchInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *PrefetchInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *PrefetchInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PrefetchInfo) GetSeverityId() enums.PREFETCH_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PREFETCH_INFO_SEVERITY_ID(0)
}

func (x *PrefetchInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PrefetchInfo) GetLastRunTime() int64 {
	if x != nil {
		return x.LastRunTime
	}
	return 0
}

func (x *PrefetchInfo) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *PrefetchInfo) GetClassUid() enums.PREFETCH_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PREFETCH_INFO_CLASS_UID(0)
}

// Event: discovery
// Event UID: 19
// URL: https://schema.ocsf.io/1.1.0/classes/device_config_state_change
type DeviceConfigStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId          enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID            `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID" json:"activity_id,omitempty"`                                            // Caption: Activity ID;
	StatusId            enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID              `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID" json:"status_id,omitempty"`                                                    // Caption: Status ID;
	StatusCode          string                                                  `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                                                            // Caption: Status Code;
	Device              *objects.Device                                         `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                                                      // Caption: Device;
	PrevSecurityStates  []*objects.SecurityState                                `protobuf:"bytes,5,rep,name=prev_security_states,json=prevSecurityStates,proto3" json:"prev_security_states,omitempty"`                                                                                                  // Caption: Previous Security States;
	Actor               *objects.Actor                                          `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                                                        // Caption: Actor;
	TypeName            string                                                  `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                                                                  // Caption: Type Name;
	CategoryName        string                                                  `protobuf:"bytes,8,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                                                      // Caption: Category;
	ClassName           string                                                  `protobuf:"bytes,9,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                                                               // Caption: Class;
	Metadata            *objects.Metadata                                       `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                                                                 // Caption: Metadata;
	Count               int32                                                   `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                                                      // Caption: Count;
	PrevSecurityLevel   string                                                  `protobuf:"bytes,12,opt,name=prev_security_level,json=prevSecurityLevel,proto3" json:"prev_security_level,omitempty"`                                                                                                    // Caption: Previous Security Level;
	ClassUid            enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID              `protobuf:"varint,13,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID" json:"class_uid,omitempty"`                                                   // Caption: Class ID;
	EndTime             int64                                                   `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                                                   // Caption: End Time;
	Enrichments         []*objects.Enrichment                                   `protobuf:"bytes,15,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                                                           // Caption: Enrichments;
	Duration            int32                                                   `protobuf:"varint,16,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                                                // Caption: Duration;
	SeverityId          enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID            `protobuf:"varint,17,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID" json:"severity_id,omitempty"`                                           // Caption: Severity ID;
	Unmapped            *objects.Object                                         `protobuf:"bytes,18,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                                                 // Caption: Unmapped Data;
	TimezoneOffset      int32                                                   `protobuf:"varint,19,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                                                              // Caption: Timezone Offset;
	Api                 *objects.Api                                            `protobuf:"bytes,20,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                                                           // Caption: API Details; Profile: cloud;
	SecurityLevelId     enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID      `protobuf:"varint,21,opt,name=security_level_id,json=securityLevelId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID" json:"security_level_id,omitempty"`                    // Caption: Security Level ID;
	Message             string                                                  `protobuf:"bytes,22,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                                                   // Caption: Message;
	ActivityName        string                                                  `protobuf:"bytes,23,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                                                     // Caption: Activity;
	StartTime           int64                                                   `protobuf:"varint,24,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                                                             // Caption: Start Time;
	SecurityStates      []*objects.SecurityState                                `protobuf:"bytes,25,rep,name=security_states,json=securityStates,proto3" json:"security_states,omitempty"`                                                                                                               // Caption: Security States;
	Time                int64                                                   `protobuf:"varint,26,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                                                        // Caption: Event Time;
	CategoryUid         enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID           `protobuf:"varint,27,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID" json:"category_uid,omitempty"`                                       // Caption: Category ID;
	Observables         []*objects.Observable                                   `protobuf:"bytes,28,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                                                           // Caption: Observables;
	Cloud               *objects.Cloud                                          `protobuf:"bytes,29,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                                                       // Caption: Cloud; Profile: cloud;
	TypeUid             enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID               `protobuf:"varint,30,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID" json:"type_uid,omitempty"`                                                       // Caption: Type ID;
	PrevSecurityLevelId enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID `protobuf:"varint,31,opt,name=prev_security_level_id,json=prevSecurityLevelId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID" json:"prev_security_level_id,omitempty"` // Caption: Previous Security Level ID;
	Severity            string                                                  `protobuf:"bytes,32,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                                                 // Caption: Severity;
	RawData             string                                                  `protobuf:"bytes,33,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                                                    // Caption: Raw Data;
	Status              string                                                  `protobuf:"bytes,34,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                                                     // Caption: Status;
	StatusDetail        string                                                  `protobuf:"bytes,35,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                                                     // Caption: Status Details;
	SecurityLevel       string                                                  `protobuf:"bytes,36,opt,name=security_level,json=securityLevel,proto3" json:"security_level,omitempty"`                                                                                                                  // Caption: Security Level;
}

func (x *DeviceConfigStateChange) Reset() {
	*x = DeviceConfigStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigStateChange) ProtoMessage() {}

func (x *DeviceConfigStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigStateChange.ProtoReflect.Descriptor instead.
func (*DeviceConfigStateChange) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceConfigStateChange) GetActivityId() enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID(0)
}

func (x *DeviceConfigStateChange) GetStatusId() enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID(0)
}

func (x *DeviceConfigStateChange) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DeviceConfigStateChange) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceConfigStateChange) GetPrevSecurityStates() []*objects.SecurityState {
	if x != nil {
		return x.PrevSecurityStates
	}
	return nil
}

func (x *DeviceConfigStateChange) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DeviceConfigStateChange) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeviceConfigStateChange) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DeviceConfigStateChange) GetPrevSecurityLevel() string {
	if x != nil {
		return x.PrevSecurityLevel
	}
	return ""
}

func (x *DeviceConfigStateChange) GetClassUid() enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID(0)
}

func (x *DeviceConfigStateChange) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DeviceConfigStateChange) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DeviceConfigStateChange) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DeviceConfigStateChange) GetSeverityId() enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID(0)
}

func (x *DeviceConfigStateChange) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DeviceConfigStateChange) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DeviceConfigStateChange) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DeviceConfigStateChange) GetSecurityLevelId() enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID {
	if x != nil {
		return x.SecurityLevelId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID(0)
}

func (x *DeviceConfigStateChange) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeviceConfigStateChange) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DeviceConfigStateChange) GetSecurityStates() []*objects.SecurityState {
	if x != nil {
		return x.SecurityStates
	}
	return nil
}

func (x *DeviceConfigStateChange) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DeviceConfigStateChange) GetCategoryUid() enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID(0)
}

func (x *DeviceConfigStateChange) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DeviceConfigStateChange) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DeviceConfigStateChange) GetTypeUid() enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID(0)
}

func (x *DeviceConfigStateChange) GetPrevSecurityLevelId() enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID {
	if x != nil {
		return x.PrevSecurityLevelId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID(0)
}

func (x *DeviceConfigStateChange) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DeviceConfigStateChange) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DeviceConfigStateChange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeviceConfigStateChange) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DeviceConfigStateChange) GetSecurityLevel() string {
	if x != nil {
		return x.SecurityLevel
	}
	return ""
}

// Event UID: 1
// URL: https://schema.ocsf.io/1.1.0/classes/inventory_info
// Event: discovery
type InventoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device         *objects.Device                   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                                    // Caption: Device;
	ClassName      string                            `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                             // Caption: Class;
	Count          int32                             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                                                                                     // Caption: Count;
	Metadata       *objects.Metadata                 `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                // Caption: Metadata;
	Duration       int32                             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                               // Caption: Duration;
	TypeName       string                            `protobuf:"bytes,6,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                // Caption: Type Name;
	Cloud          *objects.Cloud                    `protobuf:"bytes,7,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                      // Caption: Cloud; Profile: cloud;
	StatusId       enums.INVENTORY_INFO_STATUS_ID    `protobuf:"varint,8,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	CategoryName   string                            `protobuf:"bytes,9,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                    // Caption: Category;
	Time           int64                             `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`                                                                                                      // Caption: Event Time;
	Status         string                            `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // Caption: Status;
	ActivityId     enums.INVENTORY_INFO_ACTIVITY_ID  `protobuf:"varint,12,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,13,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                         // Caption: Enrichments;
	Message        string                            `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`                                                                                                 // Caption: Message;
	ActivityName   string                            `protobuf:"bytes,15,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                   // Caption: Activity;
	ClassUid       enums.INVENTORY_INFO_CLASS_UID    `protobuf:"varint,16,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	StatusCode     string                            `protobuf:"bytes,17,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                         // Caption: Status Code;
	Severity       string                            `protobuf:"bytes,18,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                               // Caption: Severity;
	TypeUid        enums.INVENTORY_INFO_TYPE_UID     `protobuf:"varint,19,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	SeverityId     enums.INVENTORY_INFO_SEVERITY_ID  `protobuf:"varint,20,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Api            *objects.Api                      `protobuf:"bytes,21,opt,name=api,proto3" json:"api,omitempty"`                                                                                                         // Caption: API Details; Profile: cloud;
	StartTime      int64                             `protobuf:"varint,22,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                           // Caption: Start Time;
	RawData        string                            `protobuf:"bytes,23,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                  // Caption: Raw Data;
	CategoryUid    enums.INVENTORY_INFO_CATEGORY_UID `protobuf:"varint,24,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	StatusDetail   string                            `protobuf:"bytes,25,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                   // Caption: Status Details;
	Actor          *objects.Actor                    `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                     // Caption: Actor;
	Observables    []*objects.Observable             `protobuf:"bytes,27,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                         // Caption: Observables;
	EndTime        int64                             `protobuf:"varint,28,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                 // Caption: End Time;
	Unmapped       *objects.Object                   `protobuf:"bytes,29,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                               // Caption: Unmapped Data;
	TimezoneOffset int32                             `protobuf:"varint,30,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                            // Caption: Timezone Offset;
}

func (x *InventoryInfo) Reset() {
	*x = InventoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfo) ProtoMessage() {}

func (x *InventoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfo.ProtoReflect.Descriptor instead.
func (*InventoryInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{4}
}

func (x *InventoryInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *InventoryInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *InventoryInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InventoryInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InventoryInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *InventoryInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *InventoryInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *InventoryInfo) GetStatusId() enums.INVENTORY_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.INVENTORY_INFO_STATUS_ID(0)
}

func (x *InventoryInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *InventoryInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InventoryInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InventoryInfo) GetActivityId() enums.INVENTORY_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.INVENTORY_INFO_ACTIVITY_ID(0)
}

func (x *InventoryInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *InventoryInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InventoryInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *InventoryInfo) GetClassUid() enums.INVENTORY_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.INVENTORY_INFO_CLASS_UID(0)
}

func (x *InventoryInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *InventoryInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *InventoryInfo) GetTypeUid() enums.INVENTORY_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.INVENTORY_INFO_TYPE_UID(0)
}

func (x *InventoryInfo) GetSeverityId() enums.INVENTORY_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.INVENTORY_INFO_SEVERITY_ID(0)
}

func (x *InventoryInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *InventoryInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InventoryInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *InventoryInfo) GetCategoryUid() enums.INVENTORY_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.INVENTORY_INFO_CATEGORY_UID(0)
}

func (x *InventoryInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *InventoryInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *InventoryInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *InventoryInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InventoryInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *InventoryInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

// Event: discovery
// Event UID: 5
// URL: https://schema.ocsf.io/1.1.0/classes/registry_value_info
type RegistryValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity       string                                 `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	Message        string                                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	TypeName       string                                 `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                    // Caption: Type Name;
	Actor          *objects.Actor                         `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                          // Profile: host; Caption: Actor;
	Cloud          *objects.Cloud                         `protobuf:"bytes,5,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	CategoryUid    enums.REGISTRY_VALUE_INFO_CATEGORY_UID `protobuf:"varint,6,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Duration       int32                                  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	ClassName      string                                 `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Status         string                                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Observables    []*objects.Observable                  `protobuf:"bytes,10,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	ActivityId     enums.REGISTRY_VALUE_INFO_ACTIVITY_ID  `protobuf:"varint,11,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	Metadata       *objects.Metadata                      `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	ClassUid       enums.REGISTRY_VALUE_INFO_CLASS_UID    `protobuf:"varint,13,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CLASS_UID" json:"class_uid,omitempty"`            // Caption: Class ID;
	Unmapped       *objects.Object                        `protobuf:"bytes,14,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	TypeUid        enums.REGISTRY_VALUE_INFO_TYPE_UID     `protobuf:"varint,15,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	StatusCode     string                                 `protobuf:"bytes,16,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
	Api            *objects.Api                           `protobuf:"bytes,17,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Caption: API Details; Profile: cloud;
	RegValue       *objects.RegValue                      `protobuf:"bytes,18,opt,name=reg_value,json=regValue,proto3" json:"reg_value,omitempty"`                                                                                   // Caption: Registry Value;
	RawData        string                                 `protobuf:"bytes,19,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	ActivityName   string                                 `protobuf:"bytes,20,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	Enrichments    []*objects.Enrichment                  `protobuf:"bytes,21,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	StatusId       enums.REGISTRY_VALUE_INFO_STATUS_ID    `protobuf:"varint,22,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	CategoryName   string                                 `protobuf:"bytes,23,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                       // Caption: Category;
	TimezoneOffset int32                                  `protobuf:"varint,24,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                // Caption: Timezone Offset;
	StartTime      int64                                  `protobuf:"varint,25,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	Device         *objects.Device                        `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Profile: host; Caption: Device;
	Count          int32                                  `protobuf:"varint,27,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	EndTime        int64                                  `protobuf:"varint,28,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	SeverityId     enums.REGISTRY_VALUE_INFO_SEVERITY_ID  `protobuf:"varint,29,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_SEVERITY_ID" json:"severity_id,omitempty"`    // Caption: Severity ID;
	StatusDetail   string                                 `protobuf:"bytes,30,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	Time           int64                                  `protobuf:"varint,31,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
}

func (x *RegistryValueInfo) Reset() {
	*x = RegistryValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryValueInfo) ProtoMessage() {}

func (x *RegistryValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryValueInfo.ProtoReflect.Descriptor instead.
func (*RegistryValueInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{5}
}

func (x *RegistryValueInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryValueInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryValueInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryValueInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryValueInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryValueInfo) GetCategoryUid() enums.REGISTRY_VALUE_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_VALUE_INFO_CATEGORY_UID(0)
}

func (x *RegistryValueInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegistryValueInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryValueInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryValueInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryValueInfo) GetActivityId() enums.REGISTRY_VALUE_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_VALUE_INFO_ACTIVITY_ID(0)
}

func (x *RegistryValueInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryValueInfo) GetClassUid() enums.REGISTRY_VALUE_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_VALUE_INFO_CLASS_UID(0)
}

func (x *RegistryValueInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryValueInfo) GetTypeUid() enums.REGISTRY_VALUE_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_VALUE_INFO_TYPE_UID(0)
}

func (x *RegistryValueInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryValueInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryValueInfo) GetRegValue() *objects.RegValue {
	if x != nil {
		return x.RegValue
	}
	return nil
}

func (x *RegistryValueInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RegistryValueInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryValueInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryValueInfo) GetStatusId() enums.REGISTRY_VALUE_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_VALUE_INFO_STATUS_ID(0)
}

func (x *RegistryValueInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryValueInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryValueInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RegistryValueInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RegistryValueInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryValueInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryValueInfo) GetSeverityId() enums.REGISTRY_VALUE_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_VALUE_INFO_SEVERITY_ID(0)
}

func (x *RegistryValueInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryValueInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Event: discovery
// Event UID: 0
// URL: https://schema.ocsf.io/1.1.0/classes/discovery_result
type DiscoveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration       int32                               `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                 // Caption: Duration;
	RawData        string                              `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                     // Caption: Raw Data;
	CategoryName   string                              `protobuf:"bytes,3,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                      // Caption: Category;
	Metadata       *objects.Metadata                   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                  // Caption: Metadata;
	ClassName      string                              `protobuf:"bytes,5,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                               // Caption: Class;
	Actor          *objects.Actor                      `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                        // Caption: Actor; Profile: host;
	Message        string                              `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                                                                                    // Caption: Message;
	TimezoneOffset int32                               `protobuf:"varint,8,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                               // Caption: Timezone Offset;
	StatusDetail   string                              `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                      // Caption: Status Details;
	Device         *objects.Device                     `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`                                                                                                     // Profile: host; Caption: Device;
	Cloud          *objects.Cloud                      `protobuf:"bytes,11,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                       // Caption: Cloud; Profile: cloud;
	TypeName       string                              `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                 // Caption: Type Name;
	ClassUid       enums.DISCOVERY_RESULT_CLASS_UID    `protobuf:"varint,13,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Unmapped       *objects.Object                     `protobuf:"bytes,14,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                 // Caption: Unmapped Data;
	Observables    []*objects.Observable               `protobuf:"bytes,15,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                           // Caption: Observables;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,16,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                           // Caption: Enrichments;
	Severity       string                              `protobuf:"bytes,17,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                 // Caption: Severity;
	Count          int32                               `protobuf:"varint,18,opt,name=count,proto3" json:"count,omitempty"`                                                                                                      // Caption: Count;
	TypeUid        enums.DISCOVERY_RESULT_TYPE_UID     `protobuf:"varint,19,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	StatusCode     string                              `protobuf:"bytes,20,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                           // Caption: Status Code;
	Time           int64                               `protobuf:"varint,21,opt,name=time,proto3" json:"time,omitempty"`                                                                                                        // Caption: Event Time;
	StatusId       enums.DISCOVERY_RESULT_STATUS_ID    `protobuf:"varint,22,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	EndTime        int64                               `protobuf:"varint,23,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                   // Caption: End Time;
	ActivityId     enums.DISCOVERY_RESULT_ACTIVITY_ID  `protobuf:"varint,24,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	Api            *objects.Api                        `protobuf:"bytes,25,opt,name=api,proto3" json:"api,omitempty"`                                                                                                           // Caption: API Details; Profile: cloud;
	ActivityName   string                              `protobuf:"bytes,26,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                     // Caption: Activity;
	StartTime      int64                               `protobuf:"varint,27,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                             // Caption: Start Time;
	SeverityId     enums.DISCOVERY_RESULT_SEVERITY_ID  `protobuf:"varint,28,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	CategoryUid    enums.DISCOVERY_RESULT_CATEGORY_UID `protobuf:"varint,29,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Status         string                              `protobuf:"bytes,30,opt,name=status,proto3" json:"status,omitempty"`                                                                                                     // Caption: Status;
}

func (x *DiscoveryResult) Reset() {
	*x = DiscoveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryResult) ProtoMessage() {}

func (x *DiscoveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryResult.ProtoReflect.Descriptor instead.
func (*DiscoveryResult) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{6}
}

func (x *DiscoveryResult) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DiscoveryResult) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DiscoveryResult) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DiscoveryResult) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DiscoveryResult) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DiscoveryResult) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DiscoveryResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiscoveryResult) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DiscoveryResult) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DiscoveryResult) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DiscoveryResult) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DiscoveryResult) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DiscoveryResult) GetClassUid() enums.DISCOVERY_RESULT_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DISCOVERY_RESULT_CLASS_UID(0)
}

func (x *DiscoveryResult) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DiscoveryResult) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DiscoveryResult) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DiscoveryResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DiscoveryResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DiscoveryResult) GetTypeUid() enums.DISCOVERY_RESULT_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DISCOVERY_RESULT_TYPE_UID(0)
}

func (x *DiscoveryResult) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DiscoveryResult) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DiscoveryResult) GetStatusId() enums.DISCOVERY_RESULT_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DISCOVERY_RESULT_STATUS_ID(0)
}

func (x *DiscoveryResult) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DiscoveryResult) GetActivityId() enums.DISCOVERY_RESULT_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DISCOVERY_RESULT_ACTIVITY_ID(0)
}

func (x *DiscoveryResult) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DiscoveryResult) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DiscoveryResult) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DiscoveryResult) GetSeverityId() enums.DISCOVERY_RESULT_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DISCOVERY_RESULT_SEVERITY_ID(0)
}

func (x *DiscoveryResult) GetCategoryUid() enums.DISCOVERY_RESULT_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DISCOVERY_RESULT_CATEGORY_UID(0)
}

func (x *DiscoveryResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Event: discovery
// Event UID: 0
// URL: https://schema.ocsf.io/1.1.0/classes/discovery
type Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityId     enums.DISCOVERY_SEVERITY_ID  `protobuf:"varint,1,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_SEVERITY_ID" json:"severity_id,omitempty"`      // Caption: Severity ID;
	Severity       string                       `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                           // Caption: Severity;
	Unmapped       *objects.Object              `protobuf:"bytes,3,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                           // Caption: Unmapped Data;
	Cloud          *objects.Cloud               `protobuf:"bytes,4,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                 // Caption: Cloud; Profile: cloud;
	StatusId       enums.DISCOVERY_STATUS_ID    `protobuf:"varint,5,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	TimezoneOffset int32                        `protobuf:"varint,6,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                        // Caption: Timezone Offset;
	TypeName       string                       `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                           // Caption: Type Name;
	Enrichments    []*objects.Enrichment        `protobuf:"bytes,8,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                     // Caption: Enrichments;
	CategoryName   string                       `protobuf:"bytes,9,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                               // Caption: Category;
	Api            *objects.Api                 `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                    // Caption: API Details; Profile: cloud;
	Time           int64                        `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`                                                                                                 // Caption: Event Time;
	CategoryUid    enums.DISCOVERY_CATEGORY_UID `protobuf:"varint,12,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Message        string                       `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`                                                                                            // Caption: Message;
	ClassName      string                       `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                       // Caption: Class;
	RawData        string                       `protobuf:"bytes,15,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                             // Caption: Raw Data;
	Metadata       *objects.Metadata            `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                          // Caption: Metadata;
	Count          int32                        `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`                                                                                               // Caption: Count;
	ActivityName   string                       `protobuf:"bytes,18,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                              // Caption: Activity;
	EndTime        int64                        `protobuf:"varint,19,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // Caption: End Time;
	Status         string                       `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`                                                                                              // Caption: Status;
	Duration       int32                        `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                         // Caption: Duration;
	Observables    []*objects.Observable        `protobuf:"bytes,22,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                    // Caption: Observables;
	ActivityId     enums.DISCOVERY_ACTIVITY_ID  `protobuf:"varint,23,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	StartTime      int64                        `protobuf:"varint,24,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // Caption: Start Time;
	TypeUid        enums.DISCOVERY_TYPE_UID     `protobuf:"varint,25,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	StatusDetail   string                       `protobuf:"bytes,26,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                              // Caption: Status Details;
	ClassUid       enums.DISCOVERY_CLASS_UID    `protobuf:"varint,27,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	StatusCode     string                       `protobuf:"bytes,28,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                    // Caption: Status Code;
}

func (x *Discovery) Reset() {
	*x = Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery) ProtoMessage() {}

func (x *Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery.ProtoReflect.Descriptor instead.
func (*Discovery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{7}
}

func (x *Discovery) GetSeverityId() enums.DISCOVERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DISCOVERY_SEVERITY_ID(0)
}

func (x *Discovery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Discovery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Discovery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Discovery) GetStatusId() enums.DISCOVERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DISCOVERY_STATUS_ID(0)
}

func (x *Discovery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Discovery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Discovery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Discovery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Discovery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Discovery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Discovery) GetCategoryUid() enums.DISCOVERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DISCOVERY_CATEGORY_UID(0)
}

func (x *Discovery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Discovery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Discovery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Discovery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Discovery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Discovery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Discovery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Discovery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Discovery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Discovery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Discovery) GetActivityId() enums.DISCOVERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DISCOVERY_ACTIVITY_ID(0)
}

func (x *Discovery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Discovery) GetTypeUid() enums.DISCOVERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DISCOVERY_TYPE_UID(0)
}

func (x *Discovery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Discovery) GetClassUid() enums.DISCOVERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DISCOVERY_CLASS_UID(0)
}

func (x *Discovery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

// Event: discovery
// Event UID: 4
// URL: https://schema.ocsf.io/1.1.0/classes/registry_key_info
type RegistryKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName   string                               `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                      // Caption: Category;
	ClassName      string                               `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                               // Caption: Class;
	ClassUid       enums.REGISTRY_KEY_INFO_CLASS_UID    `protobuf:"varint,3,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Count          int32                                `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                                                                                                       // Caption: Count;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,5,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                            // Caption: Enrichments;
	StatusCode     string                               `protobuf:"bytes,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                            // Caption: Status Code;
	CategoryUid    enums.REGISTRY_KEY_INFO_CATEGORY_UID `protobuf:"varint,7,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	RawData        string                               `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                     // Caption: Raw Data;
	ActivityName   string                               `protobuf:"bytes,9,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                      // Caption: Activity;
	TimezoneOffset int32                                `protobuf:"varint,10,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                              // Caption: Timezone Offset;
	RegKey         *objects.RegKey                      `protobuf:"bytes,11,opt,name=reg_key,json=regKey,proto3" json:"reg_key,omitempty"`                                                                                       // Caption: Registry Key;
	Api            *objects.Api                         `protobuf:"bytes,12,opt,name=api,proto3" json:"api,omitempty"`                                                                                                           // Caption: API Details; Profile: cloud;
	Time           int64                                `protobuf:"varint,13,opt,name=time,proto3" json:"time,omitempty"`                                                                                                        // Caption: Event Time;
	Unmapped       *objects.Object                      `protobuf:"bytes,14,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                 // Caption: Unmapped Data;
	EndTime        int64                                `protobuf:"varint,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                   // Caption: End Time;
	Message        string                               `protobuf:"bytes,16,opt,name=message,proto3" json:"message,omitempty"`                                                                                                   // Caption: Message;
	SeverityId     enums.REGISTRY_KEY_INFO_SEVERITY_ID  `protobuf:"varint,17,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_SEVERITY_ID" json:"severity_id,omitempty"`    // Caption: Severity ID;
	Metadata       *objects.Metadata                    `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                 // Caption: Metadata;
	StatusId       enums.REGISTRY_KEY_INFO_STATUS_ID    `protobuf:"varint,19,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	ActivityId     enums.REGISTRY_KEY_INFO_ACTIVITY_ID  `protobuf:"varint,20,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	Severity       string                               `protobuf:"bytes,21,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                 // Caption: Severity;
	StatusDetail   string                               `protobuf:"bytes,22,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                     // Caption: Status Details;
	Cloud          *objects.Cloud                       `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                       // Caption: Cloud; Profile: cloud;
	Observables    []*objects.Observable                `protobuf:"bytes,24,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                           // Caption: Observables;
	TypeUid        enums.REGISTRY_KEY_INFO_TYPE_UID     `protobuf:"varint,25,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	Status         string                               `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`                                                                                                     // Caption: Status;
	Actor          *objects.Actor                       `protobuf:"bytes,27,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                       // Caption: Actor; Profile: host;
	Duration       int32                                `protobuf:"varint,28,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                // Caption: Duration;
	TypeName       string                               `protobuf:"bytes,29,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                 // Caption: Type Name;
	StartTime      int64                                `protobuf:"varint,30,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                             // Caption: Start Time;
	Device         *objects.Device                      `protobuf:"bytes,31,opt,name=device,proto3" json:"device,omitempty"`                                                                                                     // Caption: Device; Profile: host;
}

func (x *RegistryKeyInfo) Reset() {
	*x = RegistryKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryKeyInfo) ProtoMessage() {}

func (x *RegistryKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryKeyInfo.ProtoReflect.Descriptor instead.
func (*RegistryKeyInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{8}
}

func (x *RegistryKeyInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryKeyInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryKeyInfo) GetClassUid() enums.REGISTRY_KEY_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_KEY_INFO_CLASS_UID(0)
}

func (x *RegistryKeyInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryKeyInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryKeyInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryKeyInfo) GetCategoryUid() enums.REGISTRY_KEY_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_KEY_INFO_CATEGORY_UID(0)
}

func (x *RegistryKeyInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RegistryKeyInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryKeyInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryKeyInfo) GetRegKey() *objects.RegKey {
	if x != nil {
		return x.RegKey
	}
	return nil
}

func (x *RegistryKeyInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryKeyInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RegistryKeyInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryKeyInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryKeyInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryKeyInfo) GetSeverityId() enums.REGISTRY_KEY_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_KEY_INFO_SEVERITY_ID(0)
}

func (x *RegistryKeyInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryKeyInfo) GetStatusId() enums.REGISTRY_KEY_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_KEY_INFO_STATUS_ID(0)
}

func (x *RegistryKeyInfo) GetActivityId() enums.REGISTRY_KEY_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_KEY_INFO_ACTIVITY_ID(0)
}

func (x *RegistryKeyInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryKeyInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryKeyInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryKeyInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryKeyInfo) GetTypeUid() enums.REGISTRY_KEY_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_KEY_INFO_TYPE_UID(0)
}

func (x *RegistryKeyInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryKeyInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryKeyInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegistryKeyInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryKeyInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RegistryKeyInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// Event: discovery
// Event UID: 2
// URL: https://schema.ocsf.io/1.1.0/classes/config_state
type ConfigState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device             *objects.Device                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                                  // Caption: Device;
	StatusDetail       string                          `protobuf:"bytes,2,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                  // Caption: Status Details;
	Status             string                          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                                  // Caption: Status;
	CisBenchmarkResult *objects.CisBenchmarkResult     `protobuf:"bytes,4,opt,name=cis_benchmark_result,json=cisBenchmarkResult,proto3" json:"cis_benchmark_result,omitempty"`                                              // Caption: CIS Benchmark Result;
	TypeUid            enums.CONFIG_STATE_TYPE_UID     `protobuf:"varint,5,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_TYPE_UID" json:"type_uid,omitempty"`                  // Caption: Type ID;
	SeverityId         enums.CONFIG_STATE_SEVERITY_ID  `protobuf:"varint,6,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID" json:"severity_id,omitempty"`      // Caption: Severity ID;
	StatusId           enums.CONFIG_STATE_STATUS_ID    `protobuf:"varint,7,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	Severity           string                          `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                              // Caption: Severity;
	Message            string                          `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`                                                                                                // Caption: Message;
	EndTime            int64                           `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	Cloud              *objects.Cloud                  `protobuf:"bytes,11,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                   // Profile: cloud; Caption: Cloud;
	TypeName           string                          `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                             // Caption: Type Name;
	TimezoneOffset     int32                           `protobuf:"varint,13,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                          // Caption: Timezone Offset;
	ClassName          string                          `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                          // Caption: Class;
	Metadata           *objects.Metadata               `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                             // Caption: Metadata;
	ActivityName       string                          `protobuf:"bytes,16,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                 // Caption: Activity;
	ClassUid           enums.CONFIG_STATE_CLASS_UID    `protobuf:"varint,17,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Enrichments        []*objects.Enrichment           `protobuf:"bytes,18,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
	CategoryUid        enums.CONFIG_STATE_CATEGORY_UID `protobuf:"varint,19,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Observables        []*objects.Observable           `protobuf:"bytes,20,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                       // Caption: Observables;
	StartTime          int64                           `protobuf:"varint,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                         // Caption: Start Time;
	StatusCode         string                          `protobuf:"bytes,22,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                       // Caption: Status Code;
	Api                *objects.Api                    `protobuf:"bytes,23,opt,name=api,proto3" json:"api,omitempty"`                                                                                                       // Caption: API Details; Profile: cloud;
	Count              int32                           `protobuf:"varint,24,opt,name=count,proto3" json:"count,omitempty"`                                                                                                  // Caption: Count;
	CategoryName       string                          `protobuf:"bytes,25,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                 // Caption: Category;
	RawData            string                          `protobuf:"bytes,26,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                // Caption: Raw Data;
	Duration           int32                           `protobuf:"varint,27,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                            // Caption: Duration;
	Actor              *objects.Actor                  `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                   // Caption: Actor;
	ActivityId         enums.CONFIG_STATE_ACTIVITY_ID  `protobuf:"varint,29,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	Unmapped           *objects.Object                 `protobuf:"bytes,30,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                             // Caption: Unmapped Data;
	Time               int64                           `protobuf:"varint,31,opt,name=time,proto3" json:"time,omitempty"`                                                                                                    // Caption: Event Time;
}

func (x *ConfigState) Reset() {
	*x = ConfigState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigState) ProtoMessage() {}

func (x *ConfigState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigState.ProtoReflect.Descriptor instead.
func (*ConfigState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigState) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ConfigState) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ConfigState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConfigState) GetCisBenchmarkResult() *objects.CisBenchmarkResult {
	if x != nil {
		return x.CisBenchmarkResult
	}
	return nil
}

func (x *ConfigState) GetTypeUid() enums.CONFIG_STATE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.CONFIG_STATE_TYPE_UID(0)
}

func (x *ConfigState) GetSeverityId() enums.CONFIG_STATE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.CONFIG_STATE_SEVERITY_ID(0)
}

func (x *ConfigState) GetStatusId() enums.CONFIG_STATE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.CONFIG_STATE_STATUS_ID(0)
}

func (x *ConfigState) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ConfigState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigState) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ConfigState) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ConfigState) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ConfigState) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ConfigState) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ConfigState) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConfigState) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ConfigState) GetClassUid() enums.CONFIG_STATE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.CONFIG_STATE_CLASS_UID(0)
}

func (x *ConfigState) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ConfigState) GetCategoryUid() enums.CONFIG_STATE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.CONFIG_STATE_CATEGORY_UID(0)
}

func (x *ConfigState) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ConfigState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ConfigState) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ConfigState) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ConfigState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfigState) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ConfigState) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ConfigState) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ConfigState) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ConfigState) GetActivityId() enums.CONFIG_STATE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.CONFIG_STATE_ACTIVITY_ID(0)
}

func (x *ConfigState) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ConfigState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_ocsf_v1_1_0_events_discovery_discovery_proto protoreflect.FileDescriptor

var file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe1, 0x0b, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f,
	0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x62, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0d, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xda, 0x0b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0xae, 0x0c, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x61, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69,
	0x64, 0x22, 0xb7, 0x10, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6b, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x7c, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12,
	0x62, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe0, 0x0b, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x59, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xbe,
	0x0c, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x67, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x3a,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x64, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xee, 0x0b, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x61, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x64, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd7, 0x0a, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x5a,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x5a, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x0c, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xad, 0x0c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x69, 0x73,
	0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x69,
	0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x12, 0x63, 0x69, 0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x83, 0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x0e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c,
	0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31,
	0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x44, 0xaa, 0x02, 0x1a, 0x4f, 0x63, 0x73,
	0x66, 0x2e, 0x56, 0x31, 0x31, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xca, 0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x31, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0xe2, 0x02, 0x26, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x31, 0x30,
	0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d,
	0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x31, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescOnce sync.Once
	file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescData = file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDesc
)

func file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescGZIP() []byte {
	file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescData)
	})
	return file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDescData
}

var file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ocsf_v1_1_0_events_discovery_discovery_proto_goTypes = []interface{}{
	(*PatchState)(nil),                                           // 0: ocsf.v1_1_0.events.discovery.PatchState
	(*UserInventory)(nil),                                        // 1: ocsf.v1_1_0.events.discovery.UserInventory
	(*PrefetchInfo)(nil),                                         // 2: ocsf.v1_1_0.events.discovery.PrefetchInfo
	(*DeviceConfigStateChange)(nil),                              // 3: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange
	(*InventoryInfo)(nil),                                        // 4: ocsf.v1_1_0.events.discovery.InventoryInfo
	(*RegistryValueInfo)(nil),                                    // 5: ocsf.v1_1_0.events.discovery.RegistryValueInfo
	(*DiscoveryResult)(nil),                                      // 6: ocsf.v1_1_0.events.discovery.DiscoveryResult
	(*Discovery)(nil),                                            // 7: ocsf.v1_1_0.events.discovery.Discovery
	(*RegistryKeyInfo)(nil),                                      // 8: ocsf.v1_1_0.events.discovery.RegistryKeyInfo
	(*ConfigState)(nil),                                          // 9: ocsf.v1_1_0.events.discovery.ConfigState
	(*objects.Device)(nil),                                       // 10: ocsf.v1_1_0.objects.Device
	(*objects.Api)(nil),                                          // 11: ocsf.v1_1_0.objects.Api
	(enums.PATCH_STATE_ACTIVITY_ID)(0),                           // 12: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	(*objects.Object)(nil),                                       // 13: ocsf.v1_1_0.objects.Object
	(*objects.Enrichment)(nil),                                   // 14: ocsf.v1_1_0.objects.Enrichment
	(*objects.Metadata)(nil),                                     // 15: ocsf.v1_1_0.objects.Metadata
	(enums.PATCH_STATE_TYPE_UID)(0),                              // 16: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	(enums.PATCH_STATE_CLASS_UID)(0),                             // 17: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	(enums.PATCH_STATE_SEVERITY_ID)(0),                           // 18: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	(*objects.Observable)(nil),                                   // 19: ocsf.v1_1_0.objects.Observable
	(enums.PATCH_STATE_STATUS_ID)(0),                             // 20: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	(*objects.Cloud)(nil),                                        // 21: ocsf.v1_1_0.objects.Cloud
	(enums.PATCH_STATE_CATEGORY_UID)(0),                          // 22: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	(*objects.KbArticle)(nil),                                    // 23: ocsf.v1_1_0.objects.KbArticle
	(enums.USER_INVENTORY_SEVERITY_ID)(0),                        // 24: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	(enums.USER_INVENTORY_STATUS_ID)(0),                          // 25: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	(enums.USER_INVENTORY_CLASS_UID)(0),                          // 26: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	(*objects.User)(nil),                                         // 27: ocsf.v1_1_0.objects.User
	(enums.USER_INVENTORY_ACTIVITY_ID)(0),                        // 28: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	(enums.USER_INVENTORY_TYPE_UID)(0),                           // 29: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	(*objects.Actor)(nil),                                        // 30: ocsf.v1_1_0.objects.Actor
	(enums.USER_INVENTORY_CATEGORY_UID)(0),                       // 31: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	(enums.PREFETCH_INFO_STATUS_ID)(0),                           // 32: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_STATUS_ID
	(enums.PREFETCH_INFO_TYPE_UID)(0),                            // 33: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_TYPE_UID
	(enums.PREFETCH_INFO_CATEGORY_UID)(0),                        // 34: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CATEGORY_UID
	(enums.PREFETCH_INFO_ACTIVITY_ID)(0),                         // 35: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_ACTIVITY_ID
	(enums.PREFETCH_INFO_SEVERITY_ID)(0),                         // 36: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_SEVERITY_ID
	(enums.PREFETCH_INFO_CLASS_UID)(0),                           // 37: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CLASS_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)(0),            // 38: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)(0),              // 39: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	(*objects.SecurityState)(nil),                                // 40: ocsf.v1_1_0.objects.SecurityState
	(enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)(0),              // 41: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)(0),            // 42: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)(0),      // 43: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)(0),           // 44: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)(0),               // 45: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)(0), // 46: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	(enums.INVENTORY_INFO_STATUS_ID)(0),                          // 47: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(enums.INVENTORY_INFO_ACTIVITY_ID)(0),                        // 48: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(enums.INVENTORY_INFO_CLASS_UID)(0),                          // 49: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(enums.INVENTORY_INFO_TYPE_UID)(0),                           // 50: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(enums.INVENTORY_INFO_SEVERITY_ID)(0),                        // 51: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(enums.INVENTORY_INFO_CATEGORY_UID)(0),                       // 52: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(enums.REGISTRY_VALUE_INFO_CATEGORY_UID)(0),                  // 53: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CATEGORY_UID
	(enums.REGISTRY_VALUE_INFO_ACTIVITY_ID)(0),                   // 54: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_ACTIVITY_ID
	(enums.REGISTRY_VALUE_INFO_CLASS_UID)(0),                     // 55: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CLASS_UID
	(enums.REGISTRY_VALUE_INFO_TYPE_UID)(0),                      // 56: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_TYPE_UID
	(*objects.RegValue)(nil),                                     // 57: ocsf.v1_1_0.objects.RegValue
	(enums.REGISTRY_VALUE_INFO_STATUS_ID)(0),                     // 58: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_STATUS_ID
	(enums.REGISTRY_VALUE_INFO_SEVERITY_ID)(0),                   // 59: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_SEVERITY_ID
	(enums.DISCOVERY_RESULT_CLASS_UID)(0),                        // 60: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	(enums.DISCOVERY_RESULT_TYPE_UID)(0),                         // 61: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	(enums.DISCOVERY_RESULT_STATUS_ID)(0),                        // 62: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	(enums.DISCOVERY_RESULT_ACTIVITY_ID)(0),                      // 63: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	(enums.DISCOVERY_RESULT_SEVERITY_ID)(0),                      // 64: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	(enums.DISCOVERY_RESULT_CATEGORY_UID)(0),                     // 65: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	(enums.DISCOVERY_SEVERITY_ID)(0),                             // 66: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(enums.DISCOVERY_STATUS_ID)(0),                               // 67: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(enums.DISCOVERY_CATEGORY_UID)(0),                            // 68: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	(enums.DISCOVERY_ACTIVITY_ID)(0),                             // 69: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(enums.DISCOVERY_TYPE_UID)(0),                                // 70: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(enums.DISCOVERY_CLASS_UID)(0),                               // 71: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(enums.REGISTRY_KEY_INFO_CLASS_UID)(0),                       // 72: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CLASS_UID
	(enums.REGISTRY_KEY_INFO_CATEGORY_UID)(0),                    // 73: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CATEGORY_UID
	(*objects.RegKey)(nil),                                       // 74: ocsf.v1_1_0.objects.RegKey
	(enums.REGISTRY_KEY_INFO_SEVERITY_ID)(0),                     // 75: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_SEVERITY_ID
	(enums.REGISTRY_KEY_INFO_STATUS_ID)(0),                       // 76: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_STATUS_ID
	(enums.REGISTRY_KEY_INFO_ACTIVITY_ID)(0),                     // 77: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_ACTIVITY_ID
	(enums.REGISTRY_KEY_INFO_TYPE_UID)(0),                        // 78: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_TYPE_UID
	(*objects.CisBenchmarkResult)(nil),                           // 79: ocsf.v1_1_0.objects.CisBenchmarkResult
	(enums.CONFIG_STATE_TYPE_UID)(0),                             // 80: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(enums.CONFIG_STATE_SEVERITY_ID)(0),                          // 81: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	(enums.CONFIG_STATE_STATUS_ID)(0),                            // 82: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	(enums.CONFIG_STATE_CLASS_UID)(0),                            // 83: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(enums.CONFIG_STATE_CATEGORY_UID)(0),                         // 84: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(enums.CONFIG_STATE_ACTIVITY_ID)(0),                          // 85: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
}
var file_ocsf_v1_1_0_events_discovery_discovery_proto_depIdxs = []int32{
	10,  // 0: ocsf.v1_1_0.events.discovery.PatchState.device:type_name -> ocsf.v1_1_0.objects.Device
	11,  // 1: ocsf.v1_1_0.events.discovery.PatchState.api:type_name -> ocsf.v1_1_0.objects.Api
	12,  // 2: ocsf.v1_1_0.events.discovery.PatchState.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	13,  // 3: ocsf.v1_1_0.events.discovery.PatchState.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	14,  // 4: ocsf.v1_1_0.events.discovery.PatchState.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	15,  // 5: ocsf.v1_1_0.events.discovery.PatchState.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	16,  // 6: ocsf.v1_1_0.events.discovery.PatchState.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	17,  // 7: ocsf.v1_1_0.events.discovery.PatchState.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	18,  // 8: ocsf.v1_1_0.events.discovery.PatchState.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	19,  // 9: ocsf.v1_1_0.events.discovery.PatchState.observables:type_name -> ocsf.v1_1_0.objects.Observable
	20,  // 10: ocsf.v1_1_0.events.discovery.PatchState.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	21,  // 11: ocsf.v1_1_0.events.discovery.PatchState.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	22,  // 12: ocsf.v1_1_0.events.discovery.PatchState.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	23,  // 13: ocsf.v1_1_0.events.discovery.PatchState.kb_article_list:type_name -> ocsf.v1_1_0.objects.KbArticle
	24,  // 14: ocsf.v1_1_0.events.discovery.UserInventory.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	25,  // 15: ocsf.v1_1_0.events.discovery.UserInventory.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	11,  // 16: ocsf.v1_1_0.events.discovery.UserInventory.api:type_name -> ocsf.v1_1_0.objects.Api
	26,  // 17: ocsf.v1_1_0.events.discovery.UserInventory.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	14,  // 18: ocsf.v1_1_0.events.discovery.UserInventory.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	27,  // 19: ocsf.v1_1_0.events.discovery.UserInventory.user:type_name -> ocsf.v1_1_0.objects.User
	28,  // 20: ocsf.v1_1_0.events.discovery.UserInventory.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	29,  // 21: ocsf.v1_1_0.events.discovery.UserInventory.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	13,  // 22: ocsf.v1_1_0.events.discovery.UserInventory.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	21,  // 23: ocsf.v1_1_0.events.discovery.UserInventory.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	30,  // 24: ocsf.v1_1_0.events.discovery.UserInventory.actor:type_name -> ocsf.v1_1_0.objects.Actor
	31,  // 25: ocsf.v1_1_0.events.discovery.UserInventory.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	15,  // 26: ocsf.v1_1_0.events.discovery.UserInventory.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	19,  // 27: ocsf.v1_1_0.events.discovery.UserInventory.observables:type_name -> ocsf.v1_1_0.objects.Observable
	19,  // 28: ocsf.v1_1_0.events.discovery.PrefetchInfo.observables:type_name -> ocsf.v1_1_0.objects.Observable
	11,  // 29: ocsf.v1_1_0.events.discovery.PrefetchInfo.api:type_name -> ocsf.v1_1_0.objects.Api
	32,  // 30: ocsf.v1_1_0.events.discovery.PrefetchInfo.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_STATUS_ID
	33,  // 31: ocsf.v1_1_0.events.discovery.PrefetchInfo.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_TYPE_UID
	34,  // 32: ocsf.v1_1_0.events.discovery.PrefetchInfo.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CATEGORY_UID
	10,  // 33: ocsf.v1_1_0.events.discovery.PrefetchInfo.device:type_name -> ocsf.v1_1_0.objects.Device
	21,  // 34: ocsf.v1_1_0.events.discovery.PrefetchInfo.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	14,  // 35: ocsf.v1_1_0.events.discovery.PrefetchInfo.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	35,  // 36: ocsf.v1_1_0.events.discovery.PrefetchInfo.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_ACTIVITY_ID
	15,  // 37: ocsf.v1_1_0.events.discovery.PrefetchInfo.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	30,  // 38: ocsf.v1_1_0.events.discovery.PrefetchInfo.actor:type_name -> ocsf.v1_1_0.objects.Actor
	13,  // 39: ocsf.v1_1_0.events.discovery.PrefetchInfo.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	36,  // 40: ocsf.v1_1_0.events.discovery.PrefetchInfo.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_SEVERITY_ID
	37,  // 41: ocsf.v1_1_0.events.discovery.PrefetchInfo.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CLASS_UID
	38,  // 42: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	39,  // 43: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	10,  // 44: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.device:type_name -> ocsf.v1_1_0.objects.Device
	40,  // 45: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.prev_security_states:type_name -> ocsf.v1_1_0.objects.SecurityState
	30,  // 46: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.actor:type_name -> ocsf.v1_1_0.objects.Actor
	15,  // 47: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	41,  // 48: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	14,  // 49: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	42,  // 50: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	13,  // 51: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	11,  // 52: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.api:type_name -> ocsf.v1_1_0.objects.Api
	43,  // 53: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.security_level_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	40,  // 54: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.security_states:type_name -> ocsf.v1_1_0.objects.SecurityState
	44,  // 55: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	19,  // 56: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.observables:type_name -> ocsf.v1_1_0.objects.Observable
	21,  // 57: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	45,  // 58: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	46,  // 59: ocsf.v1_1_0.events.discovery.DeviceConfigStateChange.prev_security_level_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	10,  // 60: ocsf.v1_1_0.events.discovery.InventoryInfo.device:type_name -> ocsf.v1_1_0.objects.Device
	15,  // 61: ocsf.v1_1_0.events.discovery.InventoryInfo.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	21,  // 62: ocsf.v1_1_0.events.discovery.InventoryInfo.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	47,  // 63: ocsf.v1_1_0.events.discovery.InventoryInfo.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	48,  // 64: ocsf.v1_1_0.events.discovery.InventoryInfo.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	14,  // 65: ocsf.v1_1_0.events.discovery.InventoryInfo.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	49,  // 66: ocsf.v1_1_0.events.discovery.InventoryInfo.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	50,  // 67: ocsf.v1_1_0.events.discovery.InventoryInfo.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	51,  // 68: ocsf.v1_1_0.events.discovery.InventoryInfo.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	11,  // 69: ocsf.v1_1_0.events.discovery.InventoryInfo.api:type_name -> ocsf.v1_1_0.objects.Api
	52,  // 70: ocsf.v1_1_0.events.discovery.InventoryInfo.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	30,  // 71: ocsf.v1_1_0.events.discovery.InventoryInfo.actor:type_name -> ocsf.v1_1_0.objects.Actor
	19,  // 72: ocsf.v1_1_0.events.discovery.InventoryInfo.observables:type_name -> ocsf.v1_1_0.objects.Observable
	13,  // 73: ocsf.v1_1_0.events.discovery.InventoryInfo.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	30,  // 74: ocsf.v1_1_0.events.discovery.RegistryValueInfo.actor:type_name -> ocsf.v1_1_0.objects.Actor
	21,  // 75: ocsf.v1_1_0.events.discovery.RegistryValueInfo.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	53,  // 76: ocsf.v1_1_0.events.discovery.RegistryValueInfo.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CATEGORY_UID
	19,  // 77: ocsf.v1_1_0.events.discovery.RegistryValueInfo.observables:type_name -> ocsf.v1_1_0.objects.Observable
	54,  // 78: ocsf.v1_1_0.events.discovery.RegistryValueInfo.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_ACTIVITY_ID
	15,  // 79: ocsf.v1_1_0.events.discovery.RegistryValueInfo.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	55,  // 80: ocsf.v1_1_0.events.discovery.RegistryValueInfo.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CLASS_UID
	13,  // 81: ocsf.v1_1_0.events.discovery.RegistryValueInfo.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	56,  // 82: ocsf.v1_1_0.events.discovery.RegistryValueInfo.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_TYPE_UID
	11,  // 83: ocsf.v1_1_0.events.discovery.RegistryValueInfo.api:type_name -> ocsf.v1_1_0.objects.Api
	57,  // 84: ocsf.v1_1_0.events.discovery.RegistryValueInfo.reg_value:type_name -> ocsf.v1_1_0.objects.RegValue
	14,  // 85: ocsf.v1_1_0.events.discovery.RegistryValueInfo.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	58,  // 86: ocsf.v1_1_0.events.discovery.RegistryValueInfo.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_STATUS_ID
	10,  // 87: ocsf.v1_1_0.events.discovery.RegistryValueInfo.device:type_name -> ocsf.v1_1_0.objects.Device
	59,  // 88: ocsf.v1_1_0.events.discovery.RegistryValueInfo.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_SEVERITY_ID
	15,  // 89: ocsf.v1_1_0.events.discovery.DiscoveryResult.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	30,  // 90: ocsf.v1_1_0.events.discovery.DiscoveryResult.actor:type_name -> ocsf.v1_1_0.objects.Actor
	10,  // 91: ocsf.v1_1_0.events.discovery.DiscoveryResult.device:type_name -> ocsf.v1_1_0.objects.Device
	21,  // 92: ocsf.v1_1_0.events.discovery.DiscoveryResult.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	60,  // 93: ocsf.v1_1_0.events.discovery.DiscoveryResult.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	13,  // 94: ocsf.v1_1_0.events.discovery.DiscoveryResult.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	19,  // 95: ocsf.v1_1_0.events.discovery.DiscoveryResult.observables:type_name -> ocsf.v1_1_0.objects.Observable
	14,  // 96: ocsf.v1_1_0.events.discovery.DiscoveryResult.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	61,  // 97: ocsf.v1_1_0.events.discovery.DiscoveryResult.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	62,  // 98: ocsf.v1_1_0.events.discovery.DiscoveryResult.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	63,  // 99: ocsf.v1_1_0.events.discovery.DiscoveryResult.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	11,  // 100: ocsf.v1_1_0.events.discovery.DiscoveryResult.api:type_name -> ocsf.v1_1_0.objects.Api
	64,  // 101: ocsf.v1_1_0.events.discovery.DiscoveryResult.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	65,  // 102: ocsf.v1_1_0.events.discovery.DiscoveryResult.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	66,  // 103: ocsf.v1_1_0.events.discovery.Discovery.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	13,  // 104: ocsf.v1_1_0.events.discovery.Discovery.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	21,  // 105: ocsf.v1_1_0.events.discovery.Discovery.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	67,  // 106: ocsf.v1_1_0.events.discovery.Discovery.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_STATUS_ID
	14,  // 107: ocsf.v1_1_0.events.discovery.Discovery.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	11,  // 108: ocsf.v1_1_0.events.discovery.Discovery.api:type_name -> ocsf.v1_1_0.objects.Api
	68,  // 109: ocsf.v1_1_0.events.discovery.Discovery.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	15,  // 110: ocsf.v1_1_0.events.discovery.Discovery.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	19,  // 111: ocsf.v1_1_0.events.discovery.Discovery.observables:type_name -> ocsf.v1_1_0.objects.Observable
	69,  // 112: ocsf.v1_1_0.events.discovery.Discovery.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	70,  // 113: ocsf.v1_1_0.events.discovery.Discovery.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_TYPE_UID
	71,  // 114: ocsf.v1_1_0.events.discovery.Discovery.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CLASS_UID
	72,  // 115: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CLASS_UID
	14,  // 116: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	73,  // 117: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CATEGORY_UID
	74,  // 118: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.reg_key:type_name -> ocsf.v1_1_0.objects.RegKey
	11,  // 119: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.api:type_name -> ocsf.v1_1_0.objects.Api
	13,  // 120: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	75,  // 121: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_SEVERITY_ID
	15,  // 122: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	76,  // 123: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_STATUS_ID
	77,  // 124: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_ACTIVITY_ID
	21,  // 125: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	19,  // 126: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.observables:type_name -> ocsf.v1_1_0.objects.Observable
	78,  // 127: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_TYPE_UID
	30,  // 128: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.actor:type_name -> ocsf.v1_1_0.objects.Actor
	10,  // 129: ocsf.v1_1_0.events.discovery.RegistryKeyInfo.device:type_name -> ocsf.v1_1_0.objects.Device
	10,  // 130: ocsf.v1_1_0.events.discovery.ConfigState.device:type_name -> ocsf.v1_1_0.objects.Device
	79,  // 131: ocsf.v1_1_0.events.discovery.ConfigState.cis_benchmark_result:type_name -> ocsf.v1_1_0.objects.CisBenchmarkResult
	80,  // 132: ocsf.v1_1_0.events.discovery.ConfigState.type_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	81,  // 133: ocsf.v1_1_0.events.discovery.ConfigState.severity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	82,  // 134: ocsf.v1_1_0.events.discovery.ConfigState.status_id:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	21,  // 135: ocsf.v1_1_0.events.discovery.ConfigState.cloud:type_name -> ocsf.v1_1_0.objects.Cloud
	15,  // 136: ocsf.v1_1_0.events.discovery.ConfigState.metadata:type_name -> ocsf.v1_1_0.objects.Metadata
	83,  // 137: ocsf.v1_1_0.events.discovery.ConfigState.class_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	14,  // 138: ocsf.v1_1_0.events.discovery.ConfigState.enrichments:type_name -> ocsf.v1_1_0.objects.Enrichment
	84,  // 139: ocsf.v1_1_0.events.discovery.ConfigState.category_uid:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	19,  // 140: ocsf.v1_1_0.events.discovery.ConfigState.observables:type_name -> ocsf.v1_1_0.objects.Observable
	11,  // 141: ocsf.v1_1_0.events.discovery.ConfigState.api:type_name -> ocsf.v1_1_0.objects.Api
	30,  // 142: ocsf.v1_1_0.events.discovery.ConfigState.actor:type_name -> ocsf.v1_1_0.objects.Actor
	85,  // 143: ocsf.v1_1_0.events.discovery.ConfigState.activity_id:type_name -> ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	13,  // 144: ocsf.v1_1_0.events.discovery.ConfigState.unmapped:type_name -> ocsf.v1_1_0.objects.Object
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_ocsf_v1_1_0_events_discovery_discovery_proto_init() }
func file_ocsf_v1_1_0_events_discovery_discovery_proto_init() {
	if File_ocsf_v1_1_0_events_discovery_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefetchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_1_0_events_discovery_discovery_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_1_0_events_discovery_discovery_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_1_0_events_discovery_discovery_proto_msgTypes,
	}.Build()
	File_ocsf_v1_1_0_events_discovery_discovery_proto = out.File
	file_ocsf_v1_1_0_events_discovery_discovery_proto_rawDesc = nil
	file_ocsf_v1_1_0_events_discovery_discovery_proto_goTypes = nil
	file_ocsf_v1_1_0_events_discovery_discovery_proto_depIdxs = nil
}
