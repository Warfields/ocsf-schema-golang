// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_1_0/events/discovery/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PREFETCH_INFO_CLASS_UID int32

const (
	PREFETCH_INFO_CLASS_UID_PREFETCH_INFO_CLASS_UID_UNSPECIFIED   PREFETCH_INFO_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	PREFETCH_INFO_CLASS_UID_PREFETCH_INFO_CLASS_UID_PREFETCH_INFO PREFETCH_INFO_CLASS_UID = 50019 // Type: OCSF_VALUE; EnumValue: 50019;
)

// Enum value maps for PREFETCH_INFO_CLASS_UID.
var (
	PREFETCH_INFO_CLASS_UID_name = map[int32]string{
		0:     "PREFETCH_INFO_CLASS_UID_UNSPECIFIED",
		50019: "PREFETCH_INFO_CLASS_UID_PREFETCH_INFO",
	}
	PREFETCH_INFO_CLASS_UID_value = map[string]int32{
		"PREFETCH_INFO_CLASS_UID_UNSPECIFIED":   0,
		"PREFETCH_INFO_CLASS_UID_PREFETCH_INFO": 50019,
	}
)

func (x PREFETCH_INFO_CLASS_UID) Enum() *PREFETCH_INFO_CLASS_UID {
	p := new(PREFETCH_INFO_CLASS_UID)
	*p = x
	return p
}

func (x PREFETCH_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[0].Descriptor()
}

func (PREFETCH_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[0]
}

func (x PREFETCH_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_CLASS_UID.Descriptor instead.
func (PREFETCH_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{0}
}

type DISCOVERY_RESULT_ACTIVITY_ID int32

const (
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN        DISCOVERY_RESULT_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_EXISTS         DISCOVERY_RESULT_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_PARTIAL        DISCOVERY_RESULT_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_DOES_NOT_EXIST DISCOVERY_RESULT_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_ERROR          DISCOVERY_RESULT_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_UNSUPPORTED    DISCOVERY_RESULT_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_OTHER          DISCOVERY_RESULT_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_ACTIVITY_ID.
var (
	DISCOVERY_RESULT_ACTIVITY_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_ACTIVITY_ID_EXISTS",
		2:  "DISCOVERY_RESULT_ACTIVITY_ID_PARTIAL",
		3:  "DISCOVERY_RESULT_ACTIVITY_ID_DOES_NOT_EXIST",
		4:  "DISCOVERY_RESULT_ACTIVITY_ID_ERROR",
		5:  "DISCOVERY_RESULT_ACTIVITY_ID_UNSUPPORTED",
		99: "DISCOVERY_RESULT_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_RESULT_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN":        0,
		"DISCOVERY_RESULT_ACTIVITY_ID_EXISTS":         1,
		"DISCOVERY_RESULT_ACTIVITY_ID_PARTIAL":        2,
		"DISCOVERY_RESULT_ACTIVITY_ID_DOES_NOT_EXIST": 3,
		"DISCOVERY_RESULT_ACTIVITY_ID_ERROR":          4,
		"DISCOVERY_RESULT_ACTIVITY_ID_UNSUPPORTED":    5,
		"DISCOVERY_RESULT_ACTIVITY_ID_OTHER":          99,
	}
)

func (x DISCOVERY_RESULT_ACTIVITY_ID) Enum() *DISCOVERY_RESULT_ACTIVITY_ID {
	p := new(DISCOVERY_RESULT_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[1].Descriptor()
}

func (DISCOVERY_RESULT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[1]
}

func (x DISCOVERY_RESULT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_RESULT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{1}
}

type DISCOVERY_ACTIVITY_ID int32

const (
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_UNKNOWN DISCOVERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_LOG     DISCOVERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_COLLECT DISCOVERY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_OTHER   DISCOVERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_ACTIVITY_ID.
var (
	DISCOVERY_ACTIVITY_ID_name = map[int32]string{
		0:  "DISCOVERY_ACTIVITY_ID_UNKNOWN",
		1:  "DISCOVERY_ACTIVITY_ID_LOG",
		2:  "DISCOVERY_ACTIVITY_ID_COLLECT",
		99: "DISCOVERY_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_ACTIVITY_ID_UNKNOWN": 0,
		"DISCOVERY_ACTIVITY_ID_LOG":     1,
		"DISCOVERY_ACTIVITY_ID_COLLECT": 2,
		"DISCOVERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DISCOVERY_ACTIVITY_ID) Enum() *DISCOVERY_ACTIVITY_ID {
	p := new(DISCOVERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[2].Descriptor()
}

func (DISCOVERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[2]
}

func (x DISCOVERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{2}
}

type REGISTRY_VALUE_INFO_ACTIVITY_ID int32

const (
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_UNKNOWN        REGISTRY_VALUE_INFO_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_EXISTS         REGISTRY_VALUE_INFO_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_PARTIAL        REGISTRY_VALUE_INFO_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_DOES_NOT_EXIST REGISTRY_VALUE_INFO_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_ERROR          REGISTRY_VALUE_INFO_ACTIVITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_UNSUPPORTED    REGISTRY_VALUE_INFO_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_INFO_ACTIVITY_ID_REGISTRY_VALUE_INFO_ACTIVITY_ID_OTHER          REGISTRY_VALUE_INFO_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_INFO_ACTIVITY_ID.
var (
	REGISTRY_VALUE_INFO_ACTIVITY_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_EXISTS",
		2:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_PARTIAL",
		3:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_DOES_NOT_EXIST",
		4:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_ERROR",
		5:  "REGISTRY_VALUE_INFO_ACTIVITY_ID_UNSUPPORTED",
		99: "REGISTRY_VALUE_INFO_ACTIVITY_ID_OTHER",
	}
	REGISTRY_VALUE_INFO_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_UNKNOWN":        0,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_EXISTS":         1,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_PARTIAL":        2,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_DOES_NOT_EXIST": 3,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_ERROR":          4,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_UNSUPPORTED":    5,
		"REGISTRY_VALUE_INFO_ACTIVITY_ID_OTHER":          99,
	}
)

func (x REGISTRY_VALUE_INFO_ACTIVITY_ID) Enum() *REGISTRY_VALUE_INFO_ACTIVITY_ID {
	p := new(REGISTRY_VALUE_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[3].Descriptor()
}

func (REGISTRY_VALUE_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[3]
}

func (x REGISTRY_VALUE_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_VALUE_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{3}
}

type INVENTORY_INFO_CATEGORY_UID int32

const (
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED INVENTORY_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_DISCOVERY   INVENTORY_INFO_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for INVENTORY_INFO_CATEGORY_UID.
var (
	INVENTORY_INFO_CATEGORY_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED",
		5: "INVENTORY_INFO_CATEGORY_UID_DISCOVERY",
	}
	INVENTORY_INFO_CATEGORY_UID_value = map[string]int32{
		"INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED": 0,
		"INVENTORY_INFO_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x INVENTORY_INFO_CATEGORY_UID) Enum() *INVENTORY_INFO_CATEGORY_UID {
	p := new(INVENTORY_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[4].Descriptor()
}

func (INVENTORY_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[4]
}

func (x INVENTORY_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CATEGORY_UID.Descriptor instead.
func (INVENTORY_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{4}
}

type PATCH_STATE_CATEGORY_UID int32

const (
	PATCH_STATE_CATEGORY_UID_PATCH_STATE_CATEGORY_UID_UNSPECIFIED PATCH_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PATCH_STATE_CATEGORY_UID_PATCH_STATE_CATEGORY_UID_DISCOVERY   PATCH_STATE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PATCH_STATE_CATEGORY_UID.
var (
	PATCH_STATE_CATEGORY_UID_name = map[int32]string{
		0: "PATCH_STATE_CATEGORY_UID_UNSPECIFIED",
		5: "PATCH_STATE_CATEGORY_UID_DISCOVERY",
	}
	PATCH_STATE_CATEGORY_UID_value = map[string]int32{
		"PATCH_STATE_CATEGORY_UID_UNSPECIFIED": 0,
		"PATCH_STATE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PATCH_STATE_CATEGORY_UID) Enum() *PATCH_STATE_CATEGORY_UID {
	p := new(PATCH_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x PATCH_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[5].Descriptor()
}

func (PATCH_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[5]
}

func (x PATCH_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_CATEGORY_UID.Descriptor instead.
func (PATCH_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{5}
}

type DISCOVERY_RESULT_CLASS_UID int32

const (
	DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED      DISCOVERY_RESULT_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT DISCOVERY_RESULT_CLASS_UID = 5000 // Type: OCSF_VALUE; EnumValue: 5000;
)

// Enum value maps for DISCOVERY_RESULT_CLASS_UID.
var (
	DISCOVERY_RESULT_CLASS_UID_name = map[int32]string{
		0:    "DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED",
		5000: "DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT",
	}
	DISCOVERY_RESULT_CLASS_UID_value = map[string]int32{
		"DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED":      0,
		"DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT": 5000,
	}
)

func (x DISCOVERY_RESULT_CLASS_UID) Enum() *DISCOVERY_RESULT_CLASS_UID {
	p := new(DISCOVERY_RESULT_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[6].Descriptor()
}

func (DISCOVERY_RESULT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[6]
}

func (x DISCOVERY_RESULT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_CLASS_UID.Descriptor instead.
func (DISCOVERY_RESULT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{6}
}

type USER_INVENTORY_CLASS_UID int32

const (
	USER_INVENTORY_CLASS_UID_USER_INVENTORY_CLASS_UID_UNSPECIFIED         USER_INVENTORY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	USER_INVENTORY_CLASS_UID_USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO USER_INVENTORY_CLASS_UID = 5003 // Type: OCSF_VALUE; EnumValue: 5003;
)

// Enum value maps for USER_INVENTORY_CLASS_UID.
var (
	USER_INVENTORY_CLASS_UID_name = map[int32]string{
		0:    "USER_INVENTORY_CLASS_UID_UNSPECIFIED",
		5003: "USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO",
	}
	USER_INVENTORY_CLASS_UID_value = map[string]int32{
		"USER_INVENTORY_CLASS_UID_UNSPECIFIED":         0,
		"USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO": 5003,
	}
)

func (x USER_INVENTORY_CLASS_UID) Enum() *USER_INVENTORY_CLASS_UID {
	p := new(USER_INVENTORY_CLASS_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[7].Descriptor()
}

func (USER_INVENTORY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[7]
}

func (x USER_INVENTORY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_CLASS_UID.Descriptor instead.
func (USER_INVENTORY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{7}
}

type REGISTRY_VALUE_INFO_CLASS_UID int32

const (
	REGISTRY_VALUE_INFO_CLASS_UID_REGISTRY_VALUE_INFO_CLASS_UID_UNSPECIFIED         REGISTRY_VALUE_INFO_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_INFO_CLASS_UID_REGISTRY_VALUE_INFO_CLASS_UID_REGISTRY_VALUE_INFO REGISTRY_VALUE_INFO_CLASS_UID = 5005 // Type: OCSF_VALUE; EnumValue: 5005;
)

// Enum value maps for REGISTRY_VALUE_INFO_CLASS_UID.
var (
	REGISTRY_VALUE_INFO_CLASS_UID_name = map[int32]string{
		0:    "REGISTRY_VALUE_INFO_CLASS_UID_UNSPECIFIED",
		5005: "REGISTRY_VALUE_INFO_CLASS_UID_REGISTRY_VALUE_INFO",
	}
	REGISTRY_VALUE_INFO_CLASS_UID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_CLASS_UID_UNSPECIFIED":         0,
		"REGISTRY_VALUE_INFO_CLASS_UID_REGISTRY_VALUE_INFO": 5005,
	}
)

func (x REGISTRY_VALUE_INFO_CLASS_UID) Enum() *REGISTRY_VALUE_INFO_CLASS_UID {
	p := new(REGISTRY_VALUE_INFO_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[8].Descriptor()
}

func (REGISTRY_VALUE_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[8]
}

func (x REGISTRY_VALUE_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_CLASS_UID.Descriptor instead.
func (REGISTRY_VALUE_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{8}
}

type DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN       DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW           DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM        DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH          DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL      DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL         DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER         DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL",
		2:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW",
		3:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM",
		4:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH",
		5:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL",
		6:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL",
		99: "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN":       0,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL": 1,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW":           2,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM":        3,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH":          4,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL":      5,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL":         6,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER":         99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[9].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[9]
}

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{9}
}

type PATCH_STATE_SEVERITY_ID int32

const (
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_UNKNOWN       PATCH_STATE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_INFORMATIONAL PATCH_STATE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_LOW           PATCH_STATE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_MEDIUM        PATCH_STATE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_HIGH          PATCH_STATE_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_CRITICAL      PATCH_STATE_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_FATAL         PATCH_STATE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_OTHER         PATCH_STATE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_SEVERITY_ID.
var (
	PATCH_STATE_SEVERITY_ID_name = map[int32]string{
		0:  "PATCH_STATE_SEVERITY_ID_UNKNOWN",
		1:  "PATCH_STATE_SEVERITY_ID_INFORMATIONAL",
		2:  "PATCH_STATE_SEVERITY_ID_LOW",
		3:  "PATCH_STATE_SEVERITY_ID_MEDIUM",
		4:  "PATCH_STATE_SEVERITY_ID_HIGH",
		5:  "PATCH_STATE_SEVERITY_ID_CRITICAL",
		6:  "PATCH_STATE_SEVERITY_ID_FATAL",
		99: "PATCH_STATE_SEVERITY_ID_OTHER",
	}
	PATCH_STATE_SEVERITY_ID_value = map[string]int32{
		"PATCH_STATE_SEVERITY_ID_UNKNOWN":       0,
		"PATCH_STATE_SEVERITY_ID_INFORMATIONAL": 1,
		"PATCH_STATE_SEVERITY_ID_LOW":           2,
		"PATCH_STATE_SEVERITY_ID_MEDIUM":        3,
		"PATCH_STATE_SEVERITY_ID_HIGH":          4,
		"PATCH_STATE_SEVERITY_ID_CRITICAL":      5,
		"PATCH_STATE_SEVERITY_ID_FATAL":         6,
		"PATCH_STATE_SEVERITY_ID_OTHER":         99,
	}
)

func (x PATCH_STATE_SEVERITY_ID) Enum() *PATCH_STATE_SEVERITY_ID {
	p := new(PATCH_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x PATCH_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[10].Descriptor()
}

func (PATCH_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[10]
}

func (x PATCH_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_SEVERITY_ID.Descriptor instead.
func (PATCH_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{10}
}

type PREFETCH_INFO_CATEGORY_UID int32

const (
	PREFETCH_INFO_CATEGORY_UID_PREFETCH_INFO_CATEGORY_UID_UNSPECIFIED PREFETCH_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PREFETCH_INFO_CATEGORY_UID_PREFETCH_INFO_CATEGORY_UID_DISCOVERY   PREFETCH_INFO_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PREFETCH_INFO_CATEGORY_UID.
var (
	PREFETCH_INFO_CATEGORY_UID_name = map[int32]string{
		0: "PREFETCH_INFO_CATEGORY_UID_UNSPECIFIED",
		5: "PREFETCH_INFO_CATEGORY_UID_DISCOVERY",
	}
	PREFETCH_INFO_CATEGORY_UID_value = map[string]int32{
		"PREFETCH_INFO_CATEGORY_UID_UNSPECIFIED": 0,
		"PREFETCH_INFO_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PREFETCH_INFO_CATEGORY_UID) Enum() *PREFETCH_INFO_CATEGORY_UID {
	p := new(PREFETCH_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x PREFETCH_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[11].Descriptor()
}

func (PREFETCH_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[11]
}

func (x PREFETCH_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_CATEGORY_UID.Descriptor instead.
func (PREFETCH_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{11}
}

type DISCOVERY_RESULT_CATEGORY_UID int32

const (
	DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED DISCOVERY_RESULT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY   DISCOVERY_RESULT_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DISCOVERY_RESULT_CATEGORY_UID.
var (
	DISCOVERY_RESULT_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED",
		5: "DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY",
	}
	DISCOVERY_RESULT_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED": 0,
		"DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DISCOVERY_RESULT_CATEGORY_UID) Enum() *DISCOVERY_RESULT_CATEGORY_UID {
	p := new(DISCOVERY_RESULT_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[12].Descriptor()
}

func (DISCOVERY_RESULT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[12]
}

func (x DISCOVERY_RESULT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_RESULT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{12}
}

type PATCH_STATE_ACTIVITY_ID int32

const (
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_UNKNOWN PATCH_STATE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_LOG     PATCH_STATE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_COLLECT PATCH_STATE_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_OTHER   PATCH_STATE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_ACTIVITY_ID.
var (
	PATCH_STATE_ACTIVITY_ID_name = map[int32]string{
		0:  "PATCH_STATE_ACTIVITY_ID_UNKNOWN",
		1:  "PATCH_STATE_ACTIVITY_ID_LOG",
		2:  "PATCH_STATE_ACTIVITY_ID_COLLECT",
		99: "PATCH_STATE_ACTIVITY_ID_OTHER",
	}
	PATCH_STATE_ACTIVITY_ID_value = map[string]int32{
		"PATCH_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"PATCH_STATE_ACTIVITY_ID_LOG":     1,
		"PATCH_STATE_ACTIVITY_ID_COLLECT": 2,
		"PATCH_STATE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PATCH_STATE_ACTIVITY_ID) Enum() *PATCH_STATE_ACTIVITY_ID {
	p := new(PATCH_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x PATCH_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[13].Descriptor()
}

func (PATCH_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[13]
}

func (x PATCH_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_ACTIVITY_ID.Descriptor instead.
func (PATCH_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{13}
}

type DISCOVERY_RESULT_TYPE_UID int32

const (
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED                     DISCOVERY_RESULT_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN        DISCOVERY_RESULT_TYPE_UID = 500000 // Type: OCSF_VALUE; EnumValue: 500000;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_EXISTS         DISCOVERY_RESULT_TYPE_UID = 500001 // Type: OCSF_VALUE; EnumValue: 500001;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_PARTIAL        DISCOVERY_RESULT_TYPE_UID = 500002 // Type: OCSF_VALUE; EnumValue: 500002;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_DOES_NOT_EXIST DISCOVERY_RESULT_TYPE_UID = 500003 // Type: OCSF_VALUE; EnumValue: 500003;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_ERROR          DISCOVERY_RESULT_TYPE_UID = 500004 // Type: OCSF_VALUE; EnumValue: 500004;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNSUPPORTED    DISCOVERY_RESULT_TYPE_UID = 500005 // Type: OCSF_VALUE; EnumValue: 500005;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER          DISCOVERY_RESULT_TYPE_UID = 500099 // Type: OCSF_VALUE; EnumValue: 500099;
)

// Enum value maps for DISCOVERY_RESULT_TYPE_UID.
var (
	DISCOVERY_RESULT_TYPE_UID_name = map[int32]string{
		0:      "DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED",
		500000: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN",
		500001: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_EXISTS",
		500002: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_PARTIAL",
		500003: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_DOES_NOT_EXIST",
		500004: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_ERROR",
		500005: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNSUPPORTED",
		500099: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER",
	}
	DISCOVERY_RESULT_TYPE_UID_value = map[string]int32{
		"DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED":                     0,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN":        500000,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_EXISTS":         500001,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_PARTIAL":        500002,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_DOES_NOT_EXIST": 500003,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_ERROR":          500004,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNSUPPORTED":    500005,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER":          500099,
	}
)

func (x DISCOVERY_RESULT_TYPE_UID) Enum() *DISCOVERY_RESULT_TYPE_UID {
	p := new(DISCOVERY_RESULT_TYPE_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[14].Descriptor()
}

func (DISCOVERY_RESULT_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[14]
}

func (x DISCOVERY_RESULT_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_TYPE_UID.Descriptor instead.
func (DISCOVERY_RESULT_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{14}
}

type CONFIG_STATE_SEVERITY_ID int32

const (
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_UNKNOWN       CONFIG_STATE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_INFORMATIONAL CONFIG_STATE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_LOW           CONFIG_STATE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_MEDIUM        CONFIG_STATE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_HIGH          CONFIG_STATE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_CRITICAL      CONFIG_STATE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_FATAL         CONFIG_STATE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_OTHER         CONFIG_STATE_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_SEVERITY_ID.
var (
	CONFIG_STATE_SEVERITY_ID_name = map[int32]string{
		0:  "CONFIG_STATE_SEVERITY_ID_UNKNOWN",
		1:  "CONFIG_STATE_SEVERITY_ID_INFORMATIONAL",
		2:  "CONFIG_STATE_SEVERITY_ID_LOW",
		3:  "CONFIG_STATE_SEVERITY_ID_MEDIUM",
		4:  "CONFIG_STATE_SEVERITY_ID_HIGH",
		5:  "CONFIG_STATE_SEVERITY_ID_CRITICAL",
		6:  "CONFIG_STATE_SEVERITY_ID_FATAL",
		99: "CONFIG_STATE_SEVERITY_ID_OTHER",
	}
	CONFIG_STATE_SEVERITY_ID_value = map[string]int32{
		"CONFIG_STATE_SEVERITY_ID_UNKNOWN":       0,
		"CONFIG_STATE_SEVERITY_ID_INFORMATIONAL": 1,
		"CONFIG_STATE_SEVERITY_ID_LOW":           2,
		"CONFIG_STATE_SEVERITY_ID_MEDIUM":        3,
		"CONFIG_STATE_SEVERITY_ID_HIGH":          4,
		"CONFIG_STATE_SEVERITY_ID_CRITICAL":      5,
		"CONFIG_STATE_SEVERITY_ID_FATAL":         6,
		"CONFIG_STATE_SEVERITY_ID_OTHER":         99,
	}
)

func (x CONFIG_STATE_SEVERITY_ID) Enum() *CONFIG_STATE_SEVERITY_ID {
	p := new(CONFIG_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[15].Descriptor()
}

func (CONFIG_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[15]
}

func (x CONFIG_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_SEVERITY_ID.Descriptor instead.
func (CONFIG_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{15}
}

type PREFETCH_INFO_SEVERITY_ID int32

const (
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_UNKNOWN       PREFETCH_INFO_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_INFORMATIONAL PREFETCH_INFO_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_LOW           PREFETCH_INFO_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_MEDIUM        PREFETCH_INFO_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_HIGH          PREFETCH_INFO_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_CRITICAL      PREFETCH_INFO_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_FATAL         PREFETCH_INFO_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PREFETCH_INFO_SEVERITY_ID_PREFETCH_INFO_SEVERITY_ID_OTHER         PREFETCH_INFO_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for PREFETCH_INFO_SEVERITY_ID.
var (
	PREFETCH_INFO_SEVERITY_ID_name = map[int32]string{
		0:  "PREFETCH_INFO_SEVERITY_ID_UNKNOWN",
		1:  "PREFETCH_INFO_SEVERITY_ID_INFORMATIONAL",
		2:  "PREFETCH_INFO_SEVERITY_ID_LOW",
		3:  "PREFETCH_INFO_SEVERITY_ID_MEDIUM",
		4:  "PREFETCH_INFO_SEVERITY_ID_HIGH",
		5:  "PREFETCH_INFO_SEVERITY_ID_CRITICAL",
		6:  "PREFETCH_INFO_SEVERITY_ID_FATAL",
		99: "PREFETCH_INFO_SEVERITY_ID_OTHER",
	}
	PREFETCH_INFO_SEVERITY_ID_value = map[string]int32{
		"PREFETCH_INFO_SEVERITY_ID_UNKNOWN":       0,
		"PREFETCH_INFO_SEVERITY_ID_INFORMATIONAL": 1,
		"PREFETCH_INFO_SEVERITY_ID_LOW":           2,
		"PREFETCH_INFO_SEVERITY_ID_MEDIUM":        3,
		"PREFETCH_INFO_SEVERITY_ID_HIGH":          4,
		"PREFETCH_INFO_SEVERITY_ID_CRITICAL":      5,
		"PREFETCH_INFO_SEVERITY_ID_FATAL":         6,
		"PREFETCH_INFO_SEVERITY_ID_OTHER":         99,
	}
)

func (x PREFETCH_INFO_SEVERITY_ID) Enum() *PREFETCH_INFO_SEVERITY_ID {
	p := new(PREFETCH_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x PREFETCH_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[16].Descriptor()
}

func (PREFETCH_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[16]
}

func (x PREFETCH_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_SEVERITY_ID.Descriptor instead.
func (PREFETCH_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{16}
}

type PREFETCH_INFO_STATUS_ID int32

const (
	PREFETCH_INFO_STATUS_ID_PREFETCH_INFO_STATUS_ID_UNKNOWN PREFETCH_INFO_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	PREFETCH_INFO_STATUS_ID_PREFETCH_INFO_STATUS_ID_SUCCESS PREFETCH_INFO_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PREFETCH_INFO_STATUS_ID_PREFETCH_INFO_STATUS_ID_FAILURE PREFETCH_INFO_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PREFETCH_INFO_STATUS_ID_PREFETCH_INFO_STATUS_ID_OTHER   PREFETCH_INFO_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PREFETCH_INFO_STATUS_ID.
var (
	PREFETCH_INFO_STATUS_ID_name = map[int32]string{
		0:  "PREFETCH_INFO_STATUS_ID_UNKNOWN",
		1:  "PREFETCH_INFO_STATUS_ID_SUCCESS",
		2:  "PREFETCH_INFO_STATUS_ID_FAILURE",
		99: "PREFETCH_INFO_STATUS_ID_OTHER",
	}
	PREFETCH_INFO_STATUS_ID_value = map[string]int32{
		"PREFETCH_INFO_STATUS_ID_UNKNOWN": 0,
		"PREFETCH_INFO_STATUS_ID_SUCCESS": 1,
		"PREFETCH_INFO_STATUS_ID_FAILURE": 2,
		"PREFETCH_INFO_STATUS_ID_OTHER":   99,
	}
)

func (x PREFETCH_INFO_STATUS_ID) Enum() *PREFETCH_INFO_STATUS_ID {
	p := new(PREFETCH_INFO_STATUS_ID)
	*p = x
	return p
}

func (x PREFETCH_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[17].Descriptor()
}

func (PREFETCH_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[17]
}

func (x PREFETCH_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_STATUS_ID.Descriptor instead.
func (PREFETCH_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{17}
}

type DISCOVERY_RESULT_SEVERITY_ID int32

const (
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN       DISCOVERY_RESULT_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL DISCOVERY_RESULT_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_LOW           DISCOVERY_RESULT_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_MEDIUM        DISCOVERY_RESULT_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_HIGH          DISCOVERY_RESULT_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_CRITICAL      DISCOVERY_RESULT_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_FATAL         DISCOVERY_RESULT_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_OTHER         DISCOVERY_RESULT_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_SEVERITY_ID.
var (
	DISCOVERY_RESULT_SEVERITY_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL",
		2:  "DISCOVERY_RESULT_SEVERITY_ID_LOW",
		3:  "DISCOVERY_RESULT_SEVERITY_ID_MEDIUM",
		4:  "DISCOVERY_RESULT_SEVERITY_ID_HIGH",
		5:  "DISCOVERY_RESULT_SEVERITY_ID_CRITICAL",
		6:  "DISCOVERY_RESULT_SEVERITY_ID_FATAL",
		99: "DISCOVERY_RESULT_SEVERITY_ID_OTHER",
	}
	DISCOVERY_RESULT_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL": 1,
		"DISCOVERY_RESULT_SEVERITY_ID_LOW":           2,
		"DISCOVERY_RESULT_SEVERITY_ID_MEDIUM":        3,
		"DISCOVERY_RESULT_SEVERITY_ID_HIGH":          4,
		"DISCOVERY_RESULT_SEVERITY_ID_CRITICAL":      5,
		"DISCOVERY_RESULT_SEVERITY_ID_FATAL":         6,
		"DISCOVERY_RESULT_SEVERITY_ID_OTHER":         99,
	}
)

func (x DISCOVERY_RESULT_SEVERITY_ID) Enum() *DISCOVERY_RESULT_SEVERITY_ID {
	p := new(DISCOVERY_RESULT_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[18].Descriptor()
}

func (DISCOVERY_RESULT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[18]
}

func (x DISCOVERY_RESULT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_RESULT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{18}
}

type INVENTORY_INFO_ACTIVITY_ID int32

const (
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_UNKNOWN INVENTORY_INFO_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_LOG     INVENTORY_INFO_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_COLLECT INVENTORY_INFO_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_OTHER   INVENTORY_INFO_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INVENTORY_INFO_ACTIVITY_ID.
var (
	INVENTORY_INFO_ACTIVITY_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_ACTIVITY_ID_UNKNOWN",
		1:  "INVENTORY_INFO_ACTIVITY_ID_LOG",
		2:  "INVENTORY_INFO_ACTIVITY_ID_COLLECT",
		99: "INVENTORY_INFO_ACTIVITY_ID_OTHER",
	}
	INVENTORY_INFO_ACTIVITY_ID_value = map[string]int32{
		"INVENTORY_INFO_ACTIVITY_ID_UNKNOWN": 0,
		"INVENTORY_INFO_ACTIVITY_ID_LOG":     1,
		"INVENTORY_INFO_ACTIVITY_ID_COLLECT": 2,
		"INVENTORY_INFO_ACTIVITY_ID_OTHER":   99,
	}
)

func (x INVENTORY_INFO_ACTIVITY_ID) Enum() *INVENTORY_INFO_ACTIVITY_ID {
	p := new(INVENTORY_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[19].Descriptor()
}

func (INVENTORY_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[19]
}

func (x INVENTORY_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_ACTIVITY_ID.Descriptor instead.
func (INVENTORY_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{19}
}

type USER_INVENTORY_STATUS_ID int32

const (
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_UNKNOWN USER_INVENTORY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_SUCCESS USER_INVENTORY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_FAILURE USER_INVENTORY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_OTHER   USER_INVENTORY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_STATUS_ID.
var (
	USER_INVENTORY_STATUS_ID_name = map[int32]string{
		0:  "USER_INVENTORY_STATUS_ID_UNKNOWN",
		1:  "USER_INVENTORY_STATUS_ID_SUCCESS",
		2:  "USER_INVENTORY_STATUS_ID_FAILURE",
		99: "USER_INVENTORY_STATUS_ID_OTHER",
	}
	USER_INVENTORY_STATUS_ID_value = map[string]int32{
		"USER_INVENTORY_STATUS_ID_UNKNOWN": 0,
		"USER_INVENTORY_STATUS_ID_SUCCESS": 1,
		"USER_INVENTORY_STATUS_ID_FAILURE": 2,
		"USER_INVENTORY_STATUS_ID_OTHER":   99,
	}
)

func (x USER_INVENTORY_STATUS_ID) Enum() *USER_INVENTORY_STATUS_ID {
	p := new(USER_INVENTORY_STATUS_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[20].Descriptor()
}

func (USER_INVENTORY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[20]
}

func (x USER_INVENTORY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_STATUS_ID.Descriptor instead.
func (USER_INVENTORY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{20}
}

type PATCH_STATE_STATUS_ID int32

const (
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_UNKNOWN PATCH_STATE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_SUCCESS PATCH_STATE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_FAILURE PATCH_STATE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_OTHER   PATCH_STATE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_STATUS_ID.
var (
	PATCH_STATE_STATUS_ID_name = map[int32]string{
		0:  "PATCH_STATE_STATUS_ID_UNKNOWN",
		1:  "PATCH_STATE_STATUS_ID_SUCCESS",
		2:  "PATCH_STATE_STATUS_ID_FAILURE",
		99: "PATCH_STATE_STATUS_ID_OTHER",
	}
	PATCH_STATE_STATUS_ID_value = map[string]int32{
		"PATCH_STATE_STATUS_ID_UNKNOWN": 0,
		"PATCH_STATE_STATUS_ID_SUCCESS": 1,
		"PATCH_STATE_STATUS_ID_FAILURE": 2,
		"PATCH_STATE_STATUS_ID_OTHER":   99,
	}
)

func (x PATCH_STATE_STATUS_ID) Enum() *PATCH_STATE_STATUS_ID {
	p := new(PATCH_STATE_STATUS_ID)
	*p = x
	return p
}

func (x PATCH_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[21].Descriptor()
}

func (PATCH_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[21]
}

func (x PATCH_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_STATUS_ID.Descriptor instead.
func (PATCH_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{21}
}

type INVENTORY_INFO_CLASS_UID int32

const (
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_UNSPECIFIED           INVENTORY_INFO_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO INVENTORY_INFO_CLASS_UID = 5001 // Type: OCSF_VALUE; EnumValue: 5001;
)

// Enum value maps for INVENTORY_INFO_CLASS_UID.
var (
	INVENTORY_INFO_CLASS_UID_name = map[int32]string{
		0:    "INVENTORY_INFO_CLASS_UID_UNSPECIFIED",
		5001: "INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO",
	}
	INVENTORY_INFO_CLASS_UID_value = map[string]int32{
		"INVENTORY_INFO_CLASS_UID_UNSPECIFIED":           0,
		"INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO": 5001,
	}
)

func (x INVENTORY_INFO_CLASS_UID) Enum() *INVENTORY_INFO_CLASS_UID {
	p := new(INVENTORY_INFO_CLASS_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[22].Descriptor()
}

func (INVENTORY_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[22]
}

func (x INVENTORY_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CLASS_UID.Descriptor instead.
func (INVENTORY_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{22}
}

type DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN     DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE      DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK     DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER       DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE",
		2:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK",
		3:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED",
		99: "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN":     0,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE":      1,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK":     2,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED": 3,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER":       99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[23].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[23]
}

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{23}
}

type REGISTRY_KEY_INFO_TYPE_UID int32

const (
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_UNSPECIFIED                      REGISTRY_KEY_INFO_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNKNOWN        REGISTRY_KEY_INFO_TYPE_UID = 500400 // EnumValue: 500400; Type: OCSF_VALUE;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_EXISTS         REGISTRY_KEY_INFO_TYPE_UID = 500401 // Type: OCSF_VALUE; EnumValue: 500401;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_PARTIAL        REGISTRY_KEY_INFO_TYPE_UID = 500402 // Type: OCSF_VALUE; EnumValue: 500402;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_DOES_NOT_EXIST REGISTRY_KEY_INFO_TYPE_UID = 500403 // Type: OCSF_VALUE; EnumValue: 500403;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_ERROR          REGISTRY_KEY_INFO_TYPE_UID = 500404 // Type: OCSF_VALUE; EnumValue: 500404;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNSUPPORTED    REGISTRY_KEY_INFO_TYPE_UID = 500405 // Type: OCSF_VALUE; EnumValue: 500405;
	REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_OTHER          REGISTRY_KEY_INFO_TYPE_UID = 500499 // Type: OCSF_VALUE; EnumValue: 500499;
)

// Enum value maps for REGISTRY_KEY_INFO_TYPE_UID.
var (
	REGISTRY_KEY_INFO_TYPE_UID_name = map[int32]string{
		0:      "REGISTRY_KEY_INFO_TYPE_UID_UNSPECIFIED",
		500400: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNKNOWN",
		500401: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_EXISTS",
		500402: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_PARTIAL",
		500403: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_DOES_NOT_EXIST",
		500404: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_ERROR",
		500405: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNSUPPORTED",
		500499: "REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_OTHER",
	}
	REGISTRY_KEY_INFO_TYPE_UID_value = map[string]int32{
		"REGISTRY_KEY_INFO_TYPE_UID_UNSPECIFIED":                      0,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNKNOWN":        500400,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_EXISTS":         500401,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_PARTIAL":        500402,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_DOES_NOT_EXIST": 500403,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_ERROR":          500404,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_UNSUPPORTED":    500405,
		"REGISTRY_KEY_INFO_TYPE_UID_REGISTRY_KEY_INFO_OTHER":          500499,
	}
)

func (x REGISTRY_KEY_INFO_TYPE_UID) Enum() *REGISTRY_KEY_INFO_TYPE_UID {
	p := new(REGISTRY_KEY_INFO_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[24].Descriptor()
}

func (REGISTRY_KEY_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[24]
}

func (x REGISTRY_KEY_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_TYPE_UID.Descriptor instead.
func (REGISTRY_KEY_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{24}
}

type DISCOVERY_STATUS_ID int32

const (
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_UNKNOWN DISCOVERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_SUCCESS DISCOVERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_FAILURE DISCOVERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_OTHER   DISCOVERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_STATUS_ID.
var (
	DISCOVERY_STATUS_ID_name = map[int32]string{
		0:  "DISCOVERY_STATUS_ID_UNKNOWN",
		1:  "DISCOVERY_STATUS_ID_SUCCESS",
		2:  "DISCOVERY_STATUS_ID_FAILURE",
		99: "DISCOVERY_STATUS_ID_OTHER",
	}
	DISCOVERY_STATUS_ID_value = map[string]int32{
		"DISCOVERY_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_STATUS_ID_SUCCESS": 1,
		"DISCOVERY_STATUS_ID_FAILURE": 2,
		"DISCOVERY_STATUS_ID_OTHER":   99,
	}
)

func (x DISCOVERY_STATUS_ID) Enum() *DISCOVERY_STATUS_ID {
	p := new(DISCOVERY_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[25].Descriptor()
}

func (DISCOVERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[25]
}

func (x DISCOVERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_STATUS_ID.Descriptor instead.
func (DISCOVERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{25}
}

type INVENTORY_INFO_TYPE_UID int32

const (
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_UNSPECIFIED                   INVENTORY_INFO_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN INVENTORY_INFO_TYPE_UID = 500100 // Type: OCSF_VALUE; EnumValue: 500100;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG     INVENTORY_INFO_TYPE_UID = 500101 // Type: OCSF_VALUE; EnumValue: 500101;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT INVENTORY_INFO_TYPE_UID = 500102 // Type: OCSF_VALUE; EnumValue: 500102;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER   INVENTORY_INFO_TYPE_UID = 500199 // EnumValue: 500199; Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_TYPE_UID.
var (
	INVENTORY_INFO_TYPE_UID_name = map[int32]string{
		0:      "INVENTORY_INFO_TYPE_UID_UNSPECIFIED",
		500100: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN",
		500101: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG",
		500102: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT",
		500199: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER",
	}
	INVENTORY_INFO_TYPE_UID_value = map[string]int32{
		"INVENTORY_INFO_TYPE_UID_UNSPECIFIED":                   0,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN": 500100,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG":     500101,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT": 500102,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER":   500199,
	}
)

func (x INVENTORY_INFO_TYPE_UID) Enum() *INVENTORY_INFO_TYPE_UID {
	p := new(INVENTORY_INFO_TYPE_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[26].Descriptor()
}

func (INVENTORY_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[26]
}

func (x INVENTORY_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_TYPE_UID.Descriptor instead.
func (INVENTORY_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{26}
}

type DEVICE_CONFIG_STATE_CHANGE_STATUS_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER   DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_STATUS_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS",
		2:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE",
		99: "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN": 0,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS": 1,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE": 2,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER":   99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_STATUS_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[27].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[27]
}

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_STATUS_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{27}
}

type REGISTRY_VALUE_INFO_CATEGORY_UID int32

const (
	REGISTRY_VALUE_INFO_CATEGORY_UID_REGISTRY_VALUE_INFO_CATEGORY_UID_UNSPECIFIED REGISTRY_VALUE_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_INFO_CATEGORY_UID_REGISTRY_VALUE_INFO_CATEGORY_UID_DISCOVERY   REGISTRY_VALUE_INFO_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for REGISTRY_VALUE_INFO_CATEGORY_UID.
var (
	REGISTRY_VALUE_INFO_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_INFO_CATEGORY_UID_UNSPECIFIED",
		5: "REGISTRY_VALUE_INFO_CATEGORY_UID_DISCOVERY",
	}
	REGISTRY_VALUE_INFO_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_CATEGORY_UID_UNSPECIFIED": 0,
		"REGISTRY_VALUE_INFO_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x REGISTRY_VALUE_INFO_CATEGORY_UID) Enum() *REGISTRY_VALUE_INFO_CATEGORY_UID {
	p := new(REGISTRY_VALUE_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[28].Descriptor()
}

func (REGISTRY_VALUE_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[28]
}

func (x REGISTRY_VALUE_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_CATEGORY_UID.Descriptor instead.
func (REGISTRY_VALUE_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{28}
}

type USER_INVENTORY_CATEGORY_UID int32

const (
	USER_INVENTORY_CATEGORY_UID_USER_INVENTORY_CATEGORY_UID_UNSPECIFIED USER_INVENTORY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	USER_INVENTORY_CATEGORY_UID_USER_INVENTORY_CATEGORY_UID_DISCOVERY   USER_INVENTORY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for USER_INVENTORY_CATEGORY_UID.
var (
	USER_INVENTORY_CATEGORY_UID_name = map[int32]string{
		0: "USER_INVENTORY_CATEGORY_UID_UNSPECIFIED",
		5: "USER_INVENTORY_CATEGORY_UID_DISCOVERY",
	}
	USER_INVENTORY_CATEGORY_UID_value = map[string]int32{
		"USER_INVENTORY_CATEGORY_UID_UNSPECIFIED": 0,
		"USER_INVENTORY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x USER_INVENTORY_CATEGORY_UID) Enum() *USER_INVENTORY_CATEGORY_UID {
	p := new(USER_INVENTORY_CATEGORY_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[29].Descriptor()
}

func (USER_INVENTORY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[29]
}

func (x USER_INVENTORY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_CATEGORY_UID.Descriptor instead.
func (USER_INVENTORY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{29}
}

type DISCOVERY_SEVERITY_ID int32

const (
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_UNKNOWN       DISCOVERY_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_INFORMATIONAL DISCOVERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_LOW           DISCOVERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_MEDIUM        DISCOVERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_HIGH          DISCOVERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_CRITICAL      DISCOVERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_FATAL         DISCOVERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_OTHER         DISCOVERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_SEVERITY_ID.
var (
	DISCOVERY_SEVERITY_ID_name = map[int32]string{
		0:  "DISCOVERY_SEVERITY_ID_UNKNOWN",
		1:  "DISCOVERY_SEVERITY_ID_INFORMATIONAL",
		2:  "DISCOVERY_SEVERITY_ID_LOW",
		3:  "DISCOVERY_SEVERITY_ID_MEDIUM",
		4:  "DISCOVERY_SEVERITY_ID_HIGH",
		5:  "DISCOVERY_SEVERITY_ID_CRITICAL",
		6:  "DISCOVERY_SEVERITY_ID_FATAL",
		99: "DISCOVERY_SEVERITY_ID_OTHER",
	}
	DISCOVERY_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_SEVERITY_ID_INFORMATIONAL": 1,
		"DISCOVERY_SEVERITY_ID_LOW":           2,
		"DISCOVERY_SEVERITY_ID_MEDIUM":        3,
		"DISCOVERY_SEVERITY_ID_HIGH":          4,
		"DISCOVERY_SEVERITY_ID_CRITICAL":      5,
		"DISCOVERY_SEVERITY_ID_FATAL":         6,
		"DISCOVERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x DISCOVERY_SEVERITY_ID) Enum() *DISCOVERY_SEVERITY_ID {
	p := new(DISCOVERY_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[30].Descriptor()
}

func (DISCOVERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[30]
}

func (x DISCOVERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{30}
}

type PREFETCH_INFO_ACTIVITY_ID int32

const (
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_UNKNOWN        PREFETCH_INFO_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_EXISTS         PREFETCH_INFO_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_PARTIAL        PREFETCH_INFO_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_DOES_NOT_EXIST PREFETCH_INFO_ACTIVITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_ERROR          PREFETCH_INFO_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_UNSUPPORTED    PREFETCH_INFO_ACTIVITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	PREFETCH_INFO_ACTIVITY_ID_PREFETCH_INFO_ACTIVITY_ID_OTHER          PREFETCH_INFO_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PREFETCH_INFO_ACTIVITY_ID.
var (
	PREFETCH_INFO_ACTIVITY_ID_name = map[int32]string{
		0:  "PREFETCH_INFO_ACTIVITY_ID_UNKNOWN",
		1:  "PREFETCH_INFO_ACTIVITY_ID_EXISTS",
		2:  "PREFETCH_INFO_ACTIVITY_ID_PARTIAL",
		3:  "PREFETCH_INFO_ACTIVITY_ID_DOES_NOT_EXIST",
		4:  "PREFETCH_INFO_ACTIVITY_ID_ERROR",
		5:  "PREFETCH_INFO_ACTIVITY_ID_UNSUPPORTED",
		99: "PREFETCH_INFO_ACTIVITY_ID_OTHER",
	}
	PREFETCH_INFO_ACTIVITY_ID_value = map[string]int32{
		"PREFETCH_INFO_ACTIVITY_ID_UNKNOWN":        0,
		"PREFETCH_INFO_ACTIVITY_ID_EXISTS":         1,
		"PREFETCH_INFO_ACTIVITY_ID_PARTIAL":        2,
		"PREFETCH_INFO_ACTIVITY_ID_DOES_NOT_EXIST": 3,
		"PREFETCH_INFO_ACTIVITY_ID_ERROR":          4,
		"PREFETCH_INFO_ACTIVITY_ID_UNSUPPORTED":    5,
		"PREFETCH_INFO_ACTIVITY_ID_OTHER":          99,
	}
)

func (x PREFETCH_INFO_ACTIVITY_ID) Enum() *PREFETCH_INFO_ACTIVITY_ID {
	p := new(PREFETCH_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x PREFETCH_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[31].Descriptor()
}

func (PREFETCH_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[31]
}

func (x PREFETCH_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_ACTIVITY_ID.Descriptor instead.
func (PREFETCH_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{31}
}

type REGISTRY_VALUE_INFO_SEVERITY_ID int32

const (
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_UNKNOWN       REGISTRY_VALUE_INFO_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_INFORMATIONAL REGISTRY_VALUE_INFO_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_LOW           REGISTRY_VALUE_INFO_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_MEDIUM        REGISTRY_VALUE_INFO_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_HIGH          REGISTRY_VALUE_INFO_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_CRITICAL      REGISTRY_VALUE_INFO_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_FATAL         REGISTRY_VALUE_INFO_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_VALUE_INFO_SEVERITY_ID_REGISTRY_VALUE_INFO_SEVERITY_ID_OTHER         REGISTRY_VALUE_INFO_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_INFO_SEVERITY_ID.
var (
	REGISTRY_VALUE_INFO_SEVERITY_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_INFO_SEVERITY_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_INFO_SEVERITY_ID_INFORMATIONAL",
		2:  "REGISTRY_VALUE_INFO_SEVERITY_ID_LOW",
		3:  "REGISTRY_VALUE_INFO_SEVERITY_ID_MEDIUM",
		4:  "REGISTRY_VALUE_INFO_SEVERITY_ID_HIGH",
		5:  "REGISTRY_VALUE_INFO_SEVERITY_ID_CRITICAL",
		6:  "REGISTRY_VALUE_INFO_SEVERITY_ID_FATAL",
		99: "REGISTRY_VALUE_INFO_SEVERITY_ID_OTHER",
	}
	REGISTRY_VALUE_INFO_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_INFORMATIONAL": 1,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_LOW":           2,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_MEDIUM":        3,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_HIGH":          4,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_CRITICAL":      5,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_FATAL":         6,
		"REGISTRY_VALUE_INFO_SEVERITY_ID_OTHER":         99,
	}
)

func (x REGISTRY_VALUE_INFO_SEVERITY_ID) Enum() *REGISTRY_VALUE_INFO_SEVERITY_ID {
	p := new(REGISTRY_VALUE_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[32].Descriptor()
}

func (REGISTRY_VALUE_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[32]
}

func (x REGISTRY_VALUE_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_SEVERITY_ID.Descriptor instead.
func (REGISTRY_VALUE_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{32}
}

type REGISTRY_KEY_INFO_CATEGORY_UID int32

const (
	REGISTRY_KEY_INFO_CATEGORY_UID_REGISTRY_KEY_INFO_CATEGORY_UID_UNSPECIFIED REGISTRY_KEY_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_INFO_CATEGORY_UID_REGISTRY_KEY_INFO_CATEGORY_UID_DISCOVERY   REGISTRY_KEY_INFO_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for REGISTRY_KEY_INFO_CATEGORY_UID.
var (
	REGISTRY_KEY_INFO_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_KEY_INFO_CATEGORY_UID_UNSPECIFIED",
		5: "REGISTRY_KEY_INFO_CATEGORY_UID_DISCOVERY",
	}
	REGISTRY_KEY_INFO_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_KEY_INFO_CATEGORY_UID_UNSPECIFIED": 0,
		"REGISTRY_KEY_INFO_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x REGISTRY_KEY_INFO_CATEGORY_UID) Enum() *REGISTRY_KEY_INFO_CATEGORY_UID {
	p := new(REGISTRY_KEY_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[33].Descriptor()
}

func (REGISTRY_KEY_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[33]
}

func (x REGISTRY_KEY_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_CATEGORY_UID.Descriptor instead.
func (REGISTRY_KEY_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{33}
}

type USER_INVENTORY_TYPE_UID int32

const (
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_UNSPECIFIED                 USER_INVENTORY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN USER_INVENTORY_TYPE_UID = 500300 // Type: OCSF_VALUE; EnumValue: 500300;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG     USER_INVENTORY_TYPE_UID = 500301 // Type: OCSF_VALUE; EnumValue: 500301;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT USER_INVENTORY_TYPE_UID = 500302 // Type: OCSF_VALUE; EnumValue: 500302;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER   USER_INVENTORY_TYPE_UID = 500399 // Type: OCSF_VALUE; EnumValue: 500399;
)

// Enum value maps for USER_INVENTORY_TYPE_UID.
var (
	USER_INVENTORY_TYPE_UID_name = map[int32]string{
		0:      "USER_INVENTORY_TYPE_UID_UNSPECIFIED",
		500300: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN",
		500301: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG",
		500302: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT",
		500399: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER",
	}
	USER_INVENTORY_TYPE_UID_value = map[string]int32{
		"USER_INVENTORY_TYPE_UID_UNSPECIFIED":                 0,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN": 500300,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG":     500301,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT": 500302,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER":   500399,
	}
)

func (x USER_INVENTORY_TYPE_UID) Enum() *USER_INVENTORY_TYPE_UID {
	p := new(USER_INVENTORY_TYPE_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[34].Descriptor()
}

func (USER_INVENTORY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[34]
}

func (x USER_INVENTORY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_TYPE_UID.Descriptor instead.
func (USER_INVENTORY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{34}
}

type REGISTRY_KEY_INFO_SEVERITY_ID int32

const (
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_UNKNOWN       REGISTRY_KEY_INFO_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_INFORMATIONAL REGISTRY_KEY_INFO_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_LOW           REGISTRY_KEY_INFO_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_MEDIUM        REGISTRY_KEY_INFO_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_HIGH          REGISTRY_KEY_INFO_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_CRITICAL      REGISTRY_KEY_INFO_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_FATAL         REGISTRY_KEY_INFO_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_KEY_INFO_SEVERITY_ID_REGISTRY_KEY_INFO_SEVERITY_ID_OTHER         REGISTRY_KEY_INFO_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_KEY_INFO_SEVERITY_ID.
var (
	REGISTRY_KEY_INFO_SEVERITY_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_INFO_SEVERITY_ID_UNKNOWN",
		1:  "REGISTRY_KEY_INFO_SEVERITY_ID_INFORMATIONAL",
		2:  "REGISTRY_KEY_INFO_SEVERITY_ID_LOW",
		3:  "REGISTRY_KEY_INFO_SEVERITY_ID_MEDIUM",
		4:  "REGISTRY_KEY_INFO_SEVERITY_ID_HIGH",
		5:  "REGISTRY_KEY_INFO_SEVERITY_ID_CRITICAL",
		6:  "REGISTRY_KEY_INFO_SEVERITY_ID_FATAL",
		99: "REGISTRY_KEY_INFO_SEVERITY_ID_OTHER",
	}
	REGISTRY_KEY_INFO_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_KEY_INFO_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_KEY_INFO_SEVERITY_ID_INFORMATIONAL": 1,
		"REGISTRY_KEY_INFO_SEVERITY_ID_LOW":           2,
		"REGISTRY_KEY_INFO_SEVERITY_ID_MEDIUM":        3,
		"REGISTRY_KEY_INFO_SEVERITY_ID_HIGH":          4,
		"REGISTRY_KEY_INFO_SEVERITY_ID_CRITICAL":      5,
		"REGISTRY_KEY_INFO_SEVERITY_ID_FATAL":         6,
		"REGISTRY_KEY_INFO_SEVERITY_ID_OTHER":         99,
	}
)

func (x REGISTRY_KEY_INFO_SEVERITY_ID) Enum() *REGISTRY_KEY_INFO_SEVERITY_ID {
	p := new(REGISTRY_KEY_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[35].Descriptor()
}

func (REGISTRY_KEY_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[35]
}

func (x REGISTRY_KEY_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_SEVERITY_ID.Descriptor instead.
func (REGISTRY_KEY_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{35}
}

type REGISTRY_VALUE_INFO_TYPE_UID int32

const (
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_UNSPECIFIED                        REGISTRY_VALUE_INFO_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNKNOWN        REGISTRY_VALUE_INFO_TYPE_UID = 500500 // Type: OCSF_VALUE; EnumValue: 500500;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_EXISTS         REGISTRY_VALUE_INFO_TYPE_UID = 500501 // Type: OCSF_VALUE; EnumValue: 500501;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_PARTIAL        REGISTRY_VALUE_INFO_TYPE_UID = 500502 // EnumValue: 500502; Type: OCSF_VALUE;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_DOES_NOT_EXIST REGISTRY_VALUE_INFO_TYPE_UID = 500503 // EnumValue: 500503; Type: OCSF_VALUE;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_ERROR          REGISTRY_VALUE_INFO_TYPE_UID = 500504 // Type: OCSF_VALUE; EnumValue: 500504;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNSUPPORTED    REGISTRY_VALUE_INFO_TYPE_UID = 500505 // EnumValue: 500505; Type: OCSF_VALUE;
	REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_OTHER          REGISTRY_VALUE_INFO_TYPE_UID = 500599 // Type: OCSF_VALUE; EnumValue: 500599;
)

// Enum value maps for REGISTRY_VALUE_INFO_TYPE_UID.
var (
	REGISTRY_VALUE_INFO_TYPE_UID_name = map[int32]string{
		0:      "REGISTRY_VALUE_INFO_TYPE_UID_UNSPECIFIED",
		500500: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNKNOWN",
		500501: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_EXISTS",
		500502: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_PARTIAL",
		500503: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_DOES_NOT_EXIST",
		500504: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_ERROR",
		500505: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNSUPPORTED",
		500599: "REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_OTHER",
	}
	REGISTRY_VALUE_INFO_TYPE_UID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_TYPE_UID_UNSPECIFIED":                        0,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNKNOWN":        500500,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_EXISTS":         500501,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_PARTIAL":        500502,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_DOES_NOT_EXIST": 500503,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_ERROR":          500504,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_UNSUPPORTED":    500505,
		"REGISTRY_VALUE_INFO_TYPE_UID_REGISTRY_VALUE_INFO_OTHER":          500599,
	}
)

func (x REGISTRY_VALUE_INFO_TYPE_UID) Enum() *REGISTRY_VALUE_INFO_TYPE_UID {
	p := new(REGISTRY_VALUE_INFO_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[36].Descriptor()
}

func (REGISTRY_VALUE_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[36]
}

func (x REGISTRY_VALUE_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_TYPE_UID.Descriptor instead.
func (REGISTRY_VALUE_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{36}
}

type REGISTRY_KEY_INFO_CLASS_UID int32

const (
	REGISTRY_KEY_INFO_CLASS_UID_REGISTRY_KEY_INFO_CLASS_UID_UNSPECIFIED       REGISTRY_KEY_INFO_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_INFO_CLASS_UID_REGISTRY_KEY_INFO_CLASS_UID_REGISTRY_KEY_INFO REGISTRY_KEY_INFO_CLASS_UID = 5004 // Type: OCSF_VALUE; EnumValue: 5004;
)

// Enum value maps for REGISTRY_KEY_INFO_CLASS_UID.
var (
	REGISTRY_KEY_INFO_CLASS_UID_name = map[int32]string{
		0:    "REGISTRY_KEY_INFO_CLASS_UID_UNSPECIFIED",
		5004: "REGISTRY_KEY_INFO_CLASS_UID_REGISTRY_KEY_INFO",
	}
	REGISTRY_KEY_INFO_CLASS_UID_value = map[string]int32{
		"REGISTRY_KEY_INFO_CLASS_UID_UNSPECIFIED":       0,
		"REGISTRY_KEY_INFO_CLASS_UID_REGISTRY_KEY_INFO": 5004,
	}
)

func (x REGISTRY_KEY_INFO_CLASS_UID) Enum() *REGISTRY_KEY_INFO_CLASS_UID {
	p := new(REGISTRY_KEY_INFO_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[37].Descriptor()
}

func (REGISTRY_KEY_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[37]
}

func (x REGISTRY_KEY_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_CLASS_UID.Descriptor instead.
func (REGISTRY_KEY_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{37}
}

type DISCOVERY_RESULT_STATUS_ID int32

const (
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_UNKNOWN DISCOVERY_RESULT_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_SUCCESS DISCOVERY_RESULT_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_FAILURE DISCOVERY_RESULT_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_OTHER   DISCOVERY_RESULT_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_STATUS_ID.
var (
	DISCOVERY_RESULT_STATUS_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_STATUS_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_STATUS_ID_SUCCESS",
		2:  "DISCOVERY_RESULT_STATUS_ID_FAILURE",
		99: "DISCOVERY_RESULT_STATUS_ID_OTHER",
	}
	DISCOVERY_RESULT_STATUS_ID_value = map[string]int32{
		"DISCOVERY_RESULT_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_RESULT_STATUS_ID_SUCCESS": 1,
		"DISCOVERY_RESULT_STATUS_ID_FAILURE": 2,
		"DISCOVERY_RESULT_STATUS_ID_OTHER":   99,
	}
)

func (x DISCOVERY_RESULT_STATUS_ID) Enum() *DISCOVERY_RESULT_STATUS_ID {
	p := new(DISCOVERY_RESULT_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[38].Descriptor()
}

func (DISCOVERY_RESULT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[38]
}

func (x DISCOVERY_RESULT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_STATUS_ID.Descriptor instead.
func (DISCOVERY_RESULT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{38}
}

type INVENTORY_INFO_STATUS_ID int32

const (
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_UNKNOWN INVENTORY_INFO_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_SUCCESS INVENTORY_INFO_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_FAILURE INVENTORY_INFO_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_OTHER   INVENTORY_INFO_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INVENTORY_INFO_STATUS_ID.
var (
	INVENTORY_INFO_STATUS_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_STATUS_ID_UNKNOWN",
		1:  "INVENTORY_INFO_STATUS_ID_SUCCESS",
		2:  "INVENTORY_INFO_STATUS_ID_FAILURE",
		99: "INVENTORY_INFO_STATUS_ID_OTHER",
	}
	INVENTORY_INFO_STATUS_ID_value = map[string]int32{
		"INVENTORY_INFO_STATUS_ID_UNKNOWN": 0,
		"INVENTORY_INFO_STATUS_ID_SUCCESS": 1,
		"INVENTORY_INFO_STATUS_ID_FAILURE": 2,
		"INVENTORY_INFO_STATUS_ID_OTHER":   99,
	}
)

func (x INVENTORY_INFO_STATUS_ID) Enum() *INVENTORY_INFO_STATUS_ID {
	p := new(INVENTORY_INFO_STATUS_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[39].Descriptor()
}

func (INVENTORY_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[39]
}

func (x INVENTORY_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_STATUS_ID.Descriptor instead.
func (INVENTORY_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{39}
}

type CONFIG_STATE_CATEGORY_UID int32

const (
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_UNSPECIFIED CONFIG_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_DISCOVERY   CONFIG_STATE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for CONFIG_STATE_CATEGORY_UID.
var (
	CONFIG_STATE_CATEGORY_UID_name = map[int32]string{
		0: "CONFIG_STATE_CATEGORY_UID_UNSPECIFIED",
		5: "CONFIG_STATE_CATEGORY_UID_DISCOVERY",
	}
	CONFIG_STATE_CATEGORY_UID_value = map[string]int32{
		"CONFIG_STATE_CATEGORY_UID_UNSPECIFIED": 0,
		"CONFIG_STATE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x CONFIG_STATE_CATEGORY_UID) Enum() *CONFIG_STATE_CATEGORY_UID {
	p := new(CONFIG_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[40].Descriptor()
}

func (CONFIG_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[40]
}

func (x CONFIG_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CATEGORY_UID.Descriptor instead.
func (CONFIG_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{40}
}

type DISCOVERY_TYPE_UID int32

const (
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_UNSPECIFIED       DISCOVERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN DISCOVERY_TYPE_UID = 500000 // EnumValue: 500000; Type: OCSF_VALUE;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_LOG     DISCOVERY_TYPE_UID = 500001 // Type: OCSF_VALUE; EnumValue: 500001;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_COLLECT DISCOVERY_TYPE_UID = 500002 // Type: OCSF_VALUE; EnumValue: 500002;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_OTHER   DISCOVERY_TYPE_UID = 500099 // Type: OCSF_VALUE; EnumValue: 500099;
)

// Enum value maps for DISCOVERY_TYPE_UID.
var (
	DISCOVERY_TYPE_UID_name = map[int32]string{
		0:      "DISCOVERY_TYPE_UID_UNSPECIFIED",
		500000: "DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN",
		500001: "DISCOVERY_TYPE_UID_DISCOVERY_LOG",
		500002: "DISCOVERY_TYPE_UID_DISCOVERY_COLLECT",
		500099: "DISCOVERY_TYPE_UID_DISCOVERY_OTHER",
	}
	DISCOVERY_TYPE_UID_value = map[string]int32{
		"DISCOVERY_TYPE_UID_UNSPECIFIED":       0,
		"DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN": 500000,
		"DISCOVERY_TYPE_UID_DISCOVERY_LOG":     500001,
		"DISCOVERY_TYPE_UID_DISCOVERY_COLLECT": 500002,
		"DISCOVERY_TYPE_UID_DISCOVERY_OTHER":   500099,
	}
)

func (x DISCOVERY_TYPE_UID) Enum() *DISCOVERY_TYPE_UID {
	p := new(DISCOVERY_TYPE_UID)
	*p = x
	return p
}

func (x DISCOVERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[41].Descriptor()
}

func (DISCOVERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[41]
}

func (x DISCOVERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_TYPE_UID.Descriptor instead.
func (DISCOVERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{41}
}

type CONFIG_STATE_ACTIVITY_ID int32

const (
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_UNKNOWN CONFIG_STATE_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_LOG     CONFIG_STATE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_COLLECT CONFIG_STATE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_OTHER   CONFIG_STATE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_ACTIVITY_ID.
var (
	CONFIG_STATE_ACTIVITY_ID_name = map[int32]string{
		0:  "CONFIG_STATE_ACTIVITY_ID_UNKNOWN",
		1:  "CONFIG_STATE_ACTIVITY_ID_LOG",
		2:  "CONFIG_STATE_ACTIVITY_ID_COLLECT",
		99: "CONFIG_STATE_ACTIVITY_ID_OTHER",
	}
	CONFIG_STATE_ACTIVITY_ID_value = map[string]int32{
		"CONFIG_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"CONFIG_STATE_ACTIVITY_ID_LOG":     1,
		"CONFIG_STATE_ACTIVITY_ID_COLLECT": 2,
		"CONFIG_STATE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x CONFIG_STATE_ACTIVITY_ID) Enum() *CONFIG_STATE_ACTIVITY_ID {
	p := new(CONFIG_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[42].Descriptor()
}

func (CONFIG_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[42]
}

func (x CONFIG_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_ACTIVITY_ID.Descriptor instead.
func (CONFIG_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{42}
}

type DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG     DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER   DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG",
		2:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT",
		99: "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN": 0,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG":     1,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT": 2,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[43].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[43]
}

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{43}
}

type DISCOVERY_CLASS_UID int32

const (
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_UNSPECIFIED DISCOVERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_DISCOVERY   DISCOVERY_CLASS_UID = 5000 // EnumValue: 5000; Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_CLASS_UID.
var (
	DISCOVERY_CLASS_UID_name = map[int32]string{
		0:    "DISCOVERY_CLASS_UID_UNSPECIFIED",
		5000: "DISCOVERY_CLASS_UID_DISCOVERY",
	}
	DISCOVERY_CLASS_UID_value = map[string]int32{
		"DISCOVERY_CLASS_UID_UNSPECIFIED": 0,
		"DISCOVERY_CLASS_UID_DISCOVERY":   5000,
	}
)

func (x DISCOVERY_CLASS_UID) Enum() *DISCOVERY_CLASS_UID {
	p := new(DISCOVERY_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[44].Descriptor()
}

func (DISCOVERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[44]
}

func (x DISCOVERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CLASS_UID.Descriptor instead.
func (DISCOVERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{44}
}

type PATCH_STATE_CLASS_UID int32

const (
	PATCH_STATE_CLASS_UID_PATCH_STATE_CLASS_UID_UNSPECIFIED                  PATCH_STATE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	PATCH_STATE_CLASS_UID_PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE PATCH_STATE_CLASS_UID = 5004 // Type: OCSF_VALUE; EnumValue: 5004;
)

// Enum value maps for PATCH_STATE_CLASS_UID.
var (
	PATCH_STATE_CLASS_UID_name = map[int32]string{
		0:    "PATCH_STATE_CLASS_UID_UNSPECIFIED",
		5004: "PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE",
	}
	PATCH_STATE_CLASS_UID_value = map[string]int32{
		"PATCH_STATE_CLASS_UID_UNSPECIFIED":                  0,
		"PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE": 5004,
	}
)

func (x PATCH_STATE_CLASS_UID) Enum() *PATCH_STATE_CLASS_UID {
	p := new(PATCH_STATE_CLASS_UID)
	*p = x
	return p
}

func (x PATCH_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[45].Descriptor()
}

func (PATCH_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[45]
}

func (x PATCH_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_CLASS_UID.Descriptor instead.
func (PATCH_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{45}
}

type USER_INVENTORY_SEVERITY_ID int32

const (
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_UNKNOWN       USER_INVENTORY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_INFORMATIONAL USER_INVENTORY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_LOW           USER_INVENTORY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_MEDIUM        USER_INVENTORY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_HIGH          USER_INVENTORY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_CRITICAL      USER_INVENTORY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_FATAL         USER_INVENTORY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_OTHER         USER_INVENTORY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_SEVERITY_ID.
var (
	USER_INVENTORY_SEVERITY_ID_name = map[int32]string{
		0:  "USER_INVENTORY_SEVERITY_ID_UNKNOWN",
		1:  "USER_INVENTORY_SEVERITY_ID_INFORMATIONAL",
		2:  "USER_INVENTORY_SEVERITY_ID_LOW",
		3:  "USER_INVENTORY_SEVERITY_ID_MEDIUM",
		4:  "USER_INVENTORY_SEVERITY_ID_HIGH",
		5:  "USER_INVENTORY_SEVERITY_ID_CRITICAL",
		6:  "USER_INVENTORY_SEVERITY_ID_FATAL",
		99: "USER_INVENTORY_SEVERITY_ID_OTHER",
	}
	USER_INVENTORY_SEVERITY_ID_value = map[string]int32{
		"USER_INVENTORY_SEVERITY_ID_UNKNOWN":       0,
		"USER_INVENTORY_SEVERITY_ID_INFORMATIONAL": 1,
		"USER_INVENTORY_SEVERITY_ID_LOW":           2,
		"USER_INVENTORY_SEVERITY_ID_MEDIUM":        3,
		"USER_INVENTORY_SEVERITY_ID_HIGH":          4,
		"USER_INVENTORY_SEVERITY_ID_CRITICAL":      5,
		"USER_INVENTORY_SEVERITY_ID_FATAL":         6,
		"USER_INVENTORY_SEVERITY_ID_OTHER":         99,
	}
)

func (x USER_INVENTORY_SEVERITY_ID) Enum() *USER_INVENTORY_SEVERITY_ID {
	p := new(USER_INVENTORY_SEVERITY_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[46].Descriptor()
}

func (USER_INVENTORY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[46]
}

func (x USER_INVENTORY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_SEVERITY_ID.Descriptor instead.
func (USER_INVENTORY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{46}
}

type REGISTRY_KEY_INFO_STATUS_ID int32

const (
	REGISTRY_KEY_INFO_STATUS_ID_REGISTRY_KEY_INFO_STATUS_ID_UNKNOWN REGISTRY_KEY_INFO_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_INFO_STATUS_ID_REGISTRY_KEY_INFO_STATUS_ID_SUCCESS REGISTRY_KEY_INFO_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_INFO_STATUS_ID_REGISTRY_KEY_INFO_STATUS_ID_FAILURE REGISTRY_KEY_INFO_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_INFO_STATUS_ID_REGISTRY_KEY_INFO_STATUS_ID_OTHER   REGISTRY_KEY_INFO_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_KEY_INFO_STATUS_ID.
var (
	REGISTRY_KEY_INFO_STATUS_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_INFO_STATUS_ID_UNKNOWN",
		1:  "REGISTRY_KEY_INFO_STATUS_ID_SUCCESS",
		2:  "REGISTRY_KEY_INFO_STATUS_ID_FAILURE",
		99: "REGISTRY_KEY_INFO_STATUS_ID_OTHER",
	}
	REGISTRY_KEY_INFO_STATUS_ID_value = map[string]int32{
		"REGISTRY_KEY_INFO_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_KEY_INFO_STATUS_ID_SUCCESS": 1,
		"REGISTRY_KEY_INFO_STATUS_ID_FAILURE": 2,
		"REGISTRY_KEY_INFO_STATUS_ID_OTHER":   99,
	}
)

func (x REGISTRY_KEY_INFO_STATUS_ID) Enum() *REGISTRY_KEY_INFO_STATUS_ID {
	p := new(REGISTRY_KEY_INFO_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[47].Descriptor()
}

func (REGISTRY_KEY_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[47]
}

func (x REGISTRY_KEY_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_STATUS_ID.Descriptor instead.
func (REGISTRY_KEY_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{47}
}

type PREFETCH_INFO_TYPE_UID int32

const (
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_UNSPECIFIED                  PREFETCH_INFO_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNKNOWN        PREFETCH_INFO_TYPE_UID = 5001900 // Type: OCSF_VALUE; EnumValue: 5001900;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_EXISTS         PREFETCH_INFO_TYPE_UID = 5001901 // Type: OCSF_VALUE; EnumValue: 5001901;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_PARTIAL        PREFETCH_INFO_TYPE_UID = 5001902 // Type: OCSF_VALUE; EnumValue: 5001902;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_DOES_NOT_EXIST PREFETCH_INFO_TYPE_UID = 5001903 // Type: OCSF_VALUE; EnumValue: 5001903;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_ERROR          PREFETCH_INFO_TYPE_UID = 5001904 // Type: OCSF_VALUE; EnumValue: 5001904;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNSUPPORTED    PREFETCH_INFO_TYPE_UID = 5001905 // Type: OCSF_VALUE; EnumValue: 5001905;
	PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_OTHER          PREFETCH_INFO_TYPE_UID = 5001999 // Type: OCSF_VALUE; EnumValue: 5001999;
)

// Enum value maps for PREFETCH_INFO_TYPE_UID.
var (
	PREFETCH_INFO_TYPE_UID_name = map[int32]string{
		0:       "PREFETCH_INFO_TYPE_UID_UNSPECIFIED",
		5001900: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNKNOWN",
		5001901: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_EXISTS",
		5001902: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_PARTIAL",
		5001903: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_DOES_NOT_EXIST",
		5001904: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_ERROR",
		5001905: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNSUPPORTED",
		5001999: "PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_OTHER",
	}
	PREFETCH_INFO_TYPE_UID_value = map[string]int32{
		"PREFETCH_INFO_TYPE_UID_UNSPECIFIED":                  0,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNKNOWN":        5001900,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_EXISTS":         5001901,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_PARTIAL":        5001902,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_DOES_NOT_EXIST": 5001903,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_ERROR":          5001904,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_UNSUPPORTED":    5001905,
		"PREFETCH_INFO_TYPE_UID_PREFETCH_INFO_OTHER":          5001999,
	}
)

func (x PREFETCH_INFO_TYPE_UID) Enum() *PREFETCH_INFO_TYPE_UID {
	p := new(PREFETCH_INFO_TYPE_UID)
	*p = x
	return p
}

func (x PREFETCH_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[48].Descriptor()
}

func (PREFETCH_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[48]
}

func (x PREFETCH_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_INFO_TYPE_UID.Descriptor instead.
func (PREFETCH_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{48}
}

type USER_INVENTORY_ACTIVITY_ID int32

const (
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_UNKNOWN USER_INVENTORY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_LOG     USER_INVENTORY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_COLLECT USER_INVENTORY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_OTHER   USER_INVENTORY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_ACTIVITY_ID.
var (
	USER_INVENTORY_ACTIVITY_ID_name = map[int32]string{
		0:  "USER_INVENTORY_ACTIVITY_ID_UNKNOWN",
		1:  "USER_INVENTORY_ACTIVITY_ID_LOG",
		2:  "USER_INVENTORY_ACTIVITY_ID_COLLECT",
		99: "USER_INVENTORY_ACTIVITY_ID_OTHER",
	}
	USER_INVENTORY_ACTIVITY_ID_value = map[string]int32{
		"USER_INVENTORY_ACTIVITY_ID_UNKNOWN": 0,
		"USER_INVENTORY_ACTIVITY_ID_LOG":     1,
		"USER_INVENTORY_ACTIVITY_ID_COLLECT": 2,
		"USER_INVENTORY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x USER_INVENTORY_ACTIVITY_ID) Enum() *USER_INVENTORY_ACTIVITY_ID {
	p := new(USER_INVENTORY_ACTIVITY_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[49].Descriptor()
}

func (USER_INVENTORY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[49]
}

func (x USER_INVENTORY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_ACTIVITY_ID.Descriptor instead.
func (USER_INVENTORY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{49}
}

type REGISTRY_VALUE_INFO_STATUS_ID int32

const (
	REGISTRY_VALUE_INFO_STATUS_ID_REGISTRY_VALUE_INFO_STATUS_ID_UNKNOWN REGISTRY_VALUE_INFO_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_INFO_STATUS_ID_REGISTRY_VALUE_INFO_STATUS_ID_SUCCESS REGISTRY_VALUE_INFO_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_INFO_STATUS_ID_REGISTRY_VALUE_INFO_STATUS_ID_FAILURE REGISTRY_VALUE_INFO_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_INFO_STATUS_ID_REGISTRY_VALUE_INFO_STATUS_ID_OTHER   REGISTRY_VALUE_INFO_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_INFO_STATUS_ID.
var (
	REGISTRY_VALUE_INFO_STATUS_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_INFO_STATUS_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_INFO_STATUS_ID_SUCCESS",
		2:  "REGISTRY_VALUE_INFO_STATUS_ID_FAILURE",
		99: "REGISTRY_VALUE_INFO_STATUS_ID_OTHER",
	}
	REGISTRY_VALUE_INFO_STATUS_ID_value = map[string]int32{
		"REGISTRY_VALUE_INFO_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_INFO_STATUS_ID_SUCCESS": 1,
		"REGISTRY_VALUE_INFO_STATUS_ID_FAILURE": 2,
		"REGISTRY_VALUE_INFO_STATUS_ID_OTHER":   99,
	}
)

func (x REGISTRY_VALUE_INFO_STATUS_ID) Enum() *REGISTRY_VALUE_INFO_STATUS_ID {
	p := new(REGISTRY_VALUE_INFO_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[50].Descriptor()
}

func (REGISTRY_VALUE_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[50]
}

func (x REGISTRY_VALUE_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_INFO_STATUS_ID.Descriptor instead.
func (REGISTRY_VALUE_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{50}
}

type INVENTORY_INFO_SEVERITY_ID int32

const (
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_UNKNOWN       INVENTORY_INFO_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL INVENTORY_INFO_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_LOW           INVENTORY_INFO_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_MEDIUM        INVENTORY_INFO_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_HIGH          INVENTORY_INFO_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_CRITICAL      INVENTORY_INFO_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_FATAL         INVENTORY_INFO_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_OTHER         INVENTORY_INFO_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_SEVERITY_ID.
var (
	INVENTORY_INFO_SEVERITY_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_SEVERITY_ID_UNKNOWN",
		1:  "INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL",
		2:  "INVENTORY_INFO_SEVERITY_ID_LOW",
		3:  "INVENTORY_INFO_SEVERITY_ID_MEDIUM",
		4:  "INVENTORY_INFO_SEVERITY_ID_HIGH",
		5:  "INVENTORY_INFO_SEVERITY_ID_CRITICAL",
		6:  "INVENTORY_INFO_SEVERITY_ID_FATAL",
		99: "INVENTORY_INFO_SEVERITY_ID_OTHER",
	}
	INVENTORY_INFO_SEVERITY_ID_value = map[string]int32{
		"INVENTORY_INFO_SEVERITY_ID_UNKNOWN":       0,
		"INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL": 1,
		"INVENTORY_INFO_SEVERITY_ID_LOW":           2,
		"INVENTORY_INFO_SEVERITY_ID_MEDIUM":        3,
		"INVENTORY_INFO_SEVERITY_ID_HIGH":          4,
		"INVENTORY_INFO_SEVERITY_ID_CRITICAL":      5,
		"INVENTORY_INFO_SEVERITY_ID_FATAL":         6,
		"INVENTORY_INFO_SEVERITY_ID_OTHER":         99,
	}
)

func (x INVENTORY_INFO_SEVERITY_ID) Enum() *INVENTORY_INFO_SEVERITY_ID {
	p := new(INVENTORY_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[51].Descriptor()
}

func (INVENTORY_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[51]
}

func (x INVENTORY_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_SEVERITY_ID.Descriptor instead.
func (INVENTORY_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{51}
}

type CONFIG_STATE_TYPE_UID int32

const (
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_UNSPECIFIED                 CONFIG_STATE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN CONFIG_STATE_TYPE_UID = 500200 // Type: OCSF_VALUE; EnumValue: 500200;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG     CONFIG_STATE_TYPE_UID = 500201 // Type: OCSF_VALUE; EnumValue: 500201;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT CONFIG_STATE_TYPE_UID = 500202 // Type: OCSF_VALUE; EnumValue: 500202;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER   CONFIG_STATE_TYPE_UID = 500299 // Type: OCSF_VALUE; EnumValue: 500299;
)

// Enum value maps for CONFIG_STATE_TYPE_UID.
var (
	CONFIG_STATE_TYPE_UID_name = map[int32]string{
		0:      "CONFIG_STATE_TYPE_UID_UNSPECIFIED",
		500200: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN",
		500201: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG",
		500202: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT",
		500299: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER",
	}
	CONFIG_STATE_TYPE_UID_value = map[string]int32{
		"CONFIG_STATE_TYPE_UID_UNSPECIFIED":                 0,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN": 500200,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG":     500201,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT": 500202,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER":   500299,
	}
)

func (x CONFIG_STATE_TYPE_UID) Enum() *CONFIG_STATE_TYPE_UID {
	p := new(CONFIG_STATE_TYPE_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[52].Descriptor()
}

func (CONFIG_STATE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[52]
}

func (x CONFIG_STATE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_TYPE_UID.Descriptor instead.
func (CONFIG_STATE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{52}
}

type REGISTRY_KEY_INFO_ACTIVITY_ID int32

const (
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_UNKNOWN        REGISTRY_KEY_INFO_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_EXISTS         REGISTRY_KEY_INFO_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_PARTIAL        REGISTRY_KEY_INFO_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_DOES_NOT_EXIST REGISTRY_KEY_INFO_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_ERROR          REGISTRY_KEY_INFO_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_UNSUPPORTED    REGISTRY_KEY_INFO_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_INFO_ACTIVITY_ID_REGISTRY_KEY_INFO_ACTIVITY_ID_OTHER          REGISTRY_KEY_INFO_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_KEY_INFO_ACTIVITY_ID.
var (
	REGISTRY_KEY_INFO_ACTIVITY_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_INFO_ACTIVITY_ID_UNKNOWN",
		1:  "REGISTRY_KEY_INFO_ACTIVITY_ID_EXISTS",
		2:  "REGISTRY_KEY_INFO_ACTIVITY_ID_PARTIAL",
		3:  "REGISTRY_KEY_INFO_ACTIVITY_ID_DOES_NOT_EXIST",
		4:  "REGISTRY_KEY_INFO_ACTIVITY_ID_ERROR",
		5:  "REGISTRY_KEY_INFO_ACTIVITY_ID_UNSUPPORTED",
		99: "REGISTRY_KEY_INFO_ACTIVITY_ID_OTHER",
	}
	REGISTRY_KEY_INFO_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_KEY_INFO_ACTIVITY_ID_UNKNOWN":        0,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_EXISTS":         1,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_PARTIAL":        2,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_DOES_NOT_EXIST": 3,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_ERROR":          4,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_UNSUPPORTED":    5,
		"REGISTRY_KEY_INFO_ACTIVITY_ID_OTHER":          99,
	}
)

func (x REGISTRY_KEY_INFO_ACTIVITY_ID) Enum() *REGISTRY_KEY_INFO_ACTIVITY_ID {
	p := new(REGISTRY_KEY_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[53].Descriptor()
}

func (REGISTRY_KEY_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[53]
}

func (x REGISTRY_KEY_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_INFO_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_KEY_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{53}
}

type DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY   DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_name = map[int32]string{
		0: "DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED",
		5: "DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY",
	}
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED": 0,
		"DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[54].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[54]
}

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{54}
}

type DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN     DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE      DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK     DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER       DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE",
		2:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK",
		3:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED",
		99: "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN":     0,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE":      1,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK":     2,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED": 3,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER":       99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[55].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[55]
}

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{55}
}

type PATCH_STATE_TYPE_UID int32

const (
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_UNSPECIFIED                          PATCH_STATE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN PATCH_STATE_TYPE_UID = 500400 // EnumValue: 500400; Type: OCSF_VALUE;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG     PATCH_STATE_TYPE_UID = 500401 // Type: OCSF_VALUE; EnumValue: 500401;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT PATCH_STATE_TYPE_UID = 500402 // Type: OCSF_VALUE; EnumValue: 500402;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER   PATCH_STATE_TYPE_UID = 500499 // Type: OCSF_VALUE; EnumValue: 500499;
)

// Enum value maps for PATCH_STATE_TYPE_UID.
var (
	PATCH_STATE_TYPE_UID_name = map[int32]string{
		0:      "PATCH_STATE_TYPE_UID_UNSPECIFIED",
		500400: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN",
		500401: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG",
		500402: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT",
		500499: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER",
	}
	PATCH_STATE_TYPE_UID_value = map[string]int32{
		"PATCH_STATE_TYPE_UID_UNSPECIFIED":                          0,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN": 500400,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG":     500401,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT": 500402,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER":   500499,
	}
)

func (x PATCH_STATE_TYPE_UID) Enum() *PATCH_STATE_TYPE_UID {
	p := new(PATCH_STATE_TYPE_UID)
	*p = x
	return p
}

func (x PATCH_STATE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[56].Descriptor()
}

func (PATCH_STATE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[56]
}

func (x PATCH_STATE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_TYPE_UID.Descriptor instead.
func (PATCH_STATE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{56}
}

type CONFIG_STATE_STATUS_ID int32

const (
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_UNKNOWN CONFIG_STATE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_SUCCESS CONFIG_STATE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_FAILURE CONFIG_STATE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_OTHER   CONFIG_STATE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_STATUS_ID.
var (
	CONFIG_STATE_STATUS_ID_name = map[int32]string{
		0:  "CONFIG_STATE_STATUS_ID_UNKNOWN",
		1:  "CONFIG_STATE_STATUS_ID_SUCCESS",
		2:  "CONFIG_STATE_STATUS_ID_FAILURE",
		99: "CONFIG_STATE_STATUS_ID_OTHER",
	}
	CONFIG_STATE_STATUS_ID_value = map[string]int32{
		"CONFIG_STATE_STATUS_ID_UNKNOWN": 0,
		"CONFIG_STATE_STATUS_ID_SUCCESS": 1,
		"CONFIG_STATE_STATUS_ID_FAILURE": 2,
		"CONFIG_STATE_STATUS_ID_OTHER":   99,
	}
)

func (x CONFIG_STATE_STATUS_ID) Enum() *CONFIG_STATE_STATUS_ID {
	p := new(CONFIG_STATE_STATUS_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[57].Descriptor()
}

func (CONFIG_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[57]
}

func (x CONFIG_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_STATUS_ID.Descriptor instead.
func (CONFIG_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{57}
}

type DEVICE_CONFIG_STATE_CHANGE_CLASS_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED                DEVICE_CONFIG_STATE_CHANGE_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE DEVICE_CONFIG_STATE_CHANGE_CLASS_UID = 50019 // Type: OCSF_VALUE; EnumValue: 50019;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_CLASS_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_name = map[int32]string{
		0:     "DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED",
		50019: "DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE",
	}
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED":                0,
		"DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE": 50019,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_CLASS_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[58].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[58]
}

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_CLASS_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{58}
}

type CONFIG_STATE_CLASS_UID int32

const (
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_UNSPECIFIED         CONFIG_STATE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE CONFIG_STATE_CLASS_UID = 5002 // EnumValue: 5002; Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_CLASS_UID.
var (
	CONFIG_STATE_CLASS_UID_name = map[int32]string{
		0:    "CONFIG_STATE_CLASS_UID_UNSPECIFIED",
		5002: "CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE",
	}
	CONFIG_STATE_CLASS_UID_value = map[string]int32{
		"CONFIG_STATE_CLASS_UID_UNSPECIFIED":         0,
		"CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE": 5002,
	}
)

func (x CONFIG_STATE_CLASS_UID) Enum() *CONFIG_STATE_CLASS_UID {
	p := new(CONFIG_STATE_CLASS_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[59].Descriptor()
}

func (CONFIG_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[59]
}

func (x CONFIG_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CLASS_UID.Descriptor instead.
func (CONFIG_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{59}
}

type DEVICE_CONFIG_STATE_CHANGE_TYPE_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED                        DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001900 // Type: OCSF_VALUE; EnumValue: 5001900;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG     DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001901 // EnumValue: 5001901; Type: OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001902 // EnumValue: 5001902; Type: OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER   DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001999 // Type: OCSF_VALUE; EnumValue: 5001999;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_TYPE_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_name = map[int32]string{
		0:       "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED",
		5001900: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN",
		5001901: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG",
		5001902: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT",
		5001999: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED":                        0,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN": 5001900,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG":     5001901,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT": 5001902,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER":   5001999,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_TYPE_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[60].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[60]
}

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_TYPE_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{60}
}

type DISCOVERY_CATEGORY_UID int32

const (
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_UNSPECIFIED DISCOVERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_DISCOVERY   DISCOVERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DISCOVERY_CATEGORY_UID.
var (
	DISCOVERY_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_CATEGORY_UID_UNSPECIFIED",
		5: "DISCOVERY_CATEGORY_UID_DISCOVERY",
	}
	DISCOVERY_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_CATEGORY_UID_UNSPECIFIED": 0,
		"DISCOVERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DISCOVERY_CATEGORY_UID) Enum() *DISCOVERY_CATEGORY_UID {
	p := new(DISCOVERY_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[61].Descriptor()
}

func (DISCOVERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes[61]
}

func (x DISCOVERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{61}
}

var File_ocsf_v1_1_0_events_discovery_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x6f, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x23, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x25, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0xe3, 0x86, 0x03, 0x2a, 0xca, 0x02, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xe2, 0x02, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x75, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x6c,
	0x0a, 0x18, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x7a, 0x0a, 0x1a,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x88, 0x27, 0x2a, 0x77, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31,
	0x0a, 0x2c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8b,
	0x27, 0x2a, 0x86, 0x01, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x36, 0x0a, 0x31, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8d, 0x27, 0x2a, 0xc3, 0x03, 0x0a, 0x26, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x72, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x26, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x10, 0x05, 0x2a, 0x7b, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05,
	0x2a, 0xa7, 0x01, 0x0a, 0x17, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe2, 0x03, 0x0a, 0x19, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x32, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa0, 0xc2, 0x1e, 0x12, 0x37, 0x0a,
	0x31, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x38, 0x0a, 0x32, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xa2, 0xc2, 0x1e,
	0x12, 0x3f, 0x0a, 0x39, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44,
	0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xa3, 0xc2,
	0x1e, 0x12, 0x36, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa4, 0xc2, 0x1e, 0x12, 0x3c, 0x0a, 0x36, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0xa5, 0xc2, 0x1e, 0x12, 0x36, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x83, 0xc3, 0x1e, 0x2a,
	0xc5, 0x02, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb6, 0x01, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a, 0x18,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1,
	0x01, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x79, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2e, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x89, 0x27, 0x2a, 0xd1, 0x02,
	0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x34, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x3c, 0x0a, 0x38, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xf2, 0x03, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x34,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb0, 0xc5, 0x1e, 0x12, 0x39, 0x0a, 0x33, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0xb1, 0xc5, 0x1e, 0x12, 0x3a, 0x0a, 0x34, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xb2, 0xc5, 0x1e, 0x12,
	0x41, 0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb3,
	0xc5, 0x1e, 0x12, 0x38, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb4, 0xc5, 0x1e, 0x12, 0x3e, 0x0a, 0x38,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xb5, 0xc5, 0x1e, 0x12, 0x38, 0x0a, 0x32,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x93, 0xc6, 0x1e, 0x2a, 0x97, 0x01, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xb0, 0x02, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x35, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x84,
	0xc3, 0x1e, 0x12, 0x37, 0x0a, 0x31, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x85, 0xc3, 0x1e, 0x12, 0x3b, 0x0a, 0x35, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0x86, 0xc3, 0x1e, 0x12, 0x39, 0x0a, 0x33, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xe7, 0xc3, 0x1e, 0x2a, 0xec, 0x01, 0x0a, 0x24, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x84, 0x01, 0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x75, 0x0a, 0x1b, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05,
	0x2a, 0xaa, 0x02, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb2, 0x02,
	0x0a, 0x19, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x84, 0x03, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x7e, 0x0a, 0x1e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0xa8, 0x02, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x39,
	0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xcc, 0xc4, 0x1e, 0x12, 0x35, 0x0a, 0x2f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xcd, 0xc4, 0x1e,
	0x12, 0x39, 0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xce, 0xc4, 0x1e, 0x12, 0x37, 0x0a, 0x31, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0xaf, 0xc5, 0x1e, 0x2a, 0xf2, 0x02, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x92, 0x04, 0x0a, 0x1c, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x94, 0xc6, 0x1e, 0x12, 0x3d, 0x0a, 0x37, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x95, 0xc6, 0x1e, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x96, 0xc6, 0x1e, 0x12, 0x45, 0x0a, 0x3f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x97, 0xc6, 0x1e, 0x12, 0x3c,
	0x0a, 0x36, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x98, 0xc6, 0x1e, 0x12, 0x42, 0x0a, 0x3c,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x99, 0xc6, 0x1e,
	0x12, 0x3c, 0x0a, 0x36, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xf7, 0xc6, 0x1e, 0x2a, 0x7e,
	0x0a, 0x1b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2d, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8c, 0x27, 0x2a, 0xba,
	0x01, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a, 0x18,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6f,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a,
	0xe2, 0x01, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x24, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xa0, 0xc2, 0x1e, 0x12, 0x26, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x2a,
	0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xa2, 0xc2, 0x1e, 0x12, 0x28, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x83, 0xc3, 0x1e, 0x2a, 0xac, 0x01, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xf2, 0x01, 0x0a, 0x26, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x5e, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x88, 0x27, 0x2a, 0x77, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x32, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8c,
	0x27, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xbf, 0x01, 0x0a, 0x1b,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb9, 0x03,
	0x0a, 0x16, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x33, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xac, 0xa5, 0xb1, 0x02, 0x12, 0x32, 0x0a, 0x2b, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0xad, 0xa5, 0xb1, 0x02, 0x12, 0x33, 0x0a, 0x2c, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xae, 0xa5, 0xb1, 0x02, 0x12, 0x3a,
	0x0a, 0x33, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xaf, 0xa5, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb0, 0xa5, 0xb1, 0x02, 0x12, 0x37, 0x0a,
	0x30, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0xb1, 0xa5, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x8f, 0xa6, 0xb1, 0x02, 0x2a, 0xb6, 0x01, 0x0a, 0x1a, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xc9, 0x01, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd7,
	0x02, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9c, 0x02, 0x0a, 0x15, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x31, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe8,
	0xc3, 0x1e, 0x12, 0x33, 0x0a, 0x2d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x4f, 0x47, 0x10, 0xe9, 0xc3, 0x1e, 0x12, 0x37, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xea, 0xc3, 0x1e,
	0x12, 0x35, 0x0a, 0x2f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0xcb, 0xc4, 0x1e, 0x2a, 0xd2, 0x02, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x99, 0x01, 0x0a,
	0x27, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0xef, 0x02, 0x0a, 0x31, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x39, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3c, 0x0a,
	0x38, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x41, 0x0a, 0x3d, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x3b, 0x0a,
	0x37, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x02, 0x0a, 0x14, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x39, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb0, 0xc5, 0x1e, 0x12, 0x3b, 0x0a, 0x35, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x4f, 0x47, 0x10, 0xb1, 0xc5, 0x1e, 0x12, 0x3f, 0x0a, 0x39, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0xb2, 0xc5, 0x1e, 0x12, 0x3d, 0x0a, 0x37, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x93, 0xc6, 0x1e, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xa3, 0x01, 0x0a, 0x24, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x45, 0x0a, 0x3f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0xe3, 0x86, 0x03, 0x2a, 0x71, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x27, 0x2a, 0x90, 0x03, 0x0a, 0x23, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4d, 0x0a, 0x46, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xac, 0xa5, 0xb1, 0x02, 0x12, 0x49, 0x0a, 0x42, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xad, 0xa5, 0xb1, 0x02,
	0x12, 0x4d, 0x0a, 0x46, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xae, 0xa5, 0xb1, 0x02, 0x12,
	0x4b, 0x0a, 0x44, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8f, 0xa6, 0xb1, 0x02, 0x2a, 0x66, 0x0a, 0x16,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x10, 0x05, 0x42, 0xa5, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42,
	0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61,
	0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f,
	0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x44, 0x45,
	0xaa, 0x02, 0x20, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x31, 0x30, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0xca, 0x02, 0x20, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x31, 0x30, 0x5c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x2c, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31,
	0x31, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x24, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31,
	0x31, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescData = file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDesc
)

func file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDescData
}

var file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 62)
var file_ocsf_v1_1_0_events_discovery_enums_enums_proto_goTypes = []interface{}{
	(PREFETCH_INFO_CLASS_UID)(0),                           // 0: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CLASS_UID
	(DISCOVERY_RESULT_ACTIVITY_ID)(0),                      // 1: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	(DISCOVERY_ACTIVITY_ID)(0),                             // 2: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(REGISTRY_VALUE_INFO_ACTIVITY_ID)(0),                   // 3: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_ACTIVITY_ID
	(INVENTORY_INFO_CATEGORY_UID)(0),                       // 4: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(PATCH_STATE_CATEGORY_UID)(0),                          // 5: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	(DISCOVERY_RESULT_CLASS_UID)(0),                        // 6: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	(USER_INVENTORY_CLASS_UID)(0),                          // 7: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	(REGISTRY_VALUE_INFO_CLASS_UID)(0),                     // 8: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CLASS_UID
	(DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)(0),            // 9: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	(PATCH_STATE_SEVERITY_ID)(0),                           // 10: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	(PREFETCH_INFO_CATEGORY_UID)(0),                        // 11: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_CATEGORY_UID
	(DISCOVERY_RESULT_CATEGORY_UID)(0),                     // 12: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	(PATCH_STATE_ACTIVITY_ID)(0),                           // 13: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	(DISCOVERY_RESULT_TYPE_UID)(0),                         // 14: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	(CONFIG_STATE_SEVERITY_ID)(0),                          // 15: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	(PREFETCH_INFO_SEVERITY_ID)(0),                         // 16: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_SEVERITY_ID
	(PREFETCH_INFO_STATUS_ID)(0),                           // 17: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_STATUS_ID
	(DISCOVERY_RESULT_SEVERITY_ID)(0),                      // 18: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	(INVENTORY_INFO_ACTIVITY_ID)(0),                        // 19: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(USER_INVENTORY_STATUS_ID)(0),                          // 20: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	(PATCH_STATE_STATUS_ID)(0),                             // 21: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	(INVENTORY_INFO_CLASS_UID)(0),                          // 22: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)(0),      // 23: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	(REGISTRY_KEY_INFO_TYPE_UID)(0),                        // 24: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_TYPE_UID
	(DISCOVERY_STATUS_ID)(0),                               // 25: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(INVENTORY_INFO_TYPE_UID)(0),                           // 26: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)(0),              // 27: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	(REGISTRY_VALUE_INFO_CATEGORY_UID)(0),                  // 28: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_CATEGORY_UID
	(USER_INVENTORY_CATEGORY_UID)(0),                       // 29: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	(DISCOVERY_SEVERITY_ID)(0),                             // 30: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(PREFETCH_INFO_ACTIVITY_ID)(0),                         // 31: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_ACTIVITY_ID
	(REGISTRY_VALUE_INFO_SEVERITY_ID)(0),                   // 32: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_SEVERITY_ID
	(REGISTRY_KEY_INFO_CATEGORY_UID)(0),                    // 33: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CATEGORY_UID
	(USER_INVENTORY_TYPE_UID)(0),                           // 34: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	(REGISTRY_KEY_INFO_SEVERITY_ID)(0),                     // 35: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_SEVERITY_ID
	(REGISTRY_VALUE_INFO_TYPE_UID)(0),                      // 36: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_TYPE_UID
	(REGISTRY_KEY_INFO_CLASS_UID)(0),                       // 37: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_CLASS_UID
	(DISCOVERY_RESULT_STATUS_ID)(0),                        // 38: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	(INVENTORY_INFO_STATUS_ID)(0),                          // 39: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(CONFIG_STATE_CATEGORY_UID)(0),                         // 40: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(DISCOVERY_TYPE_UID)(0),                                // 41: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(CONFIG_STATE_ACTIVITY_ID)(0),                          // 42: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	(DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)(0),            // 43: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	(DISCOVERY_CLASS_UID)(0),                               // 44: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(PATCH_STATE_CLASS_UID)(0),                             // 45: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	(USER_INVENTORY_SEVERITY_ID)(0),                        // 46: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	(REGISTRY_KEY_INFO_STATUS_ID)(0),                       // 47: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_STATUS_ID
	(PREFETCH_INFO_TYPE_UID)(0),                            // 48: ocsf.v1_1_0.events.discovery.enums.PREFETCH_INFO_TYPE_UID
	(USER_INVENTORY_ACTIVITY_ID)(0),                        // 49: ocsf.v1_1_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	(REGISTRY_VALUE_INFO_STATUS_ID)(0),                     // 50: ocsf.v1_1_0.events.discovery.enums.REGISTRY_VALUE_INFO_STATUS_ID
	(INVENTORY_INFO_SEVERITY_ID)(0),                        // 51: ocsf.v1_1_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(CONFIG_STATE_TYPE_UID)(0),                             // 52: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(REGISTRY_KEY_INFO_ACTIVITY_ID)(0),                     // 53: ocsf.v1_1_0.events.discovery.enums.REGISTRY_KEY_INFO_ACTIVITY_ID
	(DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)(0),           // 54: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	(DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)(0), // 55: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	(PATCH_STATE_TYPE_UID)(0),                              // 56: ocsf.v1_1_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	(CONFIG_STATE_STATUS_ID)(0),                            // 57: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	(DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)(0),              // 58: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	(CONFIG_STATE_CLASS_UID)(0),                            // 59: ocsf.v1_1_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)(0),               // 60: ocsf.v1_1_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	(DISCOVERY_CATEGORY_UID)(0),                            // 61: ocsf.v1_1_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
}
var file_ocsf_v1_1_0_events_discovery_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_1_0_events_discovery_enums_enums_proto_init() }
func file_ocsf_v1_1_0_events_discovery_enums_enums_proto_init() {
	if File_ocsf_v1_1_0_events_discovery_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDesc,
			NumEnums:      62,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_1_0_events_discovery_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_1_0_events_discovery_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_1_0_events_discovery_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_1_0_events_discovery_enums_enums_proto = out.File
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_goTypes = nil
	file_ocsf_v1_1_0_events_discovery_enums_enums_proto_depIdxs = nil
}
