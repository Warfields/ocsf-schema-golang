// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_1_0/events/network/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EMAIL_URL_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_URL_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_URL_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW           EMAIL_URL_ACTIVITY_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_URL_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_URL_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_URL_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_URL_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_URL_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_URL_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_URL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW",
		3:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL",
		99: "EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW":           2,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_URL_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_URL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[0].Descriptor()
}

func (EMAIL_URL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[0]
}

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{0}
}

type NTP_ACTIVITY_DISPOSITION_ID int32

const (
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_UNKNOWN             NTP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_ALLOWED             NTP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_BLOCKED             NTP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_QUARANTINED         NTP_ACTIVITY_DISPOSITION_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_ISOLATED            NTP_ACTIVITY_DISPOSITION_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_DELETED             NTP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_DROPPED             NTP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       NTP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_APPROVED            NTP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_RESTORED            NTP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_EXONERATED          NTP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_CORRECTED           NTP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED NTP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         NTP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_DELAYED             NTP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_DETECTED            NTP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_NO_ACTION           NTP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_LOGGED              NTP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_TAGGED              NTP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_ALERT               NTP_ACTIVITY_DISPOSITION_ID = 19 // EnumValue: 19; Type: OCSF_VALUE;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_COUNT               NTP_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_RESET               NTP_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_CAPTCHA             NTP_ACTIVITY_DISPOSITION_ID = 22 // EnumValue: 22; Type: OCSF_VALUE;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_CHALLENGE           NTP_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      NTP_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_REJECTED            NTP_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        NTP_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_ERROR               NTP_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	NTP_ACTIVITY_DISPOSITION_ID_NTP_ACTIVITY_DISPOSITION_ID_OTHER               NTP_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NTP_ACTIVITY_DISPOSITION_ID.
var (
	NTP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "NTP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "NTP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "NTP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "NTP_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "NTP_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "NTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "NTP_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "NTP_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "NTP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "NTP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "NTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "NTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "NTP_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "NTP_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "NTP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "NTP_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "NTP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "NTP_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "NTP_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "NTP_ACTIVITY_DISPOSITION_ID_RESET",
		22: "NTP_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "NTP_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "NTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "NTP_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "NTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "NTP_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "NTP_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	NTP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"NTP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"NTP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"NTP_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"NTP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"NTP_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"NTP_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"NTP_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"NTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"NTP_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"NTP_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"NTP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"NTP_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"NTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"NTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"NTP_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"NTP_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"NTP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"NTP_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"NTP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"NTP_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"NTP_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"NTP_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"NTP_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"NTP_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"NTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"NTP_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"NTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"NTP_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"NTP_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x NTP_ACTIVITY_DISPOSITION_ID) Enum() *NTP_ACTIVITY_DISPOSITION_ID {
	p := new(NTP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[1].Descriptor()
}

func (NTP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[1]
}

func (x NTP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (NTP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{1}
}

type RDP_ACTIVITY_CATEGORY_UID int32

const (
	RDP_ACTIVITY_CATEGORY_UID_RDP_ACTIVITY_CATEGORY_UID_UNSPECIFIED      RDP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	RDP_ACTIVITY_CATEGORY_UID_RDP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY RDP_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for RDP_ACTIVITY_CATEGORY_UID.
var (
	RDP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "RDP_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "RDP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	RDP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"RDP_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"RDP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x RDP_ACTIVITY_CATEGORY_UID) Enum() *RDP_ACTIVITY_CATEGORY_UID {
	p := new(RDP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[2].Descriptor()
}

func (RDP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[2]
}

func (x RDP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (RDP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{2}
}

type FTP_ACTIVITY_STATUS_ID int32

const (
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_UNKNOWN FTP_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_SUCCESS FTP_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_FAILURE FTP_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_OTHER   FTP_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FTP_ACTIVITY_STATUS_ID.
var (
	FTP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "FTP_ACTIVITY_STATUS_ID_FAILURE",
		99: "FTP_ACTIVITY_STATUS_ID_OTHER",
	}
	FTP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"FTP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"FTP_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"FTP_ACTIVITY_STATUS_ID_FAILURE": 2,
		"FTP_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x FTP_ACTIVITY_STATUS_ID) Enum() *FTP_ACTIVITY_STATUS_ID {
	p := new(FTP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[3].Descriptor()
}

func (FTP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[3]
}

func (x FTP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_STATUS_ID.Descriptor instead.
func (FTP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{3}
}

type EMAIL_ACTIVITY_STATUS_ID int32

const (
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_SUCCESS EMAIL_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_FAILURE EMAIL_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_OTHER   EMAIL_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_ACTIVITY_STATUS_ID.
var (
	EMAIL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "EMAIL_ACTIVITY_STATUS_ID_FAILURE",
		99: "EMAIL_ACTIVITY_STATUS_ID_OTHER",
	}
	EMAIL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"EMAIL_ACTIVITY_STATUS_ID_FAILURE": 2,
		"EMAIL_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x EMAIL_ACTIVITY_STATUS_ID) Enum() *EMAIL_ACTIVITY_STATUS_ID {
	p := new(EMAIL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[4].Descriptor()
}

func (EMAIL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[4]
}

func (x EMAIL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{4}
}

type SMB_ACTIVITY_CATEGORY_UID int32

const (
	SMB_ACTIVITY_CATEGORY_UID_SMB_ACTIVITY_CATEGORY_UID_UNSPECIFIED      SMB_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SMB_ACTIVITY_CATEGORY_UID_SMB_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY SMB_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for SMB_ACTIVITY_CATEGORY_UID.
var (
	SMB_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SMB_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "SMB_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	SMB_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SMB_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"SMB_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x SMB_ACTIVITY_CATEGORY_UID) Enum() *SMB_ACTIVITY_CATEGORY_UID {
	p := new(SMB_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[5].Descriptor()
}

func (SMB_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[5]
}

func (x SMB_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SMB_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{5}
}

type SSH_ACTIVITY_AUTH_TYPE_ID int32

const (
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_UNKNOWN              SSH_ACTIVITY_AUTH_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_CERTIFICATE_BASED    SSH_ACTIVITY_AUTH_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_GSSAPI               SSH_ACTIVITY_AUTH_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_HOST_BASED           SSH_ACTIVITY_AUTH_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_KEYBOARD_INTERACTIVE SSH_ACTIVITY_AUTH_TYPE_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_PASSWORD             SSH_ACTIVITY_AUTH_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_PUBLIC_KEY           SSH_ACTIVITY_AUTH_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SSH_ACTIVITY_AUTH_TYPE_ID_SSH_ACTIVITY_AUTH_TYPE_ID_OTHER                SSH_ACTIVITY_AUTH_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SSH_ACTIVITY_AUTH_TYPE_ID.
var (
	SSH_ACTIVITY_AUTH_TYPE_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_AUTH_TYPE_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_AUTH_TYPE_ID_CERTIFICATE_BASED",
		2:  "SSH_ACTIVITY_AUTH_TYPE_ID_GSSAPI",
		3:  "SSH_ACTIVITY_AUTH_TYPE_ID_HOST_BASED",
		4:  "SSH_ACTIVITY_AUTH_TYPE_ID_KEYBOARD_INTERACTIVE",
		5:  "SSH_ACTIVITY_AUTH_TYPE_ID_PASSWORD",
		6:  "SSH_ACTIVITY_AUTH_TYPE_ID_PUBLIC_KEY",
		99: "SSH_ACTIVITY_AUTH_TYPE_ID_OTHER",
	}
	SSH_ACTIVITY_AUTH_TYPE_ID_value = map[string]int32{
		"SSH_ACTIVITY_AUTH_TYPE_ID_UNKNOWN":              0,
		"SSH_ACTIVITY_AUTH_TYPE_ID_CERTIFICATE_BASED":    1,
		"SSH_ACTIVITY_AUTH_TYPE_ID_GSSAPI":               2,
		"SSH_ACTIVITY_AUTH_TYPE_ID_HOST_BASED":           3,
		"SSH_ACTIVITY_AUTH_TYPE_ID_KEYBOARD_INTERACTIVE": 4,
		"SSH_ACTIVITY_AUTH_TYPE_ID_PASSWORD":             5,
		"SSH_ACTIVITY_AUTH_TYPE_ID_PUBLIC_KEY":           6,
		"SSH_ACTIVITY_AUTH_TYPE_ID_OTHER":                99,
	}
)

func (x SSH_ACTIVITY_AUTH_TYPE_ID) Enum() *SSH_ACTIVITY_AUTH_TYPE_ID {
	p := new(SSH_ACTIVITY_AUTH_TYPE_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_AUTH_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_AUTH_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[6].Descriptor()
}

func (SSH_ACTIVITY_AUTH_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[6]
}

func (x SSH_ACTIVITY_AUTH_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_AUTH_TYPE_ID.Descriptor instead.
func (SSH_ACTIVITY_AUTH_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{6}
}

type NTP_ACTIVITY_ACTION_ID int32

const (
	NTP_ACTIVITY_ACTION_ID_NTP_ACTIVITY_ACTION_ID_UNKNOWN NTP_ACTIVITY_ACTION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NTP_ACTIVITY_ACTION_ID_NTP_ACTIVITY_ACTION_ID_ALLOWED NTP_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_ACTION_ID_NTP_ACTIVITY_ACTION_ID_DENIED  NTP_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NTP_ACTIVITY_ACTION_ID_NTP_ACTIVITY_ACTION_ID_OTHER   NTP_ACTIVITY_ACTION_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for NTP_ACTIVITY_ACTION_ID.
var (
	NTP_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "NTP_ACTIVITY_ACTION_ID_DENIED",
		99: "NTP_ACTIVITY_ACTION_ID_OTHER",
	}
	NTP_ACTIVITY_ACTION_ID_value = map[string]int32{
		"NTP_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"NTP_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"NTP_ACTIVITY_ACTION_ID_DENIED":  2,
		"NTP_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x NTP_ACTIVITY_ACTION_ID) Enum() *NTP_ACTIVITY_ACTION_ID {
	p := new(NTP_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[7].Descriptor()
}

func (NTP_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[7]
}

func (x NTP_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_ACTION_ID.Descriptor instead.
func (NTP_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{7}
}

type EMAIL_ACTIVITY_DIRECTION_ID int32

const (
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN  EMAIL_ACTIVITY_DIRECTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_INBOUND  EMAIL_ACTIVITY_DIRECTION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND EMAIL_ACTIVITY_DIRECTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_LATERAL  EMAIL_ACTIVITY_DIRECTION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_OTHER    EMAIL_ACTIVITY_DIRECTION_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_DIRECTION_ID.
var (
	EMAIL_ACTIVITY_DIRECTION_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_DIRECTION_ID_INBOUND",
		2:  "EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND",
		3:  "EMAIL_ACTIVITY_DIRECTION_ID_LATERAL",
		99: "EMAIL_ACTIVITY_DIRECTION_ID_OTHER",
	}
	EMAIL_ACTIVITY_DIRECTION_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN":  0,
		"EMAIL_ACTIVITY_DIRECTION_ID_INBOUND":  1,
		"EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND": 2,
		"EMAIL_ACTIVITY_DIRECTION_ID_LATERAL":  3,
		"EMAIL_ACTIVITY_DIRECTION_ID_OTHER":    99,
	}
)

func (x EMAIL_ACTIVITY_DIRECTION_ID) Enum() *EMAIL_ACTIVITY_DIRECTION_ID {
	p := new(EMAIL_ACTIVITY_DIRECTION_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_DIRECTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_DIRECTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[8].Descriptor()
}

func (EMAIL_ACTIVITY_DIRECTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[8]
}

func (x EMAIL_ACTIVITY_DIRECTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_DIRECTION_ID.Descriptor instead.
func (EMAIL_ACTIVITY_DIRECTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{8}
}

type NTP_ACTIVITY_STATUS_ID int32

const (
	NTP_ACTIVITY_STATUS_ID_NTP_ACTIVITY_STATUS_ID_UNKNOWN NTP_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NTP_ACTIVITY_STATUS_ID_NTP_ACTIVITY_STATUS_ID_SUCCESS NTP_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_STATUS_ID_NTP_ACTIVITY_STATUS_ID_FAILURE NTP_ACTIVITY_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NTP_ACTIVITY_STATUS_ID_NTP_ACTIVITY_STATUS_ID_OTHER   NTP_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NTP_ACTIVITY_STATUS_ID.
var (
	NTP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "NTP_ACTIVITY_STATUS_ID_FAILURE",
		99: "NTP_ACTIVITY_STATUS_ID_OTHER",
	}
	NTP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NTP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"NTP_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"NTP_ACTIVITY_STATUS_ID_FAILURE": 2,
		"NTP_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x NTP_ACTIVITY_STATUS_ID) Enum() *NTP_ACTIVITY_STATUS_ID {
	p := new(NTP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[9].Descriptor()
}

func (NTP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[9]
}

func (x NTP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_STATUS_ID.Descriptor instead.
func (NTP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{9}
}

type EMAIL_URL_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_URL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_URL_ACTIVITY_DISPOSITION_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_URL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_URL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_URL_ACTIVITY_DISPOSITION_ID = 12 // EnumValue: 12; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_URL_ACTIVITY_DISPOSITION_ID = 13 // EnumValue: 13; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_URL_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 16; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_URL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_URL_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALERT               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_COUNT               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESET               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CAPTCHA             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CHALLENGE           EMAIL_URL_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      EMAIL_URL_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_REJECTED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        EMAIL_URL_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ERROR               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 27 // EnumValue: 27; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_URL_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESET",
		22: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_URL_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_URL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[10].Descriptor()
}

func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[10]
}

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{10}
}

type HTTP_ACTIVITY_DISPOSITION_ID int32

const (
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN             HTTP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED             HTTP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED             HTTP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED         HTTP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED            HTTP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DELETED             HTTP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DROPPED             HTTP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       HTTP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_APPROVED            HTTP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_RESTORED            HTTP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED          HTTP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED           HTTP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED HTTP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         HTTP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DELAYED             HTTP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DETECTED            HTTP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION           HTTP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_LOGGED              HTTP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_TAGGED              HTTP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ALERT               HTTP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_COUNT               HTTP_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_RESET               HTTP_ACTIVITY_DISPOSITION_ID = 21 // EnumValue: 21; Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CAPTCHA             HTTP_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CHALLENGE           HTTP_ACTIVITY_DISPOSITION_ID = 23 // EnumValue: 23; Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      HTTP_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_REJECTED            HTTP_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        HTTP_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ERROR               HTTP_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_OTHER               HTTP_ACTIVITY_DISPOSITION_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_DISPOSITION_ID.
var (
	HTTP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "HTTP_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "HTTP_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "HTTP_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "HTTP_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "HTTP_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "HTTP_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "HTTP_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "HTTP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "HTTP_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "HTTP_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "HTTP_ACTIVITY_DISPOSITION_ID_RESET",
		22: "HTTP_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "HTTP_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "HTTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "HTTP_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "HTTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "HTTP_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "HTTP_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	HTTP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"HTTP_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"HTTP_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"HTTP_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"HTTP_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"HTTP_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"HTTP_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"HTTP_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"HTTP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"HTTP_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"HTTP_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"HTTP_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"HTTP_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"HTTP_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"HTTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"HTTP_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"HTTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"HTTP_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"HTTP_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x HTTP_ACTIVITY_DISPOSITION_ID) Enum() *HTTP_ACTIVITY_DISPOSITION_ID {
	p := new(HTTP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[11].Descriptor()
}

func (HTTP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[11]
}

func (x HTTP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (HTTP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{11}
}

type EMAIL_ACTIVITY_CLASS_UID int32

const (
	EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY_CLASS_UID_UNSPECIFIED    EMAIL_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY EMAIL_ACTIVITY_CLASS_UID = 4009 // Type: OCSF_VALUE; EnumValue: 4009;
)

// Enum value maps for EMAIL_ACTIVITY_CLASS_UID.
var (
	EMAIL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "EMAIL_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4009: "EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY",
	}
	EMAIL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_ACTIVITY_CLASS_UID_UNSPECIFIED":    0,
		"EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY": 4009,
	}
)

func (x EMAIL_ACTIVITY_CLASS_UID) Enum() *EMAIL_ACTIVITY_CLASS_UID {
	p := new(EMAIL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[12].Descriptor()
}

func (EMAIL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[12]
}

func (x EMAIL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{12}
}

type DNS_ACTIVITY_TYPE_UID int32

const (
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_UNSPECIFIED           DNS_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_UNKNOWN  DNS_ACTIVITY_TYPE_UID = 400300 // Type: OCSF_VALUE; EnumValue: 400300;
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_QUERY    DNS_ACTIVITY_TYPE_UID = 400301 // Type: OCSF_VALUE; EnumValue: 400301;
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_RESPONSE DNS_ACTIVITY_TYPE_UID = 400302 // Type: OCSF_VALUE; EnumValue: 400302;
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TRAFFIC  DNS_ACTIVITY_TYPE_UID = 400306 // Type: OCSF_VALUE; EnumValue: 400306;
	DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_OTHER    DNS_ACTIVITY_TYPE_UID = 400399 // Type: OCSF_VALUE; EnumValue: 400399;
)

// Enum value maps for DNS_ACTIVITY_TYPE_UID.
var (
	DNS_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "DNS_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400300: "DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_UNKNOWN",
		400301: "DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_QUERY",
		400302: "DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_RESPONSE",
		400306: "DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TRAFFIC",
		400399: "DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_OTHER",
	}
	DNS_ACTIVITY_TYPE_UID_value = map[string]int32{
		"DNS_ACTIVITY_TYPE_UID_UNSPECIFIED":           0,
		"DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_UNKNOWN":  400300,
		"DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_QUERY":    400301,
		"DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_RESPONSE": 400302,
		"DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_TRAFFIC":  400306,
		"DNS_ACTIVITY_TYPE_UID_DNS_ACTIVITY_OTHER":    400399,
	}
)

func (x DNS_ACTIVITY_TYPE_UID) Enum() *DNS_ACTIVITY_TYPE_UID {
	p := new(DNS_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[13].Descriptor()
}

func (DNS_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[13]
}

func (x DNS_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_TYPE_UID.Descriptor instead.
func (DNS_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{13}
}

type NETWORK_FILE_ACTIVITY_TYPE_UID int32

const (
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED                    NETWORK_FILE_ACTIVITY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNKNOWN  NETWORK_FILE_ACTIVITY_TYPE_UID = 4001000 // Type: OCSF_VALUE; EnumValue: 4001000;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPLOAD   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001001 // Type: OCSF_VALUE; EnumValue: 4001001;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DOWNLOAD NETWORK_FILE_ACTIVITY_TYPE_UID = 4001002 // Type: OCSF_VALUE; EnumValue: 4001002;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPDATE   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001003 // EnumValue: 4001003; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DELETE   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001004 // Type: OCSF_VALUE; EnumValue: 4001004;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RENAME   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001005 // Type: OCSF_VALUE; EnumValue: 4001005;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_COPY     NETWORK_FILE_ACTIVITY_TYPE_UID = 4001006 // Type: OCSF_VALUE; EnumValue: 4001006;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_MOVE     NETWORK_FILE_ACTIVITY_TYPE_UID = 4001007 // Type: OCSF_VALUE; EnumValue: 4001007;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RESTORE  NETWORK_FILE_ACTIVITY_TYPE_UID = 4001008 // Type: OCSF_VALUE; EnumValue: 4001008;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_PREVIEW  NETWORK_FILE_ACTIVITY_TYPE_UID = 4001009 // Type: OCSF_VALUE; EnumValue: 4001009;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_LOCK     NETWORK_FILE_ACTIVITY_TYPE_UID = 4001010 // Type: OCSF_VALUE; EnumValue: 4001010;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNLOCK   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001011 // Type: OCSF_VALUE; EnumValue: 4001011;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SHARE    NETWORK_FILE_ACTIVITY_TYPE_UID = 4001012 // EnumValue: 4001012; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSHARE  NETWORK_FILE_ACTIVITY_TYPE_UID = 4001013 // Type: OCSF_VALUE; EnumValue: 4001013;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OPEN     NETWORK_FILE_ACTIVITY_TYPE_UID = 4001014 // EnumValue: 4001014; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SYNC     NETWORK_FILE_ACTIVITY_TYPE_UID = 4001015 // Type: OCSF_VALUE; EnumValue: 4001015;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSYNC   NETWORK_FILE_ACTIVITY_TYPE_UID = 4001016 // Type: OCSF_VALUE; EnumValue: 4001016;
	NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OTHER    NETWORK_FILE_ACTIVITY_TYPE_UID = 4001099 // Type: OCSF_VALUE; EnumValue: 4001099;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_TYPE_UID.
var (
	NETWORK_FILE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:       "NETWORK_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED",
		4001000: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNKNOWN",
		4001001: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPLOAD",
		4001002: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DOWNLOAD",
		4001003: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPDATE",
		4001004: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DELETE",
		4001005: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RENAME",
		4001006: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_COPY",
		4001007: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_MOVE",
		4001008: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RESTORE",
		4001009: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_PREVIEW",
		4001010: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_LOCK",
		4001011: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNLOCK",
		4001012: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SHARE",
		4001013: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSHARE",
		4001014: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OPEN",
		4001015: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SYNC",
		4001016: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSYNC",
		4001099: "NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OTHER",
	}
	NETWORK_FILE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED":                    0,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNKNOWN":  4001000,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPLOAD":   4001001,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DOWNLOAD": 4001002,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UPDATE":   4001003,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_DELETE":   4001004,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RENAME":   4001005,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_COPY":     4001006,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_MOVE":     4001007,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_RESTORE":  4001008,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_PREVIEW":  4001009,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_LOCK":     4001010,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNLOCK":   4001011,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SHARE":    4001012,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSHARE":  4001013,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OPEN":     4001014,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_SYNC":     4001015,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_UNSYNC":   4001016,
		"NETWORK_FILE_ACTIVITY_TYPE_UID_NETWORK_FILE_ACTIVITY_OTHER":    4001099,
	}
)

func (x NETWORK_FILE_ACTIVITY_TYPE_UID) Enum() *NETWORK_FILE_ACTIVITY_TYPE_UID {
	p := new(NETWORK_FILE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[14].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[14]
}

func (x NETWORK_FILE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_TYPE_UID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{14}
}

type FTP_ACTIVITY_ACTIVITY_ID int32

const (
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN FTP_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_PUT     FTP_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_GET     FTP_ACTIVITY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_POLL    FTP_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_DELETE  FTP_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_RENAME  FTP_ACTIVITY_ACTIVITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_LIST    FTP_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_OTHER   FTP_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FTP_ACTIVITY_ACTIVITY_ID.
var (
	FTP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_ACTIVITY_ID_PUT",
		2:  "FTP_ACTIVITY_ACTIVITY_ID_GET",
		3:  "FTP_ACTIVITY_ACTIVITY_ID_POLL",
		4:  "FTP_ACTIVITY_ACTIVITY_ID_DELETE",
		5:  "FTP_ACTIVITY_ACTIVITY_ID_RENAME",
		6:  "FTP_ACTIVITY_ACTIVITY_ID_LIST",
		99: "FTP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	FTP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"FTP_ACTIVITY_ACTIVITY_ID_PUT":     1,
		"FTP_ACTIVITY_ACTIVITY_ID_GET":     2,
		"FTP_ACTIVITY_ACTIVITY_ID_POLL":    3,
		"FTP_ACTIVITY_ACTIVITY_ID_DELETE":  4,
		"FTP_ACTIVITY_ACTIVITY_ID_RENAME":  5,
		"FTP_ACTIVITY_ACTIVITY_ID_LIST":    6,
		"FTP_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FTP_ACTIVITY_ACTIVITY_ID) Enum() *FTP_ACTIVITY_ACTIVITY_ID {
	p := new(FTP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[15].Descriptor()
}

func (FTP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[15]
}

func (x FTP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (FTP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{15}
}

type NETWORK_TYPE_UID int32

const (
	NETWORK_TYPE_UID_NETWORK_TYPE_UID_UNSPECIFIED     NETWORK_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	NETWORK_TYPE_UID_NETWORK_TYPE_UID_NETWORK_UNKNOWN NETWORK_TYPE_UID = 400000 // Type: OCSF_VALUE; EnumValue: 400000;
	NETWORK_TYPE_UID_NETWORK_TYPE_UID_NETWORK_OTHER   NETWORK_TYPE_UID = 400099 // Type: OCSF_VALUE; EnumValue: 400099;
)

// Enum value maps for NETWORK_TYPE_UID.
var (
	NETWORK_TYPE_UID_name = map[int32]string{
		0:      "NETWORK_TYPE_UID_UNSPECIFIED",
		400000: "NETWORK_TYPE_UID_NETWORK_UNKNOWN",
		400099: "NETWORK_TYPE_UID_NETWORK_OTHER",
	}
	NETWORK_TYPE_UID_value = map[string]int32{
		"NETWORK_TYPE_UID_UNSPECIFIED":     0,
		"NETWORK_TYPE_UID_NETWORK_UNKNOWN": 400000,
		"NETWORK_TYPE_UID_NETWORK_OTHER":   400099,
	}
)

func (x NETWORK_TYPE_UID) Enum() *NETWORK_TYPE_UID {
	p := new(NETWORK_TYPE_UID)
	*p = x
	return p
}

func (x NETWORK_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[16].Descriptor()
}

func (NETWORK_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[16]
}

func (x NETWORK_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_TYPE_UID.Descriptor instead.
func (NETWORK_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{16}
}

type DNS_ACTIVITY_ACTIVITY_ID int32

const (
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN  DNS_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_QUERY    DNS_ACTIVITY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_RESPONSE DNS_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_TRAFFIC  DNS_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_OTHER    DNS_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ACTIVITY_ACTIVITY_ID.
var (
	DNS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_ACTIVITY_ID_QUERY",
		2:  "DNS_ACTIVITY_ACTIVITY_ID_RESPONSE",
		6:  "DNS_ACTIVITY_ACTIVITY_ID_TRAFFIC",
		99: "DNS_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	DNS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN":  0,
		"DNS_ACTIVITY_ACTIVITY_ID_QUERY":    1,
		"DNS_ACTIVITY_ACTIVITY_ID_RESPONSE": 2,
		"DNS_ACTIVITY_ACTIVITY_ID_TRAFFIC":  6,
		"DNS_ACTIVITY_ACTIVITY_ID_OTHER":    99,
	}
)

func (x DNS_ACTIVITY_ACTIVITY_ID) Enum() *DNS_ACTIVITY_ACTIVITY_ID {
	p := new(DNS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[17].Descriptor()
}

func (DNS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[17]
}

func (x DNS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (DNS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{17}
}

type NETWORK_ACTIVITY_TYPE_UID int32

const (
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_UNSPECIFIED              NETWORK_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_UNKNOWN NETWORK_ACTIVITY_TYPE_UID = 400100 // Type: OCSF_VALUE; EnumValue: 400100;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OPEN    NETWORK_ACTIVITY_TYPE_UID = 400101 // Type: OCSF_VALUE; EnumValue: 400101;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_CLOSE   NETWORK_ACTIVITY_TYPE_UID = 400102 // Type: OCSF_VALUE; EnumValue: 400102;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_RESET   NETWORK_ACTIVITY_TYPE_UID = 400103 // Type: OCSF_VALUE; EnumValue: 400103;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_FAIL    NETWORK_ACTIVITY_TYPE_UID = 400104 // Type: OCSF_VALUE; EnumValue: 400104;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_REFUSE  NETWORK_ACTIVITY_TYPE_UID = 400105 // Type: OCSF_VALUE; EnumValue: 400105;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TRAFFIC NETWORK_ACTIVITY_TYPE_UID = 400106 // Type: OCSF_VALUE; EnumValue: 400106;
	NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OTHER   NETWORK_ACTIVITY_TYPE_UID = 400199 // Type: OCSF_VALUE; EnumValue: 400199;
)

// Enum value maps for NETWORK_ACTIVITY_TYPE_UID.
var (
	NETWORK_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "NETWORK_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400100: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_UNKNOWN",
		400101: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OPEN",
		400102: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_CLOSE",
		400103: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_RESET",
		400104: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_FAIL",
		400105: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_REFUSE",
		400106: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TRAFFIC",
		400199: "NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OTHER",
	}
	NETWORK_ACTIVITY_TYPE_UID_value = map[string]int32{
		"NETWORK_ACTIVITY_TYPE_UID_UNSPECIFIED":              0,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_UNKNOWN": 400100,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OPEN":    400101,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_CLOSE":   400102,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_RESET":   400103,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_FAIL":    400104,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_REFUSE":  400105,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_TRAFFIC": 400106,
		"NETWORK_ACTIVITY_TYPE_UID_NETWORK_ACTIVITY_OTHER":   400199,
	}
)

func (x NETWORK_ACTIVITY_TYPE_UID) Enum() *NETWORK_ACTIVITY_TYPE_UID {
	p := new(NETWORK_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[18].Descriptor()
}

func (NETWORK_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[18]
}

func (x NETWORK_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_TYPE_UID.Descriptor instead.
func (NETWORK_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{18}
}

type NETWORK_ACTIVITY_DISPOSITION_ID int32

const (
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN             NETWORK_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED             NETWORK_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED             NETWORK_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED         NETWORK_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED            NETWORK_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DELETED             NETWORK_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED             NETWORK_ACTIVITY_DISPOSITION_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       NETWORK_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED            NETWORK_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED            NETWORK_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED          NETWORK_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED           NETWORK_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED NETWORK_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED         NETWORK_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED             NETWORK_ACTIVITY_DISPOSITION_ID = 14 // EnumValue: 14; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED            NETWORK_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION           NETWORK_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED              NETWORK_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED              NETWORK_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ALERT               NETWORK_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_COUNT               NETWORK_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_RESET               NETWORK_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CAPTCHA             NETWORK_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CHALLENGE           NETWORK_ACTIVITY_DISPOSITION_ID = 23 // EnumValue: 23; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      NETWORK_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_REJECTED            NETWORK_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        NETWORK_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ERROR               NETWORK_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_OTHER               NETWORK_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTIVITY_DISPOSITION_ID.
var (
	NETWORK_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "NETWORK_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "NETWORK_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "NETWORK_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "NETWORK_ACTIVITY_DISPOSITION_ID_RESET",
		22: "NETWORK_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "NETWORK_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "NETWORK_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "NETWORK_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "NETWORK_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "NETWORK_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "NETWORK_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	NETWORK_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"NETWORK_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"NETWORK_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"NETWORK_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"NETWORK_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"NETWORK_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x NETWORK_ACTIVITY_DISPOSITION_ID) Enum() *NETWORK_ACTIVITY_DISPOSITION_ID {
	p := new(NETWORK_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[19].Descriptor()
}

func (NETWORK_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[19]
}

func (x NETWORK_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (NETWORK_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{19}
}

type EMAIL_ACTIVITY_TYPE_UID int32

const (
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_UNSPECIFIED            EMAIL_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_UNKNOWN EMAIL_ACTIVITY_TYPE_UID = 400900 // Type: OCSF_VALUE; EnumValue: 400900;
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SEND    EMAIL_ACTIVITY_TYPE_UID = 400901 // Type: OCSF_VALUE; EnumValue: 400901;
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_RECEIVE EMAIL_ACTIVITY_TYPE_UID = 400902 // Type: OCSF_VALUE; EnumValue: 400902;
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SCAN    EMAIL_ACTIVITY_TYPE_UID = 400903 // Type: OCSF_VALUE; EnumValue: 400903;
	EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_OTHER   EMAIL_ACTIVITY_TYPE_UID = 400999 // Type: OCSF_VALUE; EnumValue: 400999;
)

// Enum value maps for EMAIL_ACTIVITY_TYPE_UID.
var (
	EMAIL_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "EMAIL_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400900: "EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_UNKNOWN",
		400901: "EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SEND",
		400902: "EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_RECEIVE",
		400903: "EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SCAN",
		400999: "EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_OTHER",
	}
	EMAIL_ACTIVITY_TYPE_UID_value = map[string]int32{
		"EMAIL_ACTIVITY_TYPE_UID_UNSPECIFIED":            0,
		"EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_UNKNOWN": 400900,
		"EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SEND":    400901,
		"EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_RECEIVE": 400902,
		"EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_SCAN":    400903,
		"EMAIL_ACTIVITY_TYPE_UID_EMAIL_ACTIVITY_OTHER":   400999,
	}
)

func (x EMAIL_ACTIVITY_TYPE_UID) Enum() *EMAIL_ACTIVITY_TYPE_UID {
	p := new(EMAIL_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[20].Descriptor()
}

func (EMAIL_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[20]
}

func (x EMAIL_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_TYPE_UID.Descriptor instead.
func (EMAIL_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{20}
}

type HTTP_ACTIVITY_ACTIVITY_ID int32

const (
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN HTTP_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_CONNECT HTTP_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_DELETE  HTTP_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_GET     HTTP_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_HEAD    HTTP_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_OPTIONS HTTP_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_POST    HTTP_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_PUT     HTTP_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_TRACE   HTTP_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_OTHER   HTTP_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for HTTP_ACTIVITY_ACTIVITY_ID.
var (
	HTTP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_ACTIVITY_ID_CONNECT",
		2:  "HTTP_ACTIVITY_ACTIVITY_ID_DELETE",
		3:  "HTTP_ACTIVITY_ACTIVITY_ID_GET",
		4:  "HTTP_ACTIVITY_ACTIVITY_ID_HEAD",
		5:  "HTTP_ACTIVITY_ACTIVITY_ID_OPTIONS",
		6:  "HTTP_ACTIVITY_ACTIVITY_ID_POST",
		7:  "HTTP_ACTIVITY_ACTIVITY_ID_PUT",
		8:  "HTTP_ACTIVITY_ACTIVITY_ID_TRACE",
		99: "HTTP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	HTTP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"HTTP_ACTIVITY_ACTIVITY_ID_CONNECT": 1,
		"HTTP_ACTIVITY_ACTIVITY_ID_DELETE":  2,
		"HTTP_ACTIVITY_ACTIVITY_ID_GET":     3,
		"HTTP_ACTIVITY_ACTIVITY_ID_HEAD":    4,
		"HTTP_ACTIVITY_ACTIVITY_ID_OPTIONS": 5,
		"HTTP_ACTIVITY_ACTIVITY_ID_POST":    6,
		"HTTP_ACTIVITY_ACTIVITY_ID_PUT":     7,
		"HTTP_ACTIVITY_ACTIVITY_ID_TRACE":   8,
		"HTTP_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x HTTP_ACTIVITY_ACTIVITY_ID) Enum() *HTTP_ACTIVITY_ACTIVITY_ID {
	p := new(HTTP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[21].Descriptor()
}

func (HTTP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[21]
}

func (x HTTP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (HTTP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{21}
}

type SMB_ACTIVITY_DISPOSITION_ID int32

const (
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN             SMB_ACTIVITY_DISPOSITION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ALLOWED             SMB_ACTIVITY_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_BLOCKED             SMB_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED         SMB_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ISOLATED            SMB_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DELETED             SMB_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DROPPED             SMB_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SMB_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_APPROVED            SMB_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_RESTORED            SMB_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_EXONERATED          SMB_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CORRECTED           SMB_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SMB_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SMB_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DELAYED             SMB_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DETECTED            SMB_ACTIVITY_DISPOSITION_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION           SMB_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 16; Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_LOGGED              SMB_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_TAGGED              SMB_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ALERT               SMB_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_COUNT               SMB_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_RESET               SMB_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CAPTCHA             SMB_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CHALLENGE           SMB_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      SMB_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_REJECTED            SMB_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        SMB_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ERROR               SMB_ACTIVITY_DISPOSITION_ID = 27 // EnumValue: 27; Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_OTHER               SMB_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SMB_ACTIVITY_DISPOSITION_ID.
var (
	SMB_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SMB_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "SMB_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "SMB_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "SMB_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "SMB_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "SMB_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "SMB_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SMB_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "SMB_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "SMB_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "SMB_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "SMB_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SMB_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "SMB_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "SMB_ACTIVITY_DISPOSITION_ID_RESET",
		22: "SMB_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "SMB_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "SMB_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "SMB_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "SMB_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "SMB_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "SMB_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	SMB_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SMB_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SMB_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"SMB_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"SMB_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"SMB_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"SMB_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"SMB_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"SMB_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SMB_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"SMB_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"SMB_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"SMB_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"SMB_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SMB_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"SMB_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"SMB_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"SMB_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"SMB_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"SMB_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"SMB_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"SMB_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"SMB_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"SMB_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x SMB_ACTIVITY_DISPOSITION_ID) Enum() *SMB_ACTIVITY_DISPOSITION_ID {
	p := new(SMB_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[22].Descriptor()
}

func (SMB_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[22]
}

func (x SMB_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SMB_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{22}
}

type EMAIL_URL_ACTIVITY_CLASS_UID int32

const (
	EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY_CLASS_UID_UNSPECIFIED        EMAIL_URL_ACTIVITY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY EMAIL_URL_ACTIVITY_CLASS_UID = 40012 // EnumValue: 40012; Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_CLASS_UID.
var (
	EMAIL_URL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:     "EMAIL_URL_ACTIVITY_CLASS_UID_UNSPECIFIED",
		40012: "EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY",
	}
	EMAIL_URL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_CLASS_UID_UNSPECIFIED":        0,
		"EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY": 40012,
	}
)

func (x EMAIL_URL_ACTIVITY_CLASS_UID) Enum() *EMAIL_URL_ACTIVITY_CLASS_UID {
	p := new(EMAIL_URL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[23].Descriptor()
}

func (EMAIL_URL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[23]
}

func (x EMAIL_URL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{23}
}

type DNS_ACTIVITY_RCODE_ID int32

const (
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_UNKNOWN     DNS_ACTIVITY_RCODE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_FORM_ERROR  DNS_ACTIVITY_RCODE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_SERV_ERROR  DNS_ACTIVITY_RCODE_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NX_DOMAIN   DNS_ACTIVITY_RCODE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_IMP     DNS_ACTIVITY_RCODE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_REFUSED     DNS_ACTIVITY_RCODE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_YX_DOMAIN   DNS_ACTIVITY_RCODE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_YXRR_SET    DNS_ACTIVITY_RCODE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NXRR_SET    DNS_ACTIVITY_RCODE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_AUTH    DNS_ACTIVITY_RCODE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_ZONE    DNS_ACTIVITY_RCODE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_DSOTYPENI   DNS_ACTIVITY_RCODE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADSIG_VERS DNS_ACTIVITY_RCODE_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADKEY      DNS_ACTIVITY_RCODE_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADTIME     DNS_ACTIVITY_RCODE_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADMODE     DNS_ACTIVITY_RCODE_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADNAME     DNS_ACTIVITY_RCODE_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADALG      DNS_ACTIVITY_RCODE_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADTRUNC    DNS_ACTIVITY_RCODE_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADCOOKIE   DNS_ACTIVITY_RCODE_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_UNASSIGNED  DNS_ACTIVITY_RCODE_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_RESERVED    DNS_ACTIVITY_RCODE_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_OTHER       DNS_ACTIVITY_RCODE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ACTIVITY_RCODE_ID.
var (
	DNS_ACTIVITY_RCODE_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_RCODE_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_RCODE_ID_FORM_ERROR",
		2:  "DNS_ACTIVITY_RCODE_ID_SERV_ERROR",
		3:  "DNS_ACTIVITY_RCODE_ID_NX_DOMAIN",
		4:  "DNS_ACTIVITY_RCODE_ID_NOT_IMP",
		5:  "DNS_ACTIVITY_RCODE_ID_REFUSED",
		6:  "DNS_ACTIVITY_RCODE_ID_YX_DOMAIN",
		7:  "DNS_ACTIVITY_RCODE_ID_YXRR_SET",
		8:  "DNS_ACTIVITY_RCODE_ID_NXRR_SET",
		9:  "DNS_ACTIVITY_RCODE_ID_NOT_AUTH",
		10: "DNS_ACTIVITY_RCODE_ID_NOT_ZONE",
		11: "DNS_ACTIVITY_RCODE_ID_DSOTYPENI",
		16: "DNS_ACTIVITY_RCODE_ID_BADSIG_VERS",
		17: "DNS_ACTIVITY_RCODE_ID_BADKEY",
		18: "DNS_ACTIVITY_RCODE_ID_BADTIME",
		19: "DNS_ACTIVITY_RCODE_ID_BADMODE",
		20: "DNS_ACTIVITY_RCODE_ID_BADNAME",
		21: "DNS_ACTIVITY_RCODE_ID_BADALG",
		22: "DNS_ACTIVITY_RCODE_ID_BADTRUNC",
		23: "DNS_ACTIVITY_RCODE_ID_BADCOOKIE",
		24: "DNS_ACTIVITY_RCODE_ID_UNASSIGNED",
		25: "DNS_ACTIVITY_RCODE_ID_RESERVED",
		99: "DNS_ACTIVITY_RCODE_ID_OTHER",
	}
	DNS_ACTIVITY_RCODE_ID_value = map[string]int32{
		"DNS_ACTIVITY_RCODE_ID_UNKNOWN":     0,
		"DNS_ACTIVITY_RCODE_ID_FORM_ERROR":  1,
		"DNS_ACTIVITY_RCODE_ID_SERV_ERROR":  2,
		"DNS_ACTIVITY_RCODE_ID_NX_DOMAIN":   3,
		"DNS_ACTIVITY_RCODE_ID_NOT_IMP":     4,
		"DNS_ACTIVITY_RCODE_ID_REFUSED":     5,
		"DNS_ACTIVITY_RCODE_ID_YX_DOMAIN":   6,
		"DNS_ACTIVITY_RCODE_ID_YXRR_SET":    7,
		"DNS_ACTIVITY_RCODE_ID_NXRR_SET":    8,
		"DNS_ACTIVITY_RCODE_ID_NOT_AUTH":    9,
		"DNS_ACTIVITY_RCODE_ID_NOT_ZONE":    10,
		"DNS_ACTIVITY_RCODE_ID_DSOTYPENI":   11,
		"DNS_ACTIVITY_RCODE_ID_BADSIG_VERS": 16,
		"DNS_ACTIVITY_RCODE_ID_BADKEY":      17,
		"DNS_ACTIVITY_RCODE_ID_BADTIME":     18,
		"DNS_ACTIVITY_RCODE_ID_BADMODE":     19,
		"DNS_ACTIVITY_RCODE_ID_BADNAME":     20,
		"DNS_ACTIVITY_RCODE_ID_BADALG":      21,
		"DNS_ACTIVITY_RCODE_ID_BADTRUNC":    22,
		"DNS_ACTIVITY_RCODE_ID_BADCOOKIE":   23,
		"DNS_ACTIVITY_RCODE_ID_UNASSIGNED":  24,
		"DNS_ACTIVITY_RCODE_ID_RESERVED":    25,
		"DNS_ACTIVITY_RCODE_ID_OTHER":       99,
	}
)

func (x DNS_ACTIVITY_RCODE_ID) Enum() *DNS_ACTIVITY_RCODE_ID {
	p := new(DNS_ACTIVITY_RCODE_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_RCODE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_RCODE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[24].Descriptor()
}

func (DNS_ACTIVITY_RCODE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[24]
}

func (x DNS_ACTIVITY_RCODE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_RCODE_ID.Descriptor instead.
func (DNS_ACTIVITY_RCODE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{24}
}

type EMAIL_ACTIVITY_ACTION_ID int32

const (
	EMAIL_ACTIVITY_ACTION_ID_EMAIL_ACTIVITY_ACTION_ID_UNKNOWN EMAIL_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_ACTION_ID_EMAIL_ACTIVITY_ACTION_ID_ALLOWED EMAIL_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_ACTIVITY_ACTION_ID_EMAIL_ACTIVITY_ACTION_ID_DENIED  EMAIL_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_ACTION_ID_EMAIL_ACTIVITY_ACTION_ID_OTHER   EMAIL_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_ACTIVITY_ACTION_ID.
var (
	EMAIL_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "EMAIL_ACTIVITY_ACTION_ID_DENIED",
		99: "EMAIL_ACTIVITY_ACTION_ID_OTHER",
	}
	EMAIL_ACTIVITY_ACTION_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"EMAIL_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"EMAIL_ACTIVITY_ACTION_ID_DENIED":  2,
		"EMAIL_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x EMAIL_ACTIVITY_ACTION_ID) Enum() *EMAIL_ACTIVITY_ACTION_ID {
	p := new(EMAIL_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[25].Descriptor()
}

func (EMAIL_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[25]
}

func (x EMAIL_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_ACTION_ID.Descriptor instead.
func (EMAIL_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{25}
}

type HTTP_ACTIVITY_CATEGORY_UID int32

const (
	HTTP_ACTIVITY_CATEGORY_UID_HTTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED      HTTP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	HTTP_ACTIVITY_CATEGORY_UID_HTTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY HTTP_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for HTTP_ACTIVITY_CATEGORY_UID.
var (
	HTTP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "HTTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "HTTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	HTTP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"HTTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"HTTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x HTTP_ACTIVITY_CATEGORY_UID) Enum() *HTTP_ACTIVITY_CATEGORY_UID {
	p := new(HTTP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[26].Descriptor()
}

func (HTTP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[26]
}

func (x HTTP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (HTTP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{26}
}

type EMAIL_URL_ACTIVITY_ACTION_ID int32

const (
	EMAIL_URL_ACTIVITY_ACTION_ID_EMAIL_URL_ACTIVITY_ACTION_ID_UNKNOWN EMAIL_URL_ACTIVITY_ACTION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_ACTION_ID_EMAIL_URL_ACTIVITY_ACTION_ID_ALLOWED EMAIL_URL_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_URL_ACTIVITY_ACTION_ID_EMAIL_URL_ACTIVITY_ACTION_ID_DENIED  EMAIL_URL_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_URL_ACTIVITY_ACTION_ID_EMAIL_URL_ACTIVITY_ACTION_ID_OTHER   EMAIL_URL_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_URL_ACTIVITY_ACTION_ID.
var (
	EMAIL_URL_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "EMAIL_URL_ACTIVITY_ACTION_ID_DENIED",
		99: "EMAIL_URL_ACTIVITY_ACTION_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_ACTION_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"EMAIL_URL_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"EMAIL_URL_ACTIVITY_ACTION_ID_DENIED":  2,
		"EMAIL_URL_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x EMAIL_URL_ACTIVITY_ACTION_ID) Enum() *EMAIL_URL_ACTIVITY_ACTION_ID {
	p := new(EMAIL_URL_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[27].Descriptor()
}

func (EMAIL_URL_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[27]
}

func (x EMAIL_URL_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_ACTION_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{27}
}

type SSH_ACTIVITY_SEVERITY_ID int32

const (
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_UNKNOWN       SSH_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL SSH_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_LOW           SSH_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_MEDIUM        SSH_ACTIVITY_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_HIGH          SSH_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_CRITICAL      SSH_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_FATAL         SSH_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_OTHER         SSH_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SSH_ACTIVITY_SEVERITY_ID.
var (
	SSH_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "SSH_ACTIVITY_SEVERITY_ID_LOW",
		3:  "SSH_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "SSH_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "SSH_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "SSH_ACTIVITY_SEVERITY_ID_FATAL",
		99: "SSH_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SSH_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SSH_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"SSH_ACTIVITY_SEVERITY_ID_LOW":           2,
		"SSH_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"SSH_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"SSH_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"SSH_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"SSH_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x SSH_ACTIVITY_SEVERITY_ID) Enum() *SSH_ACTIVITY_SEVERITY_ID {
	p := new(SSH_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[28].Descriptor()
}

func (SSH_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[28]
}

func (x SSH_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SSH_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{28}
}

type EMAIL_URL_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_URL_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_SEND    EMAIL_URL_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_RECEIVE EMAIL_URL_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_SCAN    EMAIL_URL_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_URL_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_URL_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_ACTIVITY_ID_SEND",
		2:  "EMAIL_URL_ACTIVITY_ACTIVITY_ID_RECEIVE",
		3:  "EMAIL_URL_ACTIVITY_ACTIVITY_ID_SCAN",
		99: "EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_SEND":    1,
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_RECEIVE": 2,
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_SCAN":    3,
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_URL_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_URL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[29].Descriptor()
}

func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[29]
}

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{29}
}

type NETWORK_ACTIVITY_ID int32

const (
	NETWORK_ACTIVITY_ID_NETWORK_ACTIVITY_ID_UNKNOWN NETWORK_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_ID_NETWORK_ACTIVITY_ID_OTHER   NETWORK_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTIVITY_ID.
var (
	NETWORK_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_ID_UNKNOWN",
		99: "NETWORK_ACTIVITY_ID_OTHER",
	}
	NETWORK_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_ID_OTHER":   99,
	}
)

func (x NETWORK_ACTIVITY_ID) Enum() *NETWORK_ACTIVITY_ID {
	p := new(NETWORK_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[30].Descriptor()
}

func (NETWORK_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[30]
}

func (x NETWORK_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_ID.Descriptor instead.
func (NETWORK_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{30}
}

type DHCP_ACTIVITY_CLASS_UID int32

const (
	DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY_CLASS_UID_UNSPECIFIED   DHCP_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY DHCP_ACTIVITY_CLASS_UID = 4004 // Type: OCSF_VALUE; EnumValue: 4004;
)

// Enum value maps for DHCP_ACTIVITY_CLASS_UID.
var (
	DHCP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "DHCP_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4004: "DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY",
	}
	DHCP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"DHCP_ACTIVITY_CLASS_UID_UNSPECIFIED":   0,
		"DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY": 4004,
	}
)

func (x DHCP_ACTIVITY_CLASS_UID) Enum() *DHCP_ACTIVITY_CLASS_UID {
	p := new(DHCP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[31].Descriptor()
}

func (DHCP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[31]
}

func (x DHCP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_CLASS_UID.Descriptor instead.
func (DHCP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{31}
}

type EMAIL_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_LOW           EMAIL_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_ACTIVITY_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "EMAIL_ACTIVITY_SEVERITY_ID_LOW",
		3:  "EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "EMAIL_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "EMAIL_ACTIVITY_SEVERITY_ID_FATAL",
		99: "EMAIL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"EMAIL_ACTIVITY_SEVERITY_ID_LOW":           2,
		"EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"EMAIL_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"EMAIL_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"EMAIL_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x EMAIL_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[32].Descriptor()
}

func (EMAIL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[32]
}

func (x EMAIL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{32}
}

type DHCP_ACTIVITY_DISPOSITION_ID int32

const (
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_UNKNOWN             DHCP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_ALLOWED             DHCP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_BLOCKED             DHCP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_QUARANTINED         DHCP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_ISOLATED            DHCP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_DELETED             DHCP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_DROPPED             DHCP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       DHCP_ACTIVITY_DISPOSITION_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_APPROVED            DHCP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_RESTORED            DHCP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_EXONERATED          DHCP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_CORRECTED           DHCP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED DHCP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         DHCP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_DELAYED             DHCP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_DETECTED            DHCP_ACTIVITY_DISPOSITION_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_NO_ACTION           DHCP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_LOGGED              DHCP_ACTIVITY_DISPOSITION_ID = 17 // EnumValue: 17; Type: OCSF_VALUE;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_TAGGED              DHCP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_ALERT               DHCP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_COUNT               DHCP_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_RESET               DHCP_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_CAPTCHA             DHCP_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_CHALLENGE           DHCP_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      DHCP_ACTIVITY_DISPOSITION_ID = 24 // EnumValue: 24; Type: OCSF_VALUE;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_REJECTED            DHCP_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        DHCP_ACTIVITY_DISPOSITION_ID = 26 // EnumValue: 26; Type: OCSF_VALUE;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_ERROR               DHCP_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	DHCP_ACTIVITY_DISPOSITION_ID_DHCP_ACTIVITY_DISPOSITION_ID_OTHER               DHCP_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DHCP_ACTIVITY_DISPOSITION_ID.
var (
	DHCP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "DHCP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "DHCP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "DHCP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "DHCP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "DHCP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "DHCP_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "DHCP_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "DHCP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "DHCP_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "DHCP_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "DHCP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "DHCP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "DHCP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "DHCP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "DHCP_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "DHCP_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "DHCP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "DHCP_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "DHCP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "DHCP_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "DHCP_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "DHCP_ACTIVITY_DISPOSITION_ID_RESET",
		22: "DHCP_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "DHCP_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "DHCP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "DHCP_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "DHCP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "DHCP_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "DHCP_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	DHCP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"DHCP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"DHCP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"DHCP_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"DHCP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"DHCP_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"DHCP_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"DHCP_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"DHCP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"DHCP_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"DHCP_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"DHCP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"DHCP_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"DHCP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"DHCP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"DHCP_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"DHCP_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"DHCP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"DHCP_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"DHCP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"DHCP_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"DHCP_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"DHCP_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"DHCP_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"DHCP_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"DHCP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"DHCP_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"DHCP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"DHCP_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"DHCP_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x DHCP_ACTIVITY_DISPOSITION_ID) Enum() *DHCP_ACTIVITY_DISPOSITION_ID {
	p := new(DHCP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[33].Descriptor()
}

func (DHCP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[33]
}

func (x DHCP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (DHCP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{33}
}

type FTP_ACTIVITY_DISPOSITION_ID int32

const (
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN             FTP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ALLOWED             FTP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_BLOCKED             FTP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED         FTP_ACTIVITY_DISPOSITION_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ISOLATED            FTP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DELETED             FTP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DROPPED             FTP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       FTP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_APPROVED            FTP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_RESTORED            FTP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_EXONERATED          FTP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CORRECTED           FTP_ACTIVITY_DISPOSITION_ID = 11 // EnumValue: 11; Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED FTP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         FTP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DELAYED             FTP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DETECTED            FTP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION           FTP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_LOGGED              FTP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_TAGGED              FTP_ACTIVITY_DISPOSITION_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ALERT               FTP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_COUNT               FTP_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_RESET               FTP_ACTIVITY_DISPOSITION_ID = 21 // EnumValue: 21; Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CAPTCHA             FTP_ACTIVITY_DISPOSITION_ID = 22 // EnumValue: 22; Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CHALLENGE           FTP_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      FTP_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_REJECTED            FTP_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        FTP_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ERROR               FTP_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_OTHER               FTP_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FTP_ACTIVITY_DISPOSITION_ID.
var (
	FTP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "FTP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "FTP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "FTP_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "FTP_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "FTP_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "FTP_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "FTP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "FTP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "FTP_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "FTP_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "FTP_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "FTP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "FTP_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "FTP_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "FTP_ACTIVITY_DISPOSITION_ID_RESET",
		22: "FTP_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "FTP_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "FTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "FTP_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "FTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "FTP_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "FTP_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	FTP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"FTP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"FTP_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"FTP_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"FTP_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"FTP_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"FTP_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"FTP_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"FTP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"FTP_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"FTP_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"FTP_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"FTP_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"FTP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"FTP_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"FTP_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"FTP_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"FTP_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"FTP_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"FTP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"FTP_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"FTP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"FTP_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"FTP_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x FTP_ACTIVITY_DISPOSITION_ID) Enum() *FTP_ACTIVITY_DISPOSITION_ID {
	p := new(FTP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[34].Descriptor()
}

func (FTP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[34]
}

func (x FTP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (FTP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{34}
}

type NETWORK_CATEGORY_UID int32

const (
	NETWORK_CATEGORY_UID_NETWORK_CATEGORY_UID_UNSPECIFIED      NETWORK_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_CATEGORY_UID_NETWORK_CATEGORY_UID_NETWORK_ACTIVITY NETWORK_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for NETWORK_CATEGORY_UID.
var (
	NETWORK_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_CATEGORY_UID_UNSPECIFIED",
		4: "NETWORK_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	NETWORK_CATEGORY_UID_value = map[string]int32{
		"NETWORK_CATEGORY_UID_UNSPECIFIED":      0,
		"NETWORK_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x NETWORK_CATEGORY_UID) Enum() *NETWORK_CATEGORY_UID {
	p := new(NETWORK_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[35].Descriptor()
}

func (NETWORK_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[35]
}

func (x NETWORK_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CATEGORY_UID.Descriptor instead.
func (NETWORK_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{35}
}

type NETWORK_ACTIVITY_SEVERITY_ID int32

const (
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN       NETWORK_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL NETWORK_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_LOW           NETWORK_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM        NETWORK_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_HIGH          NETWORK_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL      NETWORK_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_FATAL         NETWORK_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_OTHER         NETWORK_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTIVITY_SEVERITY_ID.
var (
	NETWORK_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORK_ACTIVITY_SEVERITY_ID_LOW",
		3:  "NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "NETWORK_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "NETWORK_ACTIVITY_SEVERITY_ID_FATAL",
		99: "NETWORK_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NETWORK_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORK_ACTIVITY_SEVERITY_ID_LOW":           2,
		"NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"NETWORK_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"NETWORK_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"NETWORK_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORK_ACTIVITY_SEVERITY_ID) Enum() *NETWORK_ACTIVITY_SEVERITY_ID {
	p := new(NETWORK_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[36].Descriptor()
}

func (NETWORK_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[36]
}

func (x NETWORK_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NETWORK_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{36}
}

type DNS_ACTIVITY_DISPOSITION_ID int32

const (
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN             DNS_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ALLOWED             DNS_ACTIVITY_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_BLOCKED             DNS_ACTIVITY_DISPOSITION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED         DNS_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ISOLATED            DNS_ACTIVITY_DISPOSITION_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DELETED             DNS_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DROPPED             DNS_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       DNS_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_APPROVED            DNS_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_RESTORED            DNS_ACTIVITY_DISPOSITION_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_EXONERATED          DNS_ACTIVITY_DISPOSITION_ID = 10 // EnumValue: 10; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CORRECTED           DNS_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED DNS_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED         DNS_ACTIVITY_DISPOSITION_ID = 13 // EnumValue: 13; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DELAYED             DNS_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DETECTED            DNS_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION           DNS_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_LOGGED              DNS_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_TAGGED              DNS_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ALERT               DNS_ACTIVITY_DISPOSITION_ID = 19 // EnumValue: 19; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_COUNT               DNS_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_RESET               DNS_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CAPTCHA             DNS_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CHALLENGE           DNS_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      DNS_ACTIVITY_DISPOSITION_ID = 24 // EnumValue: 24; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_REJECTED            DNS_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        DNS_ACTIVITY_DISPOSITION_ID = 26 // EnumValue: 26; Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ERROR               DNS_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_OTHER               DNS_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ACTIVITY_DISPOSITION_ID.
var (
	DNS_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "DNS_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "DNS_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "DNS_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "DNS_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "DNS_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "DNS_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "DNS_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "DNS_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "DNS_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "DNS_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "DNS_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "DNS_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "DNS_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "DNS_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "DNS_ACTIVITY_DISPOSITION_ID_RESET",
		22: "DNS_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "DNS_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "DNS_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "DNS_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "DNS_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "DNS_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "DNS_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	DNS_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"DNS_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"DNS_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"DNS_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"DNS_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"DNS_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"DNS_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"DNS_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"DNS_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"DNS_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"DNS_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"DNS_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"DNS_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"DNS_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"DNS_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"DNS_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"DNS_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"DNS_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"DNS_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"DNS_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"DNS_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"DNS_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"DNS_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"DNS_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x DNS_ACTIVITY_DISPOSITION_ID) Enum() *DNS_ACTIVITY_DISPOSITION_ID {
	p := new(DNS_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[37].Descriptor()
}

func (DNS_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[37]
}

func (x DNS_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (DNS_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{37}
}

type FTP_ACTIVITY_SEVERITY_ID int32

const (
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_UNKNOWN       FTP_ACTIVITY_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL FTP_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_LOW           FTP_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_MEDIUM        FTP_ACTIVITY_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_HIGH          FTP_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_CRITICAL      FTP_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_FATAL         FTP_ACTIVITY_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_OTHER         FTP_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FTP_ACTIVITY_SEVERITY_ID.
var (
	FTP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "FTP_ACTIVITY_SEVERITY_ID_LOW",
		3:  "FTP_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "FTP_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "FTP_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "FTP_ACTIVITY_SEVERITY_ID_FATAL",
		99: "FTP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	FTP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"FTP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"FTP_ACTIVITY_SEVERITY_ID_LOW":           2,
		"FTP_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"FTP_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"FTP_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"FTP_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"FTP_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x FTP_ACTIVITY_SEVERITY_ID) Enum() *FTP_ACTIVITY_SEVERITY_ID {
	p := new(FTP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[38].Descriptor()
}

func (FTP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[38]
}

func (x FTP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (FTP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{38}
}

type RDP_ACTIVITY_ACTIVITY_ID int32

const (
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN          RDP_ACTIVITY_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_INITIAL_REQUEST  RDP_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_INITIAL_RESPONSE RDP_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_CONNECT_REQUEST  RDP_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_CONNECT_RESPONSE RDP_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_TLS_HANDSHAKE    RDP_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_TRAFFIC          RDP_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_OTHER            RDP_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RDP_ACTIVITY_ACTIVITY_ID.
var (
	RDP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_ACTIVITY_ID_INITIAL_REQUEST",
		2:  "RDP_ACTIVITY_ACTIVITY_ID_INITIAL_RESPONSE",
		3:  "RDP_ACTIVITY_ACTIVITY_ID_CONNECT_REQUEST",
		4:  "RDP_ACTIVITY_ACTIVITY_ID_CONNECT_RESPONSE",
		5:  "RDP_ACTIVITY_ACTIVITY_ID_TLS_HANDSHAKE",
		6:  "RDP_ACTIVITY_ACTIVITY_ID_TRAFFIC",
		99: "RDP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	RDP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN":          0,
		"RDP_ACTIVITY_ACTIVITY_ID_INITIAL_REQUEST":  1,
		"RDP_ACTIVITY_ACTIVITY_ID_INITIAL_RESPONSE": 2,
		"RDP_ACTIVITY_ACTIVITY_ID_CONNECT_REQUEST":  3,
		"RDP_ACTIVITY_ACTIVITY_ID_CONNECT_RESPONSE": 4,
		"RDP_ACTIVITY_ACTIVITY_ID_TLS_HANDSHAKE":    5,
		"RDP_ACTIVITY_ACTIVITY_ID_TRAFFIC":          6,
		"RDP_ACTIVITY_ACTIVITY_ID_OTHER":            99,
	}
)

func (x RDP_ACTIVITY_ACTIVITY_ID) Enum() *RDP_ACTIVITY_ACTIVITY_ID {
	p := new(RDP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[39].Descriptor()
}

func (RDP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[39]
}

func (x RDP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (RDP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{39}
}

type SSH_ACTIVITY_ACTIVITY_ID int32

const (
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN SSH_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_OPEN    SSH_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_CLOSE   SSH_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_RESET   SSH_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_FAIL    SSH_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_REFUSE  SSH_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_TRAFFIC SSH_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_OTHER   SSH_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SSH_ACTIVITY_ACTIVITY_ID.
var (
	SSH_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_ACTIVITY_ID_OPEN",
		2:  "SSH_ACTIVITY_ACTIVITY_ID_CLOSE",
		3:  "SSH_ACTIVITY_ACTIVITY_ID_RESET",
		4:  "SSH_ACTIVITY_ACTIVITY_ID_FAIL",
		5:  "SSH_ACTIVITY_ACTIVITY_ID_REFUSE",
		6:  "SSH_ACTIVITY_ACTIVITY_ID_TRAFFIC",
		99: "SSH_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SSH_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"SSH_ACTIVITY_ACTIVITY_ID_OPEN":    1,
		"SSH_ACTIVITY_ACTIVITY_ID_CLOSE":   2,
		"SSH_ACTIVITY_ACTIVITY_ID_RESET":   3,
		"SSH_ACTIVITY_ACTIVITY_ID_FAIL":    4,
		"SSH_ACTIVITY_ACTIVITY_ID_REFUSE":  5,
		"SSH_ACTIVITY_ACTIVITY_ID_TRAFFIC": 6,
		"SSH_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x SSH_ACTIVITY_ACTIVITY_ID) Enum() *SSH_ACTIVITY_ACTIVITY_ID {
	p := new(SSH_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[40].Descriptor()
}

func (SSH_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[40]
}

func (x SSH_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SSH_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{40}
}

type SMB_ACTIVITY_STATUS_ID int32

const (
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_UNKNOWN SMB_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_SUCCESS SMB_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_FAILURE SMB_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_OTHER   SMB_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SMB_ACTIVITY_STATUS_ID.
var (
	SMB_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "SMB_ACTIVITY_STATUS_ID_FAILURE",
		99: "SMB_ACTIVITY_STATUS_ID_OTHER",
	}
	SMB_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SMB_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"SMB_ACTIVITY_STATUS_ID_FAILURE": 2,
		"SMB_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x SMB_ACTIVITY_STATUS_ID) Enum() *SMB_ACTIVITY_STATUS_ID {
	p := new(SMB_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[41].Descriptor()
}

func (SMB_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[41]
}

func (x SMB_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_STATUS_ID.Descriptor instead.
func (SMB_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{41}
}

type EMAIL_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_ACTIVITY_CATEGORY_UID_EMAIL_ACTIVITY_CATEGORY_UID_UNSPECIFIED      EMAIL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_ACTIVITY_CATEGORY_UID_EMAIL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY EMAIL_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for EMAIL_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "EMAIL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	EMAIL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"EMAIL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x EMAIL_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[42].Descriptor()
}

func (EMAIL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[42]
}

func (x EMAIL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{42}
}

type NETWORK_SEVERITY_ID int32

const (
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_UNKNOWN       NETWORK_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_INFORMATIONAL NETWORK_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_LOW           NETWORK_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_MEDIUM        NETWORK_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_HIGH          NETWORK_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_CRITICAL      NETWORK_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_FATAL         NETWORK_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_SEVERITY_ID_NETWORK_SEVERITY_ID_OTHER         NETWORK_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_SEVERITY_ID.
var (
	NETWORK_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORK_SEVERITY_ID_UNKNOWN",
		1:  "NETWORK_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORK_SEVERITY_ID_LOW",
		3:  "NETWORK_SEVERITY_ID_MEDIUM",
		4:  "NETWORK_SEVERITY_ID_HIGH",
		5:  "NETWORK_SEVERITY_ID_CRITICAL",
		6:  "NETWORK_SEVERITY_ID_FATAL",
		99: "NETWORK_SEVERITY_ID_OTHER",
	}
	NETWORK_SEVERITY_ID_value = map[string]int32{
		"NETWORK_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORK_SEVERITY_ID_LOW":           2,
		"NETWORK_SEVERITY_ID_MEDIUM":        3,
		"NETWORK_SEVERITY_ID_HIGH":          4,
		"NETWORK_SEVERITY_ID_CRITICAL":      5,
		"NETWORK_SEVERITY_ID_FATAL":         6,
		"NETWORK_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORK_SEVERITY_ID) Enum() *NETWORK_SEVERITY_ID {
	p := new(NETWORK_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[43].Descriptor()
}

func (NETWORK_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[43]
}

func (x NETWORK_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_SEVERITY_ID.Descriptor instead.
func (NETWORK_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{43}
}

type NTP_ACTIVITY_STRATUM_ID int32

const (
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_UNKNOWN          NTP_ACTIVITY_STRATUM_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_PRIMARY_SERVER   NTP_ACTIVITY_STRATUM_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_SECONDARY_SERVER NTP_ACTIVITY_STRATUM_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_UNSYNCHRONIZED   NTP_ACTIVITY_STRATUM_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_RESERVED         NTP_ACTIVITY_STRATUM_ID = 17 // EnumValue: 17; Type: OCSF_VALUE;
	NTP_ACTIVITY_STRATUM_ID_NTP_ACTIVITY_STRATUM_ID_OTHER            NTP_ACTIVITY_STRATUM_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NTP_ACTIVITY_STRATUM_ID.
var (
	NTP_ACTIVITY_STRATUM_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_STRATUM_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_STRATUM_ID_PRIMARY_SERVER",
		2:  "NTP_ACTIVITY_STRATUM_ID_SECONDARY_SERVER",
		16: "NTP_ACTIVITY_STRATUM_ID_UNSYNCHRONIZED",
		17: "NTP_ACTIVITY_STRATUM_ID_RESERVED",
		99: "NTP_ACTIVITY_STRATUM_ID_OTHER",
	}
	NTP_ACTIVITY_STRATUM_ID_value = map[string]int32{
		"NTP_ACTIVITY_STRATUM_ID_UNKNOWN":          0,
		"NTP_ACTIVITY_STRATUM_ID_PRIMARY_SERVER":   1,
		"NTP_ACTIVITY_STRATUM_ID_SECONDARY_SERVER": 2,
		"NTP_ACTIVITY_STRATUM_ID_UNSYNCHRONIZED":   16,
		"NTP_ACTIVITY_STRATUM_ID_RESERVED":         17,
		"NTP_ACTIVITY_STRATUM_ID_OTHER":            99,
	}
)

func (x NTP_ACTIVITY_STRATUM_ID) Enum() *NTP_ACTIVITY_STRATUM_ID {
	p := new(NTP_ACTIVITY_STRATUM_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_STRATUM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_STRATUM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[44].Descriptor()
}

func (NTP_ACTIVITY_STRATUM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[44]
}

func (x NTP_ACTIVITY_STRATUM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_STRATUM_ID.Descriptor instead.
func (NTP_ACTIVITY_STRATUM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{44}
}

type RDP_ACTIVITY_SEVERITY_ID int32

const (
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_UNKNOWN       RDP_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL RDP_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_LOW           RDP_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_MEDIUM        RDP_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_HIGH          RDP_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_CRITICAL      RDP_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_FATAL         RDP_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_OTHER         RDP_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RDP_ACTIVITY_SEVERITY_ID.
var (
	RDP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "RDP_ACTIVITY_SEVERITY_ID_LOW",
		3:  "RDP_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "RDP_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "RDP_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "RDP_ACTIVITY_SEVERITY_ID_FATAL",
		99: "RDP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	RDP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"RDP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"RDP_ACTIVITY_SEVERITY_ID_LOW":           2,
		"RDP_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"RDP_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"RDP_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"RDP_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"RDP_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x RDP_ACTIVITY_SEVERITY_ID) Enum() *RDP_ACTIVITY_SEVERITY_ID {
	p := new(RDP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[45].Descriptor()
}

func (RDP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[45]
}

func (x RDP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (RDP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{45}
}

type EMAIL_FILE_ACTIVITY_ACTION_ID int32

const (
	EMAIL_FILE_ACTIVITY_ACTION_ID_EMAIL_FILE_ACTIVITY_ACTION_ID_UNKNOWN EMAIL_FILE_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_FILE_ACTIVITY_ACTION_ID_EMAIL_FILE_ACTIVITY_ACTION_ID_ALLOWED EMAIL_FILE_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_FILE_ACTIVITY_ACTION_ID_EMAIL_FILE_ACTIVITY_ACTION_ID_DENIED  EMAIL_FILE_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_FILE_ACTIVITY_ACTION_ID_EMAIL_FILE_ACTIVITY_ACTION_ID_OTHER   EMAIL_FILE_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_ACTION_ID.
var (
	EMAIL_FILE_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "EMAIL_FILE_ACTIVITY_ACTION_ID_DENIED",
		99: "EMAIL_FILE_ACTIVITY_ACTION_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_ACTION_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"EMAIL_FILE_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"EMAIL_FILE_ACTIVITY_ACTION_ID_DENIED":  2,
		"EMAIL_FILE_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x EMAIL_FILE_ACTIVITY_ACTION_ID) Enum() *EMAIL_FILE_ACTIVITY_ACTION_ID {
	p := new(EMAIL_FILE_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[46].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[46]
}

func (x EMAIL_FILE_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_ACTION_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{46}
}

type RDP_ACTIVITY_DISPOSITION_ID int32

const (
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN             RDP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ALLOWED             RDP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_BLOCKED             RDP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED         RDP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ISOLATED            RDP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DELETED             RDP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DROPPED             RDP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       RDP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_APPROVED            RDP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_RESTORED            RDP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_EXONERATED          RDP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CORRECTED           RDP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED RDP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         RDP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DELAYED             RDP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DETECTED            RDP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION           RDP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_LOGGED              RDP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_TAGGED              RDP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ALERT               RDP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_COUNT               RDP_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_RESET               RDP_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CAPTCHA             RDP_ACTIVITY_DISPOSITION_ID = 22 // EnumValue: 22; Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CHALLENGE           RDP_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      RDP_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_REJECTED            RDP_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        RDP_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ERROR               RDP_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_OTHER               RDP_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RDP_ACTIVITY_DISPOSITION_ID.
var (
	RDP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "RDP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "RDP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "RDP_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "RDP_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "RDP_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "RDP_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "RDP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "RDP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "RDP_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "RDP_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "RDP_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "RDP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "RDP_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "RDP_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "RDP_ACTIVITY_DISPOSITION_ID_RESET",
		22: "RDP_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "RDP_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "RDP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "RDP_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "RDP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "RDP_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "RDP_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	RDP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"RDP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"RDP_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"RDP_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"RDP_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"RDP_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"RDP_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"RDP_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"RDP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"RDP_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"RDP_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"RDP_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"RDP_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"RDP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"RDP_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"RDP_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"RDP_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"RDP_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"RDP_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"RDP_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"RDP_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"RDP_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"RDP_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"RDP_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x RDP_ACTIVITY_DISPOSITION_ID) Enum() *RDP_ACTIVITY_DISPOSITION_ID {
	p := new(RDP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[47].Descriptor()
}

func (RDP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[47]
}

func (x RDP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (RDP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{47}
}

type SMB_ACTIVITY_ACTIVITY_ID int32

const (
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN           SMB_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_SUPERSEDE    SMB_ACTIVITY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN         SMB_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_CREATE       SMB_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN_IF      SMB_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE    SMB_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE_IF SMB_ACTIVITY_ACTIVITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_OTHER             SMB_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SMB_ACTIVITY_ACTIVITY_ID.
var (
	SMB_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_SUPERSEDE",
		2:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN",
		3:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_CREATE",
		4:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN_IF",
		5:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE",
		6:  "SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE_IF",
		99: "SMB_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SMB_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN":           0,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_SUPERSEDE":    1,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN":         2,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_CREATE":       3,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_OPEN_IF":      4,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE":    5,
		"SMB_ACTIVITY_ACTIVITY_ID_FILE_OVERWRITE_IF": 6,
		"SMB_ACTIVITY_ACTIVITY_ID_OTHER":             99,
	}
)

func (x SMB_ACTIVITY_ACTIVITY_ID) Enum() *SMB_ACTIVITY_ACTIVITY_ID {
	p := new(SMB_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[48].Descriptor()
}

func (SMB_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[48]
}

func (x SMB_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SMB_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{48}
}

type SMB_ACTIVITY_ACTION_ID int32

const (
	SMB_ACTIVITY_ACTION_ID_SMB_ACTIVITY_ACTION_ID_UNKNOWN SMB_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SMB_ACTIVITY_ACTION_ID_SMB_ACTIVITY_ACTION_ID_ALLOWED SMB_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SMB_ACTIVITY_ACTION_ID_SMB_ACTIVITY_ACTION_ID_DENIED  SMB_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SMB_ACTIVITY_ACTION_ID_SMB_ACTIVITY_ACTION_ID_OTHER   SMB_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SMB_ACTIVITY_ACTION_ID.
var (
	SMB_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "SMB_ACTIVITY_ACTION_ID_DENIED",
		99: "SMB_ACTIVITY_ACTION_ID_OTHER",
	}
	SMB_ACTIVITY_ACTION_ID_value = map[string]int32{
		"SMB_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"SMB_ACTIVITY_ACTION_ID_DENIED":  2,
		"SMB_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x SMB_ACTIVITY_ACTION_ID) Enum() *SMB_ACTIVITY_ACTION_ID {
	p := new(SMB_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[49].Descriptor()
}

func (SMB_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[49]
}

func (x SMB_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_ACTION_ID.Descriptor instead.
func (SMB_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{49}
}

type EMAIL_URL_ACTIVITY_TYPE_UID int32

const (
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_UNSPECIFIED                EMAIL_URL_ACTIVITY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_UNKNOWN EMAIL_URL_ACTIVITY_TYPE_UID = 4001200 // Type: OCSF_VALUE; EnumValue: 4001200;
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SEND    EMAIL_URL_ACTIVITY_TYPE_UID = 4001201 // Type: OCSF_VALUE; EnumValue: 4001201;
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_RECEIVE EMAIL_URL_ACTIVITY_TYPE_UID = 4001202 // Type: OCSF_VALUE; EnumValue: 4001202;
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SCAN    EMAIL_URL_ACTIVITY_TYPE_UID = 4001203 // Type: OCSF_VALUE; EnumValue: 4001203;
	EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_OTHER   EMAIL_URL_ACTIVITY_TYPE_UID = 4001299 // Type: OCSF_VALUE; EnumValue: 4001299;
)

// Enum value maps for EMAIL_URL_ACTIVITY_TYPE_UID.
var (
	EMAIL_URL_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:       "EMAIL_URL_ACTIVITY_TYPE_UID_UNSPECIFIED",
		4001200: "EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_UNKNOWN",
		4001201: "EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SEND",
		4001202: "EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_RECEIVE",
		4001203: "EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SCAN",
		4001299: "EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_OTHER",
	}
	EMAIL_URL_ACTIVITY_TYPE_UID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_TYPE_UID_UNSPECIFIED":                0,
		"EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_UNKNOWN": 4001200,
		"EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SEND":    4001201,
		"EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_RECEIVE": 4001202,
		"EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_SCAN":    4001203,
		"EMAIL_URL_ACTIVITY_TYPE_UID_EMAIL_URL_ACTIVITY_OTHER":   4001299,
	}
)

func (x EMAIL_URL_ACTIVITY_TYPE_UID) Enum() *EMAIL_URL_ACTIVITY_TYPE_UID {
	p := new(EMAIL_URL_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[50].Descriptor()
}

func (EMAIL_URL_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[50]
}

func (x EMAIL_URL_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_TYPE_UID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{50}
}

type EMAIL_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_SEND    EMAIL_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_RECEIVE EMAIL_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_SCAN    EMAIL_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_ACTIVITY_ID_SEND",
		2:  "EMAIL_ACTIVITY_ACTIVITY_ID_RECEIVE",
		3:  "EMAIL_ACTIVITY_ACTIVITY_ID_SCAN",
		99: "EMAIL_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_ACTIVITY_ACTIVITY_ID_SEND":    1,
		"EMAIL_ACTIVITY_ACTIVITY_ID_RECEIVE": 2,
		"EMAIL_ACTIVITY_ACTIVITY_ID_SCAN":    3,
		"EMAIL_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x EMAIL_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[51].Descriptor()
}

func (EMAIL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[51]
}

func (x EMAIL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{51}
}

type HTTP_ACTIVITY_SEVERITY_ID int32

const (
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN       HTTP_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL HTTP_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_LOW           HTTP_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_MEDIUM        HTTP_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_HIGH          HTTP_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_CRITICAL      HTTP_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_FATAL         HTTP_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_OTHER         HTTP_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for HTTP_ACTIVITY_SEVERITY_ID.
var (
	HTTP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "HTTP_ACTIVITY_SEVERITY_ID_LOW",
		3:  "HTTP_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "HTTP_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "HTTP_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "HTTP_ACTIVITY_SEVERITY_ID_FATAL",
		99: "HTTP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	HTTP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"HTTP_ACTIVITY_SEVERITY_ID_LOW":           2,
		"HTTP_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"HTTP_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"HTTP_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"HTTP_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"HTTP_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x HTTP_ACTIVITY_SEVERITY_ID) Enum() *HTTP_ACTIVITY_SEVERITY_ID {
	p := new(HTTP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[52].Descriptor()
}

func (HTTP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[52]
}

func (x HTTP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (HTTP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{52}
}

type NTP_ACTIVITY_ACTIVITY_ID int32

const (
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_UNKNOWN                    NTP_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_ACTIVE_EXCHANGE  NTP_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_PASSIVE_RESPONSE NTP_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_CLIENT_SYNCHRONIZATION     NTP_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_SERVER_RESPONSE            NTP_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_BROADCAST                  NTP_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_CONTROL                    NTP_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_PRIVATE_USE_CASE           NTP_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NTP_ACTIVITY_ACTIVITY_ID_NTP_ACTIVITY_ACTIVITY_ID_OTHER                      NTP_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NTP_ACTIVITY_ACTIVITY_ID.
var (
	NTP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_ACTIVE_EXCHANGE",
		2:  "NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_PASSIVE_RESPONSE",
		3:  "NTP_ACTIVITY_ACTIVITY_ID_CLIENT_SYNCHRONIZATION",
		4:  "NTP_ACTIVITY_ACTIVITY_ID_SERVER_RESPONSE",
		5:  "NTP_ACTIVITY_ACTIVITY_ID_BROADCAST",
		6:  "NTP_ACTIVITY_ACTIVITY_ID_CONTROL",
		7:  "NTP_ACTIVITY_ACTIVITY_ID_PRIVATE_USE_CASE",
		99: "NTP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NTP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NTP_ACTIVITY_ACTIVITY_ID_UNKNOWN":                    0,
		"NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_ACTIVE_EXCHANGE":  1,
		"NTP_ACTIVITY_ACTIVITY_ID_SYMMETRIC_PASSIVE_RESPONSE": 2,
		"NTP_ACTIVITY_ACTIVITY_ID_CLIENT_SYNCHRONIZATION":     3,
		"NTP_ACTIVITY_ACTIVITY_ID_SERVER_RESPONSE":            4,
		"NTP_ACTIVITY_ACTIVITY_ID_BROADCAST":                  5,
		"NTP_ACTIVITY_ACTIVITY_ID_CONTROL":                    6,
		"NTP_ACTIVITY_ACTIVITY_ID_PRIVATE_USE_CASE":           7,
		"NTP_ACTIVITY_ACTIVITY_ID_OTHER":                      99,
	}
)

func (x NTP_ACTIVITY_ACTIVITY_ID) Enum() *NTP_ACTIVITY_ACTIVITY_ID {
	p := new(NTP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[53].Descriptor()
}

func (NTP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[53]
}

func (x NTP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NTP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{53}
}

type HTTP_ACTIVITY_CLASS_UID int32

const (
	HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY_CLASS_UID_UNSPECIFIED   HTTP_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY HTTP_ACTIVITY_CLASS_UID = 4002 // Type: OCSF_VALUE; EnumValue: 4002;
)

// Enum value maps for HTTP_ACTIVITY_CLASS_UID.
var (
	HTTP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "HTTP_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4002: "HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY",
	}
	HTTP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"HTTP_ACTIVITY_CLASS_UID_UNSPECIFIED":   0,
		"HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY": 4002,
	}
)

func (x HTTP_ACTIVITY_CLASS_UID) Enum() *HTTP_ACTIVITY_CLASS_UID {
	p := new(HTTP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[54].Descriptor()
}

func (HTTP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[54]
}

func (x HTTP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_CLASS_UID.Descriptor instead.
func (HTTP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{54}
}

type DHCP_ACTIVITY_STATUS_ID int32

const (
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_UNKNOWN DHCP_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_SUCCESS DHCP_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_FAILURE DHCP_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_OTHER   DHCP_ACTIVITY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_STATUS_ID.
var (
	DHCP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "DHCP_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "DHCP_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "DHCP_ACTIVITY_STATUS_ID_FAILURE",
		99: "DHCP_ACTIVITY_STATUS_ID_OTHER",
	}
	DHCP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"DHCP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"DHCP_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"DHCP_ACTIVITY_STATUS_ID_FAILURE": 2,
		"DHCP_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x DHCP_ACTIVITY_STATUS_ID) Enum() *DHCP_ACTIVITY_STATUS_ID {
	p := new(DHCP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[55].Descriptor()
}

func (DHCP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[55]
}

func (x DHCP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_STATUS_ID.Descriptor instead.
func (DHCP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{55}
}

type DHCP_ACTIVITY_TYPE_UID int32

const (
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_UNSPECIFIED            DHCP_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_UNKNOWN  DHCP_ACTIVITY_TYPE_UID = 400400 // Type: OCSF_VALUE; EnumValue: 400400;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DISCOVER DHCP_ACTIVITY_TYPE_UID = 400401 // Type: OCSF_VALUE; EnumValue: 400401;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OFFER    DHCP_ACTIVITY_TYPE_UID = 400402 // Type: OCSF_VALUE; EnumValue: 400402;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_REQUEST  DHCP_ACTIVITY_TYPE_UID = 400403 // Type: OCSF_VALUE; EnumValue: 400403;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DECLINE  DHCP_ACTIVITY_TYPE_UID = 400404 // Type: OCSF_VALUE; EnumValue: 400404;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_ACK      DHCP_ACTIVITY_TYPE_UID = 400405 // Type: OCSF_VALUE; EnumValue: 400405;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_NAK      DHCP_ACTIVITY_TYPE_UID = 400406 // Type: OCSF_VALUE; EnumValue: 400406;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_RELEASE  DHCP_ACTIVITY_TYPE_UID = 400407 // Type: OCSF_VALUE; EnumValue: 400407;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_INFORM   DHCP_ACTIVITY_TYPE_UID = 400408 // EnumValue: 400408; Type: OCSF_VALUE;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_EXPIRE   DHCP_ACTIVITY_TYPE_UID = 400409 // Type: OCSF_VALUE; EnumValue: 400409;
	DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OTHER    DHCP_ACTIVITY_TYPE_UID = 400499 // Type: OCSF_VALUE; EnumValue: 400499;
)

// Enum value maps for DHCP_ACTIVITY_TYPE_UID.
var (
	DHCP_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "DHCP_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400400: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_UNKNOWN",
		400401: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DISCOVER",
		400402: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OFFER",
		400403: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_REQUEST",
		400404: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DECLINE",
		400405: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_ACK",
		400406: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_NAK",
		400407: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_RELEASE",
		400408: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_INFORM",
		400409: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_EXPIRE",
		400499: "DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OTHER",
	}
	DHCP_ACTIVITY_TYPE_UID_value = map[string]int32{
		"DHCP_ACTIVITY_TYPE_UID_UNSPECIFIED":            0,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_UNKNOWN":  400400,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DISCOVER": 400401,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OFFER":    400402,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_REQUEST":  400403,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_DECLINE":  400404,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_ACK":      400405,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_NAK":      400406,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_RELEASE":  400407,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_INFORM":   400408,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_EXPIRE":   400409,
		"DHCP_ACTIVITY_TYPE_UID_DHCP_ACTIVITY_OTHER":    400499,
	}
)

func (x DHCP_ACTIVITY_TYPE_UID) Enum() *DHCP_ACTIVITY_TYPE_UID {
	p := new(DHCP_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[56].Descriptor()
}

func (DHCP_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[56]
}

func (x DHCP_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_TYPE_UID.Descriptor instead.
func (DHCP_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{56}
}

type EMAIL_URL_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_URL_ACTIVITY_CATEGORY_UID_EMAIL_URL_ACTIVITY_CATEGORY_UID_UNSPECIFIED      EMAIL_URL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_URL_ACTIVITY_CATEGORY_UID_EMAIL_URL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY EMAIL_URL_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for EMAIL_URL_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_URL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "EMAIL_URL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	EMAIL_URL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"EMAIL_URL_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_URL_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_URL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[57].Descriptor()
}

func (EMAIL_URL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[57]
}

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{57}
}

type NETWORK_FILE_ACTIVITY_ACTION_ID int32

const (
	NETWORK_FILE_ACTIVITY_ACTION_ID_NETWORK_FILE_ACTIVITY_ACTION_ID_UNKNOWN NETWORK_FILE_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_FILE_ACTIVITY_ACTION_ID_NETWORK_FILE_ACTIVITY_ACTION_ID_ALLOWED NETWORK_FILE_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_FILE_ACTIVITY_ACTION_ID_NETWORK_FILE_ACTIVITY_ACTION_ID_DENIED  NETWORK_FILE_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_FILE_ACTIVITY_ACTION_ID_NETWORK_FILE_ACTIVITY_ACTION_ID_OTHER   NETWORK_FILE_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_ACTION_ID.
var (
	NETWORK_FILE_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "NETWORK_FILE_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "NETWORK_FILE_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "NETWORK_FILE_ACTIVITY_ACTION_ID_DENIED",
		99: "NETWORK_FILE_ACTIVITY_ACTION_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_ACTION_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"NETWORK_FILE_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"NETWORK_FILE_ACTIVITY_ACTION_ID_DENIED":  2,
		"NETWORK_FILE_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x NETWORK_FILE_ACTIVITY_ACTION_ID) Enum() *NETWORK_FILE_ACTIVITY_ACTION_ID {
	p := new(NETWORK_FILE_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[58].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[58]
}

func (x NETWORK_FILE_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_ACTION_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{58}
}

type DNS_ACTIVITY_CATEGORY_UID int32

const (
	DNS_ACTIVITY_CATEGORY_UID_DNS_ACTIVITY_CATEGORY_UID_UNSPECIFIED      DNS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DNS_ACTIVITY_CATEGORY_UID_DNS_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY DNS_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for DNS_ACTIVITY_CATEGORY_UID.
var (
	DNS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "DNS_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "DNS_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	DNS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"DNS_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"DNS_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x DNS_ACTIVITY_CATEGORY_UID) Enum() *DNS_ACTIVITY_CATEGORY_UID {
	p := new(DNS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[59].Descriptor()
}

func (DNS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[59]
}

func (x DNS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (DNS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{59}
}

type SMB_ACTIVITY_SEVERITY_ID int32

const (
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_UNKNOWN       SMB_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL SMB_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_LOW           SMB_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_MEDIUM        SMB_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_HIGH          SMB_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_CRITICAL      SMB_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_FATAL         SMB_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_OTHER         SMB_ACTIVITY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_SEVERITY_ID.
var (
	SMB_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "SMB_ACTIVITY_SEVERITY_ID_LOW",
		3:  "SMB_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "SMB_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "SMB_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "SMB_ACTIVITY_SEVERITY_ID_FATAL",
		99: "SMB_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SMB_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SMB_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"SMB_ACTIVITY_SEVERITY_ID_LOW":           2,
		"SMB_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"SMB_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"SMB_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"SMB_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"SMB_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x SMB_ACTIVITY_SEVERITY_ID) Enum() *SMB_ACTIVITY_SEVERITY_ID {
	p := new(SMB_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[60].Descriptor()
}

func (SMB_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[60]
}

func (x SMB_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SMB_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{60}
}

type SSH_ACTIVITY_ACTION_ID int32

const (
	SSH_ACTIVITY_ACTION_ID_SSH_ACTIVITY_ACTION_ID_UNKNOWN SSH_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_ACTION_ID_SSH_ACTIVITY_ACTION_ID_ALLOWED SSH_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_ACTION_ID_SSH_ACTIVITY_ACTION_ID_DENIED  SSH_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_ACTION_ID_SSH_ACTIVITY_ACTION_ID_OTHER   SSH_ACTIVITY_ACTION_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_ACTION_ID.
var (
	SSH_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "SSH_ACTIVITY_ACTION_ID_DENIED",
		99: "SSH_ACTIVITY_ACTION_ID_OTHER",
	}
	SSH_ACTIVITY_ACTION_ID_value = map[string]int32{
		"SSH_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"SSH_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"SSH_ACTIVITY_ACTION_ID_DENIED":  2,
		"SSH_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x SSH_ACTIVITY_ACTION_ID) Enum() *SSH_ACTIVITY_ACTION_ID {
	p := new(SSH_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[61].Descriptor()
}

func (SSH_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[61]
}

func (x SSH_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_ACTION_ID.Descriptor instead.
func (SSH_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{61}
}

type NTP_ACTIVITY_CLASS_UID int32

const (
	NTP_ACTIVITY_CLASS_UID_NTP_ACTIVITY_CLASS_UID_UNSPECIFIED  NTP_ACTIVITY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	NTP_ACTIVITY_CLASS_UID_NTP_ACTIVITY_CLASS_UID_NTP_ACTIVITY NTP_ACTIVITY_CLASS_UID = 40013 // Type: OCSF_VALUE; EnumValue: 40013;
)

// Enum value maps for NTP_ACTIVITY_CLASS_UID.
var (
	NTP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:     "NTP_ACTIVITY_CLASS_UID_UNSPECIFIED",
		40013: "NTP_ACTIVITY_CLASS_UID_NTP_ACTIVITY",
	}
	NTP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NTP_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"NTP_ACTIVITY_CLASS_UID_NTP_ACTIVITY": 40013,
	}
)

func (x NTP_ACTIVITY_CLASS_UID) Enum() *NTP_ACTIVITY_CLASS_UID {
	p := new(NTP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[62].Descriptor()
}

func (NTP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[62]
}

func (x NTP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_CLASS_UID.Descriptor instead.
func (NTP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{62}
}

type EMAIL_FILE_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SEND    EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_RECEIVE EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SCAN    EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SEND",
		2:  "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_RECEIVE",
		3:  "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SCAN",
		99: "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SEND":    1,
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_RECEIVE": 2,
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_SCAN":    3,
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_FILE_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[63].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[63]
}

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{63}
}

type NETWORK_ACTIVITY_STATUS_ID int32

const (
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_UNKNOWN NETWORK_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_SUCCESS NETWORK_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_FAILURE NETWORK_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_OTHER   NETWORK_ACTIVITY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_STATUS_ID.
var (
	NETWORK_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "NETWORK_ACTIVITY_STATUS_ID_FAILURE",
		99: "NETWORK_ACTIVITY_STATUS_ID_OTHER",
	}
	NETWORK_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"NETWORK_ACTIVITY_STATUS_ID_FAILURE": 2,
		"NETWORK_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x NETWORK_ACTIVITY_STATUS_ID) Enum() *NETWORK_ACTIVITY_STATUS_ID {
	p := new(NETWORK_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[64].Descriptor()
}

func (NETWORK_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[64]
}

func (x NETWORK_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_STATUS_ID.Descriptor instead.
func (NETWORK_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{64}
}

type EMAIL_FILE_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED      EMAIL_FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_EMAIL_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY EMAIL_FILE_ACTIVITY_CATEGORY_UID = 4 // EnumValue: 4; Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "EMAIL_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"EMAIL_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_FILE_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[65].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[65]
}

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{65}
}

type SMB_ACTIVITY_SHARE_TYPE_ID int32

const (
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN SMB_ACTIVITY_SHARE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_FILE    SMB_ACTIVITY_SHARE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_PIPE    SMB_ACTIVITY_SHARE_TYPE_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_PRINT   SMB_ACTIVITY_SHARE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_OTHER   SMB_ACTIVITY_SHARE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SMB_ACTIVITY_SHARE_TYPE_ID.
var (
	SMB_ACTIVITY_SHARE_TYPE_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_SHARE_TYPE_ID_FILE",
		2:  "SMB_ACTIVITY_SHARE_TYPE_ID_PIPE",
		3:  "SMB_ACTIVITY_SHARE_TYPE_ID_PRINT",
		99: "SMB_ACTIVITY_SHARE_TYPE_ID_OTHER",
	}
	SMB_ACTIVITY_SHARE_TYPE_ID_value = map[string]int32{
		"SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_SHARE_TYPE_ID_FILE":    1,
		"SMB_ACTIVITY_SHARE_TYPE_ID_PIPE":    2,
		"SMB_ACTIVITY_SHARE_TYPE_ID_PRINT":   3,
		"SMB_ACTIVITY_SHARE_TYPE_ID_OTHER":   99,
	}
)

func (x SMB_ACTIVITY_SHARE_TYPE_ID) Enum() *SMB_ACTIVITY_SHARE_TYPE_ID {
	p := new(SMB_ACTIVITY_SHARE_TYPE_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_SHARE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_SHARE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[66].Descriptor()
}

func (SMB_ACTIVITY_SHARE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[66]
}

func (x SMB_ACTIVITY_SHARE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_SHARE_TYPE_ID.Descriptor instead.
func (SMB_ACTIVITY_SHARE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{66}
}

type EMAIL_FILE_ACTIVITY_CLASS_UID int32

const (
	EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED         EMAIL_FILE_ACTIVITY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY EMAIL_FILE_ACTIVITY_CLASS_UID = 40011 // Type: OCSF_VALUE; EnumValue: 40011;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_CLASS_UID.
var (
	EMAIL_FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:     "EMAIL_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED",
		40011: "EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY",
	}
	EMAIL_FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED":         0,
		"EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY": 40011,
	}
)

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) Enum() *EMAIL_FILE_ACTIVITY_CLASS_UID {
	p := new(EMAIL_FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[67].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[67]
}

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{67}
}

type EMAIL_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_ACTIVITY_DISPOSITION_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_ACTIVITY_DISPOSITION_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ALERT               EMAIL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_COUNT               EMAIL_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_RESET               EMAIL_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CAPTCHA             EMAIL_ACTIVITY_DISPOSITION_ID = 22 // EnumValue: 22; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CHALLENGE           EMAIL_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      EMAIL_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_REJECTED            EMAIL_ACTIVITY_DISPOSITION_ID = 25 // EnumValue: 25; Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        EMAIL_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ERROR               EMAIL_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "EMAIL_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "EMAIL_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "EMAIL_ACTIVITY_DISPOSITION_ID_RESET",
		22: "EMAIL_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "EMAIL_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "EMAIL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "EMAIL_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "EMAIL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "EMAIL_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "EMAIL_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	EMAIL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"EMAIL_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"EMAIL_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"EMAIL_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"EMAIL_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"EMAIL_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x EMAIL_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[68].Descriptor()
}

func (EMAIL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[68]
}

func (x EMAIL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{68}
}

type SSH_ACTIVITY_TYPE_UID int32

const (
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_UNSPECIFIED          SSH_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_UNKNOWN SSH_ACTIVITY_TYPE_UID = 400700 // Type: OCSF_VALUE; EnumValue: 400700;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OPEN    SSH_ACTIVITY_TYPE_UID = 400701 // Type: OCSF_VALUE; EnumValue: 400701;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_CLOSE   SSH_ACTIVITY_TYPE_UID = 400702 // Type: OCSF_VALUE; EnumValue: 400702;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_RESET   SSH_ACTIVITY_TYPE_UID = 400703 // Type: OCSF_VALUE; EnumValue: 400703;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_FAIL    SSH_ACTIVITY_TYPE_UID = 400704 // Type: OCSF_VALUE; EnumValue: 400704;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_REFUSE  SSH_ACTIVITY_TYPE_UID = 400705 // Type: OCSF_VALUE; EnumValue: 400705;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TRAFFIC SSH_ACTIVITY_TYPE_UID = 400706 // Type: OCSF_VALUE; EnumValue: 400706;
	SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OTHER   SSH_ACTIVITY_TYPE_UID = 400799 // Type: OCSF_VALUE; EnumValue: 400799;
)

// Enum value maps for SSH_ACTIVITY_TYPE_UID.
var (
	SSH_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "SSH_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400700: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_UNKNOWN",
		400701: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OPEN",
		400702: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_CLOSE",
		400703: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_RESET",
		400704: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_FAIL",
		400705: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_REFUSE",
		400706: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TRAFFIC",
		400799: "SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OTHER",
	}
	SSH_ACTIVITY_TYPE_UID_value = map[string]int32{
		"SSH_ACTIVITY_TYPE_UID_UNSPECIFIED":          0,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_UNKNOWN": 400700,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OPEN":    400701,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_CLOSE":   400702,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_RESET":   400703,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_FAIL":    400704,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_REFUSE":  400705,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_TRAFFIC": 400706,
		"SSH_ACTIVITY_TYPE_UID_SSH_ACTIVITY_OTHER":   400799,
	}
)

func (x SSH_ACTIVITY_TYPE_UID) Enum() *SSH_ACTIVITY_TYPE_UID {
	p := new(SSH_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[69].Descriptor()
}

func (SSH_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[69]
}

func (x SSH_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_TYPE_UID.Descriptor instead.
func (SSH_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{69}
}

type DHCP_ACTIVITY_SEVERITY_ID int32

const (
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN       DHCP_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL DHCP_ACTIVITY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_LOW           DHCP_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_MEDIUM        DHCP_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_HIGH          DHCP_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_CRITICAL      DHCP_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_FATAL         DHCP_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_OTHER         DHCP_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DHCP_ACTIVITY_SEVERITY_ID.
var (
	DHCP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "DHCP_ACTIVITY_SEVERITY_ID_LOW",
		3:  "DHCP_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "DHCP_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "DHCP_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "DHCP_ACTIVITY_SEVERITY_ID_FATAL",
		99: "DHCP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	DHCP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"DHCP_ACTIVITY_SEVERITY_ID_LOW":           2,
		"DHCP_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"DHCP_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"DHCP_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"DHCP_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"DHCP_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x DHCP_ACTIVITY_SEVERITY_ID) Enum() *DHCP_ACTIVITY_SEVERITY_ID {
	p := new(DHCP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[70].Descriptor()
}

func (DHCP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[70]
}

func (x DHCP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (DHCP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{70}
}

type FTP_ACTIVITY_CATEGORY_UID int32

const (
	FTP_ACTIVITY_CATEGORY_UID_FTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED      FTP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FTP_ACTIVITY_CATEGORY_UID_FTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY FTP_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for FTP_ACTIVITY_CATEGORY_UID.
var (
	FTP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "FTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "FTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	FTP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"FTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"FTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x FTP_ACTIVITY_CATEGORY_UID) Enum() *FTP_ACTIVITY_CATEGORY_UID {
	p := new(FTP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[71].Descriptor()
}

func (FTP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[71]
}

func (x FTP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (FTP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{71}
}

type HTTP_ACTIVITY_TYPE_UID int32

const (
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_UNSPECIFIED           HTTP_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_UNKNOWN HTTP_ACTIVITY_TYPE_UID = 400200 // Type: OCSF_VALUE; EnumValue: 400200;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_CONNECT HTTP_ACTIVITY_TYPE_UID = 400201 // Type: OCSF_VALUE; EnumValue: 400201;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_DELETE  HTTP_ACTIVITY_TYPE_UID = 400202 // EnumValue: 400202; Type: OCSF_VALUE;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_GET     HTTP_ACTIVITY_TYPE_UID = 400203 // Type: OCSF_VALUE; EnumValue: 400203;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_HEAD    HTTP_ACTIVITY_TYPE_UID = 400204 // Type: OCSF_VALUE; EnumValue: 400204;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OPTIONS HTTP_ACTIVITY_TYPE_UID = 400205 // EnumValue: 400205; Type: OCSF_VALUE;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_POST    HTTP_ACTIVITY_TYPE_UID = 400206 // EnumValue: 400206; Type: OCSF_VALUE;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_PUT     HTTP_ACTIVITY_TYPE_UID = 400207 // Type: OCSF_VALUE; EnumValue: 400207;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TRACE   HTTP_ACTIVITY_TYPE_UID = 400208 // Type: OCSF_VALUE; EnumValue: 400208;
	HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OTHER   HTTP_ACTIVITY_TYPE_UID = 400299 // Type: OCSF_VALUE; EnumValue: 400299;
)

// Enum value maps for HTTP_ACTIVITY_TYPE_UID.
var (
	HTTP_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "HTTP_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400200: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_UNKNOWN",
		400201: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_CONNECT",
		400202: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_DELETE",
		400203: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_GET",
		400204: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_HEAD",
		400205: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OPTIONS",
		400206: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_POST",
		400207: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_PUT",
		400208: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TRACE",
		400299: "HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OTHER",
	}
	HTTP_ACTIVITY_TYPE_UID_value = map[string]int32{
		"HTTP_ACTIVITY_TYPE_UID_UNSPECIFIED":           0,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_UNKNOWN": 400200,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_CONNECT": 400201,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_DELETE":  400202,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_GET":     400203,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_HEAD":    400204,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OPTIONS": 400205,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_POST":    400206,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_PUT":     400207,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_TRACE":   400208,
		"HTTP_ACTIVITY_TYPE_UID_HTTP_ACTIVITY_OTHER":   400299,
	}
)

func (x HTTP_ACTIVITY_TYPE_UID) Enum() *HTTP_ACTIVITY_TYPE_UID {
	p := new(HTTP_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[72].Descriptor()
}

func (HTTP_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[72]
}

func (x HTTP_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_TYPE_UID.Descriptor instead.
func (HTTP_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{72}
}

type NETWORK_ACTIVITY_ACTIVITY_ID int32

const (
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN NETWORK_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_OPEN    NETWORK_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_CLOSE   NETWORK_ACTIVITY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_RESET   NETWORK_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_FAIL    NETWORK_ACTIVITY_ACTIVITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_REFUSE  NETWORK_ACTIVITY_ACTIVITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_TRAFFIC NETWORK_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_OTHER   NETWORK_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTIVITY_ACTIVITY_ID.
var (
	NETWORK_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_ACTIVITY_ID_OPEN",
		2:  "NETWORK_ACTIVITY_ACTIVITY_ID_CLOSE",
		3:  "NETWORK_ACTIVITY_ACTIVITY_ID_RESET",
		4:  "NETWORK_ACTIVITY_ACTIVITY_ID_FAIL",
		5:  "NETWORK_ACTIVITY_ACTIVITY_ID_REFUSE",
		6:  "NETWORK_ACTIVITY_ACTIVITY_ID_TRAFFIC",
		99: "NETWORK_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NETWORK_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_ACTIVITY_ID_OPEN":    1,
		"NETWORK_ACTIVITY_ACTIVITY_ID_CLOSE":   2,
		"NETWORK_ACTIVITY_ACTIVITY_ID_RESET":   3,
		"NETWORK_ACTIVITY_ACTIVITY_ID_FAIL":    4,
		"NETWORK_ACTIVITY_ACTIVITY_ID_REFUSE":  5,
		"NETWORK_ACTIVITY_ACTIVITY_ID_TRAFFIC": 6,
		"NETWORK_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x NETWORK_ACTIVITY_ACTIVITY_ID) Enum() *NETWORK_ACTIVITY_ACTIVITY_ID {
	p := new(NETWORK_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[73].Descriptor()
}

func (NETWORK_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[73]
}

func (x NETWORK_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{73}
}

type DNS_ACTIVITY_SEVERITY_ID int32

const (
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_UNKNOWN       DNS_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL DNS_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_LOW           DNS_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_MEDIUM        DNS_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_HIGH          DNS_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_CRITICAL      DNS_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_FATAL         DNS_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_OTHER         DNS_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ACTIVITY_SEVERITY_ID.
var (
	DNS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "DNS_ACTIVITY_SEVERITY_ID_LOW",
		3:  "DNS_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "DNS_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "DNS_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "DNS_ACTIVITY_SEVERITY_ID_FATAL",
		99: "DNS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	DNS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"DNS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"DNS_ACTIVITY_SEVERITY_ID_LOW":           2,
		"DNS_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"DNS_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"DNS_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"DNS_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"DNS_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x DNS_ACTIVITY_SEVERITY_ID) Enum() *DNS_ACTIVITY_SEVERITY_ID {
	p := new(DNS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[74].Descriptor()
}

func (DNS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[74]
}

func (x DNS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (DNS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{74}
}

type NETWORK_FILE_ACTIVITY_ACTIVITY_ID int32

const (
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN  NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPLOAD   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DOWNLOAD NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPDATE   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DELETE   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RENAME   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_COPY     NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_MOVE     NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RESTORE  NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_PREVIEW  NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_LOCK     NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNLOCK   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SHARE    NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSHARE  NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OPEN     NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 14 // EnumValue: 14; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SYNC     NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSYNC   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER    NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_ACTIVITY_ID.
var (
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPLOAD",
		2:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DOWNLOAD",
		3:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPDATE",
		4:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DELETE",
		5:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RENAME",
		6:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_COPY",
		7:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_MOVE",
		8:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RESTORE",
		9:  "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_PREVIEW",
		10: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_LOCK",
		11: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNLOCK",
		12: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SHARE",
		13: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSHARE",
		14: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OPEN",
		15: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SYNC",
		16: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSYNC",
		99: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN":  0,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPLOAD":   1,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DOWNLOAD": 2,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UPDATE":   3,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_DELETE":   4,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RENAME":   5,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_COPY":     6,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_MOVE":     7,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_RESTORE":  8,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_PREVIEW":  9,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_LOCK":     10,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNLOCK":   11,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SHARE":    12,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSHARE":  13,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OPEN":     14,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_SYNC":     15,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNSYNC":   16,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER":    99,
	}
)

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Enum() *NETWORK_FILE_ACTIVITY_ACTIVITY_ID {
	p := new(NETWORK_FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[75].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[75]
}

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{75}
}

type NETWORK_ACTIVITY_ACTION_ID int32

const (
	NETWORK_ACTIVITY_ACTION_ID_NETWORK_ACTIVITY_ACTION_ID_UNKNOWN NETWORK_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTIVITY_ACTION_ID_NETWORK_ACTIVITY_ACTION_ID_ALLOWED NETWORK_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTIVITY_ACTION_ID_NETWORK_ACTIVITY_ACTION_ID_DENIED  NETWORK_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_ACTIVITY_ACTION_ID_NETWORK_ACTIVITY_ACTION_ID_OTHER   NETWORK_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTIVITY_ACTION_ID.
var (
	NETWORK_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "NETWORK_ACTIVITY_ACTION_ID_DENIED",
		99: "NETWORK_ACTIVITY_ACTION_ID_OTHER",
	}
	NETWORK_ACTIVITY_ACTION_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"NETWORK_ACTIVITY_ACTION_ID_DENIED":  2,
		"NETWORK_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x NETWORK_ACTIVITY_ACTION_ID) Enum() *NETWORK_ACTIVITY_ACTION_ID {
	p := new(NETWORK_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[76].Descriptor()
}

func (NETWORK_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[76]
}

func (x NETWORK_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_ACTION_ID.Descriptor instead.
func (NETWORK_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{76}
}

type NTP_ACTIVITY_SEVERITY_ID int32

const (
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_UNKNOWN       NTP_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL NTP_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_LOW           NTP_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_MEDIUM        NTP_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_HIGH          NTP_ACTIVITY_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_CRITICAL      NTP_ACTIVITY_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_FATAL         NTP_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NTP_ACTIVITY_SEVERITY_ID_NTP_ACTIVITY_SEVERITY_ID_OTHER         NTP_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NTP_ACTIVITY_SEVERITY_ID.
var (
	NTP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "NTP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "NTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "NTP_ACTIVITY_SEVERITY_ID_LOW",
		3:  "NTP_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "NTP_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "NTP_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "NTP_ACTIVITY_SEVERITY_ID_FATAL",
		99: "NTP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NTP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NTP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"NTP_ACTIVITY_SEVERITY_ID_LOW":           2,
		"NTP_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"NTP_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"NTP_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"NTP_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"NTP_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NTP_ACTIVITY_SEVERITY_ID) Enum() *NTP_ACTIVITY_SEVERITY_ID {
	p := new(NTP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[77].Descriptor()
}

func (NTP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[77]
}

func (x NTP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NTP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{77}
}

type NTP_ACTIVITY_CATEGORY_UID int32

const (
	NTP_ACTIVITY_CATEGORY_UID_NTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED      NTP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NTP_ACTIVITY_CATEGORY_UID_NTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY NTP_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for NTP_ACTIVITY_CATEGORY_UID.
var (
	NTP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "NTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	NTP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NTP_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"NTP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x NTP_ACTIVITY_CATEGORY_UID) Enum() *NTP_ACTIVITY_CATEGORY_UID {
	p := new(NTP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[78].Descriptor()
}

func (NTP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[78]
}

func (x NTP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NTP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{78}
}

type FTP_ACTIVITY_TYPE_UID int32

const (
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_UNSPECIFIED          FTP_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_UNKNOWN FTP_ACTIVITY_TYPE_UID = 400800 // Type: OCSF_VALUE; EnumValue: 400800;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_PUT     FTP_ACTIVITY_TYPE_UID = 400801 // Type: OCSF_VALUE; EnumValue: 400801;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_GET     FTP_ACTIVITY_TYPE_UID = 400802 // Type: OCSF_VALUE; EnumValue: 400802;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_POLL    FTP_ACTIVITY_TYPE_UID = 400803 // Type: OCSF_VALUE; EnumValue: 400803;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_DELETE  FTP_ACTIVITY_TYPE_UID = 400804 // Type: OCSF_VALUE; EnumValue: 400804;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_RENAME  FTP_ACTIVITY_TYPE_UID = 400805 // Type: OCSF_VALUE; EnumValue: 400805;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_LIST    FTP_ACTIVITY_TYPE_UID = 400806 // Type: OCSF_VALUE; EnumValue: 400806;
	FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_OTHER   FTP_ACTIVITY_TYPE_UID = 400899 // Type: OCSF_VALUE; EnumValue: 400899;
)

// Enum value maps for FTP_ACTIVITY_TYPE_UID.
var (
	FTP_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "FTP_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400800: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_UNKNOWN",
		400801: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_PUT",
		400802: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_GET",
		400803: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_POLL",
		400804: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_DELETE",
		400805: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_RENAME",
		400806: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_LIST",
		400899: "FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_OTHER",
	}
	FTP_ACTIVITY_TYPE_UID_value = map[string]int32{
		"FTP_ACTIVITY_TYPE_UID_UNSPECIFIED":          0,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_UNKNOWN": 400800,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_PUT":     400801,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_GET":     400802,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_POLL":    400803,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_DELETE":  400804,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_RENAME":  400805,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_LIST":    400806,
		"FTP_ACTIVITY_TYPE_UID_FTP_ACTIVITY_OTHER":   400899,
	}
)

func (x FTP_ACTIVITY_TYPE_UID) Enum() *FTP_ACTIVITY_TYPE_UID {
	p := new(FTP_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[79].Descriptor()
}

func (FTP_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[79]
}

func (x FTP_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_TYPE_UID.Descriptor instead.
func (FTP_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{79}
}

type FTP_ACTIVITY_CLASS_UID int32

const (
	FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY_CLASS_UID_UNSPECIFIED  FTP_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY FTP_ACTIVITY_CLASS_UID = 4008 // Type: OCSF_VALUE; EnumValue: 4008;
)

// Enum value maps for FTP_ACTIVITY_CLASS_UID.
var (
	FTP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "FTP_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4008: "FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY",
	}
	FTP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"FTP_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY": 4008,
	}
)

func (x FTP_ACTIVITY_CLASS_UID) Enum() *FTP_ACTIVITY_CLASS_UID {
	p := new(FTP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[80].Descriptor()
}

func (FTP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[80]
}

func (x FTP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_CLASS_UID.Descriptor instead.
func (FTP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{80}
}

type NETWORK_FILE_ACTIVITY_CATEGORY_UID int32

const (
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED      NETWORK_FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY NETWORK_FILE_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_CATEGORY_UID.
var (
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) Enum() *NETWORK_FILE_ACTIVITY_CATEGORY_UID {
	p := new(NETWORK_FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[81].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[81]
}

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{81}
}

type NETWORK_DISPOSITION_ID int32

const (
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_UNKNOWN             NETWORK_DISPOSITION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_ALLOWED             NETWORK_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_BLOCKED             NETWORK_DISPOSITION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_QUARANTINED         NETWORK_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_ISOLATED            NETWORK_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_DELETED             NETWORK_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_DROPPED             NETWORK_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_CUSTOM_ACTION       NETWORK_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_APPROVED            NETWORK_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_RESTORED            NETWORK_DISPOSITION_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_EXONERATED          NETWORK_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_CORRECTED           NETWORK_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_PARTIALLY_CORRECTED NETWORK_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_UNCORRECTED         NETWORK_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_DELAYED             NETWORK_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_DETECTED            NETWORK_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_NO_ACTION           NETWORK_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_LOGGED              NETWORK_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_TAGGED              NETWORK_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_ALERT               NETWORK_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_COUNT               NETWORK_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_RESET               NETWORK_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_CAPTCHA             NETWORK_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_CHALLENGE           NETWORK_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_ACCESS_REVOKED      NETWORK_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_REJECTED            NETWORK_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_UNAUTHORIZED        NETWORK_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_ERROR               NETWORK_DISPOSITION_ID = 27 // EnumValue: 27; Type: OCSF_VALUE;
	NETWORK_DISPOSITION_ID_NETWORK_DISPOSITION_ID_OTHER               NETWORK_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_DISPOSITION_ID.
var (
	NETWORK_DISPOSITION_ID_name = map[int32]string{
		0:  "NETWORK_DISPOSITION_ID_UNKNOWN",
		1:  "NETWORK_DISPOSITION_ID_ALLOWED",
		2:  "NETWORK_DISPOSITION_ID_BLOCKED",
		3:  "NETWORK_DISPOSITION_ID_QUARANTINED",
		4:  "NETWORK_DISPOSITION_ID_ISOLATED",
		5:  "NETWORK_DISPOSITION_ID_DELETED",
		6:  "NETWORK_DISPOSITION_ID_DROPPED",
		7:  "NETWORK_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "NETWORK_DISPOSITION_ID_APPROVED",
		9:  "NETWORK_DISPOSITION_ID_RESTORED",
		10: "NETWORK_DISPOSITION_ID_EXONERATED",
		11: "NETWORK_DISPOSITION_ID_CORRECTED",
		12: "NETWORK_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "NETWORK_DISPOSITION_ID_UNCORRECTED",
		14: "NETWORK_DISPOSITION_ID_DELAYED",
		15: "NETWORK_DISPOSITION_ID_DETECTED",
		16: "NETWORK_DISPOSITION_ID_NO_ACTION",
		17: "NETWORK_DISPOSITION_ID_LOGGED",
		18: "NETWORK_DISPOSITION_ID_TAGGED",
		19: "NETWORK_DISPOSITION_ID_ALERT",
		20: "NETWORK_DISPOSITION_ID_COUNT",
		21: "NETWORK_DISPOSITION_ID_RESET",
		22: "NETWORK_DISPOSITION_ID_CAPTCHA",
		23: "NETWORK_DISPOSITION_ID_CHALLENGE",
		24: "NETWORK_DISPOSITION_ID_ACCESS_REVOKED",
		25: "NETWORK_DISPOSITION_ID_REJECTED",
		26: "NETWORK_DISPOSITION_ID_UNAUTHORIZED",
		27: "NETWORK_DISPOSITION_ID_ERROR",
		99: "NETWORK_DISPOSITION_ID_OTHER",
	}
	NETWORK_DISPOSITION_ID_value = map[string]int32{
		"NETWORK_DISPOSITION_ID_UNKNOWN":             0,
		"NETWORK_DISPOSITION_ID_ALLOWED":             1,
		"NETWORK_DISPOSITION_ID_BLOCKED":             2,
		"NETWORK_DISPOSITION_ID_QUARANTINED":         3,
		"NETWORK_DISPOSITION_ID_ISOLATED":            4,
		"NETWORK_DISPOSITION_ID_DELETED":             5,
		"NETWORK_DISPOSITION_ID_DROPPED":             6,
		"NETWORK_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"NETWORK_DISPOSITION_ID_APPROVED":            8,
		"NETWORK_DISPOSITION_ID_RESTORED":            9,
		"NETWORK_DISPOSITION_ID_EXONERATED":          10,
		"NETWORK_DISPOSITION_ID_CORRECTED":           11,
		"NETWORK_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"NETWORK_DISPOSITION_ID_UNCORRECTED":         13,
		"NETWORK_DISPOSITION_ID_DELAYED":             14,
		"NETWORK_DISPOSITION_ID_DETECTED":            15,
		"NETWORK_DISPOSITION_ID_NO_ACTION":           16,
		"NETWORK_DISPOSITION_ID_LOGGED":              17,
		"NETWORK_DISPOSITION_ID_TAGGED":              18,
		"NETWORK_DISPOSITION_ID_ALERT":               19,
		"NETWORK_DISPOSITION_ID_COUNT":               20,
		"NETWORK_DISPOSITION_ID_RESET":               21,
		"NETWORK_DISPOSITION_ID_CAPTCHA":             22,
		"NETWORK_DISPOSITION_ID_CHALLENGE":           23,
		"NETWORK_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"NETWORK_DISPOSITION_ID_REJECTED":            25,
		"NETWORK_DISPOSITION_ID_UNAUTHORIZED":        26,
		"NETWORK_DISPOSITION_ID_ERROR":               27,
		"NETWORK_DISPOSITION_ID_OTHER":               99,
	}
)

func (x NETWORK_DISPOSITION_ID) Enum() *NETWORK_DISPOSITION_ID {
	p := new(NETWORK_DISPOSITION_ID)
	*p = x
	return p
}

func (x NETWORK_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[82].Descriptor()
}

func (NETWORK_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[82]
}

func (x NETWORK_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_DISPOSITION_ID.Descriptor instead.
func (NETWORK_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{82}
}

type SSH_ACTIVITY_CLASS_UID int32

const (
	SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY_CLASS_UID_UNSPECIFIED  SSH_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY SSH_ACTIVITY_CLASS_UID = 4007 // Type: OCSF_VALUE; EnumValue: 4007;
)

// Enum value maps for SSH_ACTIVITY_CLASS_UID.
var (
	SSH_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "SSH_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4007: "SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY",
	}
	SSH_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SSH_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY": 4007,
	}
)

func (x SSH_ACTIVITY_CLASS_UID) Enum() *SSH_ACTIVITY_CLASS_UID {
	p := new(SSH_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[83].Descriptor()
}

func (SSH_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[83]
}

func (x SSH_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_CLASS_UID.Descriptor instead.
func (SSH_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{83}
}

type RDP_ACTIVITY_STATUS_ID int32

const (
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_UNKNOWN RDP_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_SUCCESS RDP_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_FAILURE RDP_ACTIVITY_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_OTHER   RDP_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RDP_ACTIVITY_STATUS_ID.
var (
	RDP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "RDP_ACTIVITY_STATUS_ID_FAILURE",
		99: "RDP_ACTIVITY_STATUS_ID_OTHER",
	}
	RDP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"RDP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"RDP_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"RDP_ACTIVITY_STATUS_ID_FAILURE": 2,
		"RDP_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x RDP_ACTIVITY_STATUS_ID) Enum() *RDP_ACTIVITY_STATUS_ID {
	p := new(RDP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[84].Descriptor()
}

func (RDP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[84]
}

func (x RDP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_STATUS_ID.Descriptor instead.
func (RDP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{84}
}

type NETWORK_FILE_ACTIVITY_CLASS_UID int32

const (
	NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED           NETWORK_FILE_ACTIVITY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY NETWORK_FILE_ACTIVITY_CLASS_UID = 40010 // Type: OCSF_VALUE; EnumValue: 40010;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_CLASS_UID.
var (
	NETWORK_FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:     "NETWORK_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED",
		40010: "NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY",
	}
	NETWORK_FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_CLASS_UID_UNSPECIFIED":           0,
		"NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY": 40010,
	}
)

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) Enum() *NETWORK_FILE_ACTIVITY_CLASS_UID {
	p := new(NETWORK_FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[85].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[85]
}

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{85}
}

type SSH_ACTIVITY_DISPOSITION_ID int32

const (
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN             SSH_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ALLOWED             SSH_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_BLOCKED             SSH_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED         SSH_ACTIVITY_DISPOSITION_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ISOLATED            SSH_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DELETED             SSH_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DROPPED             SSH_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SSH_ACTIVITY_DISPOSITION_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_APPROVED            SSH_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_RESTORED            SSH_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_EXONERATED          SSH_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CORRECTED           SSH_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SSH_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SSH_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DELAYED             SSH_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DETECTED            SSH_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION           SSH_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_LOGGED              SSH_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_TAGGED              SSH_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ALERT               SSH_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_COUNT               SSH_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_RESET               SSH_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CAPTCHA             SSH_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CHALLENGE           SSH_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      SSH_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_REJECTED            SSH_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        SSH_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ERROR               SSH_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_OTHER               SSH_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SSH_ACTIVITY_DISPOSITION_ID.
var (
	SSH_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SSH_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "SSH_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "SSH_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "SSH_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "SSH_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "SSH_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "SSH_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SSH_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "SSH_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "SSH_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "SSH_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "SSH_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SSH_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "SSH_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "SSH_ACTIVITY_DISPOSITION_ID_RESET",
		22: "SSH_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "SSH_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "SSH_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "SSH_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "SSH_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "SSH_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "SSH_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	SSH_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SSH_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SSH_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"SSH_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"SSH_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"SSH_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"SSH_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"SSH_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"SSH_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SSH_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"SSH_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"SSH_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"SSH_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"SSH_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SSH_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"SSH_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"SSH_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"SSH_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"SSH_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"SSH_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"SSH_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"SSH_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"SSH_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"SSH_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x SSH_ACTIVITY_DISPOSITION_ID) Enum() *SSH_ACTIVITY_DISPOSITION_ID {
	p := new(SSH_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[86].Descriptor()
}

func (SSH_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[86]
}

func (x SSH_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SSH_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{86}
}

type EMAIL_FILE_ACTIVITY_TYPE_UID int32

const (
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED                 EMAIL_FILE_ACTIVITY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_UNKNOWN EMAIL_FILE_ACTIVITY_TYPE_UID = 4001100 // Type: OCSF_VALUE; EnumValue: 4001100;
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SEND    EMAIL_FILE_ACTIVITY_TYPE_UID = 4001101 // Type: OCSF_VALUE; EnumValue: 4001101;
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_RECEIVE EMAIL_FILE_ACTIVITY_TYPE_UID = 4001102 // Type: OCSF_VALUE; EnumValue: 4001102;
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SCAN    EMAIL_FILE_ACTIVITY_TYPE_UID = 4001103 // EnumValue: 4001103; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_OTHER   EMAIL_FILE_ACTIVITY_TYPE_UID = 4001199 // Type: OCSF_VALUE; EnumValue: 4001199;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_TYPE_UID.
var (
	EMAIL_FILE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:       "EMAIL_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED",
		4001100: "EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_UNKNOWN",
		4001101: "EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SEND",
		4001102: "EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_RECEIVE",
		4001103: "EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SCAN",
		4001199: "EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_OTHER",
	}
	EMAIL_FILE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_TYPE_UID_UNSPECIFIED":                 0,
		"EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_UNKNOWN": 4001100,
		"EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SEND":    4001101,
		"EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_RECEIVE": 4001102,
		"EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_SCAN":    4001103,
		"EMAIL_FILE_ACTIVITY_TYPE_UID_EMAIL_FILE_ACTIVITY_OTHER":   4001199,
	}
)

func (x EMAIL_FILE_ACTIVITY_TYPE_UID) Enum() *EMAIL_FILE_ACTIVITY_TYPE_UID {
	p := new(EMAIL_FILE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[87].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[87]
}

func (x EMAIL_FILE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_TYPE_UID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{87}
}

type FTP_ACTIVITY_ACTION_ID int32

const (
	FTP_ACTIVITY_ACTION_ID_FTP_ACTIVITY_ACTION_ID_UNKNOWN FTP_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FTP_ACTIVITY_ACTION_ID_FTP_ACTIVITY_ACTION_ID_ALLOWED FTP_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FTP_ACTIVITY_ACTION_ID_FTP_ACTIVITY_ACTION_ID_DENIED  FTP_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FTP_ACTIVITY_ACTION_ID_FTP_ACTIVITY_ACTION_ID_OTHER   FTP_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FTP_ACTIVITY_ACTION_ID.
var (
	FTP_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "FTP_ACTIVITY_ACTION_ID_DENIED",
		99: "FTP_ACTIVITY_ACTION_ID_OTHER",
	}
	FTP_ACTIVITY_ACTION_ID_value = map[string]int32{
		"FTP_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"FTP_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"FTP_ACTIVITY_ACTION_ID_DENIED":  2,
		"FTP_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x FTP_ACTIVITY_ACTION_ID) Enum() *FTP_ACTIVITY_ACTION_ID {
	p := new(FTP_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[88].Descriptor()
}

func (FTP_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[88]
}

func (x FTP_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_ACTION_ID.Descriptor instead.
func (FTP_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{88}
}

type EMAIL_FILE_ACTIVITY_STATUS_ID int32

const (
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_FILE_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS EMAIL_FILE_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE EMAIL_FILE_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER   EMAIL_FILE_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_STATUS_ID.
var (
	EMAIL_FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE",
		99: "EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE": 2,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) Enum() *EMAIL_FILE_ACTIVITY_STATUS_ID {
	p := new(EMAIL_FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[89].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[89]
}

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{89}
}

type SMB_ACTIVITY_CLASS_UID int32

const (
	SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY_CLASS_UID_UNSPECIFIED  SMB_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY SMB_ACTIVITY_CLASS_UID = 4006 // Type: OCSF_VALUE; EnumValue: 4006;
)

// Enum value maps for SMB_ACTIVITY_CLASS_UID.
var (
	SMB_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "SMB_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4006: "SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY",
	}
	SMB_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SMB_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY": 4006,
	}
)

func (x SMB_ACTIVITY_CLASS_UID) Enum() *SMB_ACTIVITY_CLASS_UID {
	p := new(SMB_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[90].Descriptor()
}

func (SMB_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[90]
}

func (x SMB_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_CLASS_UID.Descriptor instead.
func (SMB_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{90}
}

type NETWORK_ACTIVITY_CLASS_UID int32

const (
	NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY_CLASS_UID_UNSPECIFIED      NETWORK_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY NETWORK_ACTIVITY_CLASS_UID = 4001 // EnumValue: 4001; Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_CLASS_UID.
var (
	NETWORK_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "NETWORK_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4001: "NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY",
	}
	NETWORK_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NETWORK_ACTIVITY_CLASS_UID_UNSPECIFIED":      0,
		"NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY": 4001,
	}
)

func (x NETWORK_ACTIVITY_CLASS_UID) Enum() *NETWORK_ACTIVITY_CLASS_UID {
	p := new(NETWORK_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[91].Descriptor()
}

func (NETWORK_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[91]
}

func (x NETWORK_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_CLASS_UID.Descriptor instead.
func (NETWORK_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{91}
}

type EMAIL_URL_ACTIVITY_STATUS_ID int32

const (
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_URL_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS EMAIL_URL_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE EMAIL_URL_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_OTHER   EMAIL_URL_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_URL_ACTIVITY_STATUS_ID.
var (
	EMAIL_URL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE",
		99: "EMAIL_URL_ACTIVITY_STATUS_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE": 2,
		"EMAIL_URL_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x EMAIL_URL_ACTIVITY_STATUS_ID) Enum() *EMAIL_URL_ACTIVITY_STATUS_ID {
	p := new(EMAIL_URL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[92].Descriptor()
}

func (EMAIL_URL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[92]
}

func (x EMAIL_URL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{92}
}

type NETWORK_FILE_ACTIVITY_STATUS_ID int32

const (
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN NETWORK_FILE_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS NETWORK_FILE_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE NETWORK_FILE_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER   NETWORK_FILE_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_STATUS_ID.
var (
	NETWORK_FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE",
		99: "NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE": 2,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) Enum() *NETWORK_FILE_ACTIVITY_STATUS_ID {
	p := new(NETWORK_FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[93].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[93]
}

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{93}
}

type DNS_ACTIVITY_ACTION_ID int32

const (
	DNS_ACTIVITY_ACTION_ID_DNS_ACTIVITY_ACTION_ID_UNKNOWN DNS_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_ACTION_ID_DNS_ACTIVITY_ACTION_ID_ALLOWED DNS_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DNS_ACTIVITY_ACTION_ID_DNS_ACTIVITY_ACTION_ID_DENIED  DNS_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DNS_ACTIVITY_ACTION_ID_DNS_ACTIVITY_ACTION_ID_OTHER   DNS_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ACTIVITY_ACTION_ID.
var (
	DNS_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "DNS_ACTIVITY_ACTION_ID_DENIED",
		99: "DNS_ACTIVITY_ACTION_ID_OTHER",
	}
	DNS_ACTIVITY_ACTION_ID_value = map[string]int32{
		"DNS_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"DNS_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"DNS_ACTIVITY_ACTION_ID_DENIED":  2,
		"DNS_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x DNS_ACTIVITY_ACTION_ID) Enum() *DNS_ACTIVITY_ACTION_ID {
	p := new(DNS_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[94].Descriptor()
}

func (DNS_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[94]
}

func (x DNS_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_ACTION_ID.Descriptor instead.
func (DNS_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{94}
}

type NETWORK_ACTIVITY_CATEGORY_UID int32

const (
	NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY_CATEGORY_UID_UNSPECIFIED      NETWORK_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY NETWORK_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for NETWORK_ACTIVITY_CATEGORY_UID.
var (
	NETWORK_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	NETWORK_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x NETWORK_ACTIVITY_CATEGORY_UID) Enum() *NETWORK_ACTIVITY_CATEGORY_UID {
	p := new(NETWORK_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[95].Descriptor()
}

func (NETWORK_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[95]
}

func (x NETWORK_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NETWORK_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{95}
}

type NETWORK_ACTION_ID int32

const (
	NETWORK_ACTION_ID_NETWORK_ACTION_ID_UNKNOWN NETWORK_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ACTION_ID_NETWORK_ACTION_ID_ALLOWED NETWORK_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ACTION_ID_NETWORK_ACTION_ID_DENIED  NETWORK_ACTION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NETWORK_ACTION_ID_NETWORK_ACTION_ID_OTHER   NETWORK_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_ACTION_ID.
var (
	NETWORK_ACTION_ID_name = map[int32]string{
		0:  "NETWORK_ACTION_ID_UNKNOWN",
		1:  "NETWORK_ACTION_ID_ALLOWED",
		2:  "NETWORK_ACTION_ID_DENIED",
		99: "NETWORK_ACTION_ID_OTHER",
	}
	NETWORK_ACTION_ID_value = map[string]int32{
		"NETWORK_ACTION_ID_UNKNOWN": 0,
		"NETWORK_ACTION_ID_ALLOWED": 1,
		"NETWORK_ACTION_ID_DENIED":  2,
		"NETWORK_ACTION_ID_OTHER":   99,
	}
)

func (x NETWORK_ACTION_ID) Enum() *NETWORK_ACTION_ID {
	p := new(NETWORK_ACTION_ID)
	*p = x
	return p
}

func (x NETWORK_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[96].Descriptor()
}

func (NETWORK_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[96]
}

func (x NETWORK_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTION_ID.Descriptor instead.
func (NETWORK_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{96}
}

type NETWORK_FILE_ACTIVITY_DISPOSITION_ID int32

const (
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED         NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED            NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELETED             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DROPPED             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_APPROVED            NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESTORED            NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED          NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED           NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELAYED             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DETECTED            NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION           NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_LOGGED              NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_TAGGED              NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALERT               NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_COUNT               NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESET               NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA             NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 22 // EnumValue: 22; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE           NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 24 // EnumValue: 24; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_REJECTED            NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ERROR               NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NETWORK_FILE_ACTIVITY_DISPOSITION_ID_OTHER               NETWORK_FILE_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_DISPOSITION_ID.
var (
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESET",
		22: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "NETWORK_FILE_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"NETWORK_FILE_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x NETWORK_FILE_ACTIVITY_DISPOSITION_ID) Enum() *NETWORK_FILE_ACTIVITY_DISPOSITION_ID {
	p := new(NETWORK_FILE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[97].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[97]
}

func (x NETWORK_FILE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{97}
}

type DNS_ACTIVITY_CLASS_UID int32

const (
	DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY_CLASS_UID_UNSPECIFIED  DNS_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY DNS_ACTIVITY_CLASS_UID = 4003 // Type: OCSF_VALUE; EnumValue: 4003;
)

// Enum value maps for DNS_ACTIVITY_CLASS_UID.
var (
	DNS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "DNS_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4003: "DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY",
	}
	DNS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"DNS_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY": 4003,
	}
)

func (x DNS_ACTIVITY_CLASS_UID) Enum() *DNS_ACTIVITY_CLASS_UID {
	p := new(DNS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[98].Descriptor()
}

func (DNS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[98]
}

func (x DNS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_CLASS_UID.Descriptor instead.
func (DNS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{98}
}

type NTP_ACTIVITY_TYPE_UID int32

const (
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_UNSPECIFIED                             NTP_ACTIVITY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_UNKNOWN                    NTP_ACTIVITY_TYPE_UID = 4001300 // Type: OCSF_VALUE; EnumValue: 4001300;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_ACTIVE_EXCHANGE  NTP_ACTIVITY_TYPE_UID = 4001301 // Type: OCSF_VALUE; EnumValue: 4001301;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_PASSIVE_RESPONSE NTP_ACTIVITY_TYPE_UID = 4001302 // Type: OCSF_VALUE; EnumValue: 4001302;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CLIENT_SYNCHRONIZATION     NTP_ACTIVITY_TYPE_UID = 4001303 // Type: OCSF_VALUE; EnumValue: 4001303;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SERVER_RESPONSE            NTP_ACTIVITY_TYPE_UID = 4001304 // Type: OCSF_VALUE; EnumValue: 4001304;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_BROADCAST                  NTP_ACTIVITY_TYPE_UID = 4001305 // EnumValue: 4001305; Type: OCSF_VALUE;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CONTROL                    NTP_ACTIVITY_TYPE_UID = 4001306 // Type: OCSF_VALUE; EnumValue: 4001306;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_PRIVATE_USE_CASE           NTP_ACTIVITY_TYPE_UID = 4001307 // Type: OCSF_VALUE; EnumValue: 4001307;
	NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_OTHER                      NTP_ACTIVITY_TYPE_UID = 4001399 // Type: OCSF_VALUE; EnumValue: 4001399;
)

// Enum value maps for NTP_ACTIVITY_TYPE_UID.
var (
	NTP_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:       "NTP_ACTIVITY_TYPE_UID_UNSPECIFIED",
		4001300: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_UNKNOWN",
		4001301: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_ACTIVE_EXCHANGE",
		4001302: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_PASSIVE_RESPONSE",
		4001303: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CLIENT_SYNCHRONIZATION",
		4001304: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SERVER_RESPONSE",
		4001305: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_BROADCAST",
		4001306: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CONTROL",
		4001307: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_PRIVATE_USE_CASE",
		4001399: "NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_OTHER",
	}
	NTP_ACTIVITY_TYPE_UID_value = map[string]int32{
		"NTP_ACTIVITY_TYPE_UID_UNSPECIFIED":                             0,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_UNKNOWN":                    4001300,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_ACTIVE_EXCHANGE":  4001301,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SYMMETRIC_PASSIVE_RESPONSE": 4001302,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CLIENT_SYNCHRONIZATION":     4001303,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_SERVER_RESPONSE":            4001304,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_BROADCAST":                  4001305,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_CONTROL":                    4001306,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_PRIVATE_USE_CASE":           4001307,
		"NTP_ACTIVITY_TYPE_UID_NTP_ACTIVITY_OTHER":                      4001399,
	}
)

func (x NTP_ACTIVITY_TYPE_UID) Enum() *NTP_ACTIVITY_TYPE_UID {
	p := new(NTP_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x NTP_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTP_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[99].Descriptor()
}

func (NTP_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[99]
}

func (x NTP_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTP_ACTIVITY_TYPE_UID.Descriptor instead.
func (NTP_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{99}
}

type RDP_ACTIVITY_ACTION_ID int32

const (
	RDP_ACTIVITY_ACTION_ID_RDP_ACTIVITY_ACTION_ID_UNKNOWN RDP_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	RDP_ACTIVITY_ACTION_ID_RDP_ACTIVITY_ACTION_ID_ALLOWED RDP_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RDP_ACTIVITY_ACTION_ID_RDP_ACTIVITY_ACTION_ID_DENIED  RDP_ACTIVITY_ACTION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	RDP_ACTIVITY_ACTION_ID_RDP_ACTIVITY_ACTION_ID_OTHER   RDP_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RDP_ACTIVITY_ACTION_ID.
var (
	RDP_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "RDP_ACTIVITY_ACTION_ID_DENIED",
		99: "RDP_ACTIVITY_ACTION_ID_OTHER",
	}
	RDP_ACTIVITY_ACTION_ID_value = map[string]int32{
		"RDP_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"RDP_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"RDP_ACTIVITY_ACTION_ID_DENIED":  2,
		"RDP_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x RDP_ACTIVITY_ACTION_ID) Enum() *RDP_ACTIVITY_ACTION_ID {
	p := new(RDP_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[100].Descriptor()
}

func (RDP_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[100]
}

func (x RDP_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_ACTION_ID.Descriptor instead.
func (RDP_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{100}
}

type NETWORK_STATUS_ID int32

const (
	NETWORK_STATUS_ID_NETWORK_STATUS_ID_UNKNOWN NETWORK_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_STATUS_ID_NETWORK_STATUS_ID_SUCCESS NETWORK_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_STATUS_ID_NETWORK_STATUS_ID_FAILURE NETWORK_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_STATUS_ID_NETWORK_STATUS_ID_OTHER   NETWORK_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_STATUS_ID.
var (
	NETWORK_STATUS_ID_name = map[int32]string{
		0:  "NETWORK_STATUS_ID_UNKNOWN",
		1:  "NETWORK_STATUS_ID_SUCCESS",
		2:  "NETWORK_STATUS_ID_FAILURE",
		99: "NETWORK_STATUS_ID_OTHER",
	}
	NETWORK_STATUS_ID_value = map[string]int32{
		"NETWORK_STATUS_ID_UNKNOWN": 0,
		"NETWORK_STATUS_ID_SUCCESS": 1,
		"NETWORK_STATUS_ID_FAILURE": 2,
		"NETWORK_STATUS_ID_OTHER":   99,
	}
)

func (x NETWORK_STATUS_ID) Enum() *NETWORK_STATUS_ID {
	p := new(NETWORK_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[101].Descriptor()
}

func (NETWORK_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[101]
}

func (x NETWORK_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_STATUS_ID.Descriptor instead.
func (NETWORK_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{101}
}

type SSH_ACTIVITY_CATEGORY_UID int32

const (
	SSH_ACTIVITY_CATEGORY_UID_SSH_ACTIVITY_CATEGORY_UID_UNSPECIFIED      SSH_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SSH_ACTIVITY_CATEGORY_UID_SSH_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY SSH_ACTIVITY_CATEGORY_UID = 4 // EnumValue: 4; Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_CATEGORY_UID.
var (
	SSH_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SSH_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "SSH_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	SSH_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SSH_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"SSH_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x SSH_ACTIVITY_CATEGORY_UID) Enum() *SSH_ACTIVITY_CATEGORY_UID {
	p := new(SSH_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[102].Descriptor()
}

func (SSH_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[102]
}

func (x SSH_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SSH_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{102}
}

type DHCP_ACTIVITY_CATEGORY_UID int32

const (
	DHCP_ACTIVITY_CATEGORY_UID_DHCP_ACTIVITY_CATEGORY_UID_UNSPECIFIED      DHCP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DHCP_ACTIVITY_CATEGORY_UID_DHCP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY DHCP_ACTIVITY_CATEGORY_UID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for DHCP_ACTIVITY_CATEGORY_UID.
var (
	DHCP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "DHCP_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		4: "DHCP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY",
	}
	DHCP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"DHCP_ACTIVITY_CATEGORY_UID_UNSPECIFIED":      0,
		"DHCP_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY": 4,
	}
)

func (x DHCP_ACTIVITY_CATEGORY_UID) Enum() *DHCP_ACTIVITY_CATEGORY_UID {
	p := new(DHCP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[103].Descriptor()
}

func (DHCP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[103]
}

func (x DHCP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (DHCP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{103}
}

type HTTP_ACTIVITY_ACTION_ID int32

const (
	HTTP_ACTIVITY_ACTION_ID_HTTP_ACTIVITY_ACTION_ID_UNKNOWN HTTP_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	HTTP_ACTIVITY_ACTION_ID_HTTP_ACTIVITY_ACTION_ID_ALLOWED HTTP_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	HTTP_ACTIVITY_ACTION_ID_HTTP_ACTIVITY_ACTION_ID_DENIED  HTTP_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	HTTP_ACTIVITY_ACTION_ID_HTTP_ACTIVITY_ACTION_ID_OTHER   HTTP_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for HTTP_ACTIVITY_ACTION_ID.
var (
	HTTP_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "HTTP_ACTIVITY_ACTION_ID_DENIED",
		99: "HTTP_ACTIVITY_ACTION_ID_OTHER",
	}
	HTTP_ACTIVITY_ACTION_ID_value = map[string]int32{
		"HTTP_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"HTTP_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"HTTP_ACTIVITY_ACTION_ID_DENIED":  2,
		"HTTP_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x HTTP_ACTIVITY_ACTION_ID) Enum() *HTTP_ACTIVITY_ACTION_ID {
	p := new(HTTP_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[104].Descriptor()
}

func (HTTP_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[104]
}

func (x HTTP_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_ACTION_ID.Descriptor instead.
func (HTTP_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{104}
}

type EMAIL_FILE_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_FILE_ACTIVITY_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_FILE_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW           EMAIL_FILE_ACTIVITY_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_FILE_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_FILE_ACTIVITY_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_FILE_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_FILE_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_FILE_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW",
		3:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL",
		99: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW":           2,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_FILE_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[105].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[105]
}

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{105}
}

type SSH_ACTIVITY_STATUS_ID int32

const (
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_UNKNOWN SSH_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_SUCCESS SSH_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_FAILURE SSH_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_OTHER   SSH_ACTIVITY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_STATUS_ID.
var (
	SSH_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "SSH_ACTIVITY_STATUS_ID_FAILURE",
		99: "SSH_ACTIVITY_STATUS_ID_OTHER",
	}
	SSH_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SSH_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SSH_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"SSH_ACTIVITY_STATUS_ID_FAILURE": 2,
		"SSH_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x SSH_ACTIVITY_STATUS_ID) Enum() *SSH_ACTIVITY_STATUS_ID {
	p := new(SSH_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[106].Descriptor()
}

func (SSH_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[106]
}

func (x SSH_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_STATUS_ID.Descriptor instead.
func (SSH_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{106}
}

type RDP_ACTIVITY_TYPE_UID int32

const (
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_UNSPECIFIED                   RDP_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_UNKNOWN          RDP_ACTIVITY_TYPE_UID = 400500 // Type: OCSF_VALUE; EnumValue: 400500;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_REQUEST  RDP_ACTIVITY_TYPE_UID = 400501 // Type: OCSF_VALUE; EnumValue: 400501;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_RESPONSE RDP_ACTIVITY_TYPE_UID = 400502 // Type: OCSF_VALUE; EnumValue: 400502;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_REQUEST  RDP_ACTIVITY_TYPE_UID = 400503 // EnumValue: 400503; Type: OCSF_VALUE;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_RESPONSE RDP_ACTIVITY_TYPE_UID = 400504 // Type: OCSF_VALUE; EnumValue: 400504;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TLS_HANDSHAKE    RDP_ACTIVITY_TYPE_UID = 400505 // Type: OCSF_VALUE; EnumValue: 400505;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TRAFFIC          RDP_ACTIVITY_TYPE_UID = 400506 // Type: OCSF_VALUE; EnumValue: 400506;
	RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_OTHER            RDP_ACTIVITY_TYPE_UID = 400599 // EnumValue: 400599; Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_TYPE_UID.
var (
	RDP_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "RDP_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400500: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_UNKNOWN",
		400501: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_REQUEST",
		400502: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_RESPONSE",
		400503: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_REQUEST",
		400504: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_RESPONSE",
		400505: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TLS_HANDSHAKE",
		400506: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TRAFFIC",
		400599: "RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_OTHER",
	}
	RDP_ACTIVITY_TYPE_UID_value = map[string]int32{
		"RDP_ACTIVITY_TYPE_UID_UNSPECIFIED":                   0,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_UNKNOWN":          400500,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_REQUEST":  400501,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_INITIAL_RESPONSE": 400502,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_REQUEST":  400503,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_CONNECT_RESPONSE": 400504,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TLS_HANDSHAKE":    400505,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_TRAFFIC":          400506,
		"RDP_ACTIVITY_TYPE_UID_RDP_ACTIVITY_OTHER":            400599,
	}
)

func (x RDP_ACTIVITY_TYPE_UID) Enum() *RDP_ACTIVITY_TYPE_UID {
	p := new(RDP_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[107].Descriptor()
}

func (RDP_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[107]
}

func (x RDP_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_TYPE_UID.Descriptor instead.
func (RDP_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{107}
}

type EMAIL_FILE_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 13 // EnumValue: 13; Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALERT               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_COUNT               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESET               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE           EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_REJECTED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ERROR               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESET",
		22: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_FILE_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_FILE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[108].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[108]
}

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{108}
}

type SMB_ACTIVITY_TYPE_UID int32

const (
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_UNSPECIFIED                    SMB_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_UNKNOWN           SMB_ACTIVITY_TYPE_UID = 400600 // Type: OCSF_VALUE; EnumValue: 400600;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_SUPERSEDE    SMB_ACTIVITY_TYPE_UID = 400601 // Type: OCSF_VALUE; EnumValue: 400601;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN         SMB_ACTIVITY_TYPE_UID = 400602 // EnumValue: 400602; Type: OCSF_VALUE;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_CREATE       SMB_ACTIVITY_TYPE_UID = 400603 // Type: OCSF_VALUE; EnumValue: 400603;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN_IF      SMB_ACTIVITY_TYPE_UID = 400604 // Type: OCSF_VALUE; EnumValue: 400604;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE    SMB_ACTIVITY_TYPE_UID = 400605 // Type: OCSF_VALUE; EnumValue: 400605;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE_IF SMB_ACTIVITY_TYPE_UID = 400606 // Type: OCSF_VALUE; EnumValue: 400606;
	SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_OTHER             SMB_ACTIVITY_TYPE_UID = 400699 // Type: OCSF_VALUE; EnumValue: 400699;
)

// Enum value maps for SMB_ACTIVITY_TYPE_UID.
var (
	SMB_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "SMB_ACTIVITY_TYPE_UID_UNSPECIFIED",
		400600: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_UNKNOWN",
		400601: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_SUPERSEDE",
		400602: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN",
		400603: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_CREATE",
		400604: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN_IF",
		400605: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE",
		400606: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE_IF",
		400699: "SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_OTHER",
	}
	SMB_ACTIVITY_TYPE_UID_value = map[string]int32{
		"SMB_ACTIVITY_TYPE_UID_UNSPECIFIED":                    0,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_UNKNOWN":           400600,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_SUPERSEDE":    400601,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN":         400602,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_CREATE":       400603,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OPEN_IF":      400604,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE":    400605,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_FILE_OVERWRITE_IF": 400606,
		"SMB_ACTIVITY_TYPE_UID_SMB_ACTIVITY_OTHER":             400699,
	}
)

func (x SMB_ACTIVITY_TYPE_UID) Enum() *SMB_ACTIVITY_TYPE_UID {
	p := new(SMB_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[109].Descriptor()
}

func (SMB_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[109]
}

func (x SMB_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_TYPE_UID.Descriptor instead.
func (SMB_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{109}
}

type NETWORK_CLASS_UID int32

const (
	NETWORK_CLASS_UID_NETWORK_CLASS_UID_UNSPECIFIED NETWORK_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	NETWORK_CLASS_UID_NETWORK_CLASS_UID_NETWORK     NETWORK_CLASS_UID = 4000 // Type: OCSF_VALUE; EnumValue: 4000;
)

// Enum value maps for NETWORK_CLASS_UID.
var (
	NETWORK_CLASS_UID_name = map[int32]string{
		0:    "NETWORK_CLASS_UID_UNSPECIFIED",
		4000: "NETWORK_CLASS_UID_NETWORK",
	}
	NETWORK_CLASS_UID_value = map[string]int32{
		"NETWORK_CLASS_UID_UNSPECIFIED": 0,
		"NETWORK_CLASS_UID_NETWORK":     4000,
	}
)

func (x NETWORK_CLASS_UID) Enum() *NETWORK_CLASS_UID {
	p := new(NETWORK_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[110].Descriptor()
}

func (NETWORK_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[110]
}

func (x NETWORK_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CLASS_UID.Descriptor instead.
func (NETWORK_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{110}
}

type DNS_ACTIVITY_STATUS_ID int32

const (
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_UNKNOWN DNS_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_SUCCESS DNS_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_FAILURE DNS_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_OTHER   DNS_ACTIVITY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_STATUS_ID.
var (
	DNS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "DNS_ACTIVITY_STATUS_ID_FAILURE",
		99: "DNS_ACTIVITY_STATUS_ID_OTHER",
	}
	DNS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"DNS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"DNS_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"DNS_ACTIVITY_STATUS_ID_FAILURE": 2,
		"DNS_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x DNS_ACTIVITY_STATUS_ID) Enum() *DNS_ACTIVITY_STATUS_ID {
	p := new(DNS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[111].Descriptor()
}

func (DNS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[111]
}

func (x DNS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_STATUS_ID.Descriptor instead.
func (DNS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{111}
}

type HTTP_ACTIVITY_STATUS_ID int32

const (
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_UNKNOWN HTTP_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_SUCCESS HTTP_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_FAILURE HTTP_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_OTHER   HTTP_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for HTTP_ACTIVITY_STATUS_ID.
var (
	HTTP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "HTTP_ACTIVITY_STATUS_ID_FAILURE",
		99: "HTTP_ACTIVITY_STATUS_ID_OTHER",
	}
	HTTP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"HTTP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"HTTP_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"HTTP_ACTIVITY_STATUS_ID_FAILURE": 2,
		"HTTP_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x HTTP_ACTIVITY_STATUS_ID) Enum() *HTTP_ACTIVITY_STATUS_ID {
	p := new(HTTP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[112].Descriptor()
}

func (HTTP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[112]
}

func (x HTTP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_STATUS_ID.Descriptor instead.
func (HTTP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{112}
}

type RDP_ACTIVITY_CLASS_UID int32

const (
	RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY_CLASS_UID_UNSPECIFIED  RDP_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY RDP_ACTIVITY_CLASS_UID = 4005 // EnumValue: 4005; Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_CLASS_UID.
var (
	RDP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "RDP_ACTIVITY_CLASS_UID_UNSPECIFIED",
		4005: "RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY",
	}
	RDP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"RDP_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY": 4005,
	}
)

func (x RDP_ACTIVITY_CLASS_UID) Enum() *RDP_ACTIVITY_CLASS_UID {
	p := new(RDP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[113].Descriptor()
}

func (RDP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[113]
}

func (x RDP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_CLASS_UID.Descriptor instead.
func (RDP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{113}
}

type DHCP_ACTIVITY_ACTION_ID int32

const (
	DHCP_ACTIVITY_ACTION_ID_DHCP_ACTIVITY_ACTION_ID_UNKNOWN DHCP_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DHCP_ACTIVITY_ACTION_ID_DHCP_ACTIVITY_ACTION_ID_ALLOWED DHCP_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DHCP_ACTIVITY_ACTION_ID_DHCP_ACTIVITY_ACTION_ID_DENIED  DHCP_ACTIVITY_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DHCP_ACTIVITY_ACTION_ID_DHCP_ACTIVITY_ACTION_ID_OTHER   DHCP_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DHCP_ACTIVITY_ACTION_ID.
var (
	DHCP_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "DHCP_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "DHCP_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "DHCP_ACTIVITY_ACTION_ID_DENIED",
		99: "DHCP_ACTIVITY_ACTION_ID_OTHER",
	}
	DHCP_ACTIVITY_ACTION_ID_value = map[string]int32{
		"DHCP_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"DHCP_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"DHCP_ACTIVITY_ACTION_ID_DENIED":  2,
		"DHCP_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x DHCP_ACTIVITY_ACTION_ID) Enum() *DHCP_ACTIVITY_ACTION_ID {
	p := new(DHCP_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[114].Descriptor()
}

func (DHCP_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[114]
}

func (x DHCP_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_ACTION_ID.Descriptor instead.
func (DHCP_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{114}
}

type DHCP_ACTIVITY_ACTIVITY_ID int32

const (
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN  DHCP_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_DISCOVER DHCP_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_OFFER    DHCP_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_REQUEST  DHCP_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_DECLINE  DHCP_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_ACK      DHCP_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_NAK      DHCP_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_RELEASE  DHCP_ACTIVITY_ACTIVITY_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_INFORM   DHCP_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_EXPIRE   DHCP_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_OTHER    DHCP_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DHCP_ACTIVITY_ACTIVITY_ID.
var (
	DHCP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "DHCP_ACTIVITY_ACTIVITY_ID_DISCOVER",
		2:  "DHCP_ACTIVITY_ACTIVITY_ID_OFFER",
		3:  "DHCP_ACTIVITY_ACTIVITY_ID_REQUEST",
		4:  "DHCP_ACTIVITY_ACTIVITY_ID_DECLINE",
		5:  "DHCP_ACTIVITY_ACTIVITY_ID_ACK",
		6:  "DHCP_ACTIVITY_ACTIVITY_ID_NAK",
		7:  "DHCP_ACTIVITY_ACTIVITY_ID_RELEASE",
		8:  "DHCP_ACTIVITY_ACTIVITY_ID_INFORM",
		9:  "DHCP_ACTIVITY_ACTIVITY_ID_EXPIRE",
		99: "DHCP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	DHCP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN":  0,
		"DHCP_ACTIVITY_ACTIVITY_ID_DISCOVER": 1,
		"DHCP_ACTIVITY_ACTIVITY_ID_OFFER":    2,
		"DHCP_ACTIVITY_ACTIVITY_ID_REQUEST":  3,
		"DHCP_ACTIVITY_ACTIVITY_ID_DECLINE":  4,
		"DHCP_ACTIVITY_ACTIVITY_ID_ACK":      5,
		"DHCP_ACTIVITY_ACTIVITY_ID_NAK":      6,
		"DHCP_ACTIVITY_ACTIVITY_ID_RELEASE":  7,
		"DHCP_ACTIVITY_ACTIVITY_ID_INFORM":   8,
		"DHCP_ACTIVITY_ACTIVITY_ID_EXPIRE":   9,
		"DHCP_ACTIVITY_ACTIVITY_ID_OTHER":    99,
	}
)

func (x DHCP_ACTIVITY_ACTIVITY_ID) Enum() *DHCP_ACTIVITY_ACTIVITY_ID {
	p := new(DHCP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[115].Descriptor()
}

func (DHCP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[115]
}

func (x DHCP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (DHCP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{115}
}

type NETWORK_FILE_ACTIVITY_SEVERITY_ID int32

const (
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       NETWORK_FILE_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL NETWORK_FILE_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW           NETWORK_FILE_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        NETWORK_FILE_ACTIVITY_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH          NETWORK_FILE_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      NETWORK_FILE_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL         NETWORK_FILE_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER         NETWORK_FILE_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_SEVERITY_ID.
var (
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW",
		3:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL",
		99: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW":           2,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) Enum() *NETWORK_FILE_ACTIVITY_SEVERITY_ID {
	p := new(NETWORK_FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[116].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes[116]
}

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP(), []int{116}
}

var File_ocsf_v1_1_0_events_network_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2a, 0xfb, 0x02, 0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2b, 0x0a,
	0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea,
	0x09, 0x0a, 0x1b, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f,
	0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x27,
	0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22,
	0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0x15, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12,
	0x2c, 0x0a, 0x28, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x76, 0x0a, 0x19, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x04, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a,
	0x18, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x76, 0x0a, 0x19, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xee, 0x02, 0x0a, 0x19, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x53, 0x53, 0x41, 0x50,
	0x49, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x32, 0x0a,
	0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa5, 0x01, 0x0a, 0x16, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xe9, 0x01, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x01, 0x0a,
	0x16, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9e, 0x0b, 0x0a, 0x21, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x30,
	0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x39, 0x0a, 0x35, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x31, 0x0a, 0x2d,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2f,
	0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12,
	0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2c, 0x0a,
	0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x10, 0x15, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10,
	0x16, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x17, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x88, 0x0a, 0x0a, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x28,
	0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x29, 0x0a,
	0x25, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x34, 0x0a, 0x30, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12,
	0x27, 0x0a, 0x23, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13,
	0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15,
	0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x19, 0x12, 0x2d, 0x0a, 0x29, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x1a, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x72, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0xa9, 0x1f, 0x2a, 0xb5, 0x02, 0x0a, 0x15, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2a, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xac, 0xb7, 0x18, 0x12, 0x2e, 0x0a, 0x28, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0xad, 0xb7, 0x18, 0x12, 0x31, 0x0a, 0x2b, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xae, 0xb7, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0xb2, 0xb7, 0x18, 0x12, 0x2e, 0x0a,
	0x28, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8f, 0xb8, 0x18, 0x2a, 0x92, 0x0a,
	0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x43, 0x0a, 0x3c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xe8, 0x99, 0xf4, 0x01, 0x12, 0x42, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0xe9, 0x99, 0xf4, 0x01, 0x12, 0x44, 0x0a, 0x3d, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xea, 0x99, 0xf4, 0x01, 0x12,
	0x42, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xeb,
	0x99, 0xf4, 0x01, 0x12, 0x42, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xec, 0x99, 0xf4, 0x01, 0x12, 0x42, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xed, 0x99, 0xf4, 0x01, 0x12, 0x40, 0x0a, 0x39, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0xee, 0x99, 0xf4, 0x01, 0x12, 0x40, 0x0a,
	0x39, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xef, 0x99, 0xf4, 0x01, 0x12,
	0x43, 0x0a, 0x3c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0xf0, 0x99, 0xf4, 0x01, 0x12, 0x43, 0x0a, 0x3c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x10, 0xf1, 0x99, 0xf4, 0x01, 0x12, 0x40, 0x0a, 0x39, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xf2, 0x99, 0xf4, 0x01, 0x12, 0x42, 0x0a, 0x3b, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xf3, 0x99, 0xf4, 0x01, 0x12,
	0x41, 0x0a, 0x3a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0xf4, 0x99,
	0xf4, 0x01, 0x12, 0x43, 0x0a, 0x3c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x10, 0xf5, 0x99, 0xf4, 0x01, 0x12, 0x40, 0x0a, 0x39, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0xf6, 0x99, 0xf4, 0x01, 0x12, 0x40, 0x0a, 0x39, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xf7, 0x99, 0xf4, 0x01, 0x12, 0x42, 0x0a, 0x3b, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xf8, 0x99, 0xf4, 0x01, 0x12,
	0x41, 0x0a, 0x3a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xcb, 0x9a,
	0xf4, 0x01, 0x2a, 0xb8, 0x02, 0x0a, 0x18, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x82, 0x01,
	0x0a, 0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x80, 0xb5, 0x18, 0x12, 0x24, 0x0a, 0x1e,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xe3,
	0xb5, 0x18, 0x2a, 0xd5, 0x01, 0x0a, 0x18, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x89, 0x04, 0x0a, 0x19, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe4, 0xb5, 0x18, 0x12, 0x35, 0x0a,
	0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0xe5, 0xb5, 0x18, 0x12, 0x36, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xe6, 0xb5, 0x18, 0x12, 0x36, 0x0a, 0x30,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x10, 0xe7, 0xb5, 0x18, 0x12, 0x35, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xe8, 0xb5, 0x18, 0x12, 0x37, 0x0a, 0x31, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45,
	0x10, 0xe9, 0xb5, 0x18, 0x12, 0x38, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0xea, 0xb5, 0x18, 0x12, 0x36,
	0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0xc7, 0xb6, 0x18, 0x2a, 0xe2, 0x0a, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x2c, 0x0a,
	0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x37, 0x0a, 0x33, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2d, 0x0a,
	0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x2a, 0x0a, 0x26,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12,
	0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41,
	0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10,
	0x17, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x19, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b,
	0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc8, 0x02, 0x0a, 0x17,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x34, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x84, 0xbc, 0x18, 0x12, 0x31, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x85, 0xbc, 0x18, 0x12, 0x34, 0x0a, 0x2e, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x86, 0xbc, 0x18, 0x12,
	0x31, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x87,
	0xbc, 0x18, 0x12, 0x32, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0xe7, 0xbc, 0x18, 0x2a, 0x8e, 0x03, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12,
	0x25, 0x0a, 0x21, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x07, 0x12, 0x23, 0x0a,
	0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea, 0x09, 0x0a, 0x1b, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x28, 0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48,
	0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2e,
	0x0a, 0x2a, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x83, 0x01, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x2f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xcc, 0xb8, 0x02, 0x2a, 0xd3, 0x06, 0x0a, 0x15, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x58, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x59, 0x58, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x59, 0x58, 0x52,
	0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x58, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x09, 0x12,
	0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x5a, 0x4f, 0x4e,
	0x45, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x53, 0x4f,
	0x54, 0x59, 0x50, 0x45, 0x4e, 0x49, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x44, 0x53, 0x49, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x10, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x4b, 0x45, 0x59, 0x10,
	0x11, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x44, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x42, 0x41, 0x44, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x41, 0x4c, 0x47, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x10, 0x16,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x43, 0x4f, 0x4f,
	0x4b, 0x49, 0x45, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x19, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xaf, 0x01, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x79, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xc3, 0x01,
	0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf4, 0x01, 0x0a, 0x1e,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x55, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6e, 0x0a, 0x17, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x25, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa4, 0x1f, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27,
	0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x88, 0x0a, 0x0a, 0x1c, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x2e, 0x0a, 0x2a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x29, 0x0a, 0x25, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x48,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x34,
	0x0a, 0x30, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x26, 0x0a,
	0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41,
	0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x17, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12,
	0x2d, 0x0a, 0x29, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea,
	0x09, 0x0a, 0x1b, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x46,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x27,
	0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0x15, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12,
	0x2c, 0x0a, 0x28, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x67, 0x0a, 0x14, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x04, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x25,
	0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xea, 0x09, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33,
	0x0a, 0x2f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25,
	0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x15, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x19, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc5, 0x02,
	0x0a, 0x18, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2a, 0x0a, 0x26, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf0, 0x02, 0x0a, 0x18, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x4c, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xbd, 0x02, 0x0a, 0x18, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x7c, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a,
	0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a,
	0x98, 0x02, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8d, 0x02, 0x0a, 0x17, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x55, 0x4d, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x55, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xc8, 0x01, 0x0a, 0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea, 0x09,
	0x0a, 0x1b, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15,
	0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xeb, 0x02, 0x0a, 0x18, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a,
	0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x53, 0x45, 0x44, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x49, 0x46, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x49, 0x46, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa5, 0x01, 0x0a, 0x16, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xfd, 0x02, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3d, 0x0a,
	0x36, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb0, 0x9b, 0xf4, 0x01, 0x12, 0x3a, 0x0a, 0x33,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x10, 0xb1, 0x9b, 0xf4, 0x01, 0x12, 0x3d, 0x0a, 0x36, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x10, 0xb2, 0x9b, 0xf4, 0x01, 0x12, 0x3a, 0x0a, 0x33, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0xb3,
	0x9b, 0xf4, 0x01, 0x12, 0x3b, 0x0a, 0x34, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x93, 0x9c, 0xf4, 0x01,
	0x2a, 0xdc, 0x01, 0x0a, 0x1a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xce, 0x02, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x21, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26,
	0x0a, 0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xb5, 0x03, 0x0a, 0x18, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x20, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x37, 0x0a, 0x33, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41,
	0x53, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6e, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x25,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa2, 0x1f, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xef, 0x04, 0x0a, 0x16, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2c, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x90, 0xb8, 0x18, 0x12, 0x33, 0x0a,
	0x2d, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x91,
	0xb8, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x92, 0xb8, 0x18, 0x12, 0x32, 0x0a, 0x2c, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x93, 0xb8, 0x18, 0x12, 0x32, 0x0a, 0x2c, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x94, 0xb8, 0x18, 0x12, 0x2e, 0x0a, 0x28,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x95, 0xb8, 0x18, 0x12, 0x2e, 0x0a, 0x28,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4b, 0x10, 0x96, 0xb8, 0x18, 0x12, 0x32, 0x0a, 0x2c,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x97, 0xb8, 0x18,
	0x12, 0x31, 0x0a, 0x2b, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0x98, 0xb8, 0x18, 0x12, 0x31, 0x0a, 0x2b, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x48,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x10, 0x99, 0xb8, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0xf3, 0xb8, 0x18, 0x2a, 0x88, 0x01, 0x0a, 0x1f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a,
	0x30, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x04, 0x2a, 0xd2, 0x01, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a,
	0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x76, 0x0a, 0x19, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04,
	0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa5, 0x01, 0x0a, 0x16, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x6b, 0x0a, 0x16, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x29, 0x0a, 0x23, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xcd, 0xb8, 0x02, 0x2a, 0xfa, 0x01,
	0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x03, 0x12,
	0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8b, 0x01, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35,
	0x0a, 0x31, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xda, 0x01, 0x0a, 0x1a, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x49, 0x50, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x87, 0x01, 0x0a, 0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x31, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xcb, 0xb8, 0x02, 0x2a, 0xa6, 0x0a, 0x0a,
	0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a,
	0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a,
	0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x35, 0x0a, 0x31, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x19, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x1a, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc1, 0x03, 0x0a, 0x15, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2a, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xbc, 0xba, 0x18, 0x12, 0x2d, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0xbd, 0xba, 0x18, 0x12, 0x2e, 0x0a, 0x28, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0xbe, 0xba, 0x18, 0x12, 0x2e, 0x0a, 0x28, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0xbf, 0xba, 0x18, 0x12, 0x2d, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0xc0, 0xba, 0x18, 0x12, 0x2f, 0x0a, 0x29, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x10, 0xc1, 0xba, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0xc2, 0xba, 0x18, 0x12, 0x2e, 0x0a, 0x28, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x9f, 0xbb, 0x18, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x44, 0x48,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x76, 0x0a, 0x19, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x2a, 0xb5, 0x04, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2c, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xc8, 0xb6, 0x18, 0x12, 0x32, 0x0a, 0x2c, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xc9, 0xb6, 0x18, 0x12, 0x31, 0x0a,
	0x2b, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xca, 0xb6, 0x18,
	0x12, 0x2e, 0x0a, 0x28, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xcb, 0xb6, 0x18,
	0x12, 0x2f, 0x0a, 0x29, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0xcc, 0xb6,
	0x18, 0x12, 0x32, 0x0a, 0x2c, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0xcd, 0xb6, 0x18, 0x12, 0x2f, 0x0a, 0x29, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0xce, 0xb6, 0x18, 0x12, 0x2e, 0x0a, 0x28, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x55, 0x54, 0x10, 0xcf, 0xb6, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0xd0, 0xb6, 0x18, 0x12, 0x30, 0x0a, 0x2a, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xab, 0xb7, 0x18, 0x2a, 0xe1, 0x02, 0x0a, 0x1c, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc5,
	0x02, 0x0a, 0x18, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd9, 0x06, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x06, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0c,
	0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0d, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb9, 0x01, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc5,
	0x02, 0x0a, 0x18, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x76, 0x0a, 0x19, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xbc,
	0x03, 0x0a, 0x15, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x30, 0x0a, 0x2a, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa0, 0xbb,
	0x18, 0x12, 0x2c, 0x0a, 0x26, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x54, 0x10, 0xa1, 0xbb, 0x18, 0x12,
	0x2c, 0x0a, 0x26, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xa2, 0xbb, 0x18, 0x12, 0x2d, 0x0a,
	0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0xa3, 0xbb, 0x18, 0x12, 0x2f, 0x0a, 0x29,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xa4, 0xbb, 0x18, 0x12, 0x2f, 0x0a,
	0x29, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xa5, 0xbb, 0x18, 0x12, 0x2d,
	0x0a, 0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xa6, 0xbb, 0x18, 0x12, 0x2e, 0x0a,
	0x28, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x83, 0xbc, 0x18, 0x2a, 0x6a, 0x0a,
	0x16, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x28, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa8, 0x1f, 0x2a, 0x91, 0x01, 0x0a, 0x22, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xd4, 0x08,
	0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51,
	0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x22, 0x0a,
	0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10,
	0x16, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44,
	0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a,
	0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x6a, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa7, 0x1f,
	0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8f, 0x01, 0x0a, 0x1f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3b,
	0x0a, 0x35, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xca, 0xb8, 0x02, 0x2a, 0xea, 0x09, 0x0a, 0x1b,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x2d, 0x0a, 0x29, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2b,
	0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x45, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41,
	0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44,
	0x10, 0x18, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x1b, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x89, 0x03, 0x0a, 0x1c, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x38, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xcc, 0x9a, 0xf4, 0x01, 0x12, 0x3c, 0x0a, 0x35, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x10, 0xcd, 0x9a, 0xf4, 0x01, 0x12, 0x3f, 0x0a, 0x38, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x10, 0xce, 0x9a, 0xf4, 0x01, 0x12, 0x3c, 0x0a, 0x35, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x10, 0xcf, 0x9a, 0xf4, 0x01, 0x12, 0x3d, 0x0a, 0x36, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xaf, 0x9b, 0xf4, 0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x16, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc9, 0x01, 0x0a,
	0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6a, 0x0a, 0x16, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0xa6, 0x1f, 0x2a, 0x7a, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa1, 0x1f,
	0x2a, 0xc4, 0x01, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd3, 0x01, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa5, 0x01,
	0x0a, 0x16, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x82, 0x01, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x8c, 0x01, 0x0a, 0x11, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf8, 0x0b, 0x0a, 0x24, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x31,
	0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x3c, 0x0a, 0x38,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44,
	0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2e, 0x0a, 0x2a, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x30, 0x0a, 0x2c, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x32, 0x0a,
	0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10,
	0x17, 0x12, 0x37, 0x0a, 0x33, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x35, 0x0a,
	0x31, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x1a, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x6a, 0x0a, 0x16, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa3, 0x1f,
	0x2a, 0xce, 0x04, 0x0a, 0x15, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x31, 0x0a, 0x2a, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x94, 0x9c, 0xf4, 0x01, 0x12, 0x43, 0x0a, 0x3c, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x95, 0x9c, 0xf4, 0x01, 0x12, 0x44, 0x0a, 0x3d, 0x4e, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x96, 0x9c, 0xf4, 0x01, 0x12,
	0x40, 0x0a, 0x39, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x97, 0x9c, 0xf4,
	0x01, 0x12, 0x39, 0x0a, 0x32, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x98, 0x9c, 0xf4, 0x01, 0x12, 0x33, 0x0a, 0x2c,
	0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x99, 0x9c, 0xf4,
	0x01, 0x12, 0x31, 0x0a, 0x2a, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10,
	0x9a, 0x9c, 0xf4, 0x01, 0x12, 0x3a, 0x0a, 0x33, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x9b, 0x9c, 0xf4, 0x01,
	0x12, 0x2f, 0x0a, 0x28, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xf7, 0x9c, 0xf4,
	0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x16, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8d, 0x01, 0x0a, 0x11, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x76, 0x0a, 0x19, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x2a, 0x79, 0x0a, 0x1a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x26, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0xaa, 0x01, 0x0a,
	0x17, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x84, 0x03, 0x0a, 0x1f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf4, 0x03, 0x0a, 0x15, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2a, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf4, 0xb8, 0x18, 0x12, 0x38, 0x0a, 0x32,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xf5, 0xb8, 0x18, 0x12, 0x39, 0x0a, 0x33, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xf6, 0xb8,
	0x18, 0x12, 0x38, 0x0a, 0x32, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf7, 0xb8, 0x18, 0x12, 0x39, 0x0a, 0x33, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0xf8, 0xb8, 0x18, 0x12, 0x36, 0x0a, 0x30, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4c, 0x53,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x10, 0xf9, 0xb8, 0x18, 0x12, 0x30,
	0x0a, 0x2a, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0xfa, 0xb8, 0x18,
	0x12, 0x2e, 0x0a, 0x28, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xd7, 0xb9, 0x18,
	0x2a, 0xbc, 0x0b, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x3a, 0x0a, 0x36, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x15, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43,
	0x48, 0x41, 0x10, 0x16, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x2f, 0x0a,
	0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x33,
	0x0a, 0x2f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x1a, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x1b, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xef, 0x03, 0x0a, 0x15, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2a, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xd8,
	0xb9, 0x18, 0x12, 0x37, 0x0a, 0x31, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x53, 0x45, 0x44, 0x45, 0x10, 0xd9, 0xb9, 0x18, 0x12, 0x32, 0x0a, 0x2c, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0xda, 0xb9, 0x18, 0x12,
	0x34, 0x0a, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0xdb, 0xb9, 0x18, 0x12, 0x35, 0x0a, 0x2f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x46, 0x10, 0xdc, 0xb9, 0x18, 0x12, 0x37, 0x0a, 0x31,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0xdd, 0xb9, 0x18, 0x12, 0x3a, 0x0a, 0x34, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x10, 0xde, 0xb9,
	0x18, 0x12, 0x2e, 0x0a, 0x28, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xbb, 0xba,
	0x18, 0x2a, 0x56, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x19, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xa0, 0x1f, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x6a, 0x0a, 0x16, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa5, 0x1f, 0x2a, 0xaa, 0x01, 0x0a,
	0x17, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xbb, 0x03, 0x0a, 0x19, 0x44, 0x48,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4b, 0x10, 0x06, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x96, 0x03, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x42, 0x99, 0x02, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x31, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73,
	0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x4e, 0x45, 0xaa, 0x02, 0x1e, 0x4f, 0x63, 0x73, 0x66, 0x2e,
	0x56, 0x31, 0x31, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x1e, 0x4f, 0x63, 0x73, 0x66,
	0x5c, 0x56, 0x31, 0x31, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x2a, 0x4f, 0x63, 0x73,
	0x66, 0x5c, 0x56, 0x31, 0x31, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a,
	0x56, 0x31, 0x31, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescData = file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDesc
)

func file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDescData
}

var file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 117)
var file_ocsf_v1_1_0_events_network_enums_enums_proto_goTypes = []interface{}{
	(EMAIL_URL_ACTIVITY_SEVERITY_ID)(0),       // 0: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_SEVERITY_ID
	(NTP_ACTIVITY_DISPOSITION_ID)(0),          // 1: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_DISPOSITION_ID
	(RDP_ACTIVITY_CATEGORY_UID)(0),            // 2: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_CATEGORY_UID
	(FTP_ACTIVITY_STATUS_ID)(0),               // 3: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_STATUS_ID
	(EMAIL_ACTIVITY_STATUS_ID)(0),             // 4: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_STATUS_ID
	(SMB_ACTIVITY_CATEGORY_UID)(0),            // 5: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_CATEGORY_UID
	(SSH_ACTIVITY_AUTH_TYPE_ID)(0),            // 6: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_AUTH_TYPE_ID
	(NTP_ACTIVITY_ACTION_ID)(0),               // 7: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_ACTION_ID
	(EMAIL_ACTIVITY_DIRECTION_ID)(0),          // 8: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_DIRECTION_ID
	(NTP_ACTIVITY_STATUS_ID)(0),               // 9: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_STATUS_ID
	(EMAIL_URL_ACTIVITY_DISPOSITION_ID)(0),    // 10: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID
	(HTTP_ACTIVITY_DISPOSITION_ID)(0),         // 11: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_DISPOSITION_ID
	(EMAIL_ACTIVITY_CLASS_UID)(0),             // 12: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_CLASS_UID
	(DNS_ACTIVITY_TYPE_UID)(0),                // 13: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_TYPE_UID
	(NETWORK_FILE_ACTIVITY_TYPE_UID)(0),       // 14: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_TYPE_UID
	(FTP_ACTIVITY_ACTIVITY_ID)(0),             // 15: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_ACTIVITY_ID
	(NETWORK_TYPE_UID)(0),                     // 16: ocsf.v1_1_0.events.network.enums.NETWORK_TYPE_UID
	(DNS_ACTIVITY_ACTIVITY_ID)(0),             // 17: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_ACTIVITY_ID
	(NETWORK_ACTIVITY_TYPE_UID)(0),            // 18: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_TYPE_UID
	(NETWORK_ACTIVITY_DISPOSITION_ID)(0),      // 19: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_DISPOSITION_ID
	(EMAIL_ACTIVITY_TYPE_UID)(0),              // 20: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_TYPE_UID
	(HTTP_ACTIVITY_ACTIVITY_ID)(0),            // 21: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_ACTIVITY_ID
	(SMB_ACTIVITY_DISPOSITION_ID)(0),          // 22: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_DISPOSITION_ID
	(EMAIL_URL_ACTIVITY_CLASS_UID)(0),         // 23: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_CLASS_UID
	(DNS_ACTIVITY_RCODE_ID)(0),                // 24: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_RCODE_ID
	(EMAIL_ACTIVITY_ACTION_ID)(0),             // 25: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_ACTION_ID
	(HTTP_ACTIVITY_CATEGORY_UID)(0),           // 26: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_CATEGORY_UID
	(EMAIL_URL_ACTIVITY_ACTION_ID)(0),         // 27: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_ACTION_ID
	(SSH_ACTIVITY_SEVERITY_ID)(0),             // 28: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_SEVERITY_ID
	(EMAIL_URL_ACTIVITY_ACTIVITY_ID)(0),       // 29: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID
	(NETWORK_ACTIVITY_ID)(0),                  // 30: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_ID
	(DHCP_ACTIVITY_CLASS_UID)(0),              // 31: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_CLASS_UID
	(EMAIL_ACTIVITY_SEVERITY_ID)(0),           // 32: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_SEVERITY_ID
	(DHCP_ACTIVITY_DISPOSITION_ID)(0),         // 33: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_DISPOSITION_ID
	(FTP_ACTIVITY_DISPOSITION_ID)(0),          // 34: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_DISPOSITION_ID
	(NETWORK_CATEGORY_UID)(0),                 // 35: ocsf.v1_1_0.events.network.enums.NETWORK_CATEGORY_UID
	(NETWORK_ACTIVITY_SEVERITY_ID)(0),         // 36: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_SEVERITY_ID
	(DNS_ACTIVITY_DISPOSITION_ID)(0),          // 37: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_DISPOSITION_ID
	(FTP_ACTIVITY_SEVERITY_ID)(0),             // 38: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_SEVERITY_ID
	(RDP_ACTIVITY_ACTIVITY_ID)(0),             // 39: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_ACTIVITY_ID
	(SSH_ACTIVITY_ACTIVITY_ID)(0),             // 40: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_ACTIVITY_ID
	(SMB_ACTIVITY_STATUS_ID)(0),               // 41: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_STATUS_ID
	(EMAIL_ACTIVITY_CATEGORY_UID)(0),          // 42: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_CATEGORY_UID
	(NETWORK_SEVERITY_ID)(0),                  // 43: ocsf.v1_1_0.events.network.enums.NETWORK_SEVERITY_ID
	(NTP_ACTIVITY_STRATUM_ID)(0),              // 44: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_STRATUM_ID
	(RDP_ACTIVITY_SEVERITY_ID)(0),             // 45: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_SEVERITY_ID
	(EMAIL_FILE_ACTIVITY_ACTION_ID)(0),        // 46: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_ACTION_ID
	(RDP_ACTIVITY_DISPOSITION_ID)(0),          // 47: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_DISPOSITION_ID
	(SMB_ACTIVITY_ACTIVITY_ID)(0),             // 48: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_ACTIVITY_ID
	(SMB_ACTIVITY_ACTION_ID)(0),               // 49: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_ACTION_ID
	(EMAIL_URL_ACTIVITY_TYPE_UID)(0),          // 50: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_TYPE_UID
	(EMAIL_ACTIVITY_ACTIVITY_ID)(0),           // 51: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_ACTIVITY_ID
	(HTTP_ACTIVITY_SEVERITY_ID)(0),            // 52: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_SEVERITY_ID
	(NTP_ACTIVITY_ACTIVITY_ID)(0),             // 53: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_ACTIVITY_ID
	(HTTP_ACTIVITY_CLASS_UID)(0),              // 54: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_CLASS_UID
	(DHCP_ACTIVITY_STATUS_ID)(0),              // 55: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_STATUS_ID
	(DHCP_ACTIVITY_TYPE_UID)(0),               // 56: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_TYPE_UID
	(EMAIL_URL_ACTIVITY_CATEGORY_UID)(0),      // 57: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_CATEGORY_UID
	(NETWORK_FILE_ACTIVITY_ACTION_ID)(0),      // 58: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_ACTION_ID
	(DNS_ACTIVITY_CATEGORY_UID)(0),            // 59: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_CATEGORY_UID
	(SMB_ACTIVITY_SEVERITY_ID)(0),             // 60: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_SEVERITY_ID
	(SSH_ACTIVITY_ACTION_ID)(0),               // 61: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_ACTION_ID
	(NTP_ACTIVITY_CLASS_UID)(0),               // 62: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_CLASS_UID
	(EMAIL_FILE_ACTIVITY_ACTIVITY_ID)(0),      // 63: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID
	(NETWORK_ACTIVITY_STATUS_ID)(0),           // 64: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_STATUS_ID
	(EMAIL_FILE_ACTIVITY_CATEGORY_UID)(0),     // 65: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID
	(SMB_ACTIVITY_SHARE_TYPE_ID)(0),           // 66: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_SHARE_TYPE_ID
	(EMAIL_FILE_ACTIVITY_CLASS_UID)(0),        // 67: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_CLASS_UID
	(EMAIL_ACTIVITY_DISPOSITION_ID)(0),        // 68: ocsf.v1_1_0.events.network.enums.EMAIL_ACTIVITY_DISPOSITION_ID
	(SSH_ACTIVITY_TYPE_UID)(0),                // 69: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_TYPE_UID
	(DHCP_ACTIVITY_SEVERITY_ID)(0),            // 70: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_SEVERITY_ID
	(FTP_ACTIVITY_CATEGORY_UID)(0),            // 71: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_CATEGORY_UID
	(HTTP_ACTIVITY_TYPE_UID)(0),               // 72: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_TYPE_UID
	(NETWORK_ACTIVITY_ACTIVITY_ID)(0),         // 73: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_ACTIVITY_ID
	(DNS_ACTIVITY_SEVERITY_ID)(0),             // 74: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_SEVERITY_ID
	(NETWORK_FILE_ACTIVITY_ACTIVITY_ID)(0),    // 75: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID
	(NETWORK_ACTIVITY_ACTION_ID)(0),           // 76: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_ACTION_ID
	(NTP_ACTIVITY_SEVERITY_ID)(0),             // 77: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_SEVERITY_ID
	(NTP_ACTIVITY_CATEGORY_UID)(0),            // 78: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_CATEGORY_UID
	(FTP_ACTIVITY_TYPE_UID)(0),                // 79: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_TYPE_UID
	(FTP_ACTIVITY_CLASS_UID)(0),               // 80: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_CLASS_UID
	(NETWORK_FILE_ACTIVITY_CATEGORY_UID)(0),   // 81: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID
	(NETWORK_DISPOSITION_ID)(0),               // 82: ocsf.v1_1_0.events.network.enums.NETWORK_DISPOSITION_ID
	(SSH_ACTIVITY_CLASS_UID)(0),               // 83: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_CLASS_UID
	(RDP_ACTIVITY_STATUS_ID)(0),               // 84: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_STATUS_ID
	(NETWORK_FILE_ACTIVITY_CLASS_UID)(0),      // 85: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_CLASS_UID
	(SSH_ACTIVITY_DISPOSITION_ID)(0),          // 86: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_DISPOSITION_ID
	(EMAIL_FILE_ACTIVITY_TYPE_UID)(0),         // 87: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_TYPE_UID
	(FTP_ACTIVITY_ACTION_ID)(0),               // 88: ocsf.v1_1_0.events.network.enums.FTP_ACTIVITY_ACTION_ID
	(EMAIL_FILE_ACTIVITY_STATUS_ID)(0),        // 89: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_STATUS_ID
	(SMB_ACTIVITY_CLASS_UID)(0),               // 90: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_CLASS_UID
	(NETWORK_ACTIVITY_CLASS_UID)(0),           // 91: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_CLASS_UID
	(EMAIL_URL_ACTIVITY_STATUS_ID)(0),         // 92: ocsf.v1_1_0.events.network.enums.EMAIL_URL_ACTIVITY_STATUS_ID
	(NETWORK_FILE_ACTIVITY_STATUS_ID)(0),      // 93: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_STATUS_ID
	(DNS_ACTIVITY_ACTION_ID)(0),               // 94: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_ACTION_ID
	(NETWORK_ACTIVITY_CATEGORY_UID)(0),        // 95: ocsf.v1_1_0.events.network.enums.NETWORK_ACTIVITY_CATEGORY_UID
	(NETWORK_ACTION_ID)(0),                    // 96: ocsf.v1_1_0.events.network.enums.NETWORK_ACTION_ID
	(NETWORK_FILE_ACTIVITY_DISPOSITION_ID)(0), // 97: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_DISPOSITION_ID
	(DNS_ACTIVITY_CLASS_UID)(0),               // 98: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_CLASS_UID
	(NTP_ACTIVITY_TYPE_UID)(0),                // 99: ocsf.v1_1_0.events.network.enums.NTP_ACTIVITY_TYPE_UID
	(RDP_ACTIVITY_ACTION_ID)(0),               // 100: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_ACTION_ID
	(NETWORK_STATUS_ID)(0),                    // 101: ocsf.v1_1_0.events.network.enums.NETWORK_STATUS_ID
	(SSH_ACTIVITY_CATEGORY_UID)(0),            // 102: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_CATEGORY_UID
	(DHCP_ACTIVITY_CATEGORY_UID)(0),           // 103: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_CATEGORY_UID
	(HTTP_ACTIVITY_ACTION_ID)(0),              // 104: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_ACTION_ID
	(EMAIL_FILE_ACTIVITY_SEVERITY_ID)(0),      // 105: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID
	(SSH_ACTIVITY_STATUS_ID)(0),               // 106: ocsf.v1_1_0.events.network.enums.SSH_ACTIVITY_STATUS_ID
	(RDP_ACTIVITY_TYPE_UID)(0),                // 107: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_TYPE_UID
	(EMAIL_FILE_ACTIVITY_DISPOSITION_ID)(0),   // 108: ocsf.v1_1_0.events.network.enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID
	(SMB_ACTIVITY_TYPE_UID)(0),                // 109: ocsf.v1_1_0.events.network.enums.SMB_ACTIVITY_TYPE_UID
	(NETWORK_CLASS_UID)(0),                    // 110: ocsf.v1_1_0.events.network.enums.NETWORK_CLASS_UID
	(DNS_ACTIVITY_STATUS_ID)(0),               // 111: ocsf.v1_1_0.events.network.enums.DNS_ACTIVITY_STATUS_ID
	(HTTP_ACTIVITY_STATUS_ID)(0),              // 112: ocsf.v1_1_0.events.network.enums.HTTP_ACTIVITY_STATUS_ID
	(RDP_ACTIVITY_CLASS_UID)(0),               // 113: ocsf.v1_1_0.events.network.enums.RDP_ACTIVITY_CLASS_UID
	(DHCP_ACTIVITY_ACTION_ID)(0),              // 114: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_ACTION_ID
	(DHCP_ACTIVITY_ACTIVITY_ID)(0),            // 115: ocsf.v1_1_0.events.network.enums.DHCP_ACTIVITY_ACTIVITY_ID
	(NETWORK_FILE_ACTIVITY_SEVERITY_ID)(0),    // 116: ocsf.v1_1_0.events.network.enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID
}
var file_ocsf_v1_1_0_events_network_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_1_0_events_network_enums_enums_proto_init() }
func file_ocsf_v1_1_0_events_network_enums_enums_proto_init() {
	if File_ocsf_v1_1_0_events_network_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDesc,
			NumEnums:      117,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_1_0_events_network_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_1_0_events_network_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_1_0_events_network_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_1_0_events_network_enums_enums_proto = out.File
	file_ocsf_v1_1_0_events_network_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_1_0_events_network_enums_enums_proto_goTypes = nil
	file_ocsf_v1_1_0_events_network_enums_enums_proto_depIdxs = nil
}
