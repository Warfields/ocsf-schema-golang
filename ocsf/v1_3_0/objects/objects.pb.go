// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: ocsf/v1_3_0/objects/objects.proto

package objects

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_3_0/objects/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string              `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`                                                               // Caption: Labels;
	Name   string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                   // Caption: Name;
	Type   string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                   // Caption: Type;
	TypeId enums.ACCOUNT_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.ACCOUNT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid    string                `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                                                                     // Caption: Unique ID;
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Account) GetTypeId() enums.ACCOUNT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.ACCOUNT_TYPE_ID(0)
}

func (x *Account) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName        string           `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`       // Caption: Application Name;
	AppUid         string           `protobuf:"bytes,2,opt,name=app_uid,json=appUid,proto3" json:"app_uid,omitempty"`          // Caption: Application ID;
	Authorizations []*Authorization `protobuf:"bytes,3,rep,name=authorizations,proto3" json:"authorizations,omitempty"`        // Caption: Authorization Information;
	Idp            *Idp             `protobuf:"bytes,4,opt,name=idp,proto3" json:"idp,omitempty"`                              // Caption: Identity Provider;
	InvokedBy      string           `protobuf:"bytes,5,opt,name=invoked_by,json=invokedBy,proto3" json:"invoked_by,omitempty"` // Caption: Invoked by;
	Process        *Process         `protobuf:"bytes,6,opt,name=process,proto3" json:"process,omitempty"`                      // Caption: Process;
	Session        *Session         `protobuf:"bytes,7,opt,name=session,proto3" json:"session,omitempty"`                      // Caption: Session;
	User           *User            `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`                            // Caption: User;
}

func (x *Actor) Reset() {
	*x = Actor{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{1}
}

func (x *Actor) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Actor) GetAppUid() string {
	if x != nil {
		return x.AppUid
	}
	return ""
}

func (x *Actor) GetAuthorizations() []*Authorization {
	if x != nil {
		return x.Authorizations
	}
	return nil
}

func (x *Actor) GetIdp() *Idp {
	if x != nil {
		return x.Idp
	}
	return nil
}

func (x *Actor) GetInvokedBy() string {
	if x != nil {
		return x.InvokedBy
	}
	return ""
}

func (x *Actor) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Actor) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Actor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AffectedCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndLine     int32        `protobuf:"varint,1,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`       // Caption: End Line;
	File        *File        `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`                             // Caption: File;
	Owner       *User        `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`                           // Caption: Owner;
	Remediation *Remediation `protobuf:"bytes,4,opt,name=remediation,proto3" json:"remediation,omitempty"`               // Caption: Remediation Guidance;
	StartLine   int32        `protobuf:"varint,5,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"` // Caption: Start Line;
}

func (x *AffectedCode) Reset() {
	*x = AffectedCode{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AffectedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffectedCode) ProtoMessage() {}

func (x *AffectedCode) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffectedCode.ProtoReflect.Descriptor instead.
func (*AffectedCode) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{2}
}

func (x *AffectedCode) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *AffectedCode) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *AffectedCode) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AffectedCode) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *AffectedCode) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

type AffectedPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture   string                         `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`                                                             // Caption: Architecture;
	CpeName        string                         `protobuf:"bytes,2,opt,name=cpe_name,json=cpeName,proto3" json:"cpe_name,omitempty"`                                                        // Caption: The product CPE identifier;
	Epoch          int32                          `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`                                                                          // Caption: Epoch;
	FixedInVersion string                         `protobuf:"bytes,4,opt,name=fixed_in_version,json=fixedInVersion,proto3" json:"fixed_in_version,omitempty"`                                 // Caption: Fixed In Version;
	Hash           *Fingerprint                   `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`                                                                             // Caption: Hash;
	License        string                         `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty"`                                                                       // Caption: Software License;
	Name           string                         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                             // Caption: Name;
	PackageManager string                         `protobuf:"bytes,8,opt,name=package_manager,json=packageManager,proto3" json:"package_manager,omitempty"`                                   // Caption: Package Manager;
	Path           string                         `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`                                                                             // Caption: Path;
	Purl           string                         `protobuf:"bytes,10,opt,name=purl,proto3" json:"purl,omitempty"`                                                                            // Caption: Package URL;
	Release        string                         `protobuf:"bytes,11,opt,name=release,proto3" json:"release,omitempty"`                                                                      // Caption: Software Release Details;
	Remediation    *Remediation                   `protobuf:"bytes,12,opt,name=remediation,proto3" json:"remediation,omitempty"`                                                              // Caption: Remediation Guidance;
	Type           string                         `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`                                                                            // Caption: Type;
	TypeId         enums.AFFECTED_PACKAGE_TYPE_ID `protobuf:"varint,14,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.AFFECTED_PACKAGE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	VendorName     string                         `protobuf:"bytes,15,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                              // Caption: Vendor Name;
	Version        string                         `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`                                                                      // Caption: Version;
}

func (x *AffectedPackage) Reset() {
	*x = AffectedPackage{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AffectedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffectedPackage) ProtoMessage() {}

func (x *AffectedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffectedPackage.ProtoReflect.Descriptor instead.
func (*AffectedPackage) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{3}
}

func (x *AffectedPackage) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *AffectedPackage) GetCpeName() string {
	if x != nil {
		return x.CpeName
	}
	return ""
}

func (x *AffectedPackage) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *AffectedPackage) GetFixedInVersion() string {
	if x != nil {
		return x.FixedInVersion
	}
	return ""
}

func (x *AffectedPackage) GetHash() *Fingerprint {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AffectedPackage) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *AffectedPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AffectedPackage) GetPackageManager() string {
	if x != nil {
		return x.PackageManager
	}
	return ""
}

func (x *AffectedPackage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AffectedPackage) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *AffectedPackage) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *AffectedPackage) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *AffectedPackage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AffectedPackage) GetTypeId() enums.AFFECTED_PACKAGE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.AFFECTED_PACKAGE_TYPE_ID(0)
}

func (x *AffectedPackage) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *AffectedPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                 // Caption: Name;
	Policies   []*Policy           `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`                                                         // Caption: Policies;
	Type       string              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                 // Caption: Type;
	TypeId     enums.AGENT_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.AGENT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid        string              `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                                                                   // Caption: Unique ID;
	UidAlt     string              `protobuf:"bytes,6,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                                               // Caption: Alternate ID;
	VendorName string              `protobuf:"bytes,7,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                   // Caption: Vendor Name;
	Version    string              `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`                                                           // Caption: Version;
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{4}
}

func (x *Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Agent) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Agent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Agent) GetTypeId() enums.AGENT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.AGENT_TYPE_ID(0)
}

func (x *Agent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Agent) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

func (x *Agent) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Agent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Analytic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category         string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`                                                            // Caption: Category;
	Desc             string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`                                                                    // Caption: Description;
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                    // Caption: Name;
	RelatedAnalytics []*Analytic            `protobuf:"bytes,4,rep,name=related_analytics,json=relatedAnalytics,proto3" json:"related_analytics,omitempty"`                    // Caption: Related Analytics;
	Type             string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                    // Caption: Type;
	TypeId           enums.ANALYTIC_TYPE_ID `protobuf:"varint,6,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.ANALYTIC_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid              string                 `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                                      // Caption: Unique ID;
	Version          string                 `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`                                                              // Caption: Version;
}

func (x *Analytic) Reset() {
	*x = Analytic{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Analytic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analytic) ProtoMessage() {}

func (x *Analytic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analytic.ProtoReflect.Descriptor instead.
func (*Analytic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{5}
}

func (x *Analytic) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Analytic) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Analytic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Analytic) GetRelatedAnalytics() []*Analytic {
	if x != nil {
		return x.RelatedAnalytics
	}
	return nil
}

func (x *Analytic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Analytic) GetTypeId() enums.ANALYTIC_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.ANALYTIC_TYPE_ID(0)
}

func (x *Analytic) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Analytic) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     *Group    `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`         // Caption: Group;
	Operation string    `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"` // Caption: Operation;
	Request   *Request  `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`     // Caption: API Request Details;
	Response  *Response `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`   // Caption: API Response Details;
	Service   *Service  `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`     // Caption: Service;
	Version   string    `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`     // Caption: Version;
}

func (x *Api) Reset() {
	*x = Api{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{6}
}

func (x *Api) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Api) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Api) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Api) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Api) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Api) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubTechnique *SubTechnique `protobuf:"bytes,1,opt,name=sub_technique,json=subTechnique,proto3" json:"sub_technique,omitempty"` // Caption: Sub Technique;
	Tactic       *Tactic       `protobuf:"bytes,2,opt,name=tactic,proto3" json:"tactic,omitempty"`                                 // Caption: Tactic;
	Tactics      []*Tactic     `protobuf:"bytes,3,rep,name=tactics,proto3" json:"tactics,omitempty"`                               // Caption: Tactics;
	Technique    *Technique    `protobuf:"bytes,4,opt,name=technique,proto3" json:"technique,omitempty"`                           // Caption: Technique;
	Version      string        `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`                               // Caption: Version;
}

func (x *Attack) Reset() {
	*x = Attack{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attack) ProtoMessage() {}

func (x *Attack) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attack.ProtoReflect.Descriptor instead.
func (*Attack) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{7}
}

func (x *Attack) GetSubTechnique() *SubTechnique {
	if x != nil {
		return x.SubTechnique
	}
	return nil
}

func (x *Attack) GetTactic() *Tactic {
	if x != nil {
		return x.Tactic
	}
	return nil
}

func (x *Attack) GetTactics() []*Tactic {
	if x != nil {
		return x.Tactics
	}
	return nil
}

func (x *Attack) GetTechnique() *Technique {
	if x != nil {
		return x.Technique
	}
	return nil
}

func (x *Attack) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AuthFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device            *Device                          `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                              // Caption: Device;
	EmailAddr         string                           `protobuf:"bytes,2,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`                                                                       // Caption: Email Address;
	FactorType        string                           `protobuf:"bytes,3,opt,name=factor_type,json=factorType,proto3" json:"factor_type,omitempty"`                                                                    // Caption: Factor Type;
	FactorTypeId      enums.AUTH_FACTOR_FACTOR_TYPE_ID `protobuf:"varint,4,opt,name=factor_type_id,json=factorTypeId,proto3,enum=ocsf.v1_3_0.objects.enums.AUTH_FACTOR_FACTOR_TYPE_ID" json:"factor_type_id,omitempty"` // Caption: Factor Type ID;
	IsHotp            bool                             `protobuf:"varint,5,opt,name=is_hotp,json=isHotp,proto3" json:"is_hotp,omitempty"`                                                                               // Caption: HMAC-based One-time Password (HOTP);
	IsTotp            bool                             `protobuf:"varint,6,opt,name=is_totp,json=isTotp,proto3" json:"is_totp,omitempty"`                                                                               // Caption: Time-based One-time Password (TOTP);
	PhoneNumber       string                           `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                                                                 // Caption: Phone Number;
	Provider          string                           `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                          // Caption: Provider;
	SecurityQuestions []string                         `protobuf:"bytes,9,rep,name=security_questions,json=securityQuestions,proto3" json:"security_questions,omitempty"`                                               // Caption: Security Questions;
}

func (x *AuthFactor) Reset() {
	*x = AuthFactor{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactor) ProtoMessage() {}

func (x *AuthFactor) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactor.ProtoReflect.Descriptor instead.
func (*AuthFactor) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{8}
}

func (x *AuthFactor) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AuthFactor) GetEmailAddr() string {
	if x != nil {
		return x.EmailAddr
	}
	return ""
}

func (x *AuthFactor) GetFactorType() string {
	if x != nil {
		return x.FactorType
	}
	return ""
}

func (x *AuthFactor) GetFactorTypeId() enums.AUTH_FACTOR_FACTOR_TYPE_ID {
	if x != nil {
		return x.FactorTypeId
	}
	return enums.AUTH_FACTOR_FACTOR_TYPE_ID(0)
}

func (x *AuthFactor) GetIsHotp() bool {
	if x != nil {
		return x.IsHotp
	}
	return false
}

func (x *AuthFactor) GetIsTotp() bool {
	if x != nil {
		return x.IsTotp
	}
	return false
}

func (x *AuthFactor) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AuthFactor) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AuthFactor) GetSecurityQuestions() []string {
	if x != nil {
		return x.SecurityQuestions
	}
	return nil
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision string  `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"` // Caption: Authorization Decision/Outcome;
	Policy   *Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`     // Caption: Policy;
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{9}
}

func (x *Authorization) GetDecision() string {
	if x != nil {
		return x.Decision
	}
	return ""
}

func (x *Authorization) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type AutonomousSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`      // Caption: Name;
	Number int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"` // Caption: Number;
}

func (x *AutonomousSystem) Reset() {
	*x = AutonomousSystem{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutonomousSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutonomousSystem) ProtoMessage() {}

func (x *AutonomousSystem) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutonomousSystem.ProtoReflect.Descriptor instead.
func (*AutonomousSystem) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{10}
}

func (x *AutonomousSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutonomousSystem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime    int64          `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`          // Caption: Created Time;
	ExpirationTime int64          `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // Caption: Expiration Time;
	Fingerprints   []*Fingerprint `protobuf:"bytes,3,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`                            // Caption: Fingerprints;
	IsSelfSigned   bool           `protobuf:"varint,4,opt,name=is_self_signed,json=isSelfSigned,proto3" json:"is_self_signed,omitempty"`     // Caption: Certificate Self-Signed;
	Issuer         string         `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`                                        // Caption: Issuer Details;
	SerialNumber   string         `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`        // Caption: Serial Number;
	Subject        string         `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`                                      // Caption: Subject Details;
	Uid            string         `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`                                              // Caption: Unique ID;
	Version        string         `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`                                      // Caption: Version;
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{11}
}

func (x *Certificate) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Certificate) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *Certificate) GetFingerprints() []*Fingerprint {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *Certificate) GetIsSelfSigned() bool {
	if x != nil {
		return x.IsSelfSigned
	}
	return false
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Certificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Certificate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Certificate) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CisBenchmarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc        string       `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`               // Caption: Description;
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // Caption: Name;
	Remediation *Remediation `protobuf:"bytes,3,opt,name=remediation,proto3" json:"remediation,omitempty"` // Caption: Remediation Guidance;
	Rule        *Rule        `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`               // Caption: Rule;
}

func (x *CisBenchmarkResult) Reset() {
	*x = CisBenchmarkResult{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CisBenchmarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CisBenchmarkResult) ProtoMessage() {}

func (x *CisBenchmarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CisBenchmarkResult.ProtoReflect.Descriptor instead.
func (*CisBenchmarkResult) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{12}
}

func (x *CisBenchmarkResult) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CisBenchmarkResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CisBenchmarkResult) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *CisBenchmarkResult) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type CisCsc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Control string `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"` // Caption: Security Control;
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
}

func (x *CisCsc) Reset() {
	*x = CisCsc{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CisCsc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CisCsc) ProtoMessage() {}

func (x *CisCsc) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CisCsc.ProtoReflect.Descriptor instead.
func (*CisCsc) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{13}
}

func (x *CisCsc) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *CisCsc) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Cloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    *Account      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                         // Caption: Account;
	Org        *Organization `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`                                 // Caption: Organization;
	ProjectUid string        `protobuf:"bytes,3,opt,name=project_uid,json=projectUid,proto3" json:"project_uid,omitempty"` // Caption: Project ID;
	Provider   string        `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`                       // Caption: Provider;
	Region     string        `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`                           // Caption: Region;
	Zone       string        `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`                               // Caption: Network Zone;
}

func (x *Cloud) Reset() {
	*x = Cloud{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cloud) ProtoMessage() {}

func (x *Cloud) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cloud.ProtoReflect.Descriptor instead.
func (*Cloud) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{14}
}

func (x *Cloud) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Cloud) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *Cloud) GetProjectUid() string {
	if x != nil {
		return x.ProjectUid
	}
	return ""
}

func (x *Cloud) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Cloud) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cloud) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type Compliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplianceReferences []*KbArticle               `protobuf:"bytes,1,rep,name=compliance_references,json=complianceReferences,proto3" json:"compliance_references,omitempty"`                  // Caption: Complaince References Articles;
	ComplianceStandards  []*KbArticle               `protobuf:"bytes,2,rep,name=compliance_standards,json=complianceStandards,proto3" json:"compliance_standards,omitempty"`                     // Caption: Compliance Standards Articles;
	Control              string                     `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`                                                                        // Caption: Security Control;
	Requirements         []string                   `protobuf:"bytes,4,rep,name=requirements,proto3" json:"requirements,omitempty"`                                                              // Caption: Compliance Requirements;
	Standards            []string                   `protobuf:"bytes,5,rep,name=standards,proto3" json:"standards,omitempty"`                                                                    // Caption: Security Standards;
	Status               string                     `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`                                                                          // Caption: Status;
	StatusCode           string                     `protobuf:"bytes,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                // Caption: Status Code;
	StatusDetail         string                     `protobuf:"bytes,8,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                          // Caption: Status Detail;
	StatusId             enums.COMPLIANCE_STATUS_ID `protobuf:"varint,9,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_3_0.objects.enums.COMPLIANCE_STATUS_ID" json:"status_id,omitempty"` // Caption: Status ID;
}

func (x *Compliance) Reset() {
	*x = Compliance{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compliance) ProtoMessage() {}

func (x *Compliance) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compliance.ProtoReflect.Descriptor instead.
func (*Compliance) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{15}
}

func (x *Compliance) GetComplianceReferences() []*KbArticle {
	if x != nil {
		return x.ComplianceReferences
	}
	return nil
}

func (x *Compliance) GetComplianceStandards() []*KbArticle {
	if x != nil {
		return x.ComplianceStandards
	}
	return nil
}

func (x *Compliance) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *Compliance) GetRequirements() []string {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Compliance) GetStandards() []string {
	if x != nil {
		return x.Standards
	}
	return nil
}

func (x *Compliance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Compliance) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Compliance) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Compliance) GetStatusId() enums.COMPLIANCE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.COMPLIANCE_STATUS_ID(0)
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash          *Fingerprint `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                                        // Caption: Hash;
	Image         *Image       `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                                      // Caption: Image;
	Name          string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                        // Caption: Name;
	NetworkDriver string       `protobuf:"bytes,4,opt,name=network_driver,json=networkDriver,proto3" json:"network_driver,omitempty"` // Caption: Network Driver;
	Orchestrator  string       `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`                        // Caption: Orchestrator;
	PodUuid       string       `protobuf:"bytes,6,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`                   // Caption: Pod UUID;
	Runtime       string       `protobuf:"bytes,7,opt,name=runtime,proto3" json:"runtime,omitempty"`                                  // Caption: Runtime;
	Size          int64        `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                                       // Caption: Size;
	Tag           string       `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`                                          // Caption: Image Tag;
	Uid           string       `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`                                         // Caption: Unique ID;
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{16}
}

func (x *Container) GetHash() *Fingerprint {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetNetworkDriver() string {
	if x != nil {
		return x.NetworkDriver
	}
	return ""
}

func (x *Container) GetOrchestrator() string {
	if x != nil {
		return x.Orchestrator
	}
	return ""
}

func (x *Container) GetPodUuid() string {
	if x != nil {
		return x.PodUuid
	}
	return ""
}

func (x *Container) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Container) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Container) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Container) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Cve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime  int64    `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`    // Caption: Created Time;
	Cvss         []*Cvss  `protobuf:"bytes,2,rep,name=cvss,proto3" json:"cvss,omitempty"`                                      // Caption: CVSS Score;
	Cwe          *Cwe     `protobuf:"bytes,3,opt,name=cwe,proto3" json:"cwe,omitempty"`                                        // Caption: CWE;
	CweUid       string   `protobuf:"bytes,4,opt,name=cwe_uid,json=cweUid,proto3" json:"cwe_uid,omitempty"`                    // Caption: CWE UID;
	CweUrl       string   `protobuf:"bytes,5,opt,name=cwe_url,json=cweUrl,proto3" json:"cwe_url,omitempty"`                    // Caption: CWE URL;
	Desc         string   `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                                      // Caption: Description;
	Epss         *Epss    `protobuf:"bytes,7,opt,name=epss,proto3" json:"epss,omitempty"`                                      // Caption: EPSS;
	ModifiedTime int64    `protobuf:"varint,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"` // Caption: Modified Time;
	Product      *Product `protobuf:"bytes,9,opt,name=product,proto3" json:"product,omitempty"`                                // Caption: Product;
	References   []string `protobuf:"bytes,10,rep,name=references,proto3" json:"references,omitempty"`                         // Caption: References;
	Title        string   `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`                                   // Caption: Title;
	Type         string   `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`                                     // Caption: Type;
	Uid          string   `protobuf:"bytes,13,opt,name=uid,proto3" json:"uid,omitempty"`                                       // Caption: Unique ID;
}

func (x *Cve) Reset() {
	*x = Cve{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cve) ProtoMessage() {}

func (x *Cve) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cve.ProtoReflect.Descriptor instead.
func (*Cve) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{17}
}

func (x *Cve) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Cve) GetCvss() []*Cvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *Cve) GetCwe() *Cwe {
	if x != nil {
		return x.Cwe
	}
	return nil
}

func (x *Cve) GetCweUid() string {
	if x != nil {
		return x.CweUid
	}
	return ""
}

func (x *Cve) GetCweUrl() string {
	if x != nil {
		return x.CweUrl
	}
	return ""
}

func (x *Cve) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Cve) GetEpss() *Epss {
	if x != nil {
		return x.Epss
	}
	return nil
}

func (x *Cve) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Cve) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Cve) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Cve) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Cve) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Cve) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Cvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore    float32   `protobuf:"fixed32,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`          // Caption: Base Score;
	Depth        string    `protobuf:"bytes,2,opt,name=depth,proto3" json:"depth,omitempty"`                                     // Caption: CVSS Depth; AllowedValues: Environmental, Temporal, Base;
	Metrics      []*Metric `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`                                 // Caption: Metrics;
	OverallScore float32   `protobuf:"fixed32,4,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"` // Caption: Overall Score;
	Severity     string    `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`                               // Caption: Severity;
	VectorString string    `protobuf:"bytes,6,opt,name=vector_string,json=vectorString,proto3" json:"vector_string,omitempty"`   // Caption: Vector String;
	Version      string    `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                 // Caption: Version;
}

func (x *Cvss) Reset() {
	*x = Cvss{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cvss) ProtoMessage() {}

func (x *Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cvss.ProtoReflect.Descriptor instead.
func (*Cvss) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{18}
}

func (x *Cvss) GetBaseScore() float32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Cvss) GetDepth() string {
	if x != nil {
		return x.Depth
	}
	return ""
}

func (x *Cvss) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Cvss) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *Cvss) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Cvss) GetVectorString() string {
	if x != nil {
		return x.VectorString
	}
	return ""
}

func (x *Cvss) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Cwe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`             // Caption: Caption;
	SrcUrl  string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid     string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *Cwe) Reset() {
	*x = Cwe{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cwe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cwe) ProtoMessage() {}

func (x *Cwe) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cwe.ProtoReflect.Descriptor instead.
func (*Cwe) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{19}
}

func (x *Cwe) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *Cwe) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Cwe) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type D3FTactic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid    string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *D3FTactic) Reset() {
	*x = D3FTactic{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *D3FTactic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D3FTactic) ProtoMessage() {}

func (x *D3FTactic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D3FTactic.ProtoReflect.Descriptor instead.
func (*D3FTactic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{20}
}

func (x *D3FTactic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *D3FTactic) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *D3FTactic) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type D3FTechnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid    string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *D3FTechnique) Reset() {
	*x = D3FTechnique{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *D3FTechnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D3FTechnique) ProtoMessage() {}

func (x *D3FTechnique) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D3FTechnique.ProtoReflect.Descriptor instead.
func (*D3FTechnique) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{21}
}

func (x *D3FTechnique) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *D3FTechnique) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *D3FTechnique) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type D3Fend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D3FTactic    *D3FTactic    `protobuf:"bytes,1,opt,name=d3f_tactic,json=d3fTactic,proto3" json:"d3f_tactic,omitempty"`          // Caption: MITRE DEFEND™ Tactic;
	D3FTechnique *D3FTechnique `protobuf:"bytes,2,opt,name=d3f_technique,json=d3fTechnique,proto3" json:"d3f_technique,omitempty"` // Caption: MITRE DEFEND™ Technique;
	Version      string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                               // Caption: Version;
}

func (x *D3Fend) Reset() {
	*x = D3Fend{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *D3Fend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D3Fend) ProtoMessage() {}

func (x *D3Fend) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D3Fend.ProtoReflect.Descriptor instead.
func (*D3Fend) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{22}
}

func (x *D3Fend) GetD3FTactic() *D3FTactic {
	if x != nil {
		return x.D3FTactic
	}
	return nil
}

func (x *D3Fend) GetD3FTechnique() *D3FTechnique {
	if x != nil {
		return x.D3FTechnique
	}
	return nil
}

func (x *D3Fend) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category          string                                       `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`                                                                                                                   // Caption: Category;
	CategoryId        enums.DATA_CLASSIFICATION_CATEGORY_ID        `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CATEGORY_ID" json:"category_id,omitempty"`                             // Caption: Category ID;
	Confidentiality   string                                       `protobuf:"bytes,3,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`                                                                                                     // Caption: Confidentiality;
	ConfidentialityId enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID `protobuf:"varint,4,opt,name=confidentiality_id,json=confidentialityId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID" json:"confidentiality_id,omitempty"` // Caption: Confidentiality ID;
	Policy            *Policy                                      `protobuf:"bytes,5,opt,name=policy,proto3" json:"policy,omitempty"`                                                                                                                       // Caption: Policy;
}

func (x *DataClassification) Reset() {
	*x = DataClassification{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassification) ProtoMessage() {}

func (x *DataClassification) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassification.ProtoReflect.Descriptor instead.
func (*DataClassification) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{23}
}

func (x *DataClassification) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DataClassification) GetCategoryId() enums.DATA_CLASSIFICATION_CATEGORY_ID {
	if x != nil {
		return x.CategoryId
	}
	return enums.DATA_CLASSIFICATION_CATEGORY_ID(0)
}

func (x *DataClassification) GetConfidentiality() string {
	if x != nil {
		return x.Confidentiality
	}
	return ""
}

func (x *DataClassification) GetConfidentialityId() enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID {
	if x != nil {
		return x.ConfidentialityId
	}
	return enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID(0)
}

func (x *DataClassification) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type DataSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             string                                      `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`                                                                                                                               // Caption: Category;
	CategoryId           enums.DATA_SECURITY_CATEGORY_ID             `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_SECURITY_CATEGORY_ID" json:"category_id,omitempty"`                                               // Caption: Category ID;
	Confidentiality      string                                      `protobuf:"bytes,3,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`                                                                                                                 // Caption: Confidentiality;
	ConfidentialityId    enums.DATA_SECURITY_CONFIDENTIALITY_ID      `protobuf:"varint,4,opt,name=confidentiality_id,json=confidentialityId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_SECURITY_CONFIDENTIALITY_ID" json:"confidentiality_id,omitempty"`                   // Caption: Confidentiality ID;
	DataLifecycleState   string                                      `protobuf:"bytes,5,opt,name=data_lifecycle_state,json=dataLifecycleState,proto3" json:"data_lifecycle_state,omitempty"`                                                                               // Caption: Data Lifecycle State;
	DataLifecycleStateId enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID `protobuf:"varint,6,opt,name=data_lifecycle_state_id,json=dataLifecycleStateId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID" json:"data_lifecycle_state_id,omitempty"` // Caption: Data Lifecycle State ID;
	DetectionPattern     string                                      `protobuf:"bytes,7,opt,name=detection_pattern,json=detectionPattern,proto3" json:"detection_pattern,omitempty"`                                                                                       // Caption: Detection Pattern;
	DetectionSystem      string                                      `protobuf:"bytes,8,opt,name=detection_system,json=detectionSystem,proto3" json:"detection_system,omitempty"`                                                                                          // Caption: Detection System;
	DetectionSystemId    enums.DATA_SECURITY_DETECTION_SYSTEM_ID     `protobuf:"varint,9,opt,name=detection_system_id,json=detectionSystemId,proto3,enum=ocsf.v1_3_0.objects.enums.DATA_SECURITY_DETECTION_SYSTEM_ID" json:"detection_system_id,omitempty"`                // Caption: Detection System ID;
	PatternMatch         string                                      `protobuf:"bytes,10,opt,name=pattern_match,json=patternMatch,proto3" json:"pattern_match,omitempty"`                                                                                                  // Caption: Pattern Match;
	Policy               *Policy                                     `protobuf:"bytes,11,opt,name=policy,proto3" json:"policy,omitempty"`                                                                                                                                  // Caption: Policy;
}

func (x *DataSecurity) Reset() {
	*x = DataSecurity{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSecurity) ProtoMessage() {}

func (x *DataSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSecurity.ProtoReflect.Descriptor instead.
func (*DataSecurity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{24}
}

func (x *DataSecurity) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DataSecurity) GetCategoryId() enums.DATA_SECURITY_CATEGORY_ID {
	if x != nil {
		return x.CategoryId
	}
	return enums.DATA_SECURITY_CATEGORY_ID(0)
}

func (x *DataSecurity) GetConfidentiality() string {
	if x != nil {
		return x.Confidentiality
	}
	return ""
}

func (x *DataSecurity) GetConfidentialityId() enums.DATA_SECURITY_CONFIDENTIALITY_ID {
	if x != nil {
		return x.ConfidentialityId
	}
	return enums.DATA_SECURITY_CONFIDENTIALITY_ID(0)
}

func (x *DataSecurity) GetDataLifecycleState() string {
	if x != nil {
		return x.DataLifecycleState
	}
	return ""
}

func (x *DataSecurity) GetDataLifecycleStateId() enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID {
	if x != nil {
		return x.DataLifecycleStateId
	}
	return enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID(0)
}

func (x *DataSecurity) GetDetectionPattern() string {
	if x != nil {
		return x.DetectionPattern
	}
	return ""
}

func (x *DataSecurity) GetDetectionSystem() string {
	if x != nil {
		return x.DetectionSystem
	}
	return ""
}

func (x *DataSecurity) GetDetectionSystemId() enums.DATA_SECURITY_DETECTION_SYSTEM_ID {
	if x != nil {
		return x.DetectionSystemId
	}
	return enums.DATA_SECURITY_DETECTION_SYSTEM_ID(0)
}

func (x *DataSecurity) GetPatternMatch() string {
	if x != nil {
		return x.PatternMatch
	}
	return ""
}

func (x *DataSecurity) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime        int64                  `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                  // Caption: Created Time;
	DataClassification *DataClassification    `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`              // Caption: Data Classification; Profile: data_classification;
	Desc               string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                                    // Caption: Description;
	Groups             []*Group               `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`                                                                // Caption: Groups;
	ModifiedTime       int64                  `protobuf:"varint,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                               // Caption: Modified Time;
	Name               string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                    // Caption: Name;
	Size               int64                  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                                                   // Caption: Size;
	Type               string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                                                    // Caption: Type;
	TypeId             enums.DATABASE_TYPE_ID `protobuf:"varint,9,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.DATABASE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid                string                 `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`                                                                     // Caption: Unique ID;
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{25}
}

func (x *Database) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Database) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Database) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Database) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Database) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Database) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Database) GetTypeId() enums.DATABASE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.DATABASE_TYPE_ID(0)
}

func (x *Database) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Databucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime        int64                    `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                     // Caption: Created Time;
	DataClassification *DataClassification      `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`                 // Caption: Data Classification; Profile: data_classification;
	Desc               string                   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                                       // Caption: Description;
	File               *File                    `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`                                                                       // Caption: File;
	Groups             []*Group                 `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`                                                                   // Caption: Groups;
	ModifiedTime       int64                    `protobuf:"varint,6,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                  // Caption: Modified Time;
	Name               string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                       // Caption: Name;
	Size               int64                    `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                                                                      // Caption: Size;
	Type               string                   `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                                                                       // Caption: Type;
	TypeId             enums.DATABUCKET_TYPE_ID `protobuf:"varint,10,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.DATABUCKET_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid                string                   `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                                                        // Caption: Unique ID;
}

func (x *Databucket) Reset() {
	*x = Databucket{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Databucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Databucket) ProtoMessage() {}

func (x *Databucket) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Databucket.ProtoReflect.Descriptor instead.
func (*Databucket) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{26}
}

func (x *Databucket) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Databucket) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Databucket) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Databucket) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Databucket) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Databucket) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Databucket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Databucket) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Databucket) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Databucket) GetTypeId() enums.DATABUCKET_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.DATABUCKET_TYPE_ID(0)
}

func (x *Databucket) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type DceRpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command         string        `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`                                        // Caption: Command;
	CommandResponse string        `protobuf:"bytes,2,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"` // Caption: Command Response;
	Flags           []string      `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`                                            // Caption: Flags;
	Opnum           int32         `protobuf:"varint,4,opt,name=opnum,proto3" json:"opnum,omitempty"`                                           // Caption: Opnum;
	RpcInterface    *RpcInterface `protobuf:"bytes,5,opt,name=rpc_interface,json=rpcInterface,proto3" json:"rpc_interface,omitempty"`          // Caption: Remote Procedure Call Interface;
}

func (x *DceRpc) Reset() {
	*x = DceRpc{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DceRpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DceRpc) ProtoMessage() {}

func (x *DceRpc) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DceRpc.ProtoReflect.Descriptor instead.
func (*DceRpc) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{27}
}

func (x *DceRpc) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *DceRpc) GetCommandResponse() string {
	if x != nil {
		return x.CommandResponse
	}
	return ""
}

func (x *DceRpc) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DceRpc) GetOpnum() int32 {
	if x != nil {
		return x.Opnum
	}
	return 0
}

func (x *DceRpc) GetRpcInterface() *RpcInterface {
	if x != nil {
		return x.RpcInterface
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentList         []*Agent                   `protobuf:"bytes,1,rep,name=agent_list,json=agentList,proto3" json:"agent_list,omitempty"`                                                               // Caption: Agent List;
	AutoscaleUid      string                     `protobuf:"bytes,2,opt,name=autoscale_uid,json=autoscaleUid,proto3" json:"autoscale_uid,omitempty"`                                                      // Caption: Autoscale UID;
	BootTime          int64                      `protobuf:"varint,3,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`                                                                 // Caption: Boot Time;
	Container         *Container                 `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`                                                                                // Caption: Container; Profile: container;
	CreatedTime       int64                      `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                        // Caption: Created Time;
	Desc              string                     `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                          // Caption: Description;
	Domain            string                     `protobuf:"bytes,7,opt,name=domain,proto3" json:"domain,omitempty"`                                                                                      // Caption: Domain;
	FirstSeenTime     int64                      `protobuf:"varint,8,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`                                                // Caption: First Seen;
	Groups            []*Group                   `protobuf:"bytes,9,rep,name=groups,proto3" json:"groups,omitempty"`                                                                                      // Caption: Groups;
	Hostname          string                     `protobuf:"bytes,10,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                                 // Caption: Hostname;
	HwInfo            *DeviceHwInfo              `protobuf:"bytes,11,opt,name=hw_info,json=hwInfo,proto3" json:"hw_info,omitempty"`                                                                       // Caption: Hardware Info;
	Hypervisor        string                     `protobuf:"bytes,12,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`                                                                             // Caption: Hypervisor;
	Image             *Image                     `protobuf:"bytes,13,opt,name=image,proto3" json:"image,omitempty"`                                                                                       // Caption: Image;
	Imei              string                     `protobuf:"bytes,14,opt,name=imei,proto3" json:"imei,omitempty"`                                                                                         // Caption: IMEI;
	InstanceUid       string                     `protobuf:"bytes,15,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`                                                        // Caption: Instance ID;
	InterfaceName     string                     `protobuf:"bytes,16,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`                                                  // Caption: Network Interface Name;
	InterfaceUid      string                     `protobuf:"bytes,17,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`                                                     // Caption: Network Interface ID;
	Ip                string                     `protobuf:"bytes,18,opt,name=ip,proto3" json:"ip,omitempty"`                                                                                             // Caption: IP Address;
	IsCompliant       bool                       `protobuf:"varint,19,opt,name=is_compliant,json=isCompliant,proto3" json:"is_compliant,omitempty"`                                                       // Caption: Compliant Device;
	IsManaged         bool                       `protobuf:"varint,20,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`                                                             // Caption: Managed Device;
	IsPersonal        bool                       `protobuf:"varint,21,opt,name=is_personal,json=isPersonal,proto3" json:"is_personal,omitempty"`                                                          // Caption: Personal Device;
	IsTrusted         bool                       `protobuf:"varint,22,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted,omitempty"`                                                             // Caption: Trusted Device;
	LastSeenTime      int64                      `protobuf:"varint,23,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`                                                  // Caption: Last Seen;
	Location          *Location                  `protobuf:"bytes,24,opt,name=location,proto3" json:"location,omitempty"`                                                                                 // Caption: Geo Location;
	Mac               string                     `protobuf:"bytes,25,opt,name=mac,proto3" json:"mac,omitempty"`                                                                                           // Caption: MAC Address;
	ModifiedTime      int64                      `protobuf:"varint,26,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                                    // Caption: Modified Time;
	Name              string                     `protobuf:"bytes,27,opt,name=name,proto3" json:"name,omitempty"`                                                                                         // Caption: Name;
	NamespacePid      int32                      `protobuf:"varint,28,opt,name=namespace_pid,json=namespacePid,proto3" json:"namespace_pid,omitempty"`                                                    // Caption: Namespace PID; Profile: container;
	NetworkInterfaces []*NetworkInterface        `protobuf:"bytes,29,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`                                      // Caption: Network Interfaces;
	Org               *Organization              `protobuf:"bytes,30,opt,name=org,proto3" json:"org,omitempty"`                                                                                           // Caption: Organization;
	Os                *Os                        `protobuf:"bytes,31,opt,name=os,proto3" json:"os,omitempty"`                                                                                             // Caption: OS;
	Owner             *User                      `protobuf:"bytes,32,opt,name=owner,proto3" json:"owner,omitempty"`                                                                                       // Caption: Owner;
	Region            string                     `protobuf:"bytes,33,opt,name=region,proto3" json:"region,omitempty"`                                                                                     // Caption: Region;
	RiskLevel         string                     `protobuf:"bytes,34,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                              // Caption: Risk Level;
	RiskLevelId       enums.DEVICE_RISK_LEVEL_ID `protobuf:"varint,35,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_3_0.objects.enums.DEVICE_RISK_LEVEL_ID" json:"risk_level_id,omitempty"` // Caption: Risk Level ID;
	RiskScore         int32                      `protobuf:"varint,36,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                             // Caption: Risk Score;
	Subnet            string                     `protobuf:"bytes,37,opt,name=subnet,proto3" json:"subnet,omitempty"`                                                                                     // Caption: Subnet;
	SubnetUid         string                     `protobuf:"bytes,38,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                                                              // Caption: Subnet UID;
	Type              string                     `protobuf:"bytes,39,opt,name=type,proto3" json:"type,omitempty"`                                                                                         // Caption: Type;
	TypeId            enums.DEVICE_TYPE_ID       `protobuf:"varint,40,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.DEVICE_TYPE_ID" json:"type_id,omitempty"`                        // Caption: Type ID;
	Uid               string                     `protobuf:"bytes,41,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                           // Caption: Unique ID;
	UidAlt            string                     `protobuf:"bytes,42,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                                                                       // Caption: Alternate ID;
	VlanUid           string                     `protobuf:"bytes,43,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                                                                    // Caption: VLAN;
	VpcUid            string                     `protobuf:"bytes,44,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                                                                       // Caption: VPC UID;
	Zone              string                     `protobuf:"bytes,45,opt,name=zone,proto3" json:"zone,omitempty"`                                                                                         // Caption: Network Zone;
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{28}
}

func (x *Device) GetAgentList() []*Agent {
	if x != nil {
		return x.AgentList
	}
	return nil
}

func (x *Device) GetAutoscaleUid() string {
	if x != nil {
		return x.AutoscaleUid
	}
	return ""
}

func (x *Device) GetBootTime() int64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *Device) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Device) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Device) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Device) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Device) GetFirstSeenTime() int64 {
	if x != nil {
		return x.FirstSeenTime
	}
	return 0
}

func (x *Device) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Device) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device) GetHwInfo() *DeviceHwInfo {
	if x != nil {
		return x.HwInfo
	}
	return nil
}

func (x *Device) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *Device) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Device) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *Device) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *Device) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Device) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *Device) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Device) GetIsCompliant() bool {
	if x != nil {
		return x.IsCompliant
	}
	return false
}

func (x *Device) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Device) GetIsPersonal() bool {
	if x != nil {
		return x.IsPersonal
	}
	return false
}

func (x *Device) GetIsTrusted() bool {
	if x != nil {
		return x.IsTrusted
	}
	return false
}

func (x *Device) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *Device) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Device) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetNamespacePid() int32 {
	if x != nil {
		return x.NamespacePid
	}
	return 0
}

func (x *Device) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *Device) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *Device) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *Device) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Device) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Device) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *Device) GetRiskLevelId() enums.DEVICE_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.DEVICE_RISK_LEVEL_ID(0)
}

func (x *Device) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *Device) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Device) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *Device) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Device) GetTypeId() enums.DEVICE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.DEVICE_TYPE_ID(0)
}

func (x *Device) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Device) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

func (x *Device) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *Device) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *Device) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type DeviceHwInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiosDate         string        `protobuf:"bytes,1,opt,name=bios_date,json=biosDate,proto3" json:"bios_date,omitempty"`                         // Caption: BIOS Date;
	BiosManufacturer string        `protobuf:"bytes,2,opt,name=bios_manufacturer,json=biosManufacturer,proto3" json:"bios_manufacturer,omitempty"` // Caption: BIOS Manufacturer;
	BiosVer          string        `protobuf:"bytes,3,opt,name=bios_ver,json=biosVer,proto3" json:"bios_ver,omitempty"`                            // Caption: BIOS Version;
	Chassis          string        `protobuf:"bytes,4,opt,name=chassis,proto3" json:"chassis,omitempty"`                                           // Caption: Chassis;
	CpuBits          int32         `protobuf:"varint,5,opt,name=cpu_bits,json=cpuBits,proto3" json:"cpu_bits,omitempty"`                           // Caption: CPU Bits;
	CpuCores         int32         `protobuf:"varint,6,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`                        // Caption: CPU Cores;
	CpuCount         int32         `protobuf:"varint,7,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`                        // Caption: CPU Count;
	CpuSpeed         int32         `protobuf:"varint,8,opt,name=cpu_speed,json=cpuSpeed,proto3" json:"cpu_speed,omitempty"`                        // Caption: Processor Speed;
	CpuType          string        `protobuf:"bytes,9,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type,omitempty"`                            // Caption: Processor Type;
	DesktopDisplay   *Display      `protobuf:"bytes,10,opt,name=desktop_display,json=desktopDisplay,proto3" json:"desktop_display,omitempty"`      // Caption: Desktop Display;
	KeyboardInfo     *KeyboardInfo `protobuf:"bytes,11,opt,name=keyboard_info,json=keyboardInfo,proto3" json:"keyboard_info,omitempty"`            // Caption: Keyboard Information;
	RamSize          int32         `protobuf:"varint,12,opt,name=ram_size,json=ramSize,proto3" json:"ram_size,omitempty"`                          // Caption: RAM Size;
	SerialNumber     string        `protobuf:"bytes,13,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`            // Caption: Serial Number;
}

func (x *DeviceHwInfo) Reset() {
	*x = DeviceHwInfo{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceHwInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHwInfo) ProtoMessage() {}

func (x *DeviceHwInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHwInfo.ProtoReflect.Descriptor instead.
func (*DeviceHwInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{29}
}

func (x *DeviceHwInfo) GetBiosDate() string {
	if x != nil {
		return x.BiosDate
	}
	return ""
}

func (x *DeviceHwInfo) GetBiosManufacturer() string {
	if x != nil {
		return x.BiosManufacturer
	}
	return ""
}

func (x *DeviceHwInfo) GetBiosVer() string {
	if x != nil {
		return x.BiosVer
	}
	return ""
}

func (x *DeviceHwInfo) GetChassis() string {
	if x != nil {
		return x.Chassis
	}
	return ""
}

func (x *DeviceHwInfo) GetCpuBits() int32 {
	if x != nil {
		return x.CpuBits
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuSpeed() int32 {
	if x != nil {
		return x.CpuSpeed
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *DeviceHwInfo) GetDesktopDisplay() *Display {
	if x != nil {
		return x.DesktopDisplay
	}
	return nil
}

func (x *DeviceHwInfo) GetKeyboardInfo() *KeyboardInfo {
	if x != nil {
		return x.KeyboardInfo
	}
	return nil
}

func (x *DeviceHwInfo) GetRamSize() int32 {
	if x != nil {
		return x.RamSize
	}
	return 0
}

func (x *DeviceHwInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type DigitalSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm    string                               `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`                                                                                       // Caption: Algorithm;
	AlgorithmId  enums.DIGITAL_SIGNATURE_ALGORITHM_ID `protobuf:"varint,2,opt,name=algorithm_id,json=algorithmId,proto3,enum=ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID" json:"algorithm_id,omitempty"` // Caption: Algorithm ID;
	Certificate  *Certificate                         `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`                                                                                   // Caption: Certificate;
	CreatedTime  int64                                `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                               // Caption: Created Time;
	DeveloperUid string                               `protobuf:"bytes,5,opt,name=developer_uid,json=developerUid,proto3" json:"developer_uid,omitempty"`                                                             // Caption: Developer UID;
	Digest       *Fingerprint                         `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`                                                                                             // Caption: Message Digest;
	State        string                               `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`                                                                                               // Caption: State;
	StateId      enums.DIGITAL_SIGNATURE_STATE_ID     `protobuf:"varint,8,opt,name=state_id,json=stateId,proto3,enum=ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_STATE_ID" json:"state_id,omitempty"`                 // Caption: State ID;
}

func (x *DigitalSignature) Reset() {
	*x = DigitalSignature{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalSignature) ProtoMessage() {}

func (x *DigitalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalSignature.ProtoReflect.Descriptor instead.
func (*DigitalSignature) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{30}
}

func (x *DigitalSignature) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DigitalSignature) GetAlgorithmId() enums.DIGITAL_SIGNATURE_ALGORITHM_ID {
	if x != nil {
		return x.AlgorithmId
	}
	return enums.DIGITAL_SIGNATURE_ALGORITHM_ID(0)
}

func (x *DigitalSignature) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *DigitalSignature) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DigitalSignature) GetDeveloperUid() string {
	if x != nil {
		return x.DeveloperUid
	}
	return ""
}

func (x *DigitalSignature) GetDigest() *Fingerprint {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *DigitalSignature) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DigitalSignature) GetStateId() enums.DIGITAL_SIGNATURE_STATE_ID {
	if x != nil {
		return x.StateId
	}
	return enums.DIGITAL_SIGNATURE_STATE_ID(0)
}

type Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorDepth          int32 `protobuf:"varint,1,opt,name=color_depth,json=colorDepth,proto3" json:"color_depth,omitempty"`                            // Caption: Color Depth;
	PhysicalHeight      int32 `protobuf:"varint,2,opt,name=physical_height,json=physicalHeight,proto3" json:"physical_height,omitempty"`                // Caption: Physical Height;
	PhysicalOrientation int32 `protobuf:"varint,3,opt,name=physical_orientation,json=physicalOrientation,proto3" json:"physical_orientation,omitempty"` // Caption: Physical Orientation;
	PhysicalWidth       int32 `protobuf:"varint,4,opt,name=physical_width,json=physicalWidth,proto3" json:"physical_width,omitempty"`                   // Caption: Physical Width;
	ScaleFactor         int32 `protobuf:"varint,5,opt,name=scale_factor,json=scaleFactor,proto3" json:"scale_factor,omitempty"`                         // Caption: Scale Factor;
}

func (x *Display) Reset() {
	*x = Display{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Display) ProtoMessage() {}

func (x *Display) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Display.ProtoReflect.Descriptor instead.
func (*Display) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{31}
}

func (x *Display) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *Display) GetPhysicalHeight() int32 {
	if x != nil {
		return x.PhysicalHeight
	}
	return 0
}

func (x *Display) GetPhysicalOrientation() int32 {
	if x != nil {
		return x.PhysicalOrientation
	}
	return 0
}

func (x *Display) GetPhysicalWidth() int32 {
	if x != nil {
		return x.PhysicalWidth
	}
	return 0
}

func (x *Display) GetScaleFactor() int32 {
	if x != nil {
		return x.ScaleFactor
	}
	return 0
}

type DnsAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class     string                      `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`                                                                               // Caption: Class;
	FlagIds   []enums.DNS_ANSWER_FLAG_IDS `protobuf:"varint,2,rep,packed,name=flag_ids,json=flagIds,proto3,enum=ocsf.v1_3_0.objects.enums.DNS_ANSWER_FLAG_IDS" json:"flag_ids,omitempty"` // Caption: Communication Flag IDs;
	Flags     []string                    `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`                                                                               // Caption: Flags;
	PacketUid int32                       `protobuf:"varint,4,opt,name=packet_uid,json=packetUid,proto3" json:"packet_uid,omitempty"`                                                     // Caption: Packet UID;
	Rdata     string                      `protobuf:"bytes,5,opt,name=rdata,proto3" json:"rdata,omitempty"`                                                                               // Caption: DNS RData;
	Ttl       int32                       `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                                  // Caption: TTL;
	Type      string                      `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                                                                 // Caption: Type;
}

func (x *DnsAnswer) Reset() {
	*x = DnsAnswer{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAnswer) ProtoMessage() {}

func (x *DnsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAnswer.ProtoReflect.Descriptor instead.
func (*DnsAnswer) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{32}
}

func (x *DnsAnswer) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *DnsAnswer) GetFlagIds() []enums.DNS_ANSWER_FLAG_IDS {
	if x != nil {
		return x.FlagIds
	}
	return nil
}

func (x *DnsAnswer) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DnsAnswer) GetPacketUid() int32 {
	if x != nil {
		return x.PacketUid
	}
	return 0
}

func (x *DnsAnswer) GetRdata() string {
	if x != nil {
		return x.Rdata
	}
	return ""
}

func (x *DnsAnswer) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DnsAnswer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DnsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class     string                    `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`                                                                           // Caption: Class;
	Hostname  string                    `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                     // Caption: Hostname;
	Opcode    string                    `protobuf:"bytes,3,opt,name=opcode,proto3" json:"opcode,omitempty"`                                                                         // Caption: DNS Opcode;
	OpcodeId  enums.DNS_QUERY_OPCODE_ID `protobuf:"varint,4,opt,name=opcode_id,json=opcodeId,proto3,enum=ocsf.v1_3_0.objects.enums.DNS_QUERY_OPCODE_ID" json:"opcode_id,omitempty"` // Caption: DNS Opcode ID;
	PacketUid int32                     `protobuf:"varint,5,opt,name=packet_uid,json=packetUid,proto3" json:"packet_uid,omitempty"`                                                 // Caption: Packet UID;
	Type      string                    `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                                                             // Caption: Type;
}

func (x *DnsQuery) Reset() {
	*x = DnsQuery{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsQuery) ProtoMessage() {}

func (x *DnsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsQuery.ProtoReflect.Descriptor instead.
func (*DnsQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{33}
}

func (x *DnsQuery) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *DnsQuery) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DnsQuery) GetOpcode() string {
	if x != nil {
		return x.Opcode
	}
	return ""
}

func (x *DnsQuery) GetOpcodeId() enums.DNS_QUERY_OPCODE_ID {
	if x != nil {
		return x.OpcodeId
	}
	return enums.DNS_QUERY_OPCODE_ID(0)
}

func (x *DnsQuery) GetPacketUid() int32 {
	if x != nil {
		return x.PacketUid
	}
	return 0
}

func (x *DnsQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DomainContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddr   string                       `protobuf:"bytes,1,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`                                               // Caption: Email Address;
	Location    *Location                    `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`                                                                  // Caption: Geo Location;
	Name        string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                          // Caption: Name;
	PhoneNumber string                       `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                                         // Caption: Phone Number;
	Type        string                       `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                          // Caption: Type;
	TypeId      enums.DOMAIN_CONTACT_TYPE_ID `protobuf:"varint,6,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.DOMAIN_CONTACT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid         string                       `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                                            // Caption: Unique ID;
}

func (x *DomainContact) Reset() {
	*x = DomainContact{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainContact) ProtoMessage() {}

func (x *DomainContact) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainContact.ProtoReflect.Descriptor instead.
func (*DomainContact) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{34}
}

func (x *DomainContact) GetEmailAddr() string {
	if x != nil {
		return x.EmailAddr
	}
	return ""
}

func (x *DomainContact) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DomainContact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainContact) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *DomainContact) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DomainContact) GetTypeId() enums.DOMAIN_CONTACT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.DOMAIN_CONTACT_TYPE_ID(0)
}

func (x *DomainContact) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cc                 []string            `protobuf:"bytes,1,rep,name=cc,proto3" json:"cc,omitempty"`                                                           // Caption: Cc;
	DataClassification *DataClassification `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"` // Caption: Data Classification; Profile: data_classification;
	DeliveredTo        string              `protobuf:"bytes,3,opt,name=delivered_to,json=deliveredTo,proto3" json:"delivered_to,omitempty"`                      // Caption: Delivered To;
	From               string              `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`                                                       // Caption: From;
	MessageUid         string              `protobuf:"bytes,5,opt,name=message_uid,json=messageUid,proto3" json:"message_uid,omitempty"`                         // Caption: Message UID;
	RawHeader          string              `protobuf:"bytes,6,opt,name=raw_header,json=rawHeader,proto3" json:"raw_header,omitempty"`                            // Caption: Raw Header;
	ReplyTo            string              `protobuf:"bytes,7,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`                                  // Caption: Reply To;
	Size               int64               `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                                                      // Caption: Size;
	SmtpFrom           string              `protobuf:"bytes,9,opt,name=smtp_from,json=smtpFrom,proto3" json:"smtp_from,omitempty"`                               // Caption: SMTP From;
	SmtpTo             []string            `protobuf:"bytes,10,rep,name=smtp_to,json=smtpTo,proto3" json:"smtp_to,omitempty"`                                    // Caption: SMTP To;
	Subject            string              `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`                                                // Caption: Subject Details;
	To                 []string            `protobuf:"bytes,12,rep,name=to,proto3" json:"to,omitempty"`                                                          // Caption: To;
	Uid                string              `protobuf:"bytes,13,opt,name=uid,proto3" json:"uid,omitempty"`                                                        // Caption: Unique ID;
	XOriginatingIp     []string            `protobuf:"bytes,14,rep,name=x_originating_ip,json=xOriginatingIp,proto3" json:"x_originating_ip,omitempty"`          // Caption: X-Originating-IP;
}

func (x *Email) Reset() {
	*x = Email{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{35}
}

func (x *Email) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Email) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Email) GetDeliveredTo() string {
	if x != nil {
		return x.DeliveredTo
	}
	return ""
}

func (x *Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Email) GetMessageUid() string {
	if x != nil {
		return x.MessageUid
	}
	return ""
}

func (x *Email) GetRawHeader() string {
	if x != nil {
		return x.RawHeader
	}
	return ""
}

func (x *Email) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *Email) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Email) GetSmtpFrom() string {
	if x != nil {
		return x.SmtpFrom
	}
	return ""
}

func (x *Email) GetSmtpTo() []string {
	if x != nil {
		return x.SmtpTo
	}
	return nil
}

func (x *Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Email) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Email) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Email) GetXOriginatingIp() []string {
	if x != nil {
		return x.XOriginatingIp
	}
	return nil
}

type EmailAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dkim          string `protobuf:"bytes,1,opt,name=dkim,proto3" json:"dkim,omitempty"`                                        // Caption: DKIM Status;
	DkimDomain    string `protobuf:"bytes,2,opt,name=dkim_domain,json=dkimDomain,proto3" json:"dkim_domain,omitempty"`          // Caption: DKIM Domain;
	DkimSignature string `protobuf:"bytes,3,opt,name=dkim_signature,json=dkimSignature,proto3" json:"dkim_signature,omitempty"` // Caption: DKIM Signature;
	Dmarc         string `protobuf:"bytes,4,opt,name=dmarc,proto3" json:"dmarc,omitempty"`                                      // Caption: DMARC Status;
	DmarcOverride string `protobuf:"bytes,5,opt,name=dmarc_override,json=dmarcOverride,proto3" json:"dmarc_override,omitempty"` // Caption: DMARC Override;
	DmarcPolicy   string `protobuf:"bytes,6,opt,name=dmarc_policy,json=dmarcPolicy,proto3" json:"dmarc_policy,omitempty"`       // Caption: DMARC Policy;
	Spf           string `protobuf:"bytes,7,opt,name=spf,proto3" json:"spf,omitempty"`                                          // Caption: SPF Status;
}

func (x *EmailAuth) Reset() {
	*x = EmailAuth{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAuth) ProtoMessage() {}

func (x *EmailAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAuth.ProtoReflect.Descriptor instead.
func (*EmailAuth) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{36}
}

func (x *EmailAuth) GetDkim() string {
	if x != nil {
		return x.Dkim
	}
	return ""
}

func (x *EmailAuth) GetDkimDomain() string {
	if x != nil {
		return x.DkimDomain
	}
	return ""
}

func (x *EmailAuth) GetDkimSignature() string {
	if x != nil {
		return x.DkimSignature
	}
	return ""
}

func (x *EmailAuth) GetDmarc() string {
	if x != nil {
		return x.Dmarc
	}
	return ""
}

func (x *EmailAuth) GetDmarcOverride() string {
	if x != nil {
		return x.DmarcOverride
	}
	return ""
}

func (x *EmailAuth) GetDmarcPolicy() string {
	if x != nil {
		return x.DmarcPolicy
	}
	return ""
}

func (x *EmailAuth) GetSpf() string {
	if x != nil {
		return x.Spf
	}
	return ""
}

type EndpointConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                             // Caption: Response Code;
	NetworkEndpoint *NetworkEndpoint `protobuf:"bytes,2,opt,name=network_endpoint,json=networkEndpoint,proto3" json:"network_endpoint,omitempty"` // Caption: Network Endpoint;
}

func (x *EndpointConnection) Reset() {
	*x = EndpointConnection{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConnection) ProtoMessage() {}

func (x *EndpointConnection) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConnection.ProtoReflect.Descriptor instead.
func (*EndpointConnection) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{37}
}

func (x *EndpointConnection) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndpointConnection) GetNetworkEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.NetworkEndpoint
	}
	return nil
}

type Enrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64            `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"` // Caption: Created Time;
	Data        *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                   // Caption: Data;
	Desc        string           `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                   // Caption: Description;
	Name        string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                   // Caption: Name;
	Provider    string           `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`                           // Caption: Provider;
	Reputation  *Reputation      `protobuf:"bytes,6,opt,name=reputation,proto3" json:"reputation,omitempty"`                       // Caption: Reputation Scores;
	ShortDesc   string           `protobuf:"bytes,7,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"`        // Caption: Short Description;
	SrcUrl      string           `protobuf:"bytes,8,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                 // Caption: Source URL;
	Type        string           `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                                   // Caption: Type;
	Value       string           `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`                                // Caption: Value;
}

func (x *Enrichment) Reset() {
	*x = Enrichment{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment) ProtoMessage() {}

func (x *Enrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment.ProtoReflect.Descriptor instead.
func (*Enrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{38}
}

func (x *Enrichment) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Enrichment) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Enrichment) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Enrichment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enrichment) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Enrichment) GetReputation() *Reputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *Enrichment) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *Enrichment) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Enrichment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Enrichment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Epss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64   `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"` // Caption: Created Time;
	Percentile  float32 `protobuf:"fixed32,2,opt,name=percentile,proto3" json:"percentile,omitempty"`                     // Caption: EPSS Percentile;
	Score       string  `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`                                 // Caption: Reputation Score;
	Version     string  `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                             // Caption: Version;
}

func (x *Epss) Reset() {
	*x = Epss{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Epss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epss) ProtoMessage() {}

func (x *Epss) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epss.ProtoReflect.Descriptor instead.
func (*Epss) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{39}
}

func (x *Epss) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Epss) GetPercentile() float32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *Epss) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Epss) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Evidences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor          *Actor                 `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`                                         // Caption: Actor;
	Api            *Api                   `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`                                             // Caption: API Details;
	ConnectionInfo *NetworkConnectionInfo `protobuf:"bytes,3,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"` // Caption: Connection Info;
	Container      *Container             `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`                                 // Caption: Container;
	Data           *structpb.Struct       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                           // Caption: Data;
	Database       *Database              `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`                                   // Caption: Database;
	Databucket     *Databucket            `protobuf:"bytes,7,opt,name=databucket,proto3" json:"databucket,omitempty"`                               // Caption: Databucket;
	Device         *Device                `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`                                       // Caption: Device;
	DstEndpoint    *NetworkEndpoint       `protobuf:"bytes,9,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`          // Caption: Destination Endpoint;
	Email          *Email                 `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`                                        // Caption: Email;
	File           *File                  `protobuf:"bytes,11,opt,name=file,proto3" json:"file,omitempty"`                                          // Caption: File;
	Job            *Job                   `protobuf:"bytes,12,opt,name=job,proto3" json:"job,omitempty"`                                            // Caption: Job;
	Process        *Process               `protobuf:"bytes,13,opt,name=process,proto3" json:"process,omitempty"`                                    // Caption: Process;
	Query          *DnsQuery              `protobuf:"bytes,14,opt,name=query,proto3" json:"query,omitempty"`                                        // Caption: DNS Query;
	RegKey         *RegKey                `protobuf:"bytes,15,opt,name=reg_key,json=regKey,proto3" json:"reg_key,omitempty"`                        // Caption: Registry Key;
	RegValue       *RegValue              `protobuf:"bytes,16,opt,name=reg_value,json=regValue,proto3" json:"reg_value,omitempty"`                  // Caption: Registry Value;
	SrcEndpoint    *NetworkEndpoint       `protobuf:"bytes,17,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`         // Caption: Source Endpoint;
	Url            *Url                   `protobuf:"bytes,18,opt,name=url,proto3" json:"url,omitempty"`                                            // Caption: URL;
	User           *User                  `protobuf:"bytes,19,opt,name=user,proto3" json:"user,omitempty"`                                          // Caption: User;
	WinService     *WinService            `protobuf:"bytes,20,opt,name=win_service,json=winService,proto3" json:"win_service,omitempty"`            // Caption: Windows Service;
}

func (x *Evidences) Reset() {
	*x = Evidences{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evidences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidences) ProtoMessage() {}

func (x *Evidences) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidences.ProtoReflect.Descriptor instead.
func (*Evidences) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{40}
}

func (x *Evidences) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Evidences) GetApi() *Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Evidences) GetConnectionInfo() *NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *Evidences) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Evidences) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Evidences) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Evidences) GetDatabucket() *Databucket {
	if x != nil {
		return x.Databucket
	}
	return nil
}

func (x *Evidences) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Evidences) GetDstEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *Evidences) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Evidences) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Evidences) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Evidences) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Evidences) GetQuery() *DnsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Evidences) GetRegKey() *RegKey {
	if x != nil {
		return x.RegKey
	}
	return nil
}

func (x *Evidences) GetRegValue() *RegValue {
	if x != nil {
		return x.RegValue
	}
	return nil
}

func (x *Evidences) GetSrcEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *Evidences) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Evidences) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Evidences) GetWinService() *WinService {
	if x != nil {
		return x.WinService
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{41}
}

func (x *Extension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Extension) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Extension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
}

func (x *Feature) Reset() {
	*x = Feature{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{42}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Feature) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessedTime       int64                         `protobuf:"varint,1,opt,name=accessed_time,json=accessedTime,proto3" json:"accessed_time,omitempty"`                                                                       // Caption: Accessed Time;
	Accessor           *User                         `protobuf:"bytes,2,opt,name=accessor,proto3" json:"accessor,omitempty"`                                                                                                    // Caption: Accessor;
	Attributes         int32                         `protobuf:"varint,3,opt,name=attributes,proto3" json:"attributes,omitempty"`                                                                                               // Caption: Attributes;
	CompanyName        string                        `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                                                                           // Caption: Company Name;
	Confidentiality    string                        `protobuf:"bytes,5,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`                                                                                      // Caption: Confidentiality;
	ConfidentialityId  enums.FILE_CONFIDENTIALITY_ID `protobuf:"varint,6,opt,name=confidentiality_id,json=confidentialityId,proto3,enum=ocsf.v1_3_0.objects.enums.FILE_CONFIDENTIALITY_ID" json:"confidentiality_id,omitempty"` // Caption: Confidentiality ID;
	CreatedTime        int64                         `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                                          // Caption: Created Time;
	Creator            *User                         `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`                                                                                                      // Caption: Creator;
	DataClassification *DataClassification           `protobuf:"bytes,9,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`                                                      // Caption: Data Classification; Profile: data_classification;
	Desc               string                        `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                                           // Caption: Description;
	Ext                string                        `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`                                                                                                             // Caption: Extension;
	Hashes             []*Fingerprint                `protobuf:"bytes,12,rep,name=hashes,proto3" json:"hashes,omitempty"`                                                                                                       // Caption: Hashes;
	IsSystem           bool                          `protobuf:"varint,13,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                                                                  // Caption: System;
	MimeType           string                        `protobuf:"bytes,14,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                                                   // Caption: MIME type;
	ModifiedTime       int64                         `protobuf:"varint,15,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                                                      // Caption: Modified Time;
	Modifier           *User                         `protobuf:"bytes,16,opt,name=modifier,proto3" json:"modifier,omitempty"`                                                                                                   // Caption: Modifier;
	Name               string                        `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`                                                                                                           // Caption: Name;
	Owner              *User                         `protobuf:"bytes,18,opt,name=owner,proto3" json:"owner,omitempty"`                                                                                                         // Caption: Owner;
	ParentFolder       string                        `protobuf:"bytes,19,opt,name=parent_folder,json=parentFolder,proto3" json:"parent_folder,omitempty"`                                                                       // Caption: Parent Folder;
	Path               string                        `protobuf:"bytes,20,opt,name=path,proto3" json:"path,omitempty"`                                                                                                           // Caption: Path;
	Product            *Product                      `protobuf:"bytes,21,opt,name=product,proto3" json:"product,omitempty"`                                                                                                     // Caption: Product;
	SecurityDescriptor string                        `protobuf:"bytes,22,opt,name=security_descriptor,json=securityDescriptor,proto3" json:"security_descriptor,omitempty"`                                                     // Caption: Security Descriptor;
	Signature          *DigitalSignature             `protobuf:"bytes,23,opt,name=signature,proto3" json:"signature,omitempty"`                                                                                                 // Caption: Digital Signature;
	Size               int64                         `protobuf:"varint,24,opt,name=size,proto3" json:"size,omitempty"`                                                                                                          // Caption: Size;
	Type               string                        `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`                                                                                                           // Caption: Type;
	TypeId             enums.FILE_TYPE_ID            `protobuf:"varint,26,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.FILE_TYPE_ID" json:"type_id,omitempty"`                                            // Caption: Type ID;
	Uid                string                        `protobuf:"bytes,27,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                             // Caption: Unique ID;
	Version            string                        `protobuf:"bytes,28,opt,name=version,proto3" json:"version,omitempty"`                                                                                                     // Caption: Version;
	Xattributes        *structpb.Struct              `protobuf:"bytes,29,opt,name=xattributes,proto3" json:"xattributes,omitempty"`                                                                                             // Caption: Extended Attributes;
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{43}
}

func (x *File) GetAccessedTime() int64 {
	if x != nil {
		return x.AccessedTime
	}
	return 0
}

func (x *File) GetAccessor() *User {
	if x != nil {
		return x.Accessor
	}
	return nil
}

func (x *File) GetAttributes() int32 {
	if x != nil {
		return x.Attributes
	}
	return 0
}

func (x *File) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *File) GetConfidentiality() string {
	if x != nil {
		return x.Confidentiality
	}
	return ""
}

func (x *File) GetConfidentialityId() enums.FILE_CONFIDENTIALITY_ID {
	if x != nil {
		return x.ConfidentialityId
	}
	return enums.FILE_CONFIDENTIALITY_ID(0)
}

func (x *File) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *File) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *File) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *File) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *File) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *File) GetHashes() []*Fingerprint {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *File) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *File) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *File) GetModifier() *User {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *File) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *File) GetSecurityDescriptor() string {
	if x != nil {
		return x.SecurityDescriptor
	}
	return ""
}

func (x *File) GetSignature() *DigitalSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetTypeId() enums.FILE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.FILE_TYPE_ID(0)
}

func (x *File) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *File) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *File) GetXattributes() *structpb.Struct {
	if x != nil {
		return x.Xattributes
	}
	return nil
}

type FindingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytic         *Analytic         `protobuf:"bytes,1,opt,name=analytic,proto3" json:"analytic,omitempty"`                                          // Caption: Analytic;
	Attacks          []*Attack         `protobuf:"bytes,2,rep,name=attacks,proto3" json:"attacks,omitempty"`                                            // Caption: MITRE ATT&CK® Details;
	CreatedTime      int64             `protobuf:"varint,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                // Caption: Created Time;
	DataSources      []string          `protobuf:"bytes,4,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`                 // Caption: Data Sources;
	Desc             string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                                                  // Caption: Description;
	FirstSeenTime    int64             `protobuf:"varint,6,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`        // Caption: First Seen;
	KillChain        []*KillChainPhase `protobuf:"bytes,7,rep,name=kill_chain,json=killChain,proto3" json:"kill_chain,omitempty"`                       // Caption: Kill Chain;
	LastSeenTime     int64             `protobuf:"varint,8,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`           // Caption: Last Seen;
	ModifiedTime     int64             `protobuf:"varint,9,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`             // Caption: Modified Time;
	ProductUid       string            `protobuf:"bytes,10,opt,name=product_uid,json=productUid,proto3" json:"product_uid,omitempty"`                   // Caption: Product Identifier;
	RelatedAnalytics []*Analytic       `protobuf:"bytes,11,rep,name=related_analytics,json=relatedAnalytics,proto3" json:"related_analytics,omitempty"` // Caption: Related Analytics;
	RelatedEvents    []*RelatedEvent   `protobuf:"bytes,12,rep,name=related_events,json=relatedEvents,proto3" json:"related_events,omitempty"`          // Caption: Related Events;
	SrcUrl           string            `protobuf:"bytes,13,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                               // Caption: Source URL;
	Title            string            `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`                                               // Caption: Title;
	Types            []string          `protobuf:"bytes,15,rep,name=types,proto3" json:"types,omitempty"`                                               // Caption: Types;
	Uid              string            `protobuf:"bytes,16,opt,name=uid,proto3" json:"uid,omitempty"`                                                   // Caption: Unique ID;
}

func (x *FindingInfo) Reset() {
	*x = FindingInfo{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingInfo) ProtoMessage() {}

func (x *FindingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingInfo.ProtoReflect.Descriptor instead.
func (*FindingInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{44}
}

func (x *FindingInfo) GetAnalytic() *Analytic {
	if x != nil {
		return x.Analytic
	}
	return nil
}

func (x *FindingInfo) GetAttacks() []*Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *FindingInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *FindingInfo) GetDataSources() []string {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *FindingInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FindingInfo) GetFirstSeenTime() int64 {
	if x != nil {
		return x.FirstSeenTime
	}
	return 0
}

func (x *FindingInfo) GetKillChain() []*KillChainPhase {
	if x != nil {
		return x.KillChain
	}
	return nil
}

func (x *FindingInfo) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *FindingInfo) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *FindingInfo) GetProductUid() string {
	if x != nil {
		return x.ProductUid
	}
	return ""
}

func (x *FindingInfo) GetRelatedAnalytics() []*Analytic {
	if x != nil {
		return x.RelatedAnalytics
	}
	return nil
}

func (x *FindingInfo) GetRelatedEvents() []*RelatedEvent {
	if x != nil {
		return x.RelatedEvents
	}
	return nil
}

func (x *FindingInfo) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *FindingInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FindingInfo) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *FindingInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Fingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm   string                         `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`                                                                                 // Caption: Algorithm;
	AlgorithmId enums.FINGERPRINT_ALGORITHM_ID `protobuf:"varint,2,opt,name=algorithm_id,json=algorithmId,proto3,enum=ocsf.v1_3_0.objects.enums.FINGERPRINT_ALGORITHM_ID" json:"algorithm_id,omitempty"` // Caption: Algorithm ID;
	Value       string                         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                                                         // Caption: Value;
}

func (x *Fingerprint) Reset() {
	*x = Fingerprint{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fingerprint) ProtoMessage() {}

func (x *Fingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fingerprint.ProtoReflect.Descriptor instead.
func (*Fingerprint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{45}
}

func (x *Fingerprint) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Fingerprint) GetAlgorithmId() enums.FINGERPRINT_ALGORITHM_ID {
	if x != nil {
		return x.AlgorithmId
	}
	return enums.FINGERPRINT_ALGORITHM_ID(0)
}

func (x *Fingerprint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category      string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`                                // Caption: Category;
	Condition     string   `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`                              // Caption: Condition;
	Desc          string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                        // Caption: Description;
	Duration      int64    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                               // Caption: Duration Milliseconds;
	MatchDetails  []string `protobuf:"bytes,5,rep,name=match_details,json=matchDetails,proto3" json:"match_details,omitempty"`    // Caption: Match Details;
	MatchLocation string   `protobuf:"bytes,6,opt,name=match_location,json=matchLocation,proto3" json:"match_location,omitempty"` // Caption: Match Location;
	Name          string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                        // Caption: Name;
	RateLimit     int32    `protobuf:"varint,8,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`            // Caption: Rate Limit;
	Sensitivity   string   `protobuf:"bytes,9,opt,name=sensitivity,proto3" json:"sensitivity,omitempty"`                          // Caption: Sensitivity;
	Type          string   `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`                                       // Caption: Type;
	Uid           string   `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                         // Caption: Unique ID;
	Version       string   `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`                                 // Caption: Version;
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{46}
}

func (x *FirewallRule) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *FirewallRule) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *FirewallRule) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FirewallRule) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FirewallRule) GetMatchDetails() []string {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

func (x *FirewallRule) GetMatchLocation() string {
	if x != nil {
		return x.MatchLocation
	}
	return ""
}

func (x *FirewallRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirewallRule) GetRateLimit() int32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *FirewallRule) GetSensitivity() string {
	if x != nil {
		return x.Sensitivity
	}
	return ""
}

func (x *FirewallRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FirewallRule) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FirewallRule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc       string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`             // Caption: Description;
	Domain     string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`         // Caption: Domain;
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`             // Caption: Name;
	Privileges []string `protobuf:"bytes,4,rep,name=privileges,proto3" json:"privileges,omitempty"` // Caption: Privileges;
	Type       string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`             // Caption: Type;
	Uid        string   `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`               // Caption: Unique ID;
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{47}
}

func (x *Group) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Group) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *Group) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Group) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Hassh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm   string       `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`     // Caption: Algorithm;
	Fingerprint *Fingerprint `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"` // Caption: Fingerprint;
}

func (x *Hassh) Reset() {
	*x = Hassh{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hassh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hassh) ProtoMessage() {}

func (x *Hassh) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hassh.ProtoReflect.Descriptor instead.
func (*Hassh) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{48}
}

func (x *Hassh) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Hassh) GetFingerprint() *Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type HttpCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain         string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                                        // Caption: Domain;
	ExpirationTime int64  `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // Caption: Expiration Time;
	HttpOnly       bool   `protobuf:"varint,3,opt,name=http_only,json=httpOnly,proto3" json:"http_only,omitempty"`                   // Caption: HTTP Only;
	IsHttpOnly     bool   `protobuf:"varint,4,opt,name=is_http_only,json=isHttpOnly,proto3" json:"is_http_only,omitempty"`           // Caption: HTTP Only;
	IsSecure       bool   `protobuf:"varint,5,opt,name=is_secure,json=isSecure,proto3" json:"is_secure,omitempty"`                   // Caption: Secure;
	Name           string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                            // Caption: Name;
	Path           string `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`                                            // Caption: Path;
	Samesite       string `protobuf:"bytes,8,opt,name=samesite,proto3" json:"samesite,omitempty"`                                    // Caption: SameSite;
	Secure         bool   `protobuf:"varint,9,opt,name=secure,proto3" json:"secure,omitempty"`                                       // Caption: Secure;
	Value          string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`                                         // Caption: Value;
}

func (x *HttpCookie) Reset() {
	*x = HttpCookie{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpCookie) ProtoMessage() {}

func (x *HttpCookie) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpCookie.ProtoReflect.Descriptor instead.
func (*HttpCookie) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{49}
}

func (x *HttpCookie) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HttpCookie) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *HttpCookie) GetHttpOnly() bool {
	if x != nil {
		return x.HttpOnly
	}
	return false
}

func (x *HttpCookie) GetIsHttpOnly() bool {
	if x != nil {
		return x.IsHttpOnly
	}
	return false
}

func (x *HttpCookie) GetIsSecure() bool {
	if x != nil {
		return x.IsSecure
	}
	return false
}

func (x *HttpCookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpCookie) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpCookie) GetSamesite() string {
	if x != nil {
		return x.Samesite
	}
	return ""
}

func (x *HttpCookie) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *HttpCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Caption: Name;
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Caption: Value;
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{50}
}

func (x *HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args          string        `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`                                           // Caption: HTTP Arguments;
	HttpHeaders   []*HttpHeader `protobuf:"bytes,2,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`          // Caption: HTTP Headers;
	HttpMethod    string        `protobuf:"bytes,3,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`             // AllowedValues: TRACE, CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT; Caption: HTTP Method;
	Length        int32         `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`                                      // Caption: Response Length;
	Referrer      string        `protobuf:"bytes,5,opt,name=referrer,proto3" json:"referrer,omitempty"`                                   // Caption: HTTP Referrer;
	Uid           string        `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`                                             // Caption: Unique ID;
	Url           *Url          `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                             // Caption: URL;
	UserAgent     string        `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`                // Caption: HTTP User-Agent;
	Version       string        `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`                                     // Caption: Version;
	XForwardedFor []string      `protobuf:"bytes,10,rep,name=x_forwarded_for,json=xForwardedFor,proto3" json:"x_forwarded_for,omitempty"` // Caption: X-Forwarded-For;
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{51}
}

func (x *HttpRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *HttpRequest) GetHttpHeaders() []*HttpHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *HttpRequest) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *HttpRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HttpRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *HttpRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *HttpRequest) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *HttpRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HttpRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HttpRequest) GetXForwardedFor() []string {
	if x != nil {
		return x.XForwardedFor
	}
	return nil
}

type HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                 // Caption: Response Code;
	ContentType string        `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // Caption: HTTP Content Type;
	HttpHeaders []*HttpHeader `protobuf:"bytes,3,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"` // Caption: HTTP Headers;
	Latency     int32         `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`                           // Caption: Latency;
	Length      int32         `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`                             // Caption: Response Length;
	Message     string        `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`                            // Caption: Message;
	Status      string        `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                              // Caption: Status;
}

func (x *HttpResponse) Reset() {
	*x = HttpResponse{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponse) ProtoMessage() {}

func (x *HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{52}
}

func (x *HttpResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HttpResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HttpResponse) GetHttpHeaders() []*HttpHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *HttpResponse) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *HttpResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HttpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HttpResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Idp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
	Uid  string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`   // Caption: Unique ID;
}

func (x *Idp) Reset() {
	*x = Idp{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Idp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Idp) ProtoMessage() {}

func (x *Idp) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Idp.ProtoReflect.Descriptor instead.
func (*Idp) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{53}
}

func (x *Idp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Idp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"` // Caption: Labels;
	Name   string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // Caption: Name;
	Path   string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`     // Caption: Path;
	Tag    string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`       // Caption: Image Tag;
	Uid    string   `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`       // Caption: Unique ID;
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{54}
}

func (x *Image) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Ja4Fingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionA string                         `protobuf:"bytes,1,opt,name=section_a,json=sectionA,proto3" json:"section_a,omitempty"`                                                    // Caption: JA4 Section A;
	SectionB string                         `protobuf:"bytes,2,opt,name=section_b,json=sectionB,proto3" json:"section_b,omitempty"`                                                    // Caption: JA4 Section B;
	SectionC string                         `protobuf:"bytes,3,opt,name=section_c,json=sectionC,proto3" json:"section_c,omitempty"`                                                    // Caption: JA4 Section C;
	SectionD string                         `protobuf:"bytes,4,opt,name=section_d,json=sectionD,proto3" json:"section_d,omitempty"`                                                    // Caption: JA4 Section D;
	Type     string                         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                            // Caption: Type;
	TypeId   enums.JA_4_FINGERPRINT_TYPE_ID `protobuf:"varint,6,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.JA_4_FINGERPRINT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Value    string                         `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`                                                                          // Caption: Value;
}

func (x *Ja4Fingerprint) Reset() {
	*x = Ja4Fingerprint{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ja4Fingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ja4Fingerprint) ProtoMessage() {}

func (x *Ja4Fingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ja4Fingerprint.ProtoReflect.Descriptor instead.
func (*Ja4Fingerprint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{55}
}

func (x *Ja4Fingerprint) GetSectionA() string {
	if x != nil {
		return x.SectionA
	}
	return ""
}

func (x *Ja4Fingerprint) GetSectionB() string {
	if x != nil {
		return x.SectionB
	}
	return ""
}

func (x *Ja4Fingerprint) GetSectionC() string {
	if x != nil {
		return x.SectionC
	}
	return ""
}

func (x *Ja4Fingerprint) GetSectionD() string {
	if x != nil {
		return x.SectionD
	}
	return ""
}

func (x *Ja4Fingerprint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ja4Fingerprint) GetTypeId() enums.JA_4_FINGERPRINT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.JA_4_FINGERPRINT_TYPE_ID(0)
}

func (x *Ja4Fingerprint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdLine     string                 `protobuf:"bytes,1,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`                                                             // Caption: Command Line;
	CreatedTime int64                  `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                // Caption: Created Time;
	Desc        string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                  // Caption: Description;
	File        *File                  `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`                                                                                  // Caption: File;
	LastRunTime int64                  `protobuf:"varint,5,opt,name=last_run_time,json=lastRunTime,proto3" json:"last_run_time,omitempty"`                                              // Caption: Last Run;
	Name        string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                  // Caption: Name;
	NextRunTime int64                  `protobuf:"varint,7,opt,name=next_run_time,json=nextRunTime,proto3" json:"next_run_time,omitempty"`                                              // Caption: Next Run;
	RunState    string                 `protobuf:"bytes,8,opt,name=run_state,json=runState,proto3" json:"run_state,omitempty"`                                                          // Caption: Run State;
	RunStateId  enums.JOB_RUN_STATE_ID `protobuf:"varint,9,opt,name=run_state_id,json=runStateId,proto3,enum=ocsf.v1_3_0.objects.enums.JOB_RUN_STATE_ID" json:"run_state_id,omitempty"` // Caption: Run State ID;
	User        *User                  `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`                                                                                 // Caption: User;
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{56}
}

func (x *Job) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *Job) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Job) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Job) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Job) GetLastRunTime() int64 {
	if x != nil {
		return x.LastRunTime
	}
	return 0
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetNextRunTime() int64 {
	if x != nil {
		return x.NextRunTime
	}
	return 0
}

func (x *Job) GetRunState() string {
	if x != nil {
		return x.RunState
	}
	return ""
}

func (x *Job) GetRunStateId() enums.JOB_RUN_STATE_ID {
	if x != nil {
		return x.RunStateId
	}
	return enums.JOB_RUN_STATE_ID(0)
}

func (x *Job) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type KbArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgTimespan    *Timespan                         `protobuf:"bytes,1,opt,name=avg_timespan,json=avgTimespan,proto3" json:"avg_timespan,omitempty"`                                                                        // Caption: Average Timespan;
	Bulletin       string                            `protobuf:"bytes,2,opt,name=bulletin,proto3" json:"bulletin,omitempty"`                                                                                                 // Caption: Patch Bulletin;
	Classification string                            `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`                                                                                     // Caption: Classification;
	CreatedTime    int64                             `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                                       // Caption: Created Time;
	InstallState   string                            `protobuf:"bytes,5,opt,name=install_state,json=installState,proto3" json:"install_state,omitempty"`                                                                     // Caption: Install State;
	InstallStateId enums.KB_ARTICLE_INSTALL_STATE_ID `protobuf:"varint,6,opt,name=install_state_id,json=installStateId,proto3,enum=ocsf.v1_3_0.objects.enums.KB_ARTICLE_INSTALL_STATE_ID" json:"install_state_id,omitempty"` // Caption: Install State ID;
	IsSuperseded   bool                              `protobuf:"varint,7,opt,name=is_superseded,json=isSuperseded,proto3" json:"is_superseded,omitempty"`                                                                    // Caption: The patch is superseded.;
	Os             *Os                               `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty"`                                                                                                             // Caption: OS;
	Product        *Product                          `protobuf:"bytes,9,opt,name=product,proto3" json:"product,omitempty"`                                                                                                   // Caption: Product;
	Severity       string                            `protobuf:"bytes,10,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                // Caption: Severity;
	Size           int64                             `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`                                                                                                       // Caption: Size;
	SrcUrl         string                            `protobuf:"bytes,12,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                                                                                      // Caption: Source URL;
	Title          string                            `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`                                                                                                      // Caption: Title;
	Uid            string                            `protobuf:"bytes,14,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                          // Caption: Unique ID;
}

func (x *KbArticle) Reset() {
	*x = KbArticle{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KbArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbArticle) ProtoMessage() {}

func (x *KbArticle) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbArticle.ProtoReflect.Descriptor instead.
func (*KbArticle) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{57}
}

func (x *KbArticle) GetAvgTimespan() *Timespan {
	if x != nil {
		return x.AvgTimespan
	}
	return nil
}

func (x *KbArticle) GetBulletin() string {
	if x != nil {
		return x.Bulletin
	}
	return ""
}

func (x *KbArticle) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *KbArticle) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *KbArticle) GetInstallState() string {
	if x != nil {
		return x.InstallState
	}
	return ""
}

func (x *KbArticle) GetInstallStateId() enums.KB_ARTICLE_INSTALL_STATE_ID {
	if x != nil {
		return x.InstallStateId
	}
	return enums.KB_ARTICLE_INSTALL_STATE_ID(0)
}

func (x *KbArticle) GetIsSuperseded() bool {
	if x != nil {
		return x.IsSuperseded
	}
	return false
}

func (x *KbArticle) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *KbArticle) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *KbArticle) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *KbArticle) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *KbArticle) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *KbArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KbArticle) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSystem   bool                 `protobuf:"varint,1,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                         // Caption: System;
	Name       string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Caption: Name;
	Path       string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                                                  // Caption: Path;
	SystemCall string               `protobuf:"bytes,4,opt,name=system_call,json=systemCall,proto3" json:"system_call,omitempty"`                                    // Caption: System Call;
	Type       string               `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                  // Caption: Type;
	TypeId     enums.KERNEL_TYPE_ID `protobuf:"varint,6,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.KERNEL_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
}

func (x *Kernel) Reset() {
	*x = Kernel{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel) ProtoMessage() {}

func (x *Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel.ProtoReflect.Descriptor instead.
func (*Kernel) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{58}
}

func (x *Kernel) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Kernel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kernel) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Kernel) GetSystemCall() string {
	if x != nil {
		return x.SystemCall
	}
	return ""
}

func (x *Kernel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Kernel) GetTypeId() enums.KERNEL_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.KERNEL_TYPE_ID(0)
}

type KernelDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"` // Caption: File;
}

func (x *KernelDriver) Reset() {
	*x = KernelDriver{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelDriver) ProtoMessage() {}

func (x *KernelDriver) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelDriver.ProtoReflect.Descriptor instead.
func (*KernelDriver) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{59}
}

func (x *KernelDriver) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type KeyboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionKeys    int32  `protobuf:"varint,1,opt,name=function_keys,json=functionKeys,proto3" json:"function_keys,omitempty"`          // Caption: Function Keys;
	Ime             string `protobuf:"bytes,2,opt,name=ime,proto3" json:"ime,omitempty"`                                                 // Caption: IME;
	KeyboardLayout  string `protobuf:"bytes,3,opt,name=keyboard_layout,json=keyboardLayout,proto3" json:"keyboard_layout,omitempty"`     // Caption: Keyboard Layout;
	KeyboardSubtype int32  `protobuf:"varint,4,opt,name=keyboard_subtype,json=keyboardSubtype,proto3" json:"keyboard_subtype,omitempty"` // Caption: Keyboard Subtype;
	KeyboardType    string `protobuf:"bytes,5,opt,name=keyboard_type,json=keyboardType,proto3" json:"keyboard_type,omitempty"`           // Caption: Keyboard Type;
}

func (x *KeyboardInfo) Reset() {
	*x = KeyboardInfo{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardInfo) ProtoMessage() {}

func (x *KeyboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardInfo.ProtoReflect.Descriptor instead.
func (*KeyboardInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{60}
}

func (x *KeyboardInfo) GetFunctionKeys() int32 {
	if x != nil {
		return x.FunctionKeys
	}
	return 0
}

func (x *KeyboardInfo) GetIme() string {
	if x != nil {
		return x.Ime
	}
	return ""
}

func (x *KeyboardInfo) GetKeyboardLayout() string {
	if x != nil {
		return x.KeyboardLayout
	}
	return ""
}

func (x *KeyboardInfo) GetKeyboardSubtype() int32 {
	if x != nil {
		return x.KeyboardSubtype
	}
	return 0
}

func (x *KeyboardInfo) GetKeyboardType() string {
	if x != nil {
		return x.KeyboardType
	}
	return ""
}

type KillChainPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase   string                          `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`                                                                              // Caption: Kill Chain Phase;
	PhaseId enums.KILL_CHAIN_PHASE_PHASE_ID `protobuf:"varint,2,opt,name=phase_id,json=phaseId,proto3,enum=ocsf.v1_3_0.objects.enums.KILL_CHAIN_PHASE_PHASE_ID" json:"phase_id,omitempty"` // Caption: Kill Chain Phase ID;
}

func (x *KillChainPhase) Reset() {
	*x = KillChainPhase{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KillChainPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillChainPhase) ProtoMessage() {}

func (x *KillChainPhase) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillChainPhase.ProtoReflect.Descriptor instead.
func (*KillChainPhase) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{61}
}

func (x *KillChainPhase) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *KillChainPhase) GetPhaseId() enums.KILL_CHAIN_PHASE_PHASE_ID {
	if x != nil {
		return x.PhaseId
	}
	return enums.KILL_CHAIN_PHASE_PHASE_ID(0)
}

type LdapPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostCenter     string    `protobuf:"bytes,1,opt,name=cost_center,json=costCenter,proto3" json:"cost_center,omitempty"`              // Caption: Cost Center;
	CreatedTime    int64     `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`          // Caption: Created Time;
	DeletedTime    int64     `protobuf:"varint,3,opt,name=deleted_time,json=deletedTime,proto3" json:"deleted_time,omitempty"`          // Caption: Deleted Time;
	EmailAddrs     []string  `protobuf:"bytes,4,rep,name=email_addrs,json=emailAddrs,proto3" json:"email_addrs,omitempty"`              // Caption: Email Addresses;
	EmployeeUid    string    `protobuf:"bytes,5,opt,name=employee_uid,json=employeeUid,proto3" json:"employee_uid,omitempty"`           // Caption: Employee ID;
	GivenName      string    `protobuf:"bytes,6,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`                 // Caption: Given Name;
	HireTime       int64     `protobuf:"varint,7,opt,name=hire_time,json=hireTime,proto3" json:"hire_time,omitempty"`                   // Caption: Hire Time;
	JobTitle       string    `protobuf:"bytes,8,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`                    // Caption: Job Title;
	Labels         []string  `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`                                        // Caption: Labels;
	LastLoginTime  int64     `protobuf:"varint,10,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` // Caption: Last Login;
	LdapCn         string    `protobuf:"bytes,11,opt,name=ldap_cn,json=ldapCn,proto3" json:"ldap_cn,omitempty"`                         // Caption: LDAP Common Name;
	LdapDn         string    `protobuf:"bytes,12,opt,name=ldap_dn,json=ldapDn,proto3" json:"ldap_dn,omitempty"`                         // Caption: LDAP Distinguished Name;
	LeaveTime      int64     `protobuf:"varint,13,opt,name=leave_time,json=leaveTime,proto3" json:"leave_time,omitempty"`               // Caption: Leave Time;
	Location       *Location `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`                                   // Caption: Geo Location;
	Manager        *User     `protobuf:"bytes,15,opt,name=manager,proto3" json:"manager,omitempty"`                                     // Caption: Manager;
	ModifiedTime   int64     `protobuf:"varint,16,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`      // Caption: Modified Time;
	OfficeLocation string    `protobuf:"bytes,17,opt,name=office_location,json=officeLocation,proto3" json:"office_location,omitempty"` // Caption: Office Location;
	Surname        string    `protobuf:"bytes,18,opt,name=surname,proto3" json:"surname,omitempty"`                                     // Caption: Surname;
}

func (x *LdapPerson) Reset() {
	*x = LdapPerson{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LdapPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdapPerson) ProtoMessage() {}

func (x *LdapPerson) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdapPerson.ProtoReflect.Descriptor instead.
func (*LdapPerson) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{62}
}

func (x *LdapPerson) GetCostCenter() string {
	if x != nil {
		return x.CostCenter
	}
	return ""
}

func (x *LdapPerson) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *LdapPerson) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *LdapPerson) GetEmailAddrs() []string {
	if x != nil {
		return x.EmailAddrs
	}
	return nil
}

func (x *LdapPerson) GetEmployeeUid() string {
	if x != nil {
		return x.EmployeeUid
	}
	return ""
}

func (x *LdapPerson) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *LdapPerson) GetHireTime() int64 {
	if x != nil {
		return x.HireTime
	}
	return 0
}

func (x *LdapPerson) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *LdapPerson) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LdapPerson) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *LdapPerson) GetLdapCn() string {
	if x != nil {
		return x.LdapCn
	}
	return ""
}

func (x *LdapPerson) GetLdapDn() string {
	if x != nil {
		return x.LdapDn
	}
	return ""
}

func (x *LdapPerson) GetLeaveTime() int64 {
	if x != nil {
		return x.LeaveTime
	}
	return 0
}

func (x *LdapPerson) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LdapPerson) GetManager() *User {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *LdapPerson) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *LdapPerson) GetOfficeLocation() string {
	if x != nil {
		return x.OfficeLocation
	}
	return ""
}

func (x *LdapPerson) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classification      string                `protobuf:"bytes,1,opt,name=classification,proto3" json:"classification,omitempty"`                                      // Caption: Classification;
	Code                int32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                                                         // Caption: Response Code;
	DstEndpoint         *NetworkEndpoint      `protobuf:"bytes,3,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                         // Caption: Destination Endpoint;
	EndpointConnections []*EndpointConnection `protobuf:"bytes,4,rep,name=endpoint_connections,json=endpointConnections,proto3" json:"endpoint_connections,omitempty"` // Caption: Endpoint Connections;
	ErrorMessage        string                `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                      // Caption: Error Message;
	Ip                  string                `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                                                              // Caption: IP Address;
	Message             string                `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                                    // Caption: Message;
	Metrics             []*Metric             `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty"`                                                    // Caption: Metrics;
	Name                string                `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                          // Caption: Name;
	StatusDetail        string                `protobuf:"bytes,10,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                     // Caption: Status Detail;
	Uid                 string                `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                                           // Caption: Unique ID;
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{63}
}

func (x *LoadBalancer) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *LoadBalancer) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoadBalancer) GetDstEndpoint() *NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *LoadBalancer) GetEndpointConnections() []*EndpointConnection {
	if x != nil {
		return x.EndpointConnections
	}
	return nil
}

func (x *LoadBalancer) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *LoadBalancer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LoadBalancer) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoadBalancer) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancer) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *LoadBalancer) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City         string    `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`                                        // Caption: City;
	Continent    string    `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`                              // Caption: Continent;
	Coordinates  []float32 `protobuf:"fixed32,3,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`                 // Caption: Coordinates;
	Country      string    `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`                                  // Caption: Country;
	Desc         string    `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                                        // Caption: Description;
	Geohash      string    `protobuf:"bytes,6,opt,name=geohash,proto3" json:"geohash,omitempty"`                                  // Caption: Geohash;
	IsOnPremises bool      `protobuf:"varint,7,opt,name=is_on_premises,json=isOnPremises,proto3" json:"is_on_premises,omitempty"` // Caption: On Premises;
	Isp          string    `protobuf:"bytes,8,opt,name=isp,proto3" json:"isp,omitempty"`                                          // Caption: ISP;
	Lat          float32   `protobuf:"fixed32,9,opt,name=lat,proto3" json:"lat,omitempty"`                                        // Caption: Latitude;
	Long         float32   `protobuf:"fixed32,10,opt,name=long,proto3" json:"long,omitempty"`                                     // Caption: Longitude;
	PostalCode   string    `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`         // Caption: Postal Code;
	Provider     string    `protobuf:"bytes,12,opt,name=provider,proto3" json:"provider,omitempty"`                               // Caption: Provider;
	Region       string    `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`                                   // Caption: Region;
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{64}
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Location) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Location) GetCoordinates() []float32 {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Location) GetGeohash() string {
	if x != nil {
		return x.Geohash
	}
	return ""
}

func (x *Location) GetIsOnPremises() bool {
	if x != nil {
		return x.IsOnPremises
	}
	return false
}

func (x *Location) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Location) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLong() float32 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Location) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Location) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device       *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                  // Caption: Device;
	LogLevel     string   `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`              // Caption: Log Level;
	LogName      string   `protobuf:"bytes,3,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`                 // Caption: Log Name;
	LogProvider  string   `protobuf:"bytes,4,opt,name=log_provider,json=logProvider,proto3" json:"log_provider,omitempty"`     // Caption: Log Provider;
	LogVersion   string   `protobuf:"bytes,5,opt,name=log_version,json=logVersion,proto3" json:"log_version,omitempty"`        // Caption: Log Version;
	LoggedTime   int64    `protobuf:"varint,6,opt,name=logged_time,json=loggedTime,proto3" json:"logged_time,omitempty"`       // Caption: Logged Time;
	Name         string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                      // Caption: Name;
	Product      *Product `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty"`                                // Caption: Product;
	TransmitTime int64    `protobuf:"varint,9,opt,name=transmit_time,json=transmitTime,proto3" json:"transmit_time,omitempty"` // Caption: Transmission Time;
	Uid          string   `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`                                       // Caption: Unique ID;
	Version      string   `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`                               // Caption: Version;
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{65}
}

func (x *Logger) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Logger) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Logger) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *Logger) GetLogProvider() string {
	if x != nil {
		return x.LogProvider
	}
	return ""
}

func (x *Logger) GetLogVersion() string {
	if x != nil {
		return x.LogVersion
	}
	return ""
}

func (x *Logger) GetLoggedTime() int64 {
	if x != nil {
		return x.LoggedTime
	}
	return 0
}

func (x *Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Logger) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Logger) GetTransmitTime() int64 {
	if x != nil {
		return x.TransmitTime
	}
	return 0
}

func (x *Logger) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Logger) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Malware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassificationIds []enums.MALWARE_CLASSIFICATION_IDS `protobuf:"varint,1,rep,packed,name=classification_ids,json=classificationIds,proto3,enum=ocsf.v1_3_0.objects.enums.MALWARE_CLASSIFICATION_IDS" json:"classification_ids,omitempty"` // Caption: Classification IDs;
	Classifications   []string                           `protobuf:"bytes,2,rep,name=classifications,proto3" json:"classifications,omitempty"`                                                                                                // Caption: Classifications;
	Cves              []*Cve                             `protobuf:"bytes,3,rep,name=cves,proto3" json:"cves,omitempty"`                                                                                                                      // Caption: CVE List;
	Name              string                             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                      // Caption: Name;
	Path              string                             `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                                                                                                                      // Caption: Path;
	Provider          string                             `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                              // Caption: Provider;
	Uid               string                             `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                        // Caption: Unique ID;
}

func (x *Malware) Reset() {
	*x = Malware{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Malware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Malware) ProtoMessage() {}

func (x *Malware) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Malware.ProtoReflect.Descriptor instead.
func (*Malware) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{66}
}

func (x *Malware) GetClassificationIds() []enums.MALWARE_CLASSIFICATION_IDS {
	if x != nil {
		return x.ClassificationIds
	}
	return nil
}

func (x *Malware) GetClassifications() []string {
	if x != nil {
		return x.Classifications
	}
	return nil
}

func (x *Malware) GetCves() []*Cve {
	if x != nil {
		return x.Cves
	}
	return nil
}

func (x *Malware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Malware) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Malware) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Malware) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ManagedEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *structpb.Struct             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                                          // Caption: Data;
	Device  *Device                      `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                                                                      // Caption: Device;
	Email   *Email                       `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                                                                        // Caption: Email;
	Group   *Group                       `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`                                                                        // Caption: Group;
	Name    string                       `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                                          // Caption: Name;
	Org     *Organization                `protobuf:"bytes,6,opt,name=org,proto3" json:"org,omitempty"`                                                                            // Caption: Organization;
	Policy  *Policy                      `protobuf:"bytes,7,opt,name=policy,proto3" json:"policy,omitempty"`                                                                      // Caption: Policy;
	Type    string                       `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                                                          // Caption: Type;
	TypeId  enums.MANAGED_ENTITY_TYPE_ID `protobuf:"varint,9,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.MANAGED_ENTITY_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid     string                       `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,omitempty"`                                                                           // Caption: Unique ID;
	User    *User                        `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`                                                                         // Caption: User;
	Version string                       `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`                                                                   // Caption: Version;
}

func (x *ManagedEntity) Reset() {
	*x = ManagedEntity{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedEntity) ProtoMessage() {}

func (x *ManagedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedEntity.ProtoReflect.Descriptor instead.
func (*ManagedEntity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{67}
}

func (x *ManagedEntity) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ManagedEntity) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ManagedEntity) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ManagedEntity) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ManagedEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagedEntity) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *ManagedEntity) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ManagedEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ManagedEntity) GetTypeId() enums.MANAGED_ENTITY_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.MANAGED_ENTITY_TYPE_ID(0)
}

func (x *ManagedEntity) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ManagedEntity) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ManagedEntity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationUid     string              `protobuf:"bytes,1,opt,name=correlation_uid,json=correlationUid,proto3" json:"correlation_uid,omitempty"`             // Caption: Correlation UID;
	DataClassification *DataClassification `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"` // Caption: Data Classification; Profile: data_classification;
	EventCode          string              `protobuf:"bytes,3,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`                            // Caption: Event Code;
	Extension          *Extension          `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`                                             // Caption: Schema Extension;
	Extensions         []*Extension        `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`                                           // Caption: Schema Extensions;
	Labels             []string            `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`                                                   // Caption: Labels;
	LogLevel           string              `protobuf:"bytes,7,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`                               // Caption: Log Level;
	LogName            string              `protobuf:"bytes,8,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`                                  // Caption: Log Name;
	LogProvider        string              `protobuf:"bytes,9,opt,name=log_provider,json=logProvider,proto3" json:"log_provider,omitempty"`                      // Caption: Log Provider;
	LogVersion         string              `protobuf:"bytes,10,opt,name=log_version,json=logVersion,proto3" json:"log_version,omitempty"`                        // Caption: Log Version;
	LoggedTime         int64               `protobuf:"varint,11,opt,name=logged_time,json=loggedTime,proto3" json:"logged_time,omitempty"`                       // Caption: Logged Time;
	Loggers            []*Logger           `protobuf:"bytes,12,rep,name=loggers,proto3" json:"loggers,omitempty"`                                                // Caption: Loggers;
	ModifiedTime       int64               `protobuf:"varint,13,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                 // Caption: Modified Time;
	OriginalTime       string              `protobuf:"bytes,14,opt,name=original_time,json=originalTime,proto3" json:"original_time,omitempty"`                  // Caption: Original Time;
	ProcessedTime      int64               `protobuf:"varint,15,opt,name=processed_time,json=processedTime,proto3" json:"processed_time,omitempty"`              // Caption: Processed Time;
	Product            *Product            `protobuf:"bytes,16,opt,name=product,proto3" json:"product,omitempty"`                                                // Caption: Product;
	Profiles           []string            `protobuf:"bytes,17,rep,name=profiles,proto3" json:"profiles,omitempty"`                                              // Caption: Profiles;
	Sequence           int32               `protobuf:"varint,18,opt,name=sequence,proto3" json:"sequence,omitempty"`                                             // Caption: Sequence Number;
	TenantUid          string              `protobuf:"bytes,19,opt,name=tenant_uid,json=tenantUid,proto3" json:"tenant_uid,omitempty"`                           // Caption: Tenant UID;
	Uid                string              `protobuf:"bytes,20,opt,name=uid,proto3" json:"uid,omitempty"`                                                        // Caption: Unique ID;
	Version            string              `protobuf:"bytes,21,opt,name=version,proto3" json:"version,omitempty"`                                                // Caption: Version;
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{68}
}

func (x *Metadata) GetCorrelationUid() string {
	if x != nil {
		return x.CorrelationUid
	}
	return ""
}

func (x *Metadata) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Metadata) GetEventCode() string {
	if x != nil {
		return x.EventCode
	}
	return ""
}

func (x *Metadata) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Metadata) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Metadata) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metadata) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Metadata) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *Metadata) GetLogProvider() string {
	if x != nil {
		return x.LogProvider
	}
	return ""
}

func (x *Metadata) GetLogVersion() string {
	if x != nil {
		return x.LogVersion
	}
	return ""
}

func (x *Metadata) GetLoggedTime() int64 {
	if x != nil {
		return x.LoggedTime
	}
	return 0
}

func (x *Metadata) GetLoggers() []*Logger {
	if x != nil {
		return x.Loggers
	}
	return nil
}

func (x *Metadata) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Metadata) GetOriginalTime() string {
	if x != nil {
		return x.OriginalTime
	}
	return ""
}

func (x *Metadata) GetProcessedTime() int64 {
	if x != nil {
		return x.ProcessedTime
	}
	return 0
}

func (x *Metadata) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Metadata) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Metadata) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Metadata) GetTenantUid() string {
	if x != nil {
		return x.TenantUid
	}
	return ""
}

func (x *Metadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Caption: Name;
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Caption: Value;
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{69}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAddress  string                    `protobuf:"bytes,1,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`                                                    // Caption: Base Address;
	File         *File                     `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`                                                                                     // Caption: File;
	FunctionName string                    `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`                                                 // Caption: Function Name;
	LoadType     string                    `protobuf:"bytes,4,opt,name=load_type,json=loadType,proto3" json:"load_type,omitempty"`                                                             // Caption: Load Type;
	LoadTypeId   enums.MODULE_LOAD_TYPE_ID `protobuf:"varint,5,opt,name=load_type_id,json=loadTypeId,proto3,enum=ocsf.v1_3_0.objects.enums.MODULE_LOAD_TYPE_ID" json:"load_type_id,omitempty"` // Caption: Load Type ID;
	StartAddress string                    `protobuf:"bytes,6,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`                                                 // Caption: Start Address;
	Type         string                    `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                                                                     // Caption: Type;
}

func (x *Module) Reset() {
	*x = Module{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{70}
}

func (x *Module) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *Module) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Module) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Module) GetLoadType() string {
	if x != nil {
		return x.LoadType
	}
	return ""
}

func (x *Module) GetLoadTypeId() enums.MODULE_LOAD_TYPE_ID {
	if x != nil {
		return x.LoadTypeId
	}
	return enums.MODULE_LOAD_TYPE_ID(0)
}

func (x *Module) GetStartAddress() string {
	if x != nil {
		return x.StartAddress
	}
	return ""
}

func (x *Module) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NetworkConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boundary      string                                        `protobuf:"bytes,1,opt,name=boundary,proto3" json:"boundary,omitempty"`                                                                                                          // Caption: Boundary;
	BoundaryId    enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID     `protobuf:"varint,2,opt,name=boundary_id,json=boundaryId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID" json:"boundary_id,omitempty"`                // Caption: Boundary ID;
	Direction     string                                        `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`                                                                                                        // Caption: Direction;
	DirectionId   enums.NETWORK_CONNECTION_INFO_DIRECTION_ID    `protobuf:"varint,4,opt,name=direction_id,json=directionId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID" json:"direction_id,omitempty"`            // Caption: Direction ID;
	ProtocolName  string                                        `protobuf:"bytes,5,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`                                                                              // Caption: Protocol Name;
	ProtocolNum   int32                                         `protobuf:"varint,6,opt,name=protocol_num,json=protocolNum,proto3" json:"protocol_num,omitempty"`                                                                                // Caption: Protocol Number;
	ProtocolVer   string                                        `protobuf:"bytes,7,opt,name=protocol_ver,json=protocolVer,proto3" json:"protocol_ver,omitempty"`                                                                                 // Caption: Protocol Version;
	ProtocolVerId enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID `protobuf:"varint,8,opt,name=protocol_ver_id,json=protocolVerId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID" json:"protocol_ver_id,omitempty"` // Caption: Protocol Version ID;
	Session       *Session                                      `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`                                                                                                            // Caption: Session;
	TcpFlags      int32                                         `protobuf:"varint,10,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`                                                                                        // Caption: TCP Flags;
	Uid           string                                        `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                   // Caption: Unique ID;
}

func (x *NetworkConnectionInfo) Reset() {
	*x = NetworkConnectionInfo{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConnectionInfo) ProtoMessage() {}

func (x *NetworkConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConnectionInfo.ProtoReflect.Descriptor instead.
func (*NetworkConnectionInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{71}
}

func (x *NetworkConnectionInfo) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *NetworkConnectionInfo) GetBoundaryId() enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID {
	if x != nil {
		return x.BoundaryId
	}
	return enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID(0)
}

func (x *NetworkConnectionInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *NetworkConnectionInfo) GetDirectionId() enums.NETWORK_CONNECTION_INFO_DIRECTION_ID {
	if x != nil {
		return x.DirectionId
	}
	return enums.NETWORK_CONNECTION_INFO_DIRECTION_ID(0)
}

func (x *NetworkConnectionInfo) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolNum() int32 {
	if x != nil {
		return x.ProtocolNum
	}
	return 0
}

func (x *NetworkConnectionInfo) GetProtocolVer() string {
	if x != nil {
		return x.ProtocolVer
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolVerId() enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID {
	if x != nil {
		return x.ProtocolVerId
	}
	return enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID(0)
}

func (x *NetworkConnectionInfo) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *NetworkConnectionInfo) GetTcpFlags() int32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *NetworkConnectionInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type NetworkEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentList        []*Agent                       `protobuf:"bytes,1,rep,name=agent_list,json=agentList,proto3" json:"agent_list,omitempty"`                                                  // Caption: Agent List;
	AutonomousSystem *AutonomousSystem              `protobuf:"bytes,2,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`                             // Caption: Autonomous System;
	Container        *Container                     `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`                                                                   // Caption: Container; Profile: container;
	Domain           string                         `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`                                                                         // Caption: Domain;
	Hostname         string                         `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                     // Caption: Hostname;
	HwInfo           *DeviceHwInfo                  `protobuf:"bytes,6,opt,name=hw_info,json=hwInfo,proto3" json:"hw_info,omitempty"`                                                           // Caption: Hardware Info;
	InstanceUid      string                         `protobuf:"bytes,7,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`                                            // Caption: Instance ID;
	InterfaceName    string                         `protobuf:"bytes,8,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`                                      // Caption: Network Interface Name;
	InterfaceUid     string                         `protobuf:"bytes,9,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`                                         // Caption: Network Interface ID;
	IntermediateIps  []string                       `protobuf:"bytes,10,rep,name=intermediate_ips,json=intermediateIps,proto3" json:"intermediate_ips,omitempty"`                               // Caption: Intermediate IP Addresses;
	Ip               string                         `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`                                                                                // Caption: IP Address;
	Location         *Location                      `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`                                                                    // Caption: Geo Location;
	Mac              string                         `protobuf:"bytes,13,opt,name=mac,proto3" json:"mac,omitempty"`                                                                              // Caption: MAC Address;
	Name             string                         `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                                                            // Caption: Name;
	NamespacePid     int32                          `protobuf:"varint,15,opt,name=namespace_pid,json=namespacePid,proto3" json:"namespace_pid,omitempty"`                                       // Caption: Namespace PID; Profile: container;
	Os               *Os                            `protobuf:"bytes,16,opt,name=os,proto3" json:"os,omitempty"`                                                                                // Caption: OS;
	Owner            *User                          `protobuf:"bytes,17,opt,name=owner,proto3" json:"owner,omitempty"`                                                                          // Caption: Owner;
	Port             int32                          `protobuf:"varint,18,opt,name=port,proto3" json:"port,omitempty"`                                                                           // Caption: Port;
	ProxyEndpoint    *NetworkProxy                  `protobuf:"bytes,19,opt,name=proxy_endpoint,json=proxyEndpoint,proto3" json:"proxy_endpoint,omitempty"`                                     // Caption: Proxy Endpoint;
	SubnetUid        string                         `protobuf:"bytes,20,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                                                 // Caption: Subnet UID;
	SvcName          string                         `protobuf:"bytes,21,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                                                       // Caption: Service Name;
	Type             string                         `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`                                                                            // Caption: Type;
	TypeId           enums.NETWORK_ENDPOINT_TYPE_ID `protobuf:"varint,23,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_ENDPOINT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid              string                         `protobuf:"bytes,24,opt,name=uid,proto3" json:"uid,omitempty"`                                                                              // Caption: Unique ID;
	VlanUid          string                         `protobuf:"bytes,25,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                                                       // Caption: VLAN;
	VpcUid           string                         `protobuf:"bytes,26,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                                                          // Caption: VPC UID;
	Zone             string                         `protobuf:"bytes,27,opt,name=zone,proto3" json:"zone,omitempty"`                                                                            // Caption: Network Zone;
}

func (x *NetworkEndpoint) Reset() {
	*x = NetworkEndpoint{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEndpoint) ProtoMessage() {}

func (x *NetworkEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEndpoint.ProtoReflect.Descriptor instead.
func (*NetworkEndpoint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{72}
}

func (x *NetworkEndpoint) GetAgentList() []*Agent {
	if x != nil {
		return x.AgentList
	}
	return nil
}

func (x *NetworkEndpoint) GetAutonomousSystem() *AutonomousSystem {
	if x != nil {
		return x.AutonomousSystem
	}
	return nil
}

func (x *NetworkEndpoint) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *NetworkEndpoint) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NetworkEndpoint) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkEndpoint) GetHwInfo() *DeviceHwInfo {
	if x != nil {
		return x.HwInfo
	}
	return nil
}

func (x *NetworkEndpoint) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *NetworkEndpoint) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkEndpoint) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *NetworkEndpoint) GetIntermediateIps() []string {
	if x != nil {
		return x.IntermediateIps
	}
	return nil
}

func (x *NetworkEndpoint) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkEndpoint) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkEndpoint) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetworkEndpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkEndpoint) GetNamespacePid() int32 {
	if x != nil {
		return x.NamespacePid
	}
	return 0
}

func (x *NetworkEndpoint) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *NetworkEndpoint) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NetworkEndpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkEndpoint) GetProxyEndpoint() *NetworkProxy {
	if x != nil {
		return x.ProxyEndpoint
	}
	return nil
}

func (x *NetworkEndpoint) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *NetworkEndpoint) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *NetworkEndpoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkEndpoint) GetTypeId() enums.NETWORK_ENDPOINT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.NETWORK_ENDPOINT_TYPE_ID(0)
}

func (x *NetworkEndpoint) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkEndpoint) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *NetworkEndpoint) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *NetworkEndpoint) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname     string                          `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                     // Caption: Hostname;
	Ip           string                          `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                                                                                 // Caption: IP Address;
	Mac          string                          `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`                                                                               // Caption: MAC Address;
	Name         string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                             // Caption: Name;
	Namespace    string                          `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                   // Caption: Namespace;
	SubnetPrefix int32                           `protobuf:"varint,6,opt,name=subnet_prefix,json=subnetPrefix,proto3" json:"subnet_prefix,omitempty"`                                        // Caption: Subnet Prefix Length;
	Type         string                          `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                                                             // Caption: Type;
	TypeId       enums.NETWORK_INTERFACE_TYPE_ID `protobuf:"varint,8,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_INTERFACE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid          string                          `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`                                                                               // Caption: Unique ID;
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{73}
}

func (x *NetworkInterface) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkInterface) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkInterface) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NetworkInterface) GetSubnetPrefix() int32 {
	if x != nil {
		return x.SubnetPrefix
	}
	return 0
}

func (x *NetworkInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkInterface) GetTypeId() enums.NETWORK_INTERFACE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.NETWORK_INTERFACE_TYPE_ID(0)
}

func (x *NetworkInterface) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type NetworkProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentList        []*Agent                    `protobuf:"bytes,1,rep,name=agent_list,json=agentList,proto3" json:"agent_list,omitempty"`                                               // Caption: Agent List;
	AutonomousSystem *AutonomousSystem           `protobuf:"bytes,2,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`                          // Caption: Autonomous System;
	Container        *Container                  `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`                                                                // Profile: container; Caption: Container;
	Domain           string                      `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`                                                                      // Caption: Domain;
	Hostname         string                      `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                  // Caption: Hostname;
	HwInfo           *DeviceHwInfo               `protobuf:"bytes,6,opt,name=hw_info,json=hwInfo,proto3" json:"hw_info,omitempty"`                                                        // Caption: Hardware Info;
	InstanceUid      string                      `protobuf:"bytes,7,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`                                         // Caption: Instance ID;
	InterfaceName    string                      `protobuf:"bytes,8,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`                                   // Caption: Network Interface Name;
	InterfaceUid     string                      `protobuf:"bytes,9,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`                                      // Caption: Network Interface ID;
	IntermediateIps  []string                    `protobuf:"bytes,10,rep,name=intermediate_ips,json=intermediateIps,proto3" json:"intermediate_ips,omitempty"`                            // Caption: Intermediate IP Addresses;
	Ip               string                      `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`                                                                             // Caption: IP Address;
	Location         *Location                   `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`                                                                 // Caption: Geo Location;
	Mac              string                      `protobuf:"bytes,13,opt,name=mac,proto3" json:"mac,omitempty"`                                                                           // Caption: MAC Address;
	Name             string                      `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                                                         // Caption: Name;
	NamespacePid     int32                       `protobuf:"varint,15,opt,name=namespace_pid,json=namespacePid,proto3" json:"namespace_pid,omitempty"`                                    // Caption: Namespace PID; Profile: container;
	Os               *Os                         `protobuf:"bytes,16,opt,name=os,proto3" json:"os,omitempty"`                                                                             // Caption: OS;
	Owner            *User                       `protobuf:"bytes,17,opt,name=owner,proto3" json:"owner,omitempty"`                                                                       // Caption: Owner;
	Port             int32                       `protobuf:"varint,18,opt,name=port,proto3" json:"port,omitempty"`                                                                        // Caption: Port;
	ProxyEndpoint    *NetworkProxy               `protobuf:"bytes,19,opt,name=proxy_endpoint,json=proxyEndpoint,proto3" json:"proxy_endpoint,omitempty"`                                  // Caption: Proxy Endpoint;
	SubnetUid        string                      `protobuf:"bytes,20,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                                              // Caption: Subnet UID;
	SvcName          string                      `protobuf:"bytes,21,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                                                    // Caption: Service Name;
	Type             string                      `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`                                                                         // Caption: Type;
	TypeId           enums.NETWORK_PROXY_TYPE_ID `protobuf:"varint,23,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.NETWORK_PROXY_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid              string                      `protobuf:"bytes,24,opt,name=uid,proto3" json:"uid,omitempty"`                                                                           // Caption: Unique ID;
	VlanUid          string                      `protobuf:"bytes,25,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                                                    // Caption: VLAN;
	VpcUid           string                      `protobuf:"bytes,26,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                                                       // Caption: VPC UID;
	Zone             string                      `protobuf:"bytes,27,opt,name=zone,proto3" json:"zone,omitempty"`                                                                         // Caption: Network Zone;
}

func (x *NetworkProxy) Reset() {
	*x = NetworkProxy{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProxy) ProtoMessage() {}

func (x *NetworkProxy) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProxy.ProtoReflect.Descriptor instead.
func (*NetworkProxy) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{74}
}

func (x *NetworkProxy) GetAgentList() []*Agent {
	if x != nil {
		return x.AgentList
	}
	return nil
}

func (x *NetworkProxy) GetAutonomousSystem() *AutonomousSystem {
	if x != nil {
		return x.AutonomousSystem
	}
	return nil
}

func (x *NetworkProxy) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *NetworkProxy) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NetworkProxy) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkProxy) GetHwInfo() *DeviceHwInfo {
	if x != nil {
		return x.HwInfo
	}
	return nil
}

func (x *NetworkProxy) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *NetworkProxy) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkProxy) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *NetworkProxy) GetIntermediateIps() []string {
	if x != nil {
		return x.IntermediateIps
	}
	return nil
}

func (x *NetworkProxy) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkProxy) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkProxy) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetworkProxy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkProxy) GetNamespacePid() int32 {
	if x != nil {
		return x.NamespacePid
	}
	return 0
}

func (x *NetworkProxy) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *NetworkProxy) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NetworkProxy) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkProxy) GetProxyEndpoint() *NetworkProxy {
	if x != nil {
		return x.ProxyEndpoint
	}
	return nil
}

func (x *NetworkProxy) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *NetworkProxy) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *NetworkProxy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkProxy) GetTypeId() enums.NETWORK_PROXY_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.NETWORK_PROXY_TYPE_ID(0)
}

func (x *NetworkProxy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkProxy) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *NetworkProxy) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *NetworkProxy) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type NetworkTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes      int64 `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`                             // Caption: Total Bytes;
	BytesIn    int64 `protobuf:"varint,2,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`          // Caption: Bytes In;
	BytesOut   int64 `protobuf:"varint,3,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`       // Caption: Bytes Out;
	Chunks     int64 `protobuf:"varint,4,opt,name=chunks,proto3" json:"chunks,omitempty"`                           // Caption: Chunks;
	ChunksIn   int64 `protobuf:"varint,5,opt,name=chunks_in,json=chunksIn,proto3" json:"chunks_in,omitempty"`       // Caption: Chunks In;
	ChunksOut  int64 `protobuf:"varint,6,opt,name=chunks_out,json=chunksOut,proto3" json:"chunks_out,omitempty"`    // Caption: Chunks Out;
	Packets    int64 `protobuf:"varint,7,opt,name=packets,proto3" json:"packets,omitempty"`                         // Caption: Total Packets;
	PacketsIn  int64 `protobuf:"varint,8,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`    // Caption: Packets In;
	PacketsOut int64 `protobuf:"varint,9,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"` // Caption: Packets Out;
}

func (x *NetworkTraffic) Reset() {
	*x = NetworkTraffic{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTraffic) ProtoMessage() {}

func (x *NetworkTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTraffic.ProtoReflect.Descriptor instead.
func (*NetworkTraffic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{75}
}

func (x *NetworkTraffic) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NetworkTraffic) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *NetworkTraffic) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *NetworkTraffic) GetChunks() int64 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *NetworkTraffic) GetChunksIn() int64 {
	if x != nil {
		return x.ChunksIn
	}
	return 0
}

func (x *NetworkTraffic) GetChunksOut() int64 {
	if x != nil {
		return x.ChunksOut
	}
	return 0
}

func (x *NetworkTraffic) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *NetworkTraffic) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *NetworkTraffic) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

type Observable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                      // Caption: Name;
	Reputation *Reputation              `protobuf:"bytes,2,opt,name=reputation,proto3" json:"reputation,omitempty"`                                                          // Caption: Reputation Scores;
	Type       string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                      // Caption: Type;
	TypeId     enums.OBSERVABLE_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.OBSERVABLE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Value      string                   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                                                    // Caption: Value;
}

func (x *Observable) Reset() {
	*x = Observable{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observable) ProtoMessage() {}

func (x *Observable) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observable.ProtoReflect.Descriptor instead.
func (*Observable) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{76}
}

func (x *Observable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Observable) GetReputation() *Reputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *Observable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Observable) GetTypeId() enums.OBSERVABLE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.OBSERVABLE_TYPE_ID(0)
}

func (x *Observable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	OuName string `protobuf:"bytes,2,opt,name=ou_name,json=ouName,proto3" json:"ou_name,omitempty"` // Caption: Org Unit Name;
	OuUid  string `protobuf:"bytes,3,opt,name=ou_uid,json=ouUid,proto3" json:"ou_uid,omitempty"`    // Caption: Org Unit ID;
	Uid    string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{77}
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *Organization) GetOuUid() string {
	if x != nil {
		return x.OuUid
	}
	return ""
}

func (x *Organization) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Os struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build   string           `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`                                                             // Caption: OS Build;
	Country string           `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`                                                         // Caption: Country;
	CpeName string           `protobuf:"bytes,3,opt,name=cpe_name,json=cpeName,proto3" json:"cpe_name,omitempty"`                                          // Caption: The product CPE identifier;
	CpuBits int32            `protobuf:"varint,4,opt,name=cpu_bits,json=cpuBits,proto3" json:"cpu_bits,omitempty"`                                         // Caption: CPU Bits;
	Edition string           `protobuf:"bytes,5,opt,name=edition,proto3" json:"edition,omitempty"`                                                         // Caption: OS Edition;
	Lang    string           `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`                                                               // Caption: Language;
	Name    string           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                               // Caption: Name;
	SpName  string           `protobuf:"bytes,8,opt,name=sp_name,json=spName,proto3" json:"sp_name,omitempty"`                                             // Caption: OS Service Pack;
	SpVer   int32            `protobuf:"varint,9,opt,name=sp_ver,json=spVer,proto3" json:"sp_ver,omitempty"`                                               // Caption: OS Service Pack Version;
	Type    string           `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`                                                              // Caption: Type;
	TypeId  enums.OS_TYPE_ID `protobuf:"varint,11,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.OS_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Version string           `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`                                                        // Caption: Version;
}

func (x *Os) Reset() {
	*x = Os{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Os) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Os) ProtoMessage() {}

func (x *Os) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Os.ProtoReflect.Descriptor instead.
func (*Os) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{78}
}

func (x *Os) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Os) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Os) GetCpeName() string {
	if x != nil {
		return x.CpeName
	}
	return ""
}

func (x *Os) GetCpuBits() int32 {
	if x != nil {
		return x.CpuBits
	}
	return 0
}

func (x *Os) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Os) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Os) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Os) GetSpName() string {
	if x != nil {
		return x.SpName
	}
	return ""
}

func (x *Os) GetSpVer() int32 {
	if x != nil {
		return x.SpVer
	}
	return 0
}

func (x *Os) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Os) GetTypeId() enums.OS_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.OS_TYPE_ID(0)
}

func (x *Os) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Osint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers          []*DnsAnswer              `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`                                                                                   // Caption: DNS Answer;
	Attacks          []*Attack                 `protobuf:"bytes,2,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                   // Caption: MITRE ATT&CK® Details;
	AutonomousSystem *AutonomousSystem         `protobuf:"bytes,3,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`                                         // Caption: Autonomous System;
	Comment          string                    `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                   // Caption: Comment;
	Confidence       string                    `protobuf:"bytes,5,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                             // Caption: Confidence;
	ConfidenceId     enums.OSINT_CONFIDENCE_ID `protobuf:"varint,6,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_3_0.objects.enums.OSINT_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	Email            *Email                    `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`                                                                                       // Caption: Email;
	EmailAuth        *EmailAuth                `protobuf:"bytes,8,opt,name=email_auth,json=emailAuth,proto3" json:"email_auth,omitempty"`                                                              // Caption: Email Authentication;
	KillChain        []*KillChainPhase         `protobuf:"bytes,9,rep,name=kill_chain,json=killChain,proto3" json:"kill_chain,omitempty"`                                                              // Caption: Kill Chain;
	Location         *Location                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`                                                                                // Caption: Geo Location;
	Name             string                    `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`                                                                                        // Caption: Name;
	Signatures       []*DigitalSignature       `protobuf:"bytes,12,rep,name=signatures,proto3" json:"signatures,omitempty"`                                                                            // Caption: Digital Signatures;
	SrcUrl           string                    `protobuf:"bytes,13,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                                                                      // Caption: Source URL;
	Subdomains       []string                  `protobuf:"bytes,14,rep,name=subdomains,proto3" json:"subdomains,omitempty"`                                                                            // Caption: Subdomains;
	Tlp              string                    `protobuf:"bytes,15,opt,name=tlp,proto3" json:"tlp,omitempty"`                                                                                          // Caption: Traffic Light Protocol; AllowedValues: GREEN, RED, AMBER, AMBER STRICT, CLEAR;
	Type             string                    `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`                                                                                        // Caption: Type;
	TypeId           enums.OSINT_TYPE_ID       `protobuf:"varint,17,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.OSINT_TYPE_ID" json:"type_id,omitempty"`                        // Caption: Type ID;
	Uid              string                    `protobuf:"bytes,18,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                          // Caption: Unique ID;
	Value            string                    `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`                                                                                      // Caption: Value;
	VendorName       string                    `protobuf:"bytes,20,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                                          // Caption: Vendor Name;
	Vulnerabilities  []*Vulnerability          `protobuf:"bytes,21,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                                                                  // Caption: Vulnerabilities;
	Whois            *Whois                    `protobuf:"bytes,22,opt,name=whois,proto3" json:"whois,omitempty"`                                                                                      // Caption: WHOIS;
}

func (x *Osint) Reset() {
	*x = Osint{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Osint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Osint) ProtoMessage() {}

func (x *Osint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Osint.ProtoReflect.Descriptor instead.
func (*Osint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{79}
}

func (x *Osint) GetAnswers() []*DnsAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *Osint) GetAttacks() []*Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *Osint) GetAutonomousSystem() *AutonomousSystem {
	if x != nil {
		return x.AutonomousSystem
	}
	return nil
}

func (x *Osint) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Osint) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *Osint) GetConfidenceId() enums.OSINT_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.OSINT_CONFIDENCE_ID(0)
}

func (x *Osint) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Osint) GetEmailAuth() *EmailAuth {
	if x != nil {
		return x.EmailAuth
	}
	return nil
}

func (x *Osint) GetKillChain() []*KillChainPhase {
	if x != nil {
		return x.KillChain
	}
	return nil
}

func (x *Osint) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Osint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Osint) GetSignatures() []*DigitalSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Osint) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Osint) GetSubdomains() []string {
	if x != nil {
		return x.Subdomains
	}
	return nil
}

func (x *Osint) GetTlp() string {
	if x != nil {
		return x.Tlp
	}
	return ""
}

func (x *Osint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Osint) GetTypeId() enums.OSINT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.OSINT_TYPE_ID(0)
}

func (x *Osint) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Osint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Osint) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Osint) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *Osint) GetWhois() *Whois {
	if x != nil {
		return x.Whois
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture string                `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`                                                    // Caption: Architecture;
	CpeName      string                `protobuf:"bytes,2,opt,name=cpe_name,json=cpeName,proto3" json:"cpe_name,omitempty"`                                               // Caption: The product CPE identifier;
	Epoch        int32                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`                                                                 // Caption: Epoch;
	Hash         *Fingerprint          `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`                                                                    // Caption: Hash;
	License      string                `protobuf:"bytes,5,opt,name=license,proto3" json:"license,omitempty"`                                                              // Caption: Software License;
	Name         string                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                    // Caption: Name;
	Purl         string                `protobuf:"bytes,7,opt,name=purl,proto3" json:"purl,omitempty"`                                                                    // Caption: Package URL;
	Release      string                `protobuf:"bytes,8,opt,name=release,proto3" json:"release,omitempty"`                                                              // Caption: Software Release Details;
	Type         string                `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                                                                    // Caption: Type;
	TypeId       enums.PACKAGE_TYPE_ID `protobuf:"varint,10,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.PACKAGE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	VendorName   string                `protobuf:"bytes,11,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                     // Caption: Vendor Name;
	Version      string                `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`                                                             // Caption: Version;
}

func (x *Package) Reset() {
	*x = Package{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{80}
}

func (x *Package) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Package) GetCpeName() string {
	if x != nil {
		return x.CpeName
	}
	return ""
}

func (x *Package) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Package) GetHash() *Fingerprint {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Package) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *Package) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Package) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Package) GetTypeId() enums.PACKAGE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.PACKAGE_TYPE_ID(0)
}

func (x *Package) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PeripheralDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class        string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`                                   // Caption: Class;
	Model        string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`                                   // Caption: Model;
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                     // Caption: Name;
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // Caption: Serial Number;
	Uid          string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                                       // Caption: Unique ID;
	VendorName   string `protobuf:"bytes,6,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`       // Caption: Vendor Name;
}

func (x *PeripheralDevice) Reset() {
	*x = PeripheralDevice{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeripheralDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeripheralDevice) ProtoMessage() {}

func (x *PeripheralDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeripheralDevice.ProtoReflect.Descriptor instead.
func (*PeripheralDevice) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{81}
}

func (x *PeripheralDevice) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *PeripheralDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PeripheralDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PeripheralDevice) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PeripheralDevice) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PeripheralDevice) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc      string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`                             // Caption: Description;
	Group     *Group `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`                           // Caption: Group;
	IsApplied bool   `protobuf:"varint,3,opt,name=is_applied,json=isApplied,proto3" json:"is_applied,omitempty"` // Caption: Applied;
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                             // Caption: Name;
	Uid       string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                               // Caption: Unique ID;
	Version   string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                       // Caption: Version;
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{82}
}

func (x *Policy) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Policy) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Policy) GetIsApplied() bool {
	if x != nil {
		return x.IsApplied
	}
	return false
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Policy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auid           int32                      `protobuf:"varint,1,opt,name=auid,proto3" json:"auid,omitempty"`                                                                                       // Caption: Audit User ID; Profile: linux/linux_users;
	CmdLine        string                     `protobuf:"bytes,2,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`                                                                   // Caption: Command Line;
	Container      *Container                 `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`                                                                              // Caption: Container; Profile: container;
	CreatedTime    int64                      `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                      // Caption: Created Time;
	Egid           int32                      `protobuf:"varint,5,opt,name=egid,proto3" json:"egid,omitempty"`                                                                                       // Caption: Effective Group ID; Profile: linux/linux_users;
	Euid           int32                      `protobuf:"varint,6,opt,name=euid,proto3" json:"euid,omitempty"`                                                                                       // Caption: Effective User ID; Profile: linux/linux_users;
	File           *File                      `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                                                                                        // Caption: File;
	Group          *Group                     `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`                                                                                      // Profile: linux/linux_users; Caption: Group;
	Integrity      string                     `protobuf:"bytes,9,opt,name=integrity,proto3" json:"integrity,omitempty"`                                                                              // Caption: Integrity;
	IntegrityId    enums.PROCESS_INTEGRITY_ID `protobuf:"varint,10,opt,name=integrity_id,json=integrityId,proto3,enum=ocsf.v1_3_0.objects.enums.PROCESS_INTEGRITY_ID" json:"integrity_id,omitempty"` // Caption: Integrity Level;
	Lineage        []string                   `protobuf:"bytes,11,rep,name=lineage,proto3" json:"lineage,omitempty"`                                                                                 // Caption: Lineage;
	LoadedModules  []string                   `protobuf:"bytes,12,rep,name=loaded_modules,json=loadedModules,proto3" json:"loaded_modules,omitempty"`                                                // Caption: Loaded Modules;
	Name           string                     `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`                                                                                       // Caption: Name;
	NamespacePid   int32                      `protobuf:"varint,14,opt,name=namespace_pid,json=namespacePid,proto3" json:"namespace_pid,omitempty"`                                                  // Caption: Namespace PID; Profile: container;
	ParentProcess  *Process                   `protobuf:"bytes,15,opt,name=parent_process,json=parentProcess,proto3" json:"parent_process,omitempty"`                                                // Caption: Parent Process;
	Pid            int32                      `protobuf:"varint,16,opt,name=pid,proto3" json:"pid,omitempty"`                                                                                        // Caption: Process ID;
	Sandbox        string                     `protobuf:"bytes,17,opt,name=sandbox,proto3" json:"sandbox,omitempty"`                                                                                 // Caption: Sandbox;
	Session        *Session                   `protobuf:"bytes,18,opt,name=session,proto3" json:"session,omitempty"`                                                                                 // Caption: Session;
	TerminatedTime int64                      `protobuf:"varint,19,opt,name=terminated_time,json=terminatedTime,proto3" json:"terminated_time,omitempty"`                                            // Caption: Terminated Time;
	Tid            int32                      `protobuf:"varint,20,opt,name=tid,proto3" json:"tid,omitempty"`                                                                                        // Caption: Thread ID;
	Uid            string                     `protobuf:"bytes,21,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                         // Caption: Unique ID;
	User           *User                      `protobuf:"bytes,22,opt,name=user,proto3" json:"user,omitempty"`                                                                                       // Caption: User;
	Xattributes    *structpb.Struct           `protobuf:"bytes,23,opt,name=xattributes,proto3" json:"xattributes,omitempty"`                                                                         // Caption: Extended Attributes;
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{83}
}

func (x *Process) GetAuid() int32 {
	if x != nil {
		return x.Auid
	}
	return 0
}

func (x *Process) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *Process) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Process) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Process) GetEgid() int32 {
	if x != nil {
		return x.Egid
	}
	return 0
}

func (x *Process) GetEuid() int32 {
	if x != nil {
		return x.Euid
	}
	return 0
}

func (x *Process) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Process) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Process) GetIntegrity() string {
	if x != nil {
		return x.Integrity
	}
	return ""
}

func (x *Process) GetIntegrityId() enums.PROCESS_INTEGRITY_ID {
	if x != nil {
		return x.IntegrityId
	}
	return enums.PROCESS_INTEGRITY_ID(0)
}

func (x *Process) GetLineage() []string {
	if x != nil {
		return x.Lineage
	}
	return nil
}

func (x *Process) GetLoadedModules() []string {
	if x != nil {
		return x.LoadedModules
	}
	return nil
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetNamespacePid() int32 {
	if x != nil {
		return x.NamespacePid
	}
	return 0
}

func (x *Process) GetParentProcess() *Process {
	if x != nil {
		return x.ParentProcess
	}
	return nil
}

func (x *Process) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetSandbox() string {
	if x != nil {
		return x.Sandbox
	}
	return ""
}

func (x *Process) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Process) GetTerminatedTime() int64 {
	if x != nil {
		return x.TerminatedTime
	}
	return 0
}

func (x *Process) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Process) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Process) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Process) GetXattributes() *structpb.Struct {
	if x != nil {
		return x.Xattributes
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpeName            string              `protobuf:"bytes,1,opt,name=cpe_name,json=cpeName,proto3" json:"cpe_name,omitempty"`                                  // Caption: The product CPE identifier;
	DataClassification *DataClassification `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"` // Caption: Data Classification; Profile: data_classification;
	Feature            *Feature            `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`                                                 // Caption: Feature;
	Lang               string              `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`                                                       // Caption: Language;
	Name               string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                       // Caption: Name;
	Path               string              `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`                                                       // Caption: Path;
	Uid                string              `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                         // Caption: Unique ID;
	UrlString          string              `protobuf:"bytes,8,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"`                            // Caption: URL String;
	VendorName         string              `protobuf:"bytes,9,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                         // Caption: Vendor Name;
	Version            string              `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`                                                // Caption: Version;
}

func (x *Product) Reset() {
	*x = Product{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{84}
}

func (x *Product) GetCpeName() string {
	if x != nil {
		return x.CpeName
	}
	return ""
}

func (x *Product) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Product) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *Product) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Product) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Product) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

func (x *Product) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes       int64            `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`                               // Caption: Total Bytes;
	Data        *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                  // Caption: Data;
	Name        string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                  // Caption: Name;
	QueryString string           `protobuf:"bytes,4,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"` // Caption: HTTP Query String;
	QueryTime   int64            `protobuf:"varint,5,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`      // Caption: Query Time;
	Uid         string           `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`                                    // Caption: Unique ID;
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{85}
}

func (x *QueryInfo) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *QueryInfo) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryInfo) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *QueryInfo) GetQueryTime() int64 {
	if x != nil {
		return x.QueryTime
	}
	return 0
}

func (x *QueryInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RegKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSystem           bool   `protobuf:"varint,1,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                              // Caption: System;
	ModifiedTime       int64  `protobuf:"varint,2,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                  // Caption: Modified Time;
	Path               string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                                       // Caption: Path;
	SecurityDescriptor string `protobuf:"bytes,4,opt,name=security_descriptor,json=securityDescriptor,proto3" json:"security_descriptor,omitempty"` // Caption: Security Descriptor;
}

func (x *RegKey) Reset() {
	*x = RegKey{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegKey) ProtoMessage() {}

func (x *RegKey) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegKey.ProtoReflect.Descriptor instead.
func (*RegKey) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{86}
}

func (x *RegKey) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *RegKey) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *RegKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegKey) GetSecurityDescriptor() string {
	if x != nil {
		return x.SecurityDescriptor
	}
	return ""
}

type RegValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *structpb.Struct        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                                     // Caption: Data;
	IsDefault    bool                    `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                                         // Caption: Default Value;
	IsSystem     bool                    `protobuf:"varint,3,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                            // Caption: System;
	ModifiedTime int64                   `protobuf:"varint,4,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                // Caption: Modified Time;
	Name         string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                                     // Caption: Name;
	Path         string                  `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`                                                                     // Caption: Path;
	Type         string                  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                                                     // Caption: Type;
	TypeId       enums.REG_VALUE_TYPE_ID `protobuf:"varint,8,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.REG_VALUE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
}

func (x *RegValue) Reset() {
	*x = RegValue{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegValue) ProtoMessage() {}

func (x *RegValue) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegValue.ProtoReflect.Descriptor instead.
func (*RegValue) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{87}
}

func (x *RegValue) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RegValue) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *RegValue) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *RegValue) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *RegValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegValue) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegValue) GetTypeId() enums.REG_VALUE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.REG_VALUE_TYPE_ID(0)
}

type RelatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacks     []*Attack         `protobuf:"bytes,1,rep,name=attacks,proto3" json:"attacks,omitempty"`                         // Caption: MITRE ATT&CK® Details;
	KillChain   []*KillChainPhase `protobuf:"bytes,2,rep,name=kill_chain,json=killChain,proto3" json:"kill_chain,omitempty"`    // Caption: Kill Chain;
	Observables []*Observable     `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                 // Caption: Observables;
	ProductUid  string            `protobuf:"bytes,4,opt,name=product_uid,json=productUid,proto3" json:"product_uid,omitempty"` // Caption: Product Identifier;
	Type        string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                               // Caption: Type;
	TypeName    string            `protobuf:"bytes,6,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`       // Caption: Type Name;
	TypeUid     int64             `protobuf:"varint,7,opt,name=type_uid,json=typeUid,proto3" json:"type_uid,omitempty"`         // Caption: Type ID;
	Uid         string            `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`                                 // Caption: Unique ID;
}

func (x *RelatedEvent) Reset() {
	*x = RelatedEvent{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedEvent) ProtoMessage() {}

func (x *RelatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedEvent.ProtoReflect.Descriptor instead.
func (*RelatedEvent) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{88}
}

func (x *RelatedEvent) GetAttacks() []*Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *RelatedEvent) GetKillChain() []*KillChainPhase {
	if x != nil {
		return x.KillChain
	}
	return nil
}

func (x *RelatedEvent) GetObservables() []*Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RelatedEvent) GetProductUid() string {
	if x != nil {
		return x.ProductUid
	}
	return ""
}

func (x *RelatedEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelatedEvent) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RelatedEvent) GetTypeUid() int64 {
	if x != nil {
		return x.TypeUid
	}
	return 0
}

func (x *RelatedEvent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc          string       `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`                                          // Caption: Description;
	KbArticleList []*KbArticle `protobuf:"bytes,2,rep,name=kb_article_list,json=kbArticleList,proto3" json:"kb_article_list,omitempty"` // Caption: Knowledgebase Articles;
	KbArticles    []string     `protobuf:"bytes,3,rep,name=kb_articles,json=kbArticles,proto3" json:"kb_articles,omitempty"`            // Caption: Knowledgebase Articles;
	References    []string     `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`                              // Caption: References;
}

func (x *Remediation) Reset() {
	*x = Remediation{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Remediation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remediation) ProtoMessage() {}

func (x *Remediation) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remediation.ProtoReflect.Descriptor instead.
func (*Remediation) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{89}
}

func (x *Remediation) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Remediation) GetKbArticleList() []*KbArticle {
	if x != nil {
		return x.KbArticleList
	}
	return nil
}

func (x *Remediation) GetKbArticles() []string {
	if x != nil {
		return x.KbArticles
	}
	return nil
}

func (x *Remediation) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

type Reputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore float32                   `protobuf:"fixed32,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`                                             // Caption: Base Score;
	Provider  string                    `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`                                                                  // Caption: Provider;
	Score     string                    `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`                                                                        // Caption: Reputation Score;
	ScoreId   enums.REPUTATION_SCORE_ID `protobuf:"varint,4,opt,name=score_id,json=scoreId,proto3,enum=ocsf.v1_3_0.objects.enums.REPUTATION_SCORE_ID" json:"score_id,omitempty"` // Caption: Reputation Score ID;
}

func (x *Reputation) Reset() {
	*x = Reputation{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reputation) ProtoMessage() {}

func (x *Reputation) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reputation.ProtoReflect.Descriptor instead.
func (*Reputation) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{90}
}

func (x *Reputation) GetBaseScore() float32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Reputation) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Reputation) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Reputation) GetScoreId() enums.REPUTATION_SCORE_ID {
	if x != nil {
		return x.ScoreId
	}
	return enums.REPUTATION_SCORE_ID(0)
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*Container     `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"` // Caption: Containers;
	Data       *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`             // Caption: Data;
	Flags      []string         `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`           // Caption: Flags;
	Uid        string           `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`               // Caption: Unique ID;
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{91}
}

func (x *Request) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *Request) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Request) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Request) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ResourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentList          []*Agent            `protobuf:"bytes,1,rep,name=agent_list,json=agentList,proto3" json:"agent_list,omitempty"`                            // Caption: Agent List;
	CloudPartition     string              `protobuf:"bytes,2,opt,name=cloud_partition,json=cloudPartition,proto3" json:"cloud_partition,omitempty"`             // Caption: Cloud Partition; Profile: cloud;
	Criticality        string              `protobuf:"bytes,3,opt,name=criticality,proto3" json:"criticality,omitempty"`                                         // Caption: Criticality;
	Data               *structpb.Struct    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                       // Caption: Data;
	DataClassification *DataClassification `protobuf:"bytes,5,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"` // Caption: Data Classification; Profile: data_classification;
	Group              *Group              `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty"`                                                     // Caption: Group;
	Labels             []string            `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`                                                   // Caption: Labels;
	Name               string              `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                                       // Caption: Name;
	Namespace          string              `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`                                             // Caption: Namespace;
	Owner              *User               `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`                                                    // Caption: Owner;
	Region             string              `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`                                                  // Caption: Region; Profile: cloud;
	Type               string              `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`                                                      // Caption: Type;
	Uid                string              `protobuf:"bytes,13,opt,name=uid,proto3" json:"uid,omitempty"`                                                        // Caption: Unique ID;
	Version            string              `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`                                                // Caption: Version;
}

func (x *ResourceDetails) Reset() {
	*x = ResourceDetails{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDetails) ProtoMessage() {}

func (x *ResourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDetails.ProtoReflect.Descriptor instead.
func (*ResourceDetails) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{92}
}

func (x *ResourceDetails) GetAgentList() []*Agent {
	if x != nil {
		return x.AgentList
	}
	return nil
}

func (x *ResourceDetails) GetCloudPartition() string {
	if x != nil {
		return x.CloudPartition
	}
	return ""
}

func (x *ResourceDetails) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *ResourceDetails) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResourceDetails) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *ResourceDetails) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ResourceDetails) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceDetails) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResourceDetails) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ResourceDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ResourceDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceDetails) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ResourceDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                    // Caption: Response Code;
	Containers   []*Container     `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`                         // Caption: Containers;
	Data         *structpb.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                     // Caption: Data;
	Error        string           `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                   // Caption: Error Code;
	ErrorMessage string           `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Caption: Error Message;
	Flags        []string         `protobuf:"bytes,6,rep,name=flags,proto3" json:"flags,omitempty"`                                   // Caption: Flags;
	Message      string           `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                               // Caption: Message;
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{93}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *Response) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Response) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RpcInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckReason int32  `protobuf:"varint,1,opt,name=ack_reason,json=ackReason,proto3" json:"ack_reason,omitempty"` // Caption: Acknowledgement Reason;
	AckResult int32  `protobuf:"varint,2,opt,name=ack_result,json=ackResult,proto3" json:"ack_result,omitempty"` // Caption: Acknowledgement Result;
	Uuid      string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                             // Caption: UUID;
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                       // Caption: Version;
}

func (x *RpcInterface) Reset() {
	*x = RpcInterface{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcInterface) ProtoMessage() {}

func (x *RpcInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcInterface.ProtoReflect.Descriptor instead.
func (*RpcInterface) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{94}
}

func (x *RpcInterface) GetAckReason() int32 {
	if x != nil {
		return x.AckReason
	}
	return 0
}

func (x *RpcInterface) GetAckResult() int32 {
	if x != nil {
		return x.AckResult
	}
	return 0
}

func (x *RpcInterface) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RpcInterface) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // Caption: Category;
	Desc     string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`         // Caption: Description;
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`         // Caption: Name;
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`         // Caption: Type;
	Uid      string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`           // Caption: Unique ID;
	Version  string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`   // Caption: Version;
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{95}
}

func (x *Rule) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Rule) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Rule) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Rule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type San struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // Caption: Type;
}

func (x *San) Reset() {
	*x = San{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *San) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*San) ProtoMessage() {}

func (x *San) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use San.ProtoReflect.Descriptor instead.
func (*San) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{96}
}

func (x *San) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *San) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Scan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                // Caption: Name;
	Type   string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                                // Caption: Type;
	TypeId enums.SCAN_TYPE_ID `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.SCAN_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid    string             `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                                                                  // Caption: Unique ID;
}

func (x *Scan) Reset() {
	*x = Scan{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scan) ProtoMessage() {}

func (x *Scan) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scan.ProtoReflect.Descriptor instead.
func (*Scan) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{97}
}

func (x *Scan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Scan) GetTypeId() enums.SCAN_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.SCAN_TYPE_ID(0)
}

func (x *Scan) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type SecurityState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   string                        `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`                                                                            // Caption: State;
	StateId enums.SECURITY_STATE_STATE_ID `protobuf:"varint,2,opt,name=state_id,json=stateId,proto3,enum=ocsf.v1_3_0.objects.enums.SECURITY_STATE_STATE_ID" json:"state_id,omitempty"` // Caption: State ID;
}

func (x *SecurityState) Reset() {
	*x = SecurityState{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityState) ProtoMessage() {}

func (x *SecurityState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityState.ProtoReflect.Descriptor instead.
func (*SecurityState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{98}
}

func (x *SecurityState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SecurityState) GetStateId() enums.SECURITY_STATE_STATE_ID {
	if x != nil {
		return x.StateId
	}
	return enums.SECURITY_STATE_STATE_ID(0)
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels  []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`   // Caption: Labels;
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{99}
}

func (x *Service) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Service) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                                              // Caption: Count;
	CreatedTime      int64  `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`               // Caption: Created Time;
	CredentialUid    string `protobuf:"bytes,3,opt,name=credential_uid,json=credentialUid,proto3" json:"credential_uid,omitempty"`          // Caption: User Credential ID;
	ExpirationReason string `protobuf:"bytes,4,opt,name=expiration_reason,json=expirationReason,proto3" json:"expiration_reason,omitempty"` // Caption: Expiration Reason;
	ExpirationTime   int64  `protobuf:"varint,5,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`      // Caption: Expiration Time;
	IsMfa            bool   `protobuf:"varint,6,opt,name=is_mfa,json=isMfa,proto3" json:"is_mfa,omitempty"`                                 // Caption: Multi Factor Authentication;
	IsRemote         bool   `protobuf:"varint,7,opt,name=is_remote,json=isRemote,proto3" json:"is_remote,omitempty"`                        // Caption: Remote;
	IsVpn            bool   `protobuf:"varint,8,opt,name=is_vpn,json=isVpn,proto3" json:"is_vpn,omitempty"`                                 // Caption: VPN Session;
	Issuer           string `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`                                             // Caption: Issuer Details;
	Terminal         string `protobuf:"bytes,10,opt,name=terminal,proto3" json:"terminal,omitempty"`                                        // Caption: Terminal;
	Uid              string `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                                  // Caption: Unique ID;
	UidAlt           string `protobuf:"bytes,12,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                              // Caption: Alternate ID;
	Uuid             string `protobuf:"bytes,13,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                // Caption: UUID;
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{100}
}

func (x *Session) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Session) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Session) GetCredentialUid() string {
	if x != nil {
		return x.CredentialUid
	}
	return ""
}

func (x *Session) GetExpirationReason() string {
	if x != nil {
		return x.ExpirationReason
	}
	return ""
}

func (x *Session) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *Session) GetIsMfa() bool {
	if x != nil {
		return x.IsMfa
	}
	return false
}

func (x *Session) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *Session) GetIsVpn() bool {
	if x != nil {
		return x.IsVpn
	}
	return false
}

func (x *Session) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Session) GetTerminal() string {
	if x != nil {
		return x.Terminal
	}
	return ""
}

func (x *Session) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Session) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

func (x *Session) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SubTechnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid    string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *SubTechnique) Reset() {
	*x = SubTechnique{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubTechnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTechnique) ProtoMessage() {}

func (x *SubTechnique) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTechnique.ProtoReflect.Descriptor instead.
func (*SubTechnique) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{101}
}

func (x *SubTechnique) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubTechnique) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *SubTechnique) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime  int64    `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`    // Caption: Created Time;
	Desc         string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`                                      // Caption: Description;
	Groups       []*Group `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`                                  // Caption: Groups;
	ModifiedTime int64    `protobuf:"varint,4,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"` // Caption: Modified Time;
	Name         string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                      // Caption: Name;
	Size         int64    `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                                     // Caption: Size;
	Uid          string   `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                        // Caption: Unique ID;
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{102}
}

func (x *Table) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Table) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Table) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Table) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Table) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Tactic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid    string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *Tactic) Reset() {
	*x = Tactic{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tactic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tactic) ProtoMessage() {}

func (x *Tactic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tactic.ProtoReflect.Descriptor instead.
func (*Tactic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{103}
}

func (x *Tactic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tactic) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Tactic) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Technique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	SrcUrl string `protobuf:"bytes,2,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"` // Caption: Source URL;
	Uid    string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *Technique) Reset() {
	*x = Technique{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Technique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Technique) ProtoMessage() {}

func (x *Technique) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Technique.ProtoReflect.Descriptor instead.
func (*Technique) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{104}
}

func (x *Technique) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Technique) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Technique) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcUrl string               `protobuf:"bytes,1,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                                                // Caption: Source URL;
	Title  string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                // Caption: Title;
	Type   string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                  // Caption: Type;
	TypeId enums.TICKET_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.TICKET_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid    string               `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                                                                    // Caption: Unique ID;
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{105}
}

func (x *Ticket) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ticket) GetTypeId() enums.TICKET_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.TICKET_TYPE_ID(0)
}

func (x *Ticket) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Timespan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration       int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`                                                            // Caption: Duration Milliseconds;
	DurationDays   int32                  `protobuf:"varint,2,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty"`                                // Caption: Duration Days;
	DurationHours  int32                  `protobuf:"varint,3,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`                             // Caption: Duration Hours;
	DurationMins   int32                  `protobuf:"varint,4,opt,name=duration_mins,json=durationMins,proto3" json:"duration_mins,omitempty"`                                // Caption: Duration Minutes;
	DurationMonths int32                  `protobuf:"varint,5,opt,name=duration_months,json=durationMonths,proto3" json:"duration_months,omitempty"`                          // Caption: Duration Months;
	DurationSecs   int32                  `protobuf:"varint,6,opt,name=duration_secs,json=durationSecs,proto3" json:"duration_secs,omitempty"`                                // Caption: Duration Seconds;
	DurationWeeks  int32                  `protobuf:"varint,7,opt,name=duration_weeks,json=durationWeeks,proto3" json:"duration_weeks,omitempty"`                             // Caption: Duration Weeks;
	DurationYears  int32                  `protobuf:"varint,8,opt,name=duration_years,json=durationYears,proto3" json:"duration_years,omitempty"`                             // Caption: Duration Years;
	Type           string                 `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                                                                     // Caption: Type;
	TypeId         enums.TIMESPAN_TYPE_ID `protobuf:"varint,10,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.TIMESPAN_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
}

func (x *Timespan) Reset() {
	*x = Timespan{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timespan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timespan) ProtoMessage() {}

func (x *Timespan) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timespan.ProtoReflect.Descriptor instead.
func (*Timespan) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{106}
}

func (x *Timespan) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Timespan) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Timespan) GetDurationHours() int32 {
	if x != nil {
		return x.DurationHours
	}
	return 0
}

func (x *Timespan) GetDurationMins() int32 {
	if x != nil {
		return x.DurationMins
	}
	return 0
}

func (x *Timespan) GetDurationMonths() int32 {
	if x != nil {
		return x.DurationMonths
	}
	return 0
}

func (x *Timespan) GetDurationSecs() int32 {
	if x != nil {
		return x.DurationSecs
	}
	return 0
}

func (x *Timespan) GetDurationWeeks() int32 {
	if x != nil {
		return x.DurationWeeks
	}
	return 0
}

func (x *Timespan) GetDurationYears() int32 {
	if x != nil {
		return x.DurationYears
	}
	return 0
}

func (x *Timespan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Timespan) GetTypeId() enums.TIMESPAN_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.TIMESPAN_TYPE_ID(0)
}

type Tls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert            int32           `protobuf:"varint,1,opt,name=alert,proto3" json:"alert,omitempty"`                                                 // Caption: Client TLS Alert;
	Certificate      *Certificate    `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`                                      // Caption: Certificate;
	CertificateChain []string        `protobuf:"bytes,3,rep,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`    // Caption: Certificate Chain;
	Cipher           string          `protobuf:"bytes,4,opt,name=cipher,proto3" json:"cipher,omitempty"`                                                // Caption: Cipher Suite;
	ClientCiphers    []string        `protobuf:"bytes,5,rep,name=client_ciphers,json=clientCiphers,proto3" json:"client_ciphers,omitempty"`             // Caption: Client Cipher Suites;
	ExtensionList    []*TlsExtension `protobuf:"bytes,6,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty"`             // Caption: Extension List;
	HandshakeDur     int32           `protobuf:"varint,7,opt,name=handshake_dur,json=handshakeDur,proto3" json:"handshake_dur,omitempty"`               // Caption: Handshake Duration;
	Ja3Hash          *Fingerprint    `protobuf:"bytes,8,opt,name=ja3_hash,json=ja3Hash,proto3" json:"ja3_hash,omitempty"`                               // Caption: JA3 Hash;
	Ja3SHash         *Fingerprint    `protobuf:"bytes,9,opt,name=ja3s_hash,json=ja3sHash,proto3" json:"ja3s_hash,omitempty"`                            // Caption: JA3S Hash;
	KeyLength        int32           `protobuf:"varint,10,opt,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`                       // Caption: Key Length;
	Sans             []*San          `protobuf:"bytes,11,rep,name=sans,proto3" json:"sans,omitempty"`                                                   // Caption: Subject Alternative Names;
	ServerCiphers    []string        `protobuf:"bytes,12,rep,name=server_ciphers,json=serverCiphers,proto3" json:"server_ciphers,omitempty"`            // Caption: Server Cipher Suites;
	Sni              string          `protobuf:"bytes,13,opt,name=sni,proto3" json:"sni,omitempty"`                                                     // Caption: Server Name Indication;
	TlsExtensionList []*TlsExtension `protobuf:"bytes,14,rep,name=tls_extension_list,json=tlsExtensionList,proto3" json:"tls_extension_list,omitempty"` // Caption: TLS Extension List;
	Version          string          `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`                                             // Caption: Version;
}

func (x *Tls) Reset() {
	*x = Tls{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tls) ProtoMessage() {}

func (x *Tls) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tls.ProtoReflect.Descriptor instead.
func (*Tls) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{107}
}

func (x *Tls) GetAlert() int32 {
	if x != nil {
		return x.Alert
	}
	return 0
}

func (x *Tls) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Tls) GetCertificateChain() []string {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

func (x *Tls) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *Tls) GetClientCiphers() []string {
	if x != nil {
		return x.ClientCiphers
	}
	return nil
}

func (x *Tls) GetExtensionList() []*TlsExtension {
	if x != nil {
		return x.ExtensionList
	}
	return nil
}

func (x *Tls) GetHandshakeDur() int32 {
	if x != nil {
		return x.HandshakeDur
	}
	return 0
}

func (x *Tls) GetJa3Hash() *Fingerprint {
	if x != nil {
		return x.Ja3Hash
	}
	return nil
}

func (x *Tls) GetJa3SHash() *Fingerprint {
	if x != nil {
		return x.Ja3SHash
	}
	return nil
}

func (x *Tls) GetKeyLength() int32 {
	if x != nil {
		return x.KeyLength
	}
	return 0
}

func (x *Tls) GetSans() []*San {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *Tls) GetServerCiphers() []string {
	if x != nil {
		return x.ServerCiphers
	}
	return nil
}

func (x *Tls) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *Tls) GetTlsExtensionList() []*TlsExtension {
	if x != nil {
		return x.TlsExtensionList
	}
	return nil
}

func (x *Tls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TlsExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *structpb.Struct            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                                         // Caption: Data;
	Type   string                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                                                         // Caption: Type;
	TypeId enums.TLS_EXTENSION_TYPE_ID `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.TLS_EXTENSION_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
}

func (x *TlsExtension) Reset() {
	*x = TlsExtension{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsExtension) ProtoMessage() {}

func (x *TlsExtension) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsExtension.ProtoReflect.Descriptor instead.
func (*TlsExtension) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{108}
}

func (x *TlsExtension) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TlsExtension) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TlsExtension) GetTypeId() enums.TLS_EXTENSION_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.TLS_EXTENSION_TYPE_ID(0)
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories   []string                 `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`                                                                              // Caption: Website Categorization;
	CategoryIds  []enums.URL_CATEGORY_IDS `protobuf:"varint,2,rep,packed,name=category_ids,json=categoryIds,proto3,enum=ocsf.v1_3_0.objects.enums.URL_CATEGORY_IDS" json:"category_ids,omitempty"` // Caption: Website Categorization IDs;
	Domain       string                   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`                                                                                      // Caption: Domain;
	Hostname     string                   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                                  // Caption: Hostname;
	Path         string                   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                                                                                          // Caption: Path;
	Port         int32                    `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`                                                                                         // Caption: Port;
	QueryString  string                   `protobuf:"bytes,7,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`                                                         // Caption: HTTP Query String;
	ResourceType string                   `protobuf:"bytes,8,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`                                                      // Caption: Resource Type;
	Scheme       string                   `protobuf:"bytes,9,opt,name=scheme,proto3" json:"scheme,omitempty"`                                                                                      // Caption: Scheme;
	Subdomain    string                   `protobuf:"bytes,10,opt,name=subdomain,proto3" json:"subdomain,omitempty"`                                                                               // Caption: Subdomain;
	UrlString    string                   `protobuf:"bytes,11,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"`                                                              // Caption: URL String;
}

func (x *Url) Reset() {
	*x = Url{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{109}
}

func (x *Url) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Url) GetCategoryIds() []enums.URL_CATEGORY_IDS {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *Url) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Url) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Url) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Url) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Url) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *Url) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Url) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Url) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *Url) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account       *Account                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                                                                  // Caption: Account;
	CredentialUid string                   `protobuf:"bytes,2,opt,name=credential_uid,json=credentialUid,proto3" json:"credential_uid,omitempty"`                                                 // Caption: User Credential ID;
	Domain        string                   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`                                                                                    // Caption: Domain;
	EmailAddr     string                   `protobuf:"bytes,4,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`                                                             // Caption: Email Address;
	FullName      string                   `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`                                                                // Caption: Full Name;
	Groups        []*Group                 `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`                                                                                    // Caption: Groups;
	LdapPerson    *LdapPerson              `protobuf:"bytes,7,opt,name=ldap_person,json=ldapPerson,proto3" json:"ldap_person,omitempty"`                                                          // Caption: LDAP Person;
	Name          string                   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                                                                                        // Caption: Name;
	Org           *Organization            `protobuf:"bytes,9,opt,name=org,proto3" json:"org,omitempty"`                                                                                          // Caption: Organization;
	RiskLevel     string                   `protobuf:"bytes,10,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                            // Caption: Risk Level;
	RiskLevelId   enums.USER_RISK_LEVEL_ID `protobuf:"varint,11,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_3_0.objects.enums.USER_RISK_LEVEL_ID" json:"risk_level_id,omitempty"` // Caption: Risk Level ID;
	RiskScore     int32                    `protobuf:"varint,12,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                           // Caption: Risk Score;
	Type          string                   `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`                                                                                       // Caption: Type;
	TypeId        enums.USER_TYPE_ID       `protobuf:"varint,14,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.USER_TYPE_ID" json:"type_id,omitempty"`                        // Caption: Type ID;
	Uid           string                   `protobuf:"bytes,15,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                         // Caption: Unique ID;
	UidAlt        string                   `protobuf:"bytes,16,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                                                                     // Caption: Alternate ID;
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{110}
}

func (x *User) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *User) GetCredentialUid() string {
	if x != nil {
		return x.CredentialUid
	}
	return ""
}

func (x *User) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *User) GetEmailAddr() string {
	if x != nil {
		return x.EmailAddr
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *User) GetLdapPerson() *LdapPerson {
	if x != nil {
		return x.LdapPerson
	}
	return nil
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *User) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *User) GetRiskLevelId() enums.USER_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.USER_RISK_LEVEL_ID(0)
}

func (x *User) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *User) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *User) GetTypeId() enums.USER_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.USER_TYPE_ID(0)
}

func (x *User) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *User) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedCode           []*AffectedCode    `protobuf:"bytes,1,rep,name=affected_code,json=affectedCode,proto3" json:"affected_code,omitempty"`                                // Caption: Affected Code;
	AffectedPackages       []*AffectedPackage `protobuf:"bytes,2,rep,name=affected_packages,json=affectedPackages,proto3" json:"affected_packages,omitempty"`                    // Caption: Affected Software Packages;
	Cve                    *Cve               `protobuf:"bytes,3,opt,name=cve,proto3" json:"cve,omitempty"`                                                                      // Caption: CVE;
	Cwe                    *Cwe               `protobuf:"bytes,4,opt,name=cwe,proto3" json:"cwe,omitempty"`                                                                      // Caption: CWE;
	Desc                   string             `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                                                                    // Caption: Description;
	FirstSeenTime          int64              `protobuf:"varint,6,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`                          // Caption: First Seen;
	FixAvailable           bool               `protobuf:"varint,7,opt,name=fix_available,json=fixAvailable,proto3" json:"fix_available,omitempty"`                               // Caption: Fix Availability;
	IsExploitAvailable     bool               `protobuf:"varint,8,opt,name=is_exploit_available,json=isExploitAvailable,proto3" json:"is_exploit_available,omitempty"`           // Caption: Exploit Availability;
	IsFixAvailable         bool               `protobuf:"varint,9,opt,name=is_fix_available,json=isFixAvailable,proto3" json:"is_fix_available,omitempty"`                       // Caption: Fix Availability;
	KbArticleList          []*KbArticle       `protobuf:"bytes,10,rep,name=kb_article_list,json=kbArticleList,proto3" json:"kb_article_list,omitempty"`                          // Caption: Knowledgebase Articles;
	KbArticles             []string           `protobuf:"bytes,11,rep,name=kb_articles,json=kbArticles,proto3" json:"kb_articles,omitempty"`                                     // Caption: Knowledgebase Articles;
	LastSeenTime           int64              `protobuf:"varint,12,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`                            // Caption: Last Seen;
	Packages               []*Package         `protobuf:"bytes,13,rep,name=packages,proto3" json:"packages,omitempty"`                                                           // Caption: Software Packages;
	References             []string           `protobuf:"bytes,14,rep,name=references,proto3" json:"references,omitempty"`                                                       // Caption: References;
	RelatedVulnerabilities []string           `protobuf:"bytes,15,rep,name=related_vulnerabilities,json=relatedVulnerabilities,proto3" json:"related_vulnerabilities,omitempty"` // Caption: Related Vulnerabilities;
	Remediation            *Remediation       `protobuf:"bytes,16,opt,name=remediation,proto3" json:"remediation,omitempty"`                                                     // Caption: Remediation Guidance;
	Severity               string             `protobuf:"bytes,17,opt,name=severity,proto3" json:"severity,omitempty"`                                                           // Caption: Severity;
	Title                  string             `protobuf:"bytes,18,opt,name=title,proto3" json:"title,omitempty"`                                                                 // Caption: Title;
	VendorName             string             `protobuf:"bytes,19,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                     // Caption: Vendor Name;
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{111}
}

func (x *Vulnerability) GetAffectedCode() []*AffectedCode {
	if x != nil {
		return x.AffectedCode
	}
	return nil
}

func (x *Vulnerability) GetAffectedPackages() []*AffectedPackage {
	if x != nil {
		return x.AffectedPackages
	}
	return nil
}

func (x *Vulnerability) GetCve() *Cve {
	if x != nil {
		return x.Cve
	}
	return nil
}

func (x *Vulnerability) GetCwe() *Cwe {
	if x != nil {
		return x.Cwe
	}
	return nil
}

func (x *Vulnerability) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Vulnerability) GetFirstSeenTime() int64 {
	if x != nil {
		return x.FirstSeenTime
	}
	return 0
}

func (x *Vulnerability) GetFixAvailable() bool {
	if x != nil {
		return x.FixAvailable
	}
	return false
}

func (x *Vulnerability) GetIsExploitAvailable() bool {
	if x != nil {
		return x.IsExploitAvailable
	}
	return false
}

func (x *Vulnerability) GetIsFixAvailable() bool {
	if x != nil {
		return x.IsFixAvailable
	}
	return false
}

func (x *Vulnerability) GetKbArticleList() []*KbArticle {
	if x != nil {
		return x.KbArticleList
	}
	return nil
}

func (x *Vulnerability) GetKbArticles() []string {
	if x != nil {
		return x.KbArticles
	}
	return nil
}

func (x *Vulnerability) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *Vulnerability) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *Vulnerability) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Vulnerability) GetRelatedVulnerabilities() []string {
	if x != nil {
		return x.RelatedVulnerabilities
	}
	return nil
}

func (x *Vulnerability) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *Vulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Vulnerability) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Vulnerability) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

type WebResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data               *structpb.Struct    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                       // Caption: Data;
	DataClassification *DataClassification `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"` // Caption: Data Classification; Profile: data_classification;
	Desc               string              `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                       // Caption: Description;
	Labels             []string            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`                                                   // Caption: Labels;
	Name               string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                       // Caption: Name;
	Type               string              `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                                       // Caption: Type;
	Uid                string              `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`                                                         // Caption: Unique ID;
	UrlString          string              `protobuf:"bytes,8,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"`                            // Caption: URL String;
}

func (x *WebResource) Reset() {
	*x = WebResource{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebResource) ProtoMessage() {}

func (x *WebResource) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebResource.ProtoReflect.Descriptor instead.
func (*WebResource) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{112}
}

func (x *WebResource) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebResource) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *WebResource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WebResource) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WebResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebResource) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WebResource) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

type Whois struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystem *AutonomousSystem            `protobuf:"bytes,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`                                                    // Caption: Autonomous System;
	CreatedTime      int64                        `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                                  // Caption: Created Time;
	DnssecStatus     string                       `protobuf:"bytes,3,opt,name=dnssec_status,json=dnssecStatus,proto3" json:"dnssec_status,omitempty"`                                                                // Caption: DNSSEC Status;
	DnssecStatusId   enums.WHOIS_DNSSEC_STATUS_ID `protobuf:"varint,4,opt,name=dnssec_status_id,json=dnssecStatusId,proto3,enum=ocsf.v1_3_0.objects.enums.WHOIS_DNSSEC_STATUS_ID" json:"dnssec_status_id,omitempty"` // Caption: DNSSEC Status ID;
	Domain           string                       `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`                                                                                                // Caption: Domain;
	DomainContacts   []*DomainContact             `protobuf:"bytes,6,rep,name=domain_contacts,json=domainContacts,proto3" json:"domain_contacts,omitempty"`                                                          // Caption: Domain Contacts;
	EmailAddr        string                       `protobuf:"bytes,7,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`                                                                         // Caption: Email Address;
	LastSeenTime     int64                        `protobuf:"varint,8,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`                                                             // Caption: Last Seen;
	NameServers      []string                     `protobuf:"bytes,9,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`                                                                   // Caption: Name Servers;
	PhoneNumber      string                       `protobuf:"bytes,10,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                                                                  // Caption: Phone Number;
	Registrar        string                       `protobuf:"bytes,11,opt,name=registrar,proto3" json:"registrar,omitempty"`                                                                                         // Caption: Domain Registrar;
	Status           string                       `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`                                                                                               // Caption: Status;
	Subdomains       []string                     `protobuf:"bytes,13,rep,name=subdomains,proto3" json:"subdomains,omitempty"`                                                                                       // Caption: Subdomains;
	Subnet           string                       `protobuf:"bytes,14,opt,name=subnet,proto3" json:"subnet,omitempty"`                                                                                               // Caption: Subnet;
}

func (x *Whois) Reset() {
	*x = Whois{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Whois) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whois) ProtoMessage() {}

func (x *Whois) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whois.ProtoReflect.Descriptor instead.
func (*Whois) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{113}
}

func (x *Whois) GetAutonomousSystem() *AutonomousSystem {
	if x != nil {
		return x.AutonomousSystem
	}
	return nil
}

func (x *Whois) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Whois) GetDnssecStatus() string {
	if x != nil {
		return x.DnssecStatus
	}
	return ""
}

func (x *Whois) GetDnssecStatusId() enums.WHOIS_DNSSEC_STATUS_ID {
	if x != nil {
		return x.DnssecStatusId
	}
	return enums.WHOIS_DNSSEC_STATUS_ID(0)
}

func (x *Whois) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Whois) GetDomainContacts() []*DomainContact {
	if x != nil {
		return x.DomainContacts
	}
	return nil
}

func (x *Whois) GetEmailAddr() string {
	if x != nil {
		return x.EmailAddr
	}
	return ""
}

func (x *Whois) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *Whois) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *Whois) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Whois) GetRegistrar() string {
	if x != nil {
		return x.Registrar
	}
	return ""
}

func (x *Whois) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Whois) GetSubdomains() []string {
	if x != nil {
		return x.Subdomains
	}
	return nil
}

func (x *Whois) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

type WinResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data               *structpb.Struct           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                                        // Caption: Data;
	DataClassification *DataClassification        `protobuf:"bytes,2,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`                  // Profile: data_classification; Caption: Data Classification;
	Details            string                     `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`                                                                  // Caption: Details;
	Labels             []string                   `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`                                                                    // Caption: Labels;
	Name               string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                                        // Caption: Name;
	SvcName            string                     `protobuf:"bytes,6,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                                                   // Caption: Service Name;
	Type               string                     `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                                                        // Caption: Type;
	TypeId             enums.WIN_RESOURCE_TYPE_ID `protobuf:"varint,8,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_3_0.objects.enums.WIN_RESOURCE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid                string                     `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`                                                                          // Caption: Unique ID;
}

func (x *WinResource) Reset() {
	*x = WinResource{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinResource) ProtoMessage() {}

func (x *WinResource) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinResource.ProtoReflect.Descriptor instead.
func (*WinResource) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{114}
}

func (x *WinResource) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WinResource) GetDataClassification() *DataClassification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *WinResource) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *WinResource) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WinResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinResource) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *WinResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WinResource) GetTypeId() enums.WIN_RESOURCE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.WIN_RESOURCE_TYPE_ID(0)
}

func (x *WinResource) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type WinService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdLine               string                                     `protobuf:"bytes,1,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`                                                                                                                    // Caption: Command Line;
	Labels                []string                                   `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`                                                                                                                                     // Caption: Labels;
	LoadOrderGroup        string                                     `protobuf:"bytes,3,opt,name=load_order_group,json=loadOrderGroup,proto3" json:"load_order_group,omitempty"`                                                                                             // Caption: Load Order Group;
	Name                  string                                     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                                         // Caption: Name;
	ServiceCategory       string                                     `protobuf:"bytes,5,opt,name=service_category,json=serviceCategory,proto3" json:"service_category,omitempty"`                                                                                            // Caption: Service Category;
	ServiceCategoryId     enums.WIN_SERVICE_SERVICE_CATEGORY_ID      `protobuf:"varint,6,opt,name=service_category_id,json=serviceCategoryId,proto3,enum=ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_CATEGORY_ID" json:"service_category_id,omitempty"`                    // Caption: Service Category ID;
	ServiceDependencies   []string                                   `protobuf:"bytes,7,rep,name=service_dependencies,json=serviceDependencies,proto3" json:"service_dependencies,omitempty"`                                                                                // Caption: Service Dependencies;
	ServiceErrorControl   string                                     `protobuf:"bytes,8,opt,name=service_error_control,json=serviceErrorControl,proto3" json:"service_error_control,omitempty"`                                                                              // Caption: Service Error Control;
	ServiceErrorControlId enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID `protobuf:"varint,9,opt,name=service_error_control_id,json=serviceErrorControlId,proto3,enum=ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID" json:"service_error_control_id,omitempty"` // Caption: Service Error Control ID;
	ServiceStartName      string                                     `protobuf:"bytes,10,opt,name=service_start_name,json=serviceStartName,proto3" json:"service_start_name,omitempty"`                                                                                      // Caption: Service Start Name;
	ServiceStartType      string                                     `protobuf:"bytes,11,opt,name=service_start_type,json=serviceStartType,proto3" json:"service_start_type,omitempty"`                                                                                      // Caption: Service Start Type;
	ServiceStartTypeId    enums.WIN_SERVICE_SERVICE_START_TYPE_ID    `protobuf:"varint,12,opt,name=service_start_type_id,json=serviceStartTypeId,proto3,enum=ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_START_TYPE_ID" json:"service_start_type_id,omitempty"`            // Caption: Service Start Type ID;
	ServiceType           string                                     `protobuf:"bytes,13,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`                                                                                                       // Caption: Service Type;
	ServiceTypeId         enums.WIN_SERVICE_SERVICE_TYPE_ID          `protobuf:"varint,14,opt,name=service_type_id,json=serviceTypeId,proto3,enum=ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_TYPE_ID" json:"service_type_id,omitempty"`                                   // Caption: Service Type ID;
	Uid                   string                                     `protobuf:"bytes,15,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                                          // Caption: Unique ID;
	Version               string                                     `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`                                                                                                                                  // Caption: Version;
}

func (x *WinService) Reset() {
	*x = WinService{}
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinService) ProtoMessage() {}

func (x *WinService) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_3_0_objects_objects_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinService.ProtoReflect.Descriptor instead.
func (*WinService) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP(), []int{115}
}

func (x *WinService) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *WinService) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WinService) GetLoadOrderGroup() string {
	if x != nil {
		return x.LoadOrderGroup
	}
	return ""
}

func (x *WinService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinService) GetServiceCategory() string {
	if x != nil {
		return x.ServiceCategory
	}
	return ""
}

func (x *WinService) GetServiceCategoryId() enums.WIN_SERVICE_SERVICE_CATEGORY_ID {
	if x != nil {
		return x.ServiceCategoryId
	}
	return enums.WIN_SERVICE_SERVICE_CATEGORY_ID(0)
}

func (x *WinService) GetServiceDependencies() []string {
	if x != nil {
		return x.ServiceDependencies
	}
	return nil
}

func (x *WinService) GetServiceErrorControl() string {
	if x != nil {
		return x.ServiceErrorControl
	}
	return ""
}

func (x *WinService) GetServiceErrorControlId() enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID {
	if x != nil {
		return x.ServiceErrorControlId
	}
	return enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID(0)
}

func (x *WinService) GetServiceStartName() string {
	if x != nil {
		return x.ServiceStartName
	}
	return ""
}

func (x *WinService) GetServiceStartType() string {
	if x != nil {
		return x.ServiceStartType
	}
	return ""
}

func (x *WinService) GetServiceStartTypeId() enums.WIN_SERVICE_SERVICE_START_TYPE_ID {
	if x != nil {
		return x.ServiceStartTypeId
	}
	return enums.WIN_SERVICE_SERVICE_START_TYPE_ID(0)
}

func (x *WinService) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *WinService) GetServiceTypeId() enums.WIN_SERVICE_SERVICE_TYPE_ID {
	if x != nil {
		return x.ServiceTypeId
	}
	return enums.WIN_SERVICE_SERVICE_TYPE_ID(0)
}

func (x *WinService) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WinService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_ocsf_v1_3_0_objects_objects_proto protoreflect.FileDescriptor

var file_ocsf_v1_3_0_objects_objects_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x25, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xf1, 0x02, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x69, 0x64,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x64,
	0x70, 0x52, 0x03, 0x69, 0x64, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x0f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x5f, 0x61, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x69, 0x64, 0x41, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x08, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x02,
	0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x06, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x52, 0x06, 0x74, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x52, 0x07, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x09, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x54, 0x6f, 0x74, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x60, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xc8, 0x02, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x12, 0x43, 0x69, 0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0x3c, 0x0a, 0x06, 0x43, 0x69, 0x73, 0x43, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xdd, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0xbc, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x53,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x4c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0xbf,
	0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xb1, 0x03, 0x0a, 0x03, 0x43, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x63,
	0x76, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x76, 0x73, 0x73, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x77,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x77,
	0x65, 0x52, 0x03, 0x63, 0x77, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x77, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x77, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x77, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x77, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x04,
	0x65, 0x70, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x70, 0x73, 0x73, 0x52, 0x04, 0x65, 0x70, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x04, 0x43, 0x76, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x03, 0x43, 0x77, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x09, 0x44, 0x33, 0x46, 0x54, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x0c, 0x44, 0x33, 0x46, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x06, 0x44, 0x33, 0x46, 0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x64,
	0x33, 0x66, 0x5f, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x33, 0x46, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x52,
	0x09, 0x64, 0x33, 0x66, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x33,
	0x66, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x33, 0x46, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x33, 0x66, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a,
	0x12, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x5b, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xe2, 0x05,
	0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x17, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x14, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x13, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x88, 0x03, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xbb, 0x03,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x06,
	0x44, 0x63, 0x65, 0x52, 0x70, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x70, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0c, 0x72, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22,
	0x90, 0x0d, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x68, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x68, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x73,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x0d,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x69, 0x64, 0x41, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6f,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbc,
	0x03, 0x0a, 0x10, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x49, 0x44, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd0, 0x01,
	0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xdd, 0x01, 0x0a, 0x09, 0x44, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xd4, 0x01, 0x0a, 0x08, 0x44, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xb3, 0x03, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61,
	0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6d, 0x74, 0x70, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6d, 0x74, 0x70, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x78, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6b, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x6b, 0x69, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6b, 0x69, 0x6d, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6b, 0x69, 0x6d, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6b, 0x69, 0x6d, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6b, 0x69, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6d, 0x61, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6d, 0x61,
	0x72, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6d, 0x61, 0x72,
	0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6d, 0x61,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x70, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x70, 0x66, 0x22, 0x79,
	0x0a, 0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x0a, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x79, 0x0a, 0x04, 0x45, 0x70, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x08, 0x0a, 0x09, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x36, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x4b, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x49, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x09, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x78, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x9e, 0x05, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x12,
	0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x52, 0x0b,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd9, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x69, 0x0a,
	0x05, 0x48, 0x61, 0x73, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x48, 0x74, 0x74,
	0x70, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48,
	0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x61, 0x6d, 0x65, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x6d, 0x65, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9,
	0x02, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x78, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x03, 0x49, 0x64,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x4a, 0x61, 0x34, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4c, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x41, 0x5f,
	0x34, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0xb2, 0x04, 0x0a, 0x09, 0x4b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x60, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x42, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x73, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x22, 0x3d, 0x0a, 0x0c, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x77, 0x0a, 0x0e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0xf9, 0x04, 0x0a, 0x0a, 0x4c,
	0x64, 0x61, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x64, 0x61, 0x70, 0x5f, 0x63, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x64, 0x61, 0x70, 0x43, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x64, 0x61, 0x70, 0x5f, 0x64,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x64, 0x61, 0x70, 0x44, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x14,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x02, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x9d, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x52, 0x11,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x76, 0x65, 0x52, 0x04, 0x63, 0x76, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x8e, 0x04, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xc2, 0x06, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd4, 0x04, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x0b, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52,
	0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xac, 0x08, 0x0a, 0x0f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6e,
	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x68, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x68, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x73,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4c, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xa6, 0x08, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x68, 0x77,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x68, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x73, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74,
	0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x75, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x75, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xca, 0x02, 0x0a,
	0x02, 0x4f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x42, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x56, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x08, 0x0a, 0x05, 0x4f, 0x73,
	0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f,
	0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x53, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x6c, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6c, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f,
	0x53, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x77,
	0x68, 0x6f, 0x69, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x52, 0x05, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x22, 0x84, 0x03,
	0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x34,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xee, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x75, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x67, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x65, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x78, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x72, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x9b,
	0x02, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xcb, 0x02, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b,
	0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x46,
	0x0a, 0x0f, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x62,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0d, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x62, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0xa3, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a,
	0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x03, 0x53,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x74, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6d, 0x66, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x66,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x56, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x69, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x69,
	0x64, 0x41, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x06, 0x54,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x09, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72,
	0x63, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65,
	0x65, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xa7, 0x05, 0x0a, 0x03, 0x54, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x54, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x75,
	0x72, 0x12, 0x3b, 0x0a, 0x08, 0x6a, 0x61, 0x33, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x61, 0x33, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3d,
	0x0a, 0x09, 0x6a, 0x61, 0x33, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x6a, 0x61, 0x33, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x61, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x53, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6e, 0x69, 0x12, 0x4f, 0x0a, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a,
	0x01, 0x0a, 0x0c, 0x54, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x03,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x8a, 0x05, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x6c, 0x64, 0x61, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x64, 0x61, 0x70, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x64, 0x61, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x73,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x69, 0x64, 0x41, 0x6c, 0x74, 0x22, 0xf8, 0x06, 0x0a, 0x0d, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x76, 0x65, 0x52, 0x03, 0x63,
	0x76, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x77, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x77, 0x65, 0x52, 0x03, 0x63, 0x77, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x78, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x46,
	0x69, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6b,
	0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x62, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x0d, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xde, 0x04, 0x0a, 0x05, 0x57, 0x68, 0x6f, 0x69, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x48, 0x4f,
	0x49, 0x53, 0x5f, 0x44, 0x4e, 0x53, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58,
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xf1, 0x06, 0x0a, 0x0a, 0x57, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x78, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xc9, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f,
	0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x4f, 0x56, 0x4f, 0xaa, 0x02, 0x11, 0x4f, 0x63,
	0x73, 0x66, 0x2e, 0x56, 0x31, 0x33, 0x30, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0xca,
	0x02, 0x11, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30, 0x5c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0xe2, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30, 0x5c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x33, 0x30,
	0x3a, 0x3a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ocsf_v1_3_0_objects_objects_proto_rawDescOnce sync.Once
	file_ocsf_v1_3_0_objects_objects_proto_rawDescData = file_ocsf_v1_3_0_objects_objects_proto_rawDesc
)

func file_ocsf_v1_3_0_objects_objects_proto_rawDescGZIP() []byte {
	file_ocsf_v1_3_0_objects_objects_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_3_0_objects_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_3_0_objects_objects_proto_rawDescData)
	})
	return file_ocsf_v1_3_0_objects_objects_proto_rawDescData
}

var file_ocsf_v1_3_0_objects_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 116)
var file_ocsf_v1_3_0_objects_objects_proto_goTypes = []any{
	(*Account)(nil),                            // 0: ocsf.v1_3_0.objects.Account
	(*Actor)(nil),                              // 1: ocsf.v1_3_0.objects.Actor
	(*AffectedCode)(nil),                       // 2: ocsf.v1_3_0.objects.AffectedCode
	(*AffectedPackage)(nil),                    // 3: ocsf.v1_3_0.objects.AffectedPackage
	(*Agent)(nil),                              // 4: ocsf.v1_3_0.objects.Agent
	(*Analytic)(nil),                           // 5: ocsf.v1_3_0.objects.Analytic
	(*Api)(nil),                                // 6: ocsf.v1_3_0.objects.Api
	(*Attack)(nil),                             // 7: ocsf.v1_3_0.objects.Attack
	(*AuthFactor)(nil),                         // 8: ocsf.v1_3_0.objects.AuthFactor
	(*Authorization)(nil),                      // 9: ocsf.v1_3_0.objects.Authorization
	(*AutonomousSystem)(nil),                   // 10: ocsf.v1_3_0.objects.AutonomousSystem
	(*Certificate)(nil),                        // 11: ocsf.v1_3_0.objects.Certificate
	(*CisBenchmarkResult)(nil),                 // 12: ocsf.v1_3_0.objects.CisBenchmarkResult
	(*CisCsc)(nil),                             // 13: ocsf.v1_3_0.objects.CisCsc
	(*Cloud)(nil),                              // 14: ocsf.v1_3_0.objects.Cloud
	(*Compliance)(nil),                         // 15: ocsf.v1_3_0.objects.Compliance
	(*Container)(nil),                          // 16: ocsf.v1_3_0.objects.Container
	(*Cve)(nil),                                // 17: ocsf.v1_3_0.objects.Cve
	(*Cvss)(nil),                               // 18: ocsf.v1_3_0.objects.Cvss
	(*Cwe)(nil),                                // 19: ocsf.v1_3_0.objects.Cwe
	(*D3FTactic)(nil),                          // 20: ocsf.v1_3_0.objects.D3FTactic
	(*D3FTechnique)(nil),                       // 21: ocsf.v1_3_0.objects.D3FTechnique
	(*D3Fend)(nil),                             // 22: ocsf.v1_3_0.objects.D3Fend
	(*DataClassification)(nil),                 // 23: ocsf.v1_3_0.objects.DataClassification
	(*DataSecurity)(nil),                       // 24: ocsf.v1_3_0.objects.DataSecurity
	(*Database)(nil),                           // 25: ocsf.v1_3_0.objects.Database
	(*Databucket)(nil),                         // 26: ocsf.v1_3_0.objects.Databucket
	(*DceRpc)(nil),                             // 27: ocsf.v1_3_0.objects.DceRpc
	(*Device)(nil),                             // 28: ocsf.v1_3_0.objects.Device
	(*DeviceHwInfo)(nil),                       // 29: ocsf.v1_3_0.objects.DeviceHwInfo
	(*DigitalSignature)(nil),                   // 30: ocsf.v1_3_0.objects.DigitalSignature
	(*Display)(nil),                            // 31: ocsf.v1_3_0.objects.Display
	(*DnsAnswer)(nil),                          // 32: ocsf.v1_3_0.objects.DnsAnswer
	(*DnsQuery)(nil),                           // 33: ocsf.v1_3_0.objects.DnsQuery
	(*DomainContact)(nil),                      // 34: ocsf.v1_3_0.objects.DomainContact
	(*Email)(nil),                              // 35: ocsf.v1_3_0.objects.Email
	(*EmailAuth)(nil),                          // 36: ocsf.v1_3_0.objects.EmailAuth
	(*EndpointConnection)(nil),                 // 37: ocsf.v1_3_0.objects.EndpointConnection
	(*Enrichment)(nil),                         // 38: ocsf.v1_3_0.objects.Enrichment
	(*Epss)(nil),                               // 39: ocsf.v1_3_0.objects.Epss
	(*Evidences)(nil),                          // 40: ocsf.v1_3_0.objects.Evidences
	(*Extension)(nil),                          // 41: ocsf.v1_3_0.objects.Extension
	(*Feature)(nil),                            // 42: ocsf.v1_3_0.objects.Feature
	(*File)(nil),                               // 43: ocsf.v1_3_0.objects.File
	(*FindingInfo)(nil),                        // 44: ocsf.v1_3_0.objects.FindingInfo
	(*Fingerprint)(nil),                        // 45: ocsf.v1_3_0.objects.Fingerprint
	(*FirewallRule)(nil),                       // 46: ocsf.v1_3_0.objects.FirewallRule
	(*Group)(nil),                              // 47: ocsf.v1_3_0.objects.Group
	(*Hassh)(nil),                              // 48: ocsf.v1_3_0.objects.Hassh
	(*HttpCookie)(nil),                         // 49: ocsf.v1_3_0.objects.HttpCookie
	(*HttpHeader)(nil),                         // 50: ocsf.v1_3_0.objects.HttpHeader
	(*HttpRequest)(nil),                        // 51: ocsf.v1_3_0.objects.HttpRequest
	(*HttpResponse)(nil),                       // 52: ocsf.v1_3_0.objects.HttpResponse
	(*Idp)(nil),                                // 53: ocsf.v1_3_0.objects.Idp
	(*Image)(nil),                              // 54: ocsf.v1_3_0.objects.Image
	(*Ja4Fingerprint)(nil),                     // 55: ocsf.v1_3_0.objects.Ja4Fingerprint
	(*Job)(nil),                                // 56: ocsf.v1_3_0.objects.Job
	(*KbArticle)(nil),                          // 57: ocsf.v1_3_0.objects.KbArticle
	(*Kernel)(nil),                             // 58: ocsf.v1_3_0.objects.Kernel
	(*KernelDriver)(nil),                       // 59: ocsf.v1_3_0.objects.KernelDriver
	(*KeyboardInfo)(nil),                       // 60: ocsf.v1_3_0.objects.KeyboardInfo
	(*KillChainPhase)(nil),                     // 61: ocsf.v1_3_0.objects.KillChainPhase
	(*LdapPerson)(nil),                         // 62: ocsf.v1_3_0.objects.LdapPerson
	(*LoadBalancer)(nil),                       // 63: ocsf.v1_3_0.objects.LoadBalancer
	(*Location)(nil),                           // 64: ocsf.v1_3_0.objects.Location
	(*Logger)(nil),                             // 65: ocsf.v1_3_0.objects.Logger
	(*Malware)(nil),                            // 66: ocsf.v1_3_0.objects.Malware
	(*ManagedEntity)(nil),                      // 67: ocsf.v1_3_0.objects.ManagedEntity
	(*Metadata)(nil),                           // 68: ocsf.v1_3_0.objects.Metadata
	(*Metric)(nil),                             // 69: ocsf.v1_3_0.objects.Metric
	(*Module)(nil),                             // 70: ocsf.v1_3_0.objects.Module
	(*NetworkConnectionInfo)(nil),              // 71: ocsf.v1_3_0.objects.NetworkConnectionInfo
	(*NetworkEndpoint)(nil),                    // 72: ocsf.v1_3_0.objects.NetworkEndpoint
	(*NetworkInterface)(nil),                   // 73: ocsf.v1_3_0.objects.NetworkInterface
	(*NetworkProxy)(nil),                       // 74: ocsf.v1_3_0.objects.NetworkProxy
	(*NetworkTraffic)(nil),                     // 75: ocsf.v1_3_0.objects.NetworkTraffic
	(*Observable)(nil),                         // 76: ocsf.v1_3_0.objects.Observable
	(*Organization)(nil),                       // 77: ocsf.v1_3_0.objects.Organization
	(*Os)(nil),                                 // 78: ocsf.v1_3_0.objects.Os
	(*Osint)(nil),                              // 79: ocsf.v1_3_0.objects.Osint
	(*Package)(nil),                            // 80: ocsf.v1_3_0.objects.Package
	(*PeripheralDevice)(nil),                   // 81: ocsf.v1_3_0.objects.PeripheralDevice
	(*Policy)(nil),                             // 82: ocsf.v1_3_0.objects.Policy
	(*Process)(nil),                            // 83: ocsf.v1_3_0.objects.Process
	(*Product)(nil),                            // 84: ocsf.v1_3_0.objects.Product
	(*QueryInfo)(nil),                          // 85: ocsf.v1_3_0.objects.QueryInfo
	(*RegKey)(nil),                             // 86: ocsf.v1_3_0.objects.RegKey
	(*RegValue)(nil),                           // 87: ocsf.v1_3_0.objects.RegValue
	(*RelatedEvent)(nil),                       // 88: ocsf.v1_3_0.objects.RelatedEvent
	(*Remediation)(nil),                        // 89: ocsf.v1_3_0.objects.Remediation
	(*Reputation)(nil),                         // 90: ocsf.v1_3_0.objects.Reputation
	(*Request)(nil),                            // 91: ocsf.v1_3_0.objects.Request
	(*ResourceDetails)(nil),                    // 92: ocsf.v1_3_0.objects.ResourceDetails
	(*Response)(nil),                           // 93: ocsf.v1_3_0.objects.Response
	(*RpcInterface)(nil),                       // 94: ocsf.v1_3_0.objects.RpcInterface
	(*Rule)(nil),                               // 95: ocsf.v1_3_0.objects.Rule
	(*San)(nil),                                // 96: ocsf.v1_3_0.objects.San
	(*Scan)(nil),                               // 97: ocsf.v1_3_0.objects.Scan
	(*SecurityState)(nil),                      // 98: ocsf.v1_3_0.objects.SecurityState
	(*Service)(nil),                            // 99: ocsf.v1_3_0.objects.Service
	(*Session)(nil),                            // 100: ocsf.v1_3_0.objects.Session
	(*SubTechnique)(nil),                       // 101: ocsf.v1_3_0.objects.SubTechnique
	(*Table)(nil),                              // 102: ocsf.v1_3_0.objects.Table
	(*Tactic)(nil),                             // 103: ocsf.v1_3_0.objects.Tactic
	(*Technique)(nil),                          // 104: ocsf.v1_3_0.objects.Technique
	(*Ticket)(nil),                             // 105: ocsf.v1_3_0.objects.Ticket
	(*Timespan)(nil),                           // 106: ocsf.v1_3_0.objects.Timespan
	(*Tls)(nil),                                // 107: ocsf.v1_3_0.objects.Tls
	(*TlsExtension)(nil),                       // 108: ocsf.v1_3_0.objects.TlsExtension
	(*Url)(nil),                                // 109: ocsf.v1_3_0.objects.Url
	(*User)(nil),                               // 110: ocsf.v1_3_0.objects.User
	(*Vulnerability)(nil),                      // 111: ocsf.v1_3_0.objects.Vulnerability
	(*WebResource)(nil),                        // 112: ocsf.v1_3_0.objects.WebResource
	(*Whois)(nil),                              // 113: ocsf.v1_3_0.objects.Whois
	(*WinResource)(nil),                        // 114: ocsf.v1_3_0.objects.WinResource
	(*WinService)(nil),                         // 115: ocsf.v1_3_0.objects.WinService
	(enums.ACCOUNT_TYPE_ID)(0),                 // 116: ocsf.v1_3_0.objects.enums.ACCOUNT_TYPE_ID
	(enums.AFFECTED_PACKAGE_TYPE_ID)(0),        // 117: ocsf.v1_3_0.objects.enums.AFFECTED_PACKAGE_TYPE_ID
	(enums.AGENT_TYPE_ID)(0),                   // 118: ocsf.v1_3_0.objects.enums.AGENT_TYPE_ID
	(enums.ANALYTIC_TYPE_ID)(0),                // 119: ocsf.v1_3_0.objects.enums.ANALYTIC_TYPE_ID
	(enums.AUTH_FACTOR_FACTOR_TYPE_ID)(0),      // 120: ocsf.v1_3_0.objects.enums.AUTH_FACTOR_FACTOR_TYPE_ID
	(enums.COMPLIANCE_STATUS_ID)(0),            // 121: ocsf.v1_3_0.objects.enums.COMPLIANCE_STATUS_ID
	(enums.DATA_CLASSIFICATION_CATEGORY_ID)(0), // 122: ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CATEGORY_ID
	(enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID)(0),  // 123: ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID
	(enums.DATA_SECURITY_CATEGORY_ID)(0),               // 124: ocsf.v1_3_0.objects.enums.DATA_SECURITY_CATEGORY_ID
	(enums.DATA_SECURITY_CONFIDENTIALITY_ID)(0),        // 125: ocsf.v1_3_0.objects.enums.DATA_SECURITY_CONFIDENTIALITY_ID
	(enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID)(0),   // 126: ocsf.v1_3_0.objects.enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID
	(enums.DATA_SECURITY_DETECTION_SYSTEM_ID)(0),       // 127: ocsf.v1_3_0.objects.enums.DATA_SECURITY_DETECTION_SYSTEM_ID
	(enums.DATABASE_TYPE_ID)(0),                        // 128: ocsf.v1_3_0.objects.enums.DATABASE_TYPE_ID
	(enums.DATABUCKET_TYPE_ID)(0),                      // 129: ocsf.v1_3_0.objects.enums.DATABUCKET_TYPE_ID
	(enums.DEVICE_RISK_LEVEL_ID)(0),                    // 130: ocsf.v1_3_0.objects.enums.DEVICE_RISK_LEVEL_ID
	(enums.DEVICE_TYPE_ID)(0),                          // 131: ocsf.v1_3_0.objects.enums.DEVICE_TYPE_ID
	(enums.DIGITAL_SIGNATURE_ALGORITHM_ID)(0),          // 132: ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	(enums.DIGITAL_SIGNATURE_STATE_ID)(0),              // 133: ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_STATE_ID
	(enums.DNS_ANSWER_FLAG_IDS)(0),                     // 134: ocsf.v1_3_0.objects.enums.DNS_ANSWER_FLAG_IDS
	(enums.DNS_QUERY_OPCODE_ID)(0),                     // 135: ocsf.v1_3_0.objects.enums.DNS_QUERY_OPCODE_ID
	(enums.DOMAIN_CONTACT_TYPE_ID)(0),                  // 136: ocsf.v1_3_0.objects.enums.DOMAIN_CONTACT_TYPE_ID
	(*structpb.Struct)(nil),                            // 137: google.protobuf.Struct
	(enums.FILE_CONFIDENTIALITY_ID)(0),                 // 138: ocsf.v1_3_0.objects.enums.FILE_CONFIDENTIALITY_ID
	(enums.FILE_TYPE_ID)(0),                            // 139: ocsf.v1_3_0.objects.enums.FILE_TYPE_ID
	(enums.FINGERPRINT_ALGORITHM_ID)(0),                // 140: ocsf.v1_3_0.objects.enums.FINGERPRINT_ALGORITHM_ID
	(enums.JA_4_FINGERPRINT_TYPE_ID)(0),                // 141: ocsf.v1_3_0.objects.enums.JA_4_FINGERPRINT_TYPE_ID
	(enums.JOB_RUN_STATE_ID)(0),                        // 142: ocsf.v1_3_0.objects.enums.JOB_RUN_STATE_ID
	(enums.KB_ARTICLE_INSTALL_STATE_ID)(0),             // 143: ocsf.v1_3_0.objects.enums.KB_ARTICLE_INSTALL_STATE_ID
	(enums.KERNEL_TYPE_ID)(0),                          // 144: ocsf.v1_3_0.objects.enums.KERNEL_TYPE_ID
	(enums.KILL_CHAIN_PHASE_PHASE_ID)(0),               // 145: ocsf.v1_3_0.objects.enums.KILL_CHAIN_PHASE_PHASE_ID
	(enums.MALWARE_CLASSIFICATION_IDS)(0),              // 146: ocsf.v1_3_0.objects.enums.MALWARE_CLASSIFICATION_IDS
	(enums.MANAGED_ENTITY_TYPE_ID)(0),                  // 147: ocsf.v1_3_0.objects.enums.MANAGED_ENTITY_TYPE_ID
	(enums.MODULE_LOAD_TYPE_ID)(0),                     // 148: ocsf.v1_3_0.objects.enums.MODULE_LOAD_TYPE_ID
	(enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID)(0),     // 149: ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	(enums.NETWORK_CONNECTION_INFO_DIRECTION_ID)(0),    // 150: ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	(enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)(0), // 151: ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
	(enums.NETWORK_ENDPOINT_TYPE_ID)(0),                // 152: ocsf.v1_3_0.objects.enums.NETWORK_ENDPOINT_TYPE_ID
	(enums.NETWORK_INTERFACE_TYPE_ID)(0),               // 153: ocsf.v1_3_0.objects.enums.NETWORK_INTERFACE_TYPE_ID
	(enums.NETWORK_PROXY_TYPE_ID)(0),                   // 154: ocsf.v1_3_0.objects.enums.NETWORK_PROXY_TYPE_ID
	(enums.OBSERVABLE_TYPE_ID)(0),                      // 155: ocsf.v1_3_0.objects.enums.OBSERVABLE_TYPE_ID
	(enums.OS_TYPE_ID)(0),                              // 156: ocsf.v1_3_0.objects.enums.OS_TYPE_ID
	(enums.OSINT_CONFIDENCE_ID)(0),                     // 157: ocsf.v1_3_0.objects.enums.OSINT_CONFIDENCE_ID
	(enums.OSINT_TYPE_ID)(0),                           // 158: ocsf.v1_3_0.objects.enums.OSINT_TYPE_ID
	(enums.PACKAGE_TYPE_ID)(0),                         // 159: ocsf.v1_3_0.objects.enums.PACKAGE_TYPE_ID
	(enums.PROCESS_INTEGRITY_ID)(0),                    // 160: ocsf.v1_3_0.objects.enums.PROCESS_INTEGRITY_ID
	(enums.REG_VALUE_TYPE_ID)(0),                       // 161: ocsf.v1_3_0.objects.enums.REG_VALUE_TYPE_ID
	(enums.REPUTATION_SCORE_ID)(0),                     // 162: ocsf.v1_3_0.objects.enums.REPUTATION_SCORE_ID
	(enums.SCAN_TYPE_ID)(0),                            // 163: ocsf.v1_3_0.objects.enums.SCAN_TYPE_ID
	(enums.SECURITY_STATE_STATE_ID)(0),                 // 164: ocsf.v1_3_0.objects.enums.SECURITY_STATE_STATE_ID
	(enums.TICKET_TYPE_ID)(0),                          // 165: ocsf.v1_3_0.objects.enums.TICKET_TYPE_ID
	(enums.TIMESPAN_TYPE_ID)(0),                        // 166: ocsf.v1_3_0.objects.enums.TIMESPAN_TYPE_ID
	(enums.TLS_EXTENSION_TYPE_ID)(0),                   // 167: ocsf.v1_3_0.objects.enums.TLS_EXTENSION_TYPE_ID
	(enums.URL_CATEGORY_IDS)(0),                        // 168: ocsf.v1_3_0.objects.enums.URL_CATEGORY_IDS
	(enums.USER_RISK_LEVEL_ID)(0),                      // 169: ocsf.v1_3_0.objects.enums.USER_RISK_LEVEL_ID
	(enums.USER_TYPE_ID)(0),                            // 170: ocsf.v1_3_0.objects.enums.USER_TYPE_ID
	(enums.WHOIS_DNSSEC_STATUS_ID)(0),                  // 171: ocsf.v1_3_0.objects.enums.WHOIS_DNSSEC_STATUS_ID
	(enums.WIN_RESOURCE_TYPE_ID)(0),                    // 172: ocsf.v1_3_0.objects.enums.WIN_RESOURCE_TYPE_ID
	(enums.WIN_SERVICE_SERVICE_CATEGORY_ID)(0),         // 173: ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_CATEGORY_ID
	(enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID)(0),    // 174: ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID
	(enums.WIN_SERVICE_SERVICE_START_TYPE_ID)(0),       // 175: ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_START_TYPE_ID
	(enums.WIN_SERVICE_SERVICE_TYPE_ID)(0),             // 176: ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_TYPE_ID
}
var file_ocsf_v1_3_0_objects_objects_proto_depIdxs = []int32{
	116, // 0: ocsf.v1_3_0.objects.Account.type_id:type_name -> ocsf.v1_3_0.objects.enums.ACCOUNT_TYPE_ID
	9,   // 1: ocsf.v1_3_0.objects.Actor.authorizations:type_name -> ocsf.v1_3_0.objects.Authorization
	53,  // 2: ocsf.v1_3_0.objects.Actor.idp:type_name -> ocsf.v1_3_0.objects.Idp
	83,  // 3: ocsf.v1_3_0.objects.Actor.process:type_name -> ocsf.v1_3_0.objects.Process
	100, // 4: ocsf.v1_3_0.objects.Actor.session:type_name -> ocsf.v1_3_0.objects.Session
	110, // 5: ocsf.v1_3_0.objects.Actor.user:type_name -> ocsf.v1_3_0.objects.User
	43,  // 6: ocsf.v1_3_0.objects.AffectedCode.file:type_name -> ocsf.v1_3_0.objects.File
	110, // 7: ocsf.v1_3_0.objects.AffectedCode.owner:type_name -> ocsf.v1_3_0.objects.User
	89,  // 8: ocsf.v1_3_0.objects.AffectedCode.remediation:type_name -> ocsf.v1_3_0.objects.Remediation
	45,  // 9: ocsf.v1_3_0.objects.AffectedPackage.hash:type_name -> ocsf.v1_3_0.objects.Fingerprint
	89,  // 10: ocsf.v1_3_0.objects.AffectedPackage.remediation:type_name -> ocsf.v1_3_0.objects.Remediation
	117, // 11: ocsf.v1_3_0.objects.AffectedPackage.type_id:type_name -> ocsf.v1_3_0.objects.enums.AFFECTED_PACKAGE_TYPE_ID
	82,  // 12: ocsf.v1_3_0.objects.Agent.policies:type_name -> ocsf.v1_3_0.objects.Policy
	118, // 13: ocsf.v1_3_0.objects.Agent.type_id:type_name -> ocsf.v1_3_0.objects.enums.AGENT_TYPE_ID
	5,   // 14: ocsf.v1_3_0.objects.Analytic.related_analytics:type_name -> ocsf.v1_3_0.objects.Analytic
	119, // 15: ocsf.v1_3_0.objects.Analytic.type_id:type_name -> ocsf.v1_3_0.objects.enums.ANALYTIC_TYPE_ID
	47,  // 16: ocsf.v1_3_0.objects.Api.group:type_name -> ocsf.v1_3_0.objects.Group
	91,  // 17: ocsf.v1_3_0.objects.Api.request:type_name -> ocsf.v1_3_0.objects.Request
	93,  // 18: ocsf.v1_3_0.objects.Api.response:type_name -> ocsf.v1_3_0.objects.Response
	99,  // 19: ocsf.v1_3_0.objects.Api.service:type_name -> ocsf.v1_3_0.objects.Service
	101, // 20: ocsf.v1_3_0.objects.Attack.sub_technique:type_name -> ocsf.v1_3_0.objects.SubTechnique
	103, // 21: ocsf.v1_3_0.objects.Attack.tactic:type_name -> ocsf.v1_3_0.objects.Tactic
	103, // 22: ocsf.v1_3_0.objects.Attack.tactics:type_name -> ocsf.v1_3_0.objects.Tactic
	104, // 23: ocsf.v1_3_0.objects.Attack.technique:type_name -> ocsf.v1_3_0.objects.Technique
	28,  // 24: ocsf.v1_3_0.objects.AuthFactor.device:type_name -> ocsf.v1_3_0.objects.Device
	120, // 25: ocsf.v1_3_0.objects.AuthFactor.factor_type_id:type_name -> ocsf.v1_3_0.objects.enums.AUTH_FACTOR_FACTOR_TYPE_ID
	82,  // 26: ocsf.v1_3_0.objects.Authorization.policy:type_name -> ocsf.v1_3_0.objects.Policy
	45,  // 27: ocsf.v1_3_0.objects.Certificate.fingerprints:type_name -> ocsf.v1_3_0.objects.Fingerprint
	89,  // 28: ocsf.v1_3_0.objects.CisBenchmarkResult.remediation:type_name -> ocsf.v1_3_0.objects.Remediation
	95,  // 29: ocsf.v1_3_0.objects.CisBenchmarkResult.rule:type_name -> ocsf.v1_3_0.objects.Rule
	0,   // 30: ocsf.v1_3_0.objects.Cloud.account:type_name -> ocsf.v1_3_0.objects.Account
	77,  // 31: ocsf.v1_3_0.objects.Cloud.org:type_name -> ocsf.v1_3_0.objects.Organization
	57,  // 32: ocsf.v1_3_0.objects.Compliance.compliance_references:type_name -> ocsf.v1_3_0.objects.KbArticle
	57,  // 33: ocsf.v1_3_0.objects.Compliance.compliance_standards:type_name -> ocsf.v1_3_0.objects.KbArticle
	121, // 34: ocsf.v1_3_0.objects.Compliance.status_id:type_name -> ocsf.v1_3_0.objects.enums.COMPLIANCE_STATUS_ID
	45,  // 35: ocsf.v1_3_0.objects.Container.hash:type_name -> ocsf.v1_3_0.objects.Fingerprint
	54,  // 36: ocsf.v1_3_0.objects.Container.image:type_name -> ocsf.v1_3_0.objects.Image
	18,  // 37: ocsf.v1_3_0.objects.Cve.cvss:type_name -> ocsf.v1_3_0.objects.Cvss
	19,  // 38: ocsf.v1_3_0.objects.Cve.cwe:type_name -> ocsf.v1_3_0.objects.Cwe
	39,  // 39: ocsf.v1_3_0.objects.Cve.epss:type_name -> ocsf.v1_3_0.objects.Epss
	84,  // 40: ocsf.v1_3_0.objects.Cve.product:type_name -> ocsf.v1_3_0.objects.Product
	69,  // 41: ocsf.v1_3_0.objects.Cvss.metrics:type_name -> ocsf.v1_3_0.objects.Metric
	20,  // 42: ocsf.v1_3_0.objects.D3Fend.d3f_tactic:type_name -> ocsf.v1_3_0.objects.D3FTactic
	21,  // 43: ocsf.v1_3_0.objects.D3Fend.d3f_technique:type_name -> ocsf.v1_3_0.objects.D3FTechnique
	122, // 44: ocsf.v1_3_0.objects.DataClassification.category_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CATEGORY_ID
	123, // 45: ocsf.v1_3_0.objects.DataClassification.confidentiality_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID
	82,  // 46: ocsf.v1_3_0.objects.DataClassification.policy:type_name -> ocsf.v1_3_0.objects.Policy
	124, // 47: ocsf.v1_3_0.objects.DataSecurity.category_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_SECURITY_CATEGORY_ID
	125, // 48: ocsf.v1_3_0.objects.DataSecurity.confidentiality_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_SECURITY_CONFIDENTIALITY_ID
	126, // 49: ocsf.v1_3_0.objects.DataSecurity.data_lifecycle_state_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID
	127, // 50: ocsf.v1_3_0.objects.DataSecurity.detection_system_id:type_name -> ocsf.v1_3_0.objects.enums.DATA_SECURITY_DETECTION_SYSTEM_ID
	82,  // 51: ocsf.v1_3_0.objects.DataSecurity.policy:type_name -> ocsf.v1_3_0.objects.Policy
	23,  // 52: ocsf.v1_3_0.objects.Database.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	47,  // 53: ocsf.v1_3_0.objects.Database.groups:type_name -> ocsf.v1_3_0.objects.Group
	128, // 54: ocsf.v1_3_0.objects.Database.type_id:type_name -> ocsf.v1_3_0.objects.enums.DATABASE_TYPE_ID
	23,  // 55: ocsf.v1_3_0.objects.Databucket.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	43,  // 56: ocsf.v1_3_0.objects.Databucket.file:type_name -> ocsf.v1_3_0.objects.File
	47,  // 57: ocsf.v1_3_0.objects.Databucket.groups:type_name -> ocsf.v1_3_0.objects.Group
	129, // 58: ocsf.v1_3_0.objects.Databucket.type_id:type_name -> ocsf.v1_3_0.objects.enums.DATABUCKET_TYPE_ID
	94,  // 59: ocsf.v1_3_0.objects.DceRpc.rpc_interface:type_name -> ocsf.v1_3_0.objects.RpcInterface
	4,   // 60: ocsf.v1_3_0.objects.Device.agent_list:type_name -> ocsf.v1_3_0.objects.Agent
	16,  // 61: ocsf.v1_3_0.objects.Device.container:type_name -> ocsf.v1_3_0.objects.Container
	47,  // 62: ocsf.v1_3_0.objects.Device.groups:type_name -> ocsf.v1_3_0.objects.Group
	29,  // 63: ocsf.v1_3_0.objects.Device.hw_info:type_name -> ocsf.v1_3_0.objects.DeviceHwInfo
	54,  // 64: ocsf.v1_3_0.objects.Device.image:type_name -> ocsf.v1_3_0.objects.Image
	64,  // 65: ocsf.v1_3_0.objects.Device.location:type_name -> ocsf.v1_3_0.objects.Location
	73,  // 66: ocsf.v1_3_0.objects.Device.network_interfaces:type_name -> ocsf.v1_3_0.objects.NetworkInterface
	77,  // 67: ocsf.v1_3_0.objects.Device.org:type_name -> ocsf.v1_3_0.objects.Organization
	78,  // 68: ocsf.v1_3_0.objects.Device.os:type_name -> ocsf.v1_3_0.objects.Os
	110, // 69: ocsf.v1_3_0.objects.Device.owner:type_name -> ocsf.v1_3_0.objects.User
	130, // 70: ocsf.v1_3_0.objects.Device.risk_level_id:type_name -> ocsf.v1_3_0.objects.enums.DEVICE_RISK_LEVEL_ID
	131, // 71: ocsf.v1_3_0.objects.Device.type_id:type_name -> ocsf.v1_3_0.objects.enums.DEVICE_TYPE_ID
	31,  // 72: ocsf.v1_3_0.objects.DeviceHwInfo.desktop_display:type_name -> ocsf.v1_3_0.objects.Display
	60,  // 73: ocsf.v1_3_0.objects.DeviceHwInfo.keyboard_info:type_name -> ocsf.v1_3_0.objects.KeyboardInfo
	132, // 74: ocsf.v1_3_0.objects.DigitalSignature.algorithm_id:type_name -> ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	11,  // 75: ocsf.v1_3_0.objects.DigitalSignature.certificate:type_name -> ocsf.v1_3_0.objects.Certificate
	45,  // 76: ocsf.v1_3_0.objects.DigitalSignature.digest:type_name -> ocsf.v1_3_0.objects.Fingerprint
	133, // 77: ocsf.v1_3_0.objects.DigitalSignature.state_id:type_name -> ocsf.v1_3_0.objects.enums.DIGITAL_SIGNATURE_STATE_ID
	134, // 78: ocsf.v1_3_0.objects.DnsAnswer.flag_ids:type_name -> ocsf.v1_3_0.objects.enums.DNS_ANSWER_FLAG_IDS
	135, // 79: ocsf.v1_3_0.objects.DnsQuery.opcode_id:type_name -> ocsf.v1_3_0.objects.enums.DNS_QUERY_OPCODE_ID
	64,  // 80: ocsf.v1_3_0.objects.DomainContact.location:type_name -> ocsf.v1_3_0.objects.Location
	136, // 81: ocsf.v1_3_0.objects.DomainContact.type_id:type_name -> ocsf.v1_3_0.objects.enums.DOMAIN_CONTACT_TYPE_ID
	23,  // 82: ocsf.v1_3_0.objects.Email.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	72,  // 83: ocsf.v1_3_0.objects.EndpointConnection.network_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkEndpoint
	137, // 84: ocsf.v1_3_0.objects.Enrichment.data:type_name -> google.protobuf.Struct
	90,  // 85: ocsf.v1_3_0.objects.Enrichment.reputation:type_name -> ocsf.v1_3_0.objects.Reputation
	1,   // 86: ocsf.v1_3_0.objects.Evidences.actor:type_name -> ocsf.v1_3_0.objects.Actor
	6,   // 87: ocsf.v1_3_0.objects.Evidences.api:type_name -> ocsf.v1_3_0.objects.Api
	71,  // 88: ocsf.v1_3_0.objects.Evidences.connection_info:type_name -> ocsf.v1_3_0.objects.NetworkConnectionInfo
	16,  // 89: ocsf.v1_3_0.objects.Evidences.container:type_name -> ocsf.v1_3_0.objects.Container
	137, // 90: ocsf.v1_3_0.objects.Evidences.data:type_name -> google.protobuf.Struct
	25,  // 91: ocsf.v1_3_0.objects.Evidences.database:type_name -> ocsf.v1_3_0.objects.Database
	26,  // 92: ocsf.v1_3_0.objects.Evidences.databucket:type_name -> ocsf.v1_3_0.objects.Databucket
	28,  // 93: ocsf.v1_3_0.objects.Evidences.device:type_name -> ocsf.v1_3_0.objects.Device
	72,  // 94: ocsf.v1_3_0.objects.Evidences.dst_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkEndpoint
	35,  // 95: ocsf.v1_3_0.objects.Evidences.email:type_name -> ocsf.v1_3_0.objects.Email
	43,  // 96: ocsf.v1_3_0.objects.Evidences.file:type_name -> ocsf.v1_3_0.objects.File
	56,  // 97: ocsf.v1_3_0.objects.Evidences.job:type_name -> ocsf.v1_3_0.objects.Job
	83,  // 98: ocsf.v1_3_0.objects.Evidences.process:type_name -> ocsf.v1_3_0.objects.Process
	33,  // 99: ocsf.v1_3_0.objects.Evidences.query:type_name -> ocsf.v1_3_0.objects.DnsQuery
	86,  // 100: ocsf.v1_3_0.objects.Evidences.reg_key:type_name -> ocsf.v1_3_0.objects.RegKey
	87,  // 101: ocsf.v1_3_0.objects.Evidences.reg_value:type_name -> ocsf.v1_3_0.objects.RegValue
	72,  // 102: ocsf.v1_3_0.objects.Evidences.src_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkEndpoint
	109, // 103: ocsf.v1_3_0.objects.Evidences.url:type_name -> ocsf.v1_3_0.objects.Url
	110, // 104: ocsf.v1_3_0.objects.Evidences.user:type_name -> ocsf.v1_3_0.objects.User
	115, // 105: ocsf.v1_3_0.objects.Evidences.win_service:type_name -> ocsf.v1_3_0.objects.WinService
	110, // 106: ocsf.v1_3_0.objects.File.accessor:type_name -> ocsf.v1_3_0.objects.User
	138, // 107: ocsf.v1_3_0.objects.File.confidentiality_id:type_name -> ocsf.v1_3_0.objects.enums.FILE_CONFIDENTIALITY_ID
	110, // 108: ocsf.v1_3_0.objects.File.creator:type_name -> ocsf.v1_3_0.objects.User
	23,  // 109: ocsf.v1_3_0.objects.File.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	45,  // 110: ocsf.v1_3_0.objects.File.hashes:type_name -> ocsf.v1_3_0.objects.Fingerprint
	110, // 111: ocsf.v1_3_0.objects.File.modifier:type_name -> ocsf.v1_3_0.objects.User
	110, // 112: ocsf.v1_3_0.objects.File.owner:type_name -> ocsf.v1_3_0.objects.User
	84,  // 113: ocsf.v1_3_0.objects.File.product:type_name -> ocsf.v1_3_0.objects.Product
	30,  // 114: ocsf.v1_3_0.objects.File.signature:type_name -> ocsf.v1_3_0.objects.DigitalSignature
	139, // 115: ocsf.v1_3_0.objects.File.type_id:type_name -> ocsf.v1_3_0.objects.enums.FILE_TYPE_ID
	137, // 116: ocsf.v1_3_0.objects.File.xattributes:type_name -> google.protobuf.Struct
	5,   // 117: ocsf.v1_3_0.objects.FindingInfo.analytic:type_name -> ocsf.v1_3_0.objects.Analytic
	7,   // 118: ocsf.v1_3_0.objects.FindingInfo.attacks:type_name -> ocsf.v1_3_0.objects.Attack
	61,  // 119: ocsf.v1_3_0.objects.FindingInfo.kill_chain:type_name -> ocsf.v1_3_0.objects.KillChainPhase
	5,   // 120: ocsf.v1_3_0.objects.FindingInfo.related_analytics:type_name -> ocsf.v1_3_0.objects.Analytic
	88,  // 121: ocsf.v1_3_0.objects.FindingInfo.related_events:type_name -> ocsf.v1_3_0.objects.RelatedEvent
	140, // 122: ocsf.v1_3_0.objects.Fingerprint.algorithm_id:type_name -> ocsf.v1_3_0.objects.enums.FINGERPRINT_ALGORITHM_ID
	45,  // 123: ocsf.v1_3_0.objects.Hassh.fingerprint:type_name -> ocsf.v1_3_0.objects.Fingerprint
	50,  // 124: ocsf.v1_3_0.objects.HttpRequest.http_headers:type_name -> ocsf.v1_3_0.objects.HttpHeader
	109, // 125: ocsf.v1_3_0.objects.HttpRequest.url:type_name -> ocsf.v1_3_0.objects.Url
	50,  // 126: ocsf.v1_3_0.objects.HttpResponse.http_headers:type_name -> ocsf.v1_3_0.objects.HttpHeader
	141, // 127: ocsf.v1_3_0.objects.Ja4Fingerprint.type_id:type_name -> ocsf.v1_3_0.objects.enums.JA_4_FINGERPRINT_TYPE_ID
	43,  // 128: ocsf.v1_3_0.objects.Job.file:type_name -> ocsf.v1_3_0.objects.File
	142, // 129: ocsf.v1_3_0.objects.Job.run_state_id:type_name -> ocsf.v1_3_0.objects.enums.JOB_RUN_STATE_ID
	110, // 130: ocsf.v1_3_0.objects.Job.user:type_name -> ocsf.v1_3_0.objects.User
	106, // 131: ocsf.v1_3_0.objects.KbArticle.avg_timespan:type_name -> ocsf.v1_3_0.objects.Timespan
	143, // 132: ocsf.v1_3_0.objects.KbArticle.install_state_id:type_name -> ocsf.v1_3_0.objects.enums.KB_ARTICLE_INSTALL_STATE_ID
	78,  // 133: ocsf.v1_3_0.objects.KbArticle.os:type_name -> ocsf.v1_3_0.objects.Os
	84,  // 134: ocsf.v1_3_0.objects.KbArticle.product:type_name -> ocsf.v1_3_0.objects.Product
	144, // 135: ocsf.v1_3_0.objects.Kernel.type_id:type_name -> ocsf.v1_3_0.objects.enums.KERNEL_TYPE_ID
	43,  // 136: ocsf.v1_3_0.objects.KernelDriver.file:type_name -> ocsf.v1_3_0.objects.File
	145, // 137: ocsf.v1_3_0.objects.KillChainPhase.phase_id:type_name -> ocsf.v1_3_0.objects.enums.KILL_CHAIN_PHASE_PHASE_ID
	64,  // 138: ocsf.v1_3_0.objects.LdapPerson.location:type_name -> ocsf.v1_3_0.objects.Location
	110, // 139: ocsf.v1_3_0.objects.LdapPerson.manager:type_name -> ocsf.v1_3_0.objects.User
	72,  // 140: ocsf.v1_3_0.objects.LoadBalancer.dst_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkEndpoint
	37,  // 141: ocsf.v1_3_0.objects.LoadBalancer.endpoint_connections:type_name -> ocsf.v1_3_0.objects.EndpointConnection
	69,  // 142: ocsf.v1_3_0.objects.LoadBalancer.metrics:type_name -> ocsf.v1_3_0.objects.Metric
	28,  // 143: ocsf.v1_3_0.objects.Logger.device:type_name -> ocsf.v1_3_0.objects.Device
	84,  // 144: ocsf.v1_3_0.objects.Logger.product:type_name -> ocsf.v1_3_0.objects.Product
	146, // 145: ocsf.v1_3_0.objects.Malware.classification_ids:type_name -> ocsf.v1_3_0.objects.enums.MALWARE_CLASSIFICATION_IDS
	17,  // 146: ocsf.v1_3_0.objects.Malware.cves:type_name -> ocsf.v1_3_0.objects.Cve
	137, // 147: ocsf.v1_3_0.objects.ManagedEntity.data:type_name -> google.protobuf.Struct
	28,  // 148: ocsf.v1_3_0.objects.ManagedEntity.device:type_name -> ocsf.v1_3_0.objects.Device
	35,  // 149: ocsf.v1_3_0.objects.ManagedEntity.email:type_name -> ocsf.v1_3_0.objects.Email
	47,  // 150: ocsf.v1_3_0.objects.ManagedEntity.group:type_name -> ocsf.v1_3_0.objects.Group
	77,  // 151: ocsf.v1_3_0.objects.ManagedEntity.org:type_name -> ocsf.v1_3_0.objects.Organization
	82,  // 152: ocsf.v1_3_0.objects.ManagedEntity.policy:type_name -> ocsf.v1_3_0.objects.Policy
	147, // 153: ocsf.v1_3_0.objects.ManagedEntity.type_id:type_name -> ocsf.v1_3_0.objects.enums.MANAGED_ENTITY_TYPE_ID
	110, // 154: ocsf.v1_3_0.objects.ManagedEntity.user:type_name -> ocsf.v1_3_0.objects.User
	23,  // 155: ocsf.v1_3_0.objects.Metadata.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	41,  // 156: ocsf.v1_3_0.objects.Metadata.extension:type_name -> ocsf.v1_3_0.objects.Extension
	41,  // 157: ocsf.v1_3_0.objects.Metadata.extensions:type_name -> ocsf.v1_3_0.objects.Extension
	65,  // 158: ocsf.v1_3_0.objects.Metadata.loggers:type_name -> ocsf.v1_3_0.objects.Logger
	84,  // 159: ocsf.v1_3_0.objects.Metadata.product:type_name -> ocsf.v1_3_0.objects.Product
	43,  // 160: ocsf.v1_3_0.objects.Module.file:type_name -> ocsf.v1_3_0.objects.File
	148, // 161: ocsf.v1_3_0.objects.Module.load_type_id:type_name -> ocsf.v1_3_0.objects.enums.MODULE_LOAD_TYPE_ID
	149, // 162: ocsf.v1_3_0.objects.NetworkConnectionInfo.boundary_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	150, // 163: ocsf.v1_3_0.objects.NetworkConnectionInfo.direction_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	151, // 164: ocsf.v1_3_0.objects.NetworkConnectionInfo.protocol_ver_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
	100, // 165: ocsf.v1_3_0.objects.NetworkConnectionInfo.session:type_name -> ocsf.v1_3_0.objects.Session
	4,   // 166: ocsf.v1_3_0.objects.NetworkEndpoint.agent_list:type_name -> ocsf.v1_3_0.objects.Agent
	10,  // 167: ocsf.v1_3_0.objects.NetworkEndpoint.autonomous_system:type_name -> ocsf.v1_3_0.objects.AutonomousSystem
	16,  // 168: ocsf.v1_3_0.objects.NetworkEndpoint.container:type_name -> ocsf.v1_3_0.objects.Container
	29,  // 169: ocsf.v1_3_0.objects.NetworkEndpoint.hw_info:type_name -> ocsf.v1_3_0.objects.DeviceHwInfo
	64,  // 170: ocsf.v1_3_0.objects.NetworkEndpoint.location:type_name -> ocsf.v1_3_0.objects.Location
	78,  // 171: ocsf.v1_3_0.objects.NetworkEndpoint.os:type_name -> ocsf.v1_3_0.objects.Os
	110, // 172: ocsf.v1_3_0.objects.NetworkEndpoint.owner:type_name -> ocsf.v1_3_0.objects.User
	74,  // 173: ocsf.v1_3_0.objects.NetworkEndpoint.proxy_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkProxy
	152, // 174: ocsf.v1_3_0.objects.NetworkEndpoint.type_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_ENDPOINT_TYPE_ID
	153, // 175: ocsf.v1_3_0.objects.NetworkInterface.type_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_INTERFACE_TYPE_ID
	4,   // 176: ocsf.v1_3_0.objects.NetworkProxy.agent_list:type_name -> ocsf.v1_3_0.objects.Agent
	10,  // 177: ocsf.v1_3_0.objects.NetworkProxy.autonomous_system:type_name -> ocsf.v1_3_0.objects.AutonomousSystem
	16,  // 178: ocsf.v1_3_0.objects.NetworkProxy.container:type_name -> ocsf.v1_3_0.objects.Container
	29,  // 179: ocsf.v1_3_0.objects.NetworkProxy.hw_info:type_name -> ocsf.v1_3_0.objects.DeviceHwInfo
	64,  // 180: ocsf.v1_3_0.objects.NetworkProxy.location:type_name -> ocsf.v1_3_0.objects.Location
	78,  // 181: ocsf.v1_3_0.objects.NetworkProxy.os:type_name -> ocsf.v1_3_0.objects.Os
	110, // 182: ocsf.v1_3_0.objects.NetworkProxy.owner:type_name -> ocsf.v1_3_0.objects.User
	74,  // 183: ocsf.v1_3_0.objects.NetworkProxy.proxy_endpoint:type_name -> ocsf.v1_3_0.objects.NetworkProxy
	154, // 184: ocsf.v1_3_0.objects.NetworkProxy.type_id:type_name -> ocsf.v1_3_0.objects.enums.NETWORK_PROXY_TYPE_ID
	90,  // 185: ocsf.v1_3_0.objects.Observable.reputation:type_name -> ocsf.v1_3_0.objects.Reputation
	155, // 186: ocsf.v1_3_0.objects.Observable.type_id:type_name -> ocsf.v1_3_0.objects.enums.OBSERVABLE_TYPE_ID
	156, // 187: ocsf.v1_3_0.objects.Os.type_id:type_name -> ocsf.v1_3_0.objects.enums.OS_TYPE_ID
	32,  // 188: ocsf.v1_3_0.objects.Osint.answers:type_name -> ocsf.v1_3_0.objects.DnsAnswer
	7,   // 189: ocsf.v1_3_0.objects.Osint.attacks:type_name -> ocsf.v1_3_0.objects.Attack
	10,  // 190: ocsf.v1_3_0.objects.Osint.autonomous_system:type_name -> ocsf.v1_3_0.objects.AutonomousSystem
	157, // 191: ocsf.v1_3_0.objects.Osint.confidence_id:type_name -> ocsf.v1_3_0.objects.enums.OSINT_CONFIDENCE_ID
	35,  // 192: ocsf.v1_3_0.objects.Osint.email:type_name -> ocsf.v1_3_0.objects.Email
	36,  // 193: ocsf.v1_3_0.objects.Osint.email_auth:type_name -> ocsf.v1_3_0.objects.EmailAuth
	61,  // 194: ocsf.v1_3_0.objects.Osint.kill_chain:type_name -> ocsf.v1_3_0.objects.KillChainPhase
	64,  // 195: ocsf.v1_3_0.objects.Osint.location:type_name -> ocsf.v1_3_0.objects.Location
	30,  // 196: ocsf.v1_3_0.objects.Osint.signatures:type_name -> ocsf.v1_3_0.objects.DigitalSignature
	158, // 197: ocsf.v1_3_0.objects.Osint.type_id:type_name -> ocsf.v1_3_0.objects.enums.OSINT_TYPE_ID
	111, // 198: ocsf.v1_3_0.objects.Osint.vulnerabilities:type_name -> ocsf.v1_3_0.objects.Vulnerability
	113, // 199: ocsf.v1_3_0.objects.Osint.whois:type_name -> ocsf.v1_3_0.objects.Whois
	45,  // 200: ocsf.v1_3_0.objects.Package.hash:type_name -> ocsf.v1_3_0.objects.Fingerprint
	159, // 201: ocsf.v1_3_0.objects.Package.type_id:type_name -> ocsf.v1_3_0.objects.enums.PACKAGE_TYPE_ID
	47,  // 202: ocsf.v1_3_0.objects.Policy.group:type_name -> ocsf.v1_3_0.objects.Group
	16,  // 203: ocsf.v1_3_0.objects.Process.container:type_name -> ocsf.v1_3_0.objects.Container
	43,  // 204: ocsf.v1_3_0.objects.Process.file:type_name -> ocsf.v1_3_0.objects.File
	47,  // 205: ocsf.v1_3_0.objects.Process.group:type_name -> ocsf.v1_3_0.objects.Group
	160, // 206: ocsf.v1_3_0.objects.Process.integrity_id:type_name -> ocsf.v1_3_0.objects.enums.PROCESS_INTEGRITY_ID
	83,  // 207: ocsf.v1_3_0.objects.Process.parent_process:type_name -> ocsf.v1_3_0.objects.Process
	100, // 208: ocsf.v1_3_0.objects.Process.session:type_name -> ocsf.v1_3_0.objects.Session
	110, // 209: ocsf.v1_3_0.objects.Process.user:type_name -> ocsf.v1_3_0.objects.User
	137, // 210: ocsf.v1_3_0.objects.Process.xattributes:type_name -> google.protobuf.Struct
	23,  // 211: ocsf.v1_3_0.objects.Product.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	42,  // 212: ocsf.v1_3_0.objects.Product.feature:type_name -> ocsf.v1_3_0.objects.Feature
	137, // 213: ocsf.v1_3_0.objects.QueryInfo.data:type_name -> google.protobuf.Struct
	137, // 214: ocsf.v1_3_0.objects.RegValue.data:type_name -> google.protobuf.Struct
	161, // 215: ocsf.v1_3_0.objects.RegValue.type_id:type_name -> ocsf.v1_3_0.objects.enums.REG_VALUE_TYPE_ID
	7,   // 216: ocsf.v1_3_0.objects.RelatedEvent.attacks:type_name -> ocsf.v1_3_0.objects.Attack
	61,  // 217: ocsf.v1_3_0.objects.RelatedEvent.kill_chain:type_name -> ocsf.v1_3_0.objects.KillChainPhase
	76,  // 218: ocsf.v1_3_0.objects.RelatedEvent.observables:type_name -> ocsf.v1_3_0.objects.Observable
	57,  // 219: ocsf.v1_3_0.objects.Remediation.kb_article_list:type_name -> ocsf.v1_3_0.objects.KbArticle
	162, // 220: ocsf.v1_3_0.objects.Reputation.score_id:type_name -> ocsf.v1_3_0.objects.enums.REPUTATION_SCORE_ID
	16,  // 221: ocsf.v1_3_0.objects.Request.containers:type_name -> ocsf.v1_3_0.objects.Container
	137, // 222: ocsf.v1_3_0.objects.Request.data:type_name -> google.protobuf.Struct
	4,   // 223: ocsf.v1_3_0.objects.ResourceDetails.agent_list:type_name -> ocsf.v1_3_0.objects.Agent
	137, // 224: ocsf.v1_3_0.objects.ResourceDetails.data:type_name -> google.protobuf.Struct
	23,  // 225: ocsf.v1_3_0.objects.ResourceDetails.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	47,  // 226: ocsf.v1_3_0.objects.ResourceDetails.group:type_name -> ocsf.v1_3_0.objects.Group
	110, // 227: ocsf.v1_3_0.objects.ResourceDetails.owner:type_name -> ocsf.v1_3_0.objects.User
	16,  // 228: ocsf.v1_3_0.objects.Response.containers:type_name -> ocsf.v1_3_0.objects.Container
	137, // 229: ocsf.v1_3_0.objects.Response.data:type_name -> google.protobuf.Struct
	163, // 230: ocsf.v1_3_0.objects.Scan.type_id:type_name -> ocsf.v1_3_0.objects.enums.SCAN_TYPE_ID
	164, // 231: ocsf.v1_3_0.objects.SecurityState.state_id:type_name -> ocsf.v1_3_0.objects.enums.SECURITY_STATE_STATE_ID
	47,  // 232: ocsf.v1_3_0.objects.Table.groups:type_name -> ocsf.v1_3_0.objects.Group
	165, // 233: ocsf.v1_3_0.objects.Ticket.type_id:type_name -> ocsf.v1_3_0.objects.enums.TICKET_TYPE_ID
	166, // 234: ocsf.v1_3_0.objects.Timespan.type_id:type_name -> ocsf.v1_3_0.objects.enums.TIMESPAN_TYPE_ID
	11,  // 235: ocsf.v1_3_0.objects.Tls.certificate:type_name -> ocsf.v1_3_0.objects.Certificate
	108, // 236: ocsf.v1_3_0.objects.Tls.extension_list:type_name -> ocsf.v1_3_0.objects.TlsExtension
	45,  // 237: ocsf.v1_3_0.objects.Tls.ja3_hash:type_name -> ocsf.v1_3_0.objects.Fingerprint
	45,  // 238: ocsf.v1_3_0.objects.Tls.ja3s_hash:type_name -> ocsf.v1_3_0.objects.Fingerprint
	96,  // 239: ocsf.v1_3_0.objects.Tls.sans:type_name -> ocsf.v1_3_0.objects.San
	108, // 240: ocsf.v1_3_0.objects.Tls.tls_extension_list:type_name -> ocsf.v1_3_0.objects.TlsExtension
	137, // 241: ocsf.v1_3_0.objects.TlsExtension.data:type_name -> google.protobuf.Struct
	167, // 242: ocsf.v1_3_0.objects.TlsExtension.type_id:type_name -> ocsf.v1_3_0.objects.enums.TLS_EXTENSION_TYPE_ID
	168, // 243: ocsf.v1_3_0.objects.Url.category_ids:type_name -> ocsf.v1_3_0.objects.enums.URL_CATEGORY_IDS
	0,   // 244: ocsf.v1_3_0.objects.User.account:type_name -> ocsf.v1_3_0.objects.Account
	47,  // 245: ocsf.v1_3_0.objects.User.groups:type_name -> ocsf.v1_3_0.objects.Group
	62,  // 246: ocsf.v1_3_0.objects.User.ldap_person:type_name -> ocsf.v1_3_0.objects.LdapPerson
	77,  // 247: ocsf.v1_3_0.objects.User.org:type_name -> ocsf.v1_3_0.objects.Organization
	169, // 248: ocsf.v1_3_0.objects.User.risk_level_id:type_name -> ocsf.v1_3_0.objects.enums.USER_RISK_LEVEL_ID
	170, // 249: ocsf.v1_3_0.objects.User.type_id:type_name -> ocsf.v1_3_0.objects.enums.USER_TYPE_ID
	2,   // 250: ocsf.v1_3_0.objects.Vulnerability.affected_code:type_name -> ocsf.v1_3_0.objects.AffectedCode
	3,   // 251: ocsf.v1_3_0.objects.Vulnerability.affected_packages:type_name -> ocsf.v1_3_0.objects.AffectedPackage
	17,  // 252: ocsf.v1_3_0.objects.Vulnerability.cve:type_name -> ocsf.v1_3_0.objects.Cve
	19,  // 253: ocsf.v1_3_0.objects.Vulnerability.cwe:type_name -> ocsf.v1_3_0.objects.Cwe
	57,  // 254: ocsf.v1_3_0.objects.Vulnerability.kb_article_list:type_name -> ocsf.v1_3_0.objects.KbArticle
	80,  // 255: ocsf.v1_3_0.objects.Vulnerability.packages:type_name -> ocsf.v1_3_0.objects.Package
	89,  // 256: ocsf.v1_3_0.objects.Vulnerability.remediation:type_name -> ocsf.v1_3_0.objects.Remediation
	137, // 257: ocsf.v1_3_0.objects.WebResource.data:type_name -> google.protobuf.Struct
	23,  // 258: ocsf.v1_3_0.objects.WebResource.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	10,  // 259: ocsf.v1_3_0.objects.Whois.autonomous_system:type_name -> ocsf.v1_3_0.objects.AutonomousSystem
	171, // 260: ocsf.v1_3_0.objects.Whois.dnssec_status_id:type_name -> ocsf.v1_3_0.objects.enums.WHOIS_DNSSEC_STATUS_ID
	34,  // 261: ocsf.v1_3_0.objects.Whois.domain_contacts:type_name -> ocsf.v1_3_0.objects.DomainContact
	137, // 262: ocsf.v1_3_0.objects.WinResource.data:type_name -> google.protobuf.Struct
	23,  // 263: ocsf.v1_3_0.objects.WinResource.data_classification:type_name -> ocsf.v1_3_0.objects.DataClassification
	172, // 264: ocsf.v1_3_0.objects.WinResource.type_id:type_name -> ocsf.v1_3_0.objects.enums.WIN_RESOURCE_TYPE_ID
	173, // 265: ocsf.v1_3_0.objects.WinService.service_category_id:type_name -> ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_CATEGORY_ID
	174, // 266: ocsf.v1_3_0.objects.WinService.service_error_control_id:type_name -> ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_ERROR_CONTROL_ID
	175, // 267: ocsf.v1_3_0.objects.WinService.service_start_type_id:type_name -> ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_START_TYPE_ID
	176, // 268: ocsf.v1_3_0.objects.WinService.service_type_id:type_name -> ocsf.v1_3_0.objects.enums.WIN_SERVICE_SERVICE_TYPE_ID
	269, // [269:269] is the sub-list for method output_type
	269, // [269:269] is the sub-list for method input_type
	269, // [269:269] is the sub-list for extension type_name
	269, // [269:269] is the sub-list for extension extendee
	0,   // [0:269] is the sub-list for field type_name
}

func init() { file_ocsf_v1_3_0_objects_objects_proto_init() }
func file_ocsf_v1_3_0_objects_objects_proto_init() {
	if File_ocsf_v1_3_0_objects_objects_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_3_0_objects_objects_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   116,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_3_0_objects_objects_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_3_0_objects_objects_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_3_0_objects_objects_proto_msgTypes,
	}.Build()
	File_ocsf_v1_3_0_objects_objects_proto = out.File
	file_ocsf_v1_3_0_objects_objects_proto_rawDesc = nil
	file_ocsf_v1_3_0_objects_objects_proto_goTypes = nil
	file_ocsf_v1_3_0_objects_objects_proto_depIdxs = nil
}
