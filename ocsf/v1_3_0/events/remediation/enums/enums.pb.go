// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: ocsf/v1_3_0/events/remediation/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID int32

const (
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT   FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN  FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER   FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID.
var (
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE",
		2:  "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT",
		3:  "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE",
		4:  "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN",
		99: "FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE": 1,
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT":   2,
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE": 3,
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN":  4,
		"FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) Enum() *FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID {
	p := new(FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[0].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[0]
}

func (x FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{0}
}

type FILE_REMEDIATION_ACTIVITY_CATEGORY_UID int32

const (
	FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED FILE_REMEDIATION_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION FILE_REMEDIATION_ACTIVITY_CATEGORY_UID = 7 // Type: OCSF_VALUE; EnumValue: 7;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_CATEGORY_UID.
var (
	FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		7: "FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION",
	}
	FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED": 0,
		"FILE_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION": 7,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) Enum() *FILE_REMEDIATION_ACTIVITY_CATEGORY_UID {
	p := new(FILE_REMEDIATION_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[1].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[1]
}

func (x FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{1}
}

type FILE_REMEDIATION_ACTIVITY_CLASS_UID int32

const (
	FILE_REMEDIATION_ACTIVITY_CLASS_UID_FILE_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED               FILE_REMEDIATION_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FILE_REMEDIATION_ACTIVITY_CLASS_UID_FILE_REMEDIATION_ACTIVITY_CLASS_UID_FILE_REMEDIATION_ACTIVITY FILE_REMEDIATION_ACTIVITY_CLASS_UID = 7002 // Type: OCSF_VALUE; EnumValue: 7002;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_CLASS_UID.
var (
	FILE_REMEDIATION_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "FILE_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED",
		7002: "FILE_REMEDIATION_ACTIVITY_CLASS_UID_FILE_REMEDIATION_ACTIVITY",
	}
	FILE_REMEDIATION_ACTIVITY_CLASS_UID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED":               0,
		"FILE_REMEDIATION_ACTIVITY_CLASS_UID_FILE_REMEDIATION_ACTIVITY": 7002,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_CLASS_UID) Enum() *FILE_REMEDIATION_ACTIVITY_CLASS_UID {
	p := new(FILE_REMEDIATION_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[2].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[2]
}

func (x FILE_REMEDIATION_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_CLASS_UID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{2}
}

type FILE_REMEDIATION_ACTIVITY_SEVERITY_ID int32

const (
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN       FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW           FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM        FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH          FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL      FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL         FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER         FILE_REMEDIATION_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_SEVERITY_ID.
var (
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW",
		3:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL",
		99: "FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER",
	}
	FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW":           2,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"FILE_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) Enum() *FILE_REMEDIATION_ACTIVITY_SEVERITY_ID {
	p := new(FILE_REMEDIATION_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[3].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[3]
}

func (x FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{3}
}

type FILE_REMEDIATION_ACTIVITY_STATUS_ID int32

const (
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN        FILE_REMEDIATION_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS        FILE_REMEDIATION_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE        FILE_REMEDIATION_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST FILE_REMEDIATION_ACTIVITY_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL        FILE_REMEDIATION_ACTIVITY_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED    FILE_REMEDIATION_ACTIVITY_STATUS_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_ERROR          FILE_REMEDIATION_ACTIVITY_STATUS_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_FILE_REMEDIATION_ACTIVITY_STATUS_ID_OTHER          FILE_REMEDIATION_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_STATUS_ID.
var (
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE",
		3:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST",
		4:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL",
		5:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED",
		6:  "FILE_REMEDIATION_ACTIVITY_STATUS_ID_ERROR",
		99: "FILE_REMEDIATION_ACTIVITY_STATUS_ID_OTHER",
	}
	FILE_REMEDIATION_ACTIVITY_STATUS_ID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN":        0,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS":        1,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE":        2,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST": 3,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL":        4,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED":    5,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_ERROR":          6,
		"FILE_REMEDIATION_ACTIVITY_STATUS_ID_OTHER":          99,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_STATUS_ID) Enum() *FILE_REMEDIATION_ACTIVITY_STATUS_ID {
	p := new(FILE_REMEDIATION_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[4].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[4]
}

func (x FILE_REMEDIATION_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_STATUS_ID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{4}
}

type FILE_REMEDIATION_ACTIVITY_TYPE_UID int32

const (
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED                       FILE_REMEDIATION_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_UNKNOWN FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700200 // EnumValue: 700200; Type: OCSF_VALUE;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_ISOLATE FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700201 // Type: OCSF_VALUE; EnumValue: 700201;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_EVICT   FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700202 // Type: OCSF_VALUE; EnumValue: 700202;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_RESTORE FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700203 // Type: OCSF_VALUE; EnumValue: 700203;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_HARDEN  FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700204 // Type: OCSF_VALUE; EnumValue: 700204;
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_OTHER   FILE_REMEDIATION_ACTIVITY_TYPE_UID = 700299 // Type: OCSF_VALUE; EnumValue: 700299;
)

// Enum value maps for FILE_REMEDIATION_ACTIVITY_TYPE_UID.
var (
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "FILE_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED",
		700200: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_UNKNOWN",
		700201: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_ISOLATE",
		700202: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_EVICT",
		700203: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_RESTORE",
		700204: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_HARDEN",
		700299: "FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_OTHER",
	}
	FILE_REMEDIATION_ACTIVITY_TYPE_UID_value = map[string]int32{
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED":                       0,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_UNKNOWN": 700200,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_ISOLATE": 700201,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_EVICT":   700202,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_RESTORE": 700203,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_HARDEN":  700204,
		"FILE_REMEDIATION_ACTIVITY_TYPE_UID_FILE_REMEDIATION_ACTIVITY_OTHER":   700299,
	}
)

func (x FILE_REMEDIATION_ACTIVITY_TYPE_UID) Enum() *FILE_REMEDIATION_ACTIVITY_TYPE_UID {
	p := new(FILE_REMEDIATION_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x FILE_REMEDIATION_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_REMEDIATION_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[5].Descriptor()
}

func (FILE_REMEDIATION_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[5]
}

func (x FILE_REMEDIATION_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_REMEDIATION_ACTIVITY_TYPE_UID.Descriptor instead.
func (FILE_REMEDIATION_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{5}
}

type NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT   NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN  NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER   NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID.
var (
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE",
		2:  "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT",
		3:  "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE",
		4:  "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN",
		99: "NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE": 1,
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT":   2,
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE": 3,
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN":  4,
		"NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) Enum() *NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[6].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[6]
}

func (x NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{6}
}

type NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID = 7 // Type: OCSF_VALUE; EnumValue: 7;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID.
var (
	NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		7: "NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION",
	}
	NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED": 0,
		"NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION": 7,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) Enum() *NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[7].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[7]
}

func (x NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{7}
}

type NETWORK_REMEDIATION_ACTIVITY_CLASS_UID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED                  NETWORK_REMEDIATION_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_NETWORK_REMEDIATION_ACTIVITY NETWORK_REMEDIATION_ACTIVITY_CLASS_UID = 7004 // Type: OCSF_VALUE; EnumValue: 7004;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_CLASS_UID.
var (
	NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED",
		7004: "NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_NETWORK_REMEDIATION_ACTIVITY",
	}
	NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED":                  0,
		"NETWORK_REMEDIATION_ACTIVITY_CLASS_UID_NETWORK_REMEDIATION_ACTIVITY": 7004,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) Enum() *NETWORK_REMEDIATION_ACTIVITY_CLASS_UID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[8].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[8]
}

func (x NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_CLASS_UID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{8}
}

type NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN       NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW           NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM        NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH          NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL      NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL         NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER         NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID.
var (
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW",
		3:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL",
		99: "NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW":           2,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) Enum() *NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[9].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[9]
}

func (x NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{9}
}

type NETWORK_REMEDIATION_ACTIVITY_STATUS_ID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN        NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS        NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE        NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL        NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED    NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_ERROR          NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_OTHER          NETWORK_REMEDIATION_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_STATUS_ID.
var (
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE",
		3:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST",
		4:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL",
		5:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED",
		6:  "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_ERROR",
		99: "NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_OTHER",
	}
	NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN":        0,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS":        1,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE":        2,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST": 3,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL":        4,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED":    5,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_ERROR":          6,
		"NETWORK_REMEDIATION_ACTIVITY_STATUS_ID_OTHER":          99,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) Enum() *NETWORK_REMEDIATION_ACTIVITY_STATUS_ID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[10].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[10]
}

func (x NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_STATUS_ID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{10}
}

type NETWORK_REMEDIATION_ACTIVITY_TYPE_UID int32

const (
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED                          NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_UNKNOWN NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700400 // Type: OCSF_VALUE; EnumValue: 700400;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_ISOLATE NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700401 // Type: OCSF_VALUE; EnumValue: 700401;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_EVICT   NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700402 // EnumValue: 700402; Type: OCSF_VALUE;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_RESTORE NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700403 // Type: OCSF_VALUE; EnumValue: 700403;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_HARDEN  NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700404 // Type: OCSF_VALUE; EnumValue: 700404;
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_OTHER   NETWORK_REMEDIATION_ACTIVITY_TYPE_UID = 700499 // Type: OCSF_VALUE; EnumValue: 700499;
)

// Enum value maps for NETWORK_REMEDIATION_ACTIVITY_TYPE_UID.
var (
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED",
		700400: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_UNKNOWN",
		700401: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_ISOLATE",
		700402: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_EVICT",
		700403: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_RESTORE",
		700404: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_HARDEN",
		700499: "NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_OTHER",
	}
	NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_value = map[string]int32{
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED":                          0,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_UNKNOWN": 700400,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_ISOLATE": 700401,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_EVICT":   700402,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_RESTORE": 700403,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_HARDEN":  700404,
		"NETWORK_REMEDIATION_ACTIVITY_TYPE_UID_NETWORK_REMEDIATION_ACTIVITY_OTHER":   700499,
	}
)

func (x NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) Enum() *NETWORK_REMEDIATION_ACTIVITY_TYPE_UID {
	p := new(NETWORK_REMEDIATION_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[11].Descriptor()
}

func (NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[11]
}

func (x NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_REMEDIATION_ACTIVITY_TYPE_UID.Descriptor instead.
func (NETWORK_REMEDIATION_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{11}
}

type PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT   PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN  PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER   PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID.
var (
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE",
		2:  "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT",
		3:  "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE",
		4:  "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN",
		99: "PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE": 1,
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT":   2,
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE": 3,
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN":  4,
		"PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) Enum() *PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[12].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[12]
}

func (x PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{12}
}

type PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID = 7 // Type: OCSF_VALUE; EnumValue: 7;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID.
var (
	PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		7: "PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION",
	}
	PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED": 0,
		"PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION": 7,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) Enum() *PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[13].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[13]
}

func (x PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{13}
}

type PROCESS_REMEDIATION_ACTIVITY_CLASS_UID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED                  PROCESS_REMEDIATION_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_PROCESS_REMEDIATION_ACTIVITY PROCESS_REMEDIATION_ACTIVITY_CLASS_UID = 7003 // Type: OCSF_VALUE; EnumValue: 7003;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_CLASS_UID.
var (
	PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED",
		7003: "PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_PROCESS_REMEDIATION_ACTIVITY",
	}
	PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED":                  0,
		"PROCESS_REMEDIATION_ACTIVITY_CLASS_UID_PROCESS_REMEDIATION_ACTIVITY": 7003,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) Enum() *PROCESS_REMEDIATION_ACTIVITY_CLASS_UID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[14].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[14]
}

func (x PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_CLASS_UID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{14}
}

type PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN       PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW           PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM        PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH          PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL      PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL         PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER         PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID.
var (
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW",
		3:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL",
		99: "PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER",
	}
	PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW":           2,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) Enum() *PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[15].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[15]
}

func (x PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{15}
}

type PROCESS_REMEDIATION_ACTIVITY_STATUS_ID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN        PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS        PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE        PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL        PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED    PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_ERROR          PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_OTHER          PROCESS_REMEDIATION_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_STATUS_ID.
var (
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE",
		3:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST",
		4:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL",
		5:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED",
		6:  "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_ERROR",
		99: "PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_OTHER",
	}
	PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN":        0,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS":        1,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE":        2,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST": 3,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL":        4,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED":    5,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_ERROR":          6,
		"PROCESS_REMEDIATION_ACTIVITY_STATUS_ID_OTHER":          99,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) Enum() *PROCESS_REMEDIATION_ACTIVITY_STATUS_ID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[16].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[16]
}

func (x PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_STATUS_ID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{16}
}

type PROCESS_REMEDIATION_ACTIVITY_TYPE_UID int32

const (
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED                          PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_UNKNOWN PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700300 // Type: OCSF_VALUE; EnumValue: 700300;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_ISOLATE PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700301 // Type: OCSF_VALUE; EnumValue: 700301;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_EVICT   PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700302 // Type: OCSF_VALUE; EnumValue: 700302;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_RESTORE PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700303 // Type: OCSF_VALUE; EnumValue: 700303;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_HARDEN  PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700304 // Type: OCSF_VALUE; EnumValue: 700304;
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_OTHER   PROCESS_REMEDIATION_ACTIVITY_TYPE_UID = 700399 // Type: OCSF_VALUE; EnumValue: 700399;
)

// Enum value maps for PROCESS_REMEDIATION_ACTIVITY_TYPE_UID.
var (
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED",
		700300: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_UNKNOWN",
		700301: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_ISOLATE",
		700302: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_EVICT",
		700303: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_RESTORE",
		700304: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_HARDEN",
		700399: "PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_OTHER",
	}
	PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_value = map[string]int32{
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED":                          0,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_UNKNOWN": 700300,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_ISOLATE": 700301,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_EVICT":   700302,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_RESTORE": 700303,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_HARDEN":  700304,
		"PROCESS_REMEDIATION_ACTIVITY_TYPE_UID_PROCESS_REMEDIATION_ACTIVITY_OTHER":   700399,
	}
)

func (x PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) Enum() *PROCESS_REMEDIATION_ACTIVITY_TYPE_UID {
	p := new(PROCESS_REMEDIATION_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[17].Descriptor()
}

func (PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[17]
}

func (x PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_REMEDIATION_ACTIVITY_TYPE_UID.Descriptor instead.
func (PROCESS_REMEDIATION_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{17}
}

type REMEDIATION_ACTIVITY_ACTIVITY_ID int32

const (
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN REMEDIATION_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE REMEDIATION_ACTIVITY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT   REMEDIATION_ACTIVITY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE REMEDIATION_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN  REMEDIATION_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REMEDIATION_ACTIVITY_ACTIVITY_ID_REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER   REMEDIATION_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REMEDIATION_ACTIVITY_ACTIVITY_ID.
var (
	REMEDIATION_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE",
		2:  "REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT",
		3:  "REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE",
		4:  "REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN",
		99: "REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	REMEDIATION_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_ISOLATE": 1,
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_EVICT":   2,
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_RESTORE": 3,
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_HARDEN":  4,
		"REMEDIATION_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x REMEDIATION_ACTIVITY_ACTIVITY_ID) Enum() *REMEDIATION_ACTIVITY_ACTIVITY_ID {
	p := new(REMEDIATION_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[18].Descriptor()
}

func (REMEDIATION_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[18]
}

func (x REMEDIATION_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (REMEDIATION_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{18}
}

type REMEDIATION_ACTIVITY_CATEGORY_UID int32

const (
	REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED REMEDIATION_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION REMEDIATION_ACTIVITY_CATEGORY_UID = 7 // Type: OCSF_VALUE; EnumValue: 7;
)

// Enum value maps for REMEDIATION_ACTIVITY_CATEGORY_UID.
var (
	REMEDIATION_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		7: "REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION",
	}
	REMEDIATION_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_CATEGORY_UID_UNSPECIFIED": 0,
		"REMEDIATION_ACTIVITY_CATEGORY_UID_REMEDIATION": 7,
	}
)

func (x REMEDIATION_ACTIVITY_CATEGORY_UID) Enum() *REMEDIATION_ACTIVITY_CATEGORY_UID {
	p := new(REMEDIATION_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[19].Descriptor()
}

func (REMEDIATION_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[19]
}

func (x REMEDIATION_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (REMEDIATION_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{19}
}

type REMEDIATION_ACTIVITY_CLASS_UID int32

const (
	REMEDIATION_ACTIVITY_CLASS_UID_REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED          REMEDIATION_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	REMEDIATION_ACTIVITY_CLASS_UID_REMEDIATION_ACTIVITY_CLASS_UID_REMEDIATION_ACTIVITY REMEDIATION_ACTIVITY_CLASS_UID = 7001 // Type: OCSF_VALUE; EnumValue: 7001;
)

// Enum value maps for REMEDIATION_ACTIVITY_CLASS_UID.
var (
	REMEDIATION_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED",
		7001: "REMEDIATION_ACTIVITY_CLASS_UID_REMEDIATION_ACTIVITY",
	}
	REMEDIATION_ACTIVITY_CLASS_UID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_CLASS_UID_UNSPECIFIED":          0,
		"REMEDIATION_ACTIVITY_CLASS_UID_REMEDIATION_ACTIVITY": 7001,
	}
)

func (x REMEDIATION_ACTIVITY_CLASS_UID) Enum() *REMEDIATION_ACTIVITY_CLASS_UID {
	p := new(REMEDIATION_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[20].Descriptor()
}

func (REMEDIATION_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[20]
}

func (x REMEDIATION_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_CLASS_UID.Descriptor instead.
func (REMEDIATION_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{20}
}

type REMEDIATION_ACTIVITY_SEVERITY_ID int32

const (
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN       REMEDIATION_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL REMEDIATION_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_LOW           REMEDIATION_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM        REMEDIATION_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH          REMEDIATION_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL      REMEDIATION_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL         REMEDIATION_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REMEDIATION_ACTIVITY_SEVERITY_ID_REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER         REMEDIATION_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REMEDIATION_ACTIVITY_SEVERITY_ID.
var (
	REMEDIATION_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "REMEDIATION_ACTIVITY_SEVERITY_ID_LOW",
		3:  "REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL",
		99: "REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER",
	}
	REMEDIATION_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_LOW":           2,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"REMEDIATION_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x REMEDIATION_ACTIVITY_SEVERITY_ID) Enum() *REMEDIATION_ACTIVITY_SEVERITY_ID {
	p := new(REMEDIATION_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[21].Descriptor()
}

func (REMEDIATION_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[21]
}

func (x REMEDIATION_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (REMEDIATION_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{21}
}

type REMEDIATION_ACTIVITY_STATUS_ID int32

const (
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN        REMEDIATION_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS        REMEDIATION_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_FAILURE        REMEDIATION_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST REMEDIATION_ACTIVITY_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL        REMEDIATION_ACTIVITY_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED    REMEDIATION_ACTIVITY_STATUS_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_ERROR          REMEDIATION_ACTIVITY_STATUS_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REMEDIATION_ACTIVITY_STATUS_ID_REMEDIATION_ACTIVITY_STATUS_ID_OTHER          REMEDIATION_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REMEDIATION_ACTIVITY_STATUS_ID.
var (
	REMEDIATION_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "REMEDIATION_ACTIVITY_STATUS_ID_FAILURE",
		3:  "REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST",
		4:  "REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL",
		5:  "REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED",
		6:  "REMEDIATION_ACTIVITY_STATUS_ID_ERROR",
		99: "REMEDIATION_ACTIVITY_STATUS_ID_OTHER",
	}
	REMEDIATION_ACTIVITY_STATUS_ID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_STATUS_ID_UNKNOWN":        0,
		"REMEDIATION_ACTIVITY_STATUS_ID_SUCCESS":        1,
		"REMEDIATION_ACTIVITY_STATUS_ID_FAILURE":        2,
		"REMEDIATION_ACTIVITY_STATUS_ID_DOES_NOT_EXIST": 3,
		"REMEDIATION_ACTIVITY_STATUS_ID_PARTIAL":        4,
		"REMEDIATION_ACTIVITY_STATUS_ID_UNSUPPORTED":    5,
		"REMEDIATION_ACTIVITY_STATUS_ID_ERROR":          6,
		"REMEDIATION_ACTIVITY_STATUS_ID_OTHER":          99,
	}
)

func (x REMEDIATION_ACTIVITY_STATUS_ID) Enum() *REMEDIATION_ACTIVITY_STATUS_ID {
	p := new(REMEDIATION_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[22].Descriptor()
}

func (REMEDIATION_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[22]
}

func (x REMEDIATION_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_STATUS_ID.Descriptor instead.
func (REMEDIATION_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{22}
}

type REMEDIATION_ACTIVITY_TYPE_UID int32

const (
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED                  REMEDIATION_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_UNKNOWN REMEDIATION_ACTIVITY_TYPE_UID = 700100 // Type: OCSF_VALUE; EnumValue: 700100;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_ISOLATE REMEDIATION_ACTIVITY_TYPE_UID = 700101 // EnumValue: 700101; Type: OCSF_VALUE;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_EVICT   REMEDIATION_ACTIVITY_TYPE_UID = 700102 // Type: OCSF_VALUE; EnumValue: 700102;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_RESTORE REMEDIATION_ACTIVITY_TYPE_UID = 700103 // Type: OCSF_VALUE; EnumValue: 700103;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_HARDEN  REMEDIATION_ACTIVITY_TYPE_UID = 700104 // Type: OCSF_VALUE; EnumValue: 700104;
	REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_OTHER   REMEDIATION_ACTIVITY_TYPE_UID = 700199 // Type: OCSF_VALUE; EnumValue: 700199;
)

// Enum value maps for REMEDIATION_ACTIVITY_TYPE_UID.
var (
	REMEDIATION_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED",
		700100: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_UNKNOWN",
		700101: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_ISOLATE",
		700102: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_EVICT",
		700103: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_RESTORE",
		700104: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_HARDEN",
		700199: "REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_OTHER",
	}
	REMEDIATION_ACTIVITY_TYPE_UID_value = map[string]int32{
		"REMEDIATION_ACTIVITY_TYPE_UID_UNSPECIFIED":                  0,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_UNKNOWN": 700100,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_ISOLATE": 700101,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_EVICT":   700102,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_RESTORE": 700103,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_HARDEN":  700104,
		"REMEDIATION_ACTIVITY_TYPE_UID_REMEDIATION_ACTIVITY_OTHER":   700199,
	}
)

func (x REMEDIATION_ACTIVITY_TYPE_UID) Enum() *REMEDIATION_ACTIVITY_TYPE_UID {
	p := new(REMEDIATION_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x REMEDIATION_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REMEDIATION_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[23].Descriptor()
}

func (REMEDIATION_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes[23]
}

func (x REMEDIATION_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REMEDIATION_ACTIVITY_TYPE_UID.Descriptor instead.
func (REMEDIATION_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP(), []int{23}
}

var File_ocsf_v1_3_0_events_remediation_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x24, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0xd4, 0x02, 0x0a, 0x25, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x2f,
	0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x98, 0x01, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x9e, 0x01, 0x0a, 0x23, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3d, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xda, 0x36, 0x2a, 0xba, 0x03, 0x0a, 0x25,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x30, 0x0a, 0x2c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb4, 0x03, 0x0a, 0x23, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06,
	0x12, 0x2d, 0x0a, 0x29, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x9b, 0x04, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4a, 0x0a, 0x44, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xa8, 0xde, 0x2a, 0x12, 0x4a, 0x0a, 0x44, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xa9,
	0xde, 0x2a, 0x12, 0x48, 0x0a, 0x42, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0xaa, 0xde, 0x2a, 0x12, 0x4a, 0x0a, 0x44,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0xab, 0xde, 0x2a, 0x12, 0x49, 0x0a, 0x43, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10,
	0xac, 0xde, 0x2a, 0x12, 0x48, 0x0a, 0x42, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8b, 0xdf, 0x2a, 0x2a, 0xe9, 0x02,
	0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03,
	0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x52,
	0x44, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1, 0x01, 0x0a, 0x29, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x35, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0xaa, 0x01,
	0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x48, 0x0a, 0x43, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xdc, 0x36, 0x2a, 0xd5, 0x03, 0x0a, 0x28, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3a, 0x0a,
	0x36, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x32,
	0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xcf, 0x03, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xc5, 0x04, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x35,
	0x0a, 0x31, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xf0, 0xdf, 0x2a, 0x12, 0x50, 0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xf1, 0xdf, 0x2a, 0x12, 0x4e, 0x0a, 0x48, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0xf2, 0xdf, 0x2a, 0x12, 0x50, 0x0a, 0x4a, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xf3, 0xdf, 0x2a, 0x12, 0x4f, 0x0a, 0x49, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0xf4, 0xdf, 0x2a, 0x12, 0x4e, 0x0a, 0x48,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xd3, 0xe0, 0x2a, 0x2a, 0xe9, 0x02, 0x0a,
	0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12,
	0x33, 0x0a, 0x2f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x45, 0x4e, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1, 0x01, 0x0a, 0x29, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0xaa, 0x01, 0x0a,
	0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x48, 0x0a, 0x43, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xdb, 0x36, 0x2a, 0xd5, 0x03, 0x0a, 0x28, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x32, 0x0a,
	0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xcf, 0x03, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x30, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x06, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xc5, 0x04, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x35, 0x0a,
	0x31, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x4a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x8c, 0xdf, 0x2a, 0x12, 0x50, 0x0a, 0x4a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x8d, 0xdf, 0x2a, 0x12, 0x4e, 0x0a, 0x48, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45,
	0x56, 0x49, 0x43, 0x54, 0x10, 0x8e, 0xdf, 0x2a, 0x12, 0x50, 0x0a, 0x4a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x8f, 0xdf, 0x2a, 0x12, 0x4f, 0x0a, 0x49, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x48, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0x90, 0xdf, 0x2a, 0x12, 0x4e, 0x0a, 0x48, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xef, 0xdf, 0x2a, 0x2a, 0xb1, 0x02, 0x0a, 0x20,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x45,
	0x4e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x89, 0x01, 0x0a, 0x21, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x2a, 0x8a, 0x01, 0x0a, 0x1e,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38,
	0x0a, 0x33, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xd9, 0x36, 0x2a, 0x8d, 0x03, 0x0a, 0x20, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x28, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x87, 0x03, 0x0a, 0x1e, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52,
	0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x31, 0x0a, 0x2d, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xd5, 0x03, 0x0a, 0x1d, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x40, 0x0a, 0x3a, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xc4, 0xdd, 0x2a, 0x12, 0x40, 0x0a, 0x3a, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0xc5, 0xdd, 0x2a, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56,
	0x49, 0x43, 0x54, 0x10, 0xc6, 0xdd, 0x2a, 0x12, 0x40, 0x0a, 0x3a, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xc7, 0xdd, 0x2a, 0x12, 0x3f, 0x0a, 0x39, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0xc8, 0xdd, 0x2a, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xa7, 0xde, 0x2a, 0x42, 0xb1, 0x02, 0x0a, 0x28, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x52, 0x45, 0xaa, 0x02, 0x22, 0x4f, 0x63, 0x73,
	0x66, 0x2e, 0x56, 0x31, 0x33, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca,
	0x02, 0x22, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5c, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x2e, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30,
	0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x26, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31,
	0x33, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x52, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescData = file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDesc
)

func file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDescData
}

var file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_ocsf_v1_3_0_events_remediation_enums_enums_proto_goTypes = []any{
	(FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID)(0),     // 0: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_ACTIVITY_ID
	(FILE_REMEDIATION_ACTIVITY_CATEGORY_UID)(0),    // 1: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_CATEGORY_UID
	(FILE_REMEDIATION_ACTIVITY_CLASS_UID)(0),       // 2: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_CLASS_UID
	(FILE_REMEDIATION_ACTIVITY_SEVERITY_ID)(0),     // 3: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_SEVERITY_ID
	(FILE_REMEDIATION_ACTIVITY_STATUS_ID)(0),       // 4: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_STATUS_ID
	(FILE_REMEDIATION_ACTIVITY_TYPE_UID)(0),        // 5: ocsf.v1_3_0.events.remediation.enums.FILE_REMEDIATION_ACTIVITY_TYPE_UID
	(NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID)(0),  // 6: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_ACTIVITY_ID
	(NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID)(0), // 7: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_CATEGORY_UID
	(NETWORK_REMEDIATION_ACTIVITY_CLASS_UID)(0),    // 8: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_CLASS_UID
	(NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID)(0),  // 9: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_SEVERITY_ID
	(NETWORK_REMEDIATION_ACTIVITY_STATUS_ID)(0),    // 10: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_STATUS_ID
	(NETWORK_REMEDIATION_ACTIVITY_TYPE_UID)(0),     // 11: ocsf.v1_3_0.events.remediation.enums.NETWORK_REMEDIATION_ACTIVITY_TYPE_UID
	(PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID)(0),  // 12: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_ACTIVITY_ID
	(PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID)(0), // 13: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_CATEGORY_UID
	(PROCESS_REMEDIATION_ACTIVITY_CLASS_UID)(0),    // 14: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_CLASS_UID
	(PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID)(0),  // 15: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_SEVERITY_ID
	(PROCESS_REMEDIATION_ACTIVITY_STATUS_ID)(0),    // 16: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_STATUS_ID
	(PROCESS_REMEDIATION_ACTIVITY_TYPE_UID)(0),     // 17: ocsf.v1_3_0.events.remediation.enums.PROCESS_REMEDIATION_ACTIVITY_TYPE_UID
	(REMEDIATION_ACTIVITY_ACTIVITY_ID)(0),          // 18: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_ACTIVITY_ID
	(REMEDIATION_ACTIVITY_CATEGORY_UID)(0),         // 19: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_CATEGORY_UID
	(REMEDIATION_ACTIVITY_CLASS_UID)(0),            // 20: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_CLASS_UID
	(REMEDIATION_ACTIVITY_SEVERITY_ID)(0),          // 21: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_SEVERITY_ID
	(REMEDIATION_ACTIVITY_STATUS_ID)(0),            // 22: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_STATUS_ID
	(REMEDIATION_ACTIVITY_TYPE_UID)(0),             // 23: ocsf.v1_3_0.events.remediation.enums.REMEDIATION_ACTIVITY_TYPE_UID
}
var file_ocsf_v1_3_0_events_remediation_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_3_0_events_remediation_enums_enums_proto_init() }
func file_ocsf_v1_3_0_events_remediation_enums_enums_proto_init() {
	if File_ocsf_v1_3_0_events_remediation_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_3_0_events_remediation_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_3_0_events_remediation_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_3_0_events_remediation_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_3_0_events_remediation_enums_enums_proto = out.File
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_goTypes = nil
	file_ocsf_v1_3_0_events_remediation_enums_enums_proto_depIdxs = nil
}
