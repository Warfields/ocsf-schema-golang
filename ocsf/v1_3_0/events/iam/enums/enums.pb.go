// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: ocsf/v1_3_0/events/iam/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACCOUNT_CHANGE_ACTIVITY_ID int32

const (
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN            ACCOUNT_CHANGE_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_CREATE             ACCOUNT_CHANGE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_ENABLE             ACCOUNT_CHANGE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_CHANGE    ACCOUNT_CHANGE_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_RESET     ACCOUNT_CHANGE_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_DISABLE            ACCOUNT_CHANGE_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_DELETE             ACCOUNT_CHANGE_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_ATTACH_POLICY      ACCOUNT_CHANGE_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_DETACH_POLICY      ACCOUNT_CHANGE_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_LOCK               ACCOUNT_CHANGE_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_ENABLE  ACCOUNT_CHANGE_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_DISABLE ACCOUNT_CHANGE_ACTIVITY_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_OTHER              ACCOUNT_CHANGE_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_ACTIVITY_ID.
var (
	ACCOUNT_CHANGE_ACTIVITY_ID_name = map[int32]string{
		0:  "ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN",
		1:  "ACCOUNT_CHANGE_ACTIVITY_ID_CREATE",
		2:  "ACCOUNT_CHANGE_ACTIVITY_ID_ENABLE",
		3:  "ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_CHANGE",
		4:  "ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_RESET",
		5:  "ACCOUNT_CHANGE_ACTIVITY_ID_DISABLE",
		6:  "ACCOUNT_CHANGE_ACTIVITY_ID_DELETE",
		7:  "ACCOUNT_CHANGE_ACTIVITY_ID_ATTACH_POLICY",
		8:  "ACCOUNT_CHANGE_ACTIVITY_ID_DETACH_POLICY",
		9:  "ACCOUNT_CHANGE_ACTIVITY_ID_LOCK",
		10: "ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_ENABLE",
		11: "ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_DISABLE",
		99: "ACCOUNT_CHANGE_ACTIVITY_ID_OTHER",
	}
	ACCOUNT_CHANGE_ACTIVITY_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN":            0,
		"ACCOUNT_CHANGE_ACTIVITY_ID_CREATE":             1,
		"ACCOUNT_CHANGE_ACTIVITY_ID_ENABLE":             2,
		"ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_CHANGE":    3,
		"ACCOUNT_CHANGE_ACTIVITY_ID_PASSWORD_RESET":     4,
		"ACCOUNT_CHANGE_ACTIVITY_ID_DISABLE":            5,
		"ACCOUNT_CHANGE_ACTIVITY_ID_DELETE":             6,
		"ACCOUNT_CHANGE_ACTIVITY_ID_ATTACH_POLICY":      7,
		"ACCOUNT_CHANGE_ACTIVITY_ID_DETACH_POLICY":      8,
		"ACCOUNT_CHANGE_ACTIVITY_ID_LOCK":               9,
		"ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_ENABLE":  10,
		"ACCOUNT_CHANGE_ACTIVITY_ID_MFA_FACTOR_DISABLE": 11,
		"ACCOUNT_CHANGE_ACTIVITY_ID_OTHER":              99,
	}
)

func (x ACCOUNT_CHANGE_ACTIVITY_ID) Enum() *ACCOUNT_CHANGE_ACTIVITY_ID {
	p := new(ACCOUNT_CHANGE_ACTIVITY_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[0].Descriptor()
}

func (ACCOUNT_CHANGE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[0]
}

func (x ACCOUNT_CHANGE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_ACTIVITY_ID.Descriptor instead.
func (ACCOUNT_CHANGE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{0}
}

type ACCOUNT_CHANGE_CATEGORY_UID int32

const (
	ACCOUNT_CHANGE_CATEGORY_UID_ACCOUNT_CHANGE_CATEGORY_UID_UNSPECIFIED                ACCOUNT_CHANGE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	ACCOUNT_CHANGE_CATEGORY_UID_ACCOUNT_CHANGE_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT ACCOUNT_CHANGE_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for ACCOUNT_CHANGE_CATEGORY_UID.
var (
	ACCOUNT_CHANGE_CATEGORY_UID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_CATEGORY_UID_UNSPECIFIED",
		3: "ACCOUNT_CHANGE_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	ACCOUNT_CHANGE_CATEGORY_UID_value = map[string]int32{
		"ACCOUNT_CHANGE_CATEGORY_UID_UNSPECIFIED":                0,
		"ACCOUNT_CHANGE_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x ACCOUNT_CHANGE_CATEGORY_UID) Enum() *ACCOUNT_CHANGE_CATEGORY_UID {
	p := new(ACCOUNT_CHANGE_CATEGORY_UID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[1].Descriptor()
}

func (ACCOUNT_CHANGE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[1]
}

func (x ACCOUNT_CHANGE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_CATEGORY_UID.Descriptor instead.
func (ACCOUNT_CHANGE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{1}
}

type ACCOUNT_CHANGE_CLASS_UID int32

const (
	ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE_CLASS_UID_UNSPECIFIED    ACCOUNT_CHANGE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE ACCOUNT_CHANGE_CLASS_UID = 3001 // EnumValue: 3001; Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_CLASS_UID.
var (
	ACCOUNT_CHANGE_CLASS_UID_name = map[int32]string{
		0:    "ACCOUNT_CHANGE_CLASS_UID_UNSPECIFIED",
		3001: "ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE",
	}
	ACCOUNT_CHANGE_CLASS_UID_value = map[string]int32{
		"ACCOUNT_CHANGE_CLASS_UID_UNSPECIFIED":    0,
		"ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE": 3001,
	}
)

func (x ACCOUNT_CHANGE_CLASS_UID) Enum() *ACCOUNT_CHANGE_CLASS_UID {
	p := new(ACCOUNT_CHANGE_CLASS_UID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[2].Descriptor()
}

func (ACCOUNT_CHANGE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[2]
}

func (x ACCOUNT_CHANGE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_CLASS_UID.Descriptor instead.
func (ACCOUNT_CHANGE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{2}
}

type ACCOUNT_CHANGE_SEVERITY_ID int32

const (
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN       ACCOUNT_CHANGE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL ACCOUNT_CHANGE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_LOW           ACCOUNT_CHANGE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM        ACCOUNT_CHANGE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_HIGH          ACCOUNT_CHANGE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL      ACCOUNT_CHANGE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_FATAL         ACCOUNT_CHANGE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_OTHER         ACCOUNT_CHANGE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ACCOUNT_CHANGE_SEVERITY_ID.
var (
	ACCOUNT_CHANGE_SEVERITY_ID_name = map[int32]string{
		0:  "ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN",
		1:  "ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL",
		2:  "ACCOUNT_CHANGE_SEVERITY_ID_LOW",
		3:  "ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM",
		4:  "ACCOUNT_CHANGE_SEVERITY_ID_HIGH",
		5:  "ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL",
		6:  "ACCOUNT_CHANGE_SEVERITY_ID_FATAL",
		99: "ACCOUNT_CHANGE_SEVERITY_ID_OTHER",
	}
	ACCOUNT_CHANGE_SEVERITY_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN":       0,
		"ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL": 1,
		"ACCOUNT_CHANGE_SEVERITY_ID_LOW":           2,
		"ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM":        3,
		"ACCOUNT_CHANGE_SEVERITY_ID_HIGH":          4,
		"ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL":      5,
		"ACCOUNT_CHANGE_SEVERITY_ID_FATAL":         6,
		"ACCOUNT_CHANGE_SEVERITY_ID_OTHER":         99,
	}
)

func (x ACCOUNT_CHANGE_SEVERITY_ID) Enum() *ACCOUNT_CHANGE_SEVERITY_ID {
	p := new(ACCOUNT_CHANGE_SEVERITY_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[3].Descriptor()
}

func (ACCOUNT_CHANGE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[3]
}

func (x ACCOUNT_CHANGE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_SEVERITY_ID.Descriptor instead.
func (ACCOUNT_CHANGE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{3}
}

type ACCOUNT_CHANGE_STATUS_ID int32

const (
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_UNKNOWN ACCOUNT_CHANGE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_SUCCESS ACCOUNT_CHANGE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_FAILURE ACCOUNT_CHANGE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_OTHER   ACCOUNT_CHANGE_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_STATUS_ID.
var (
	ACCOUNT_CHANGE_STATUS_ID_name = map[int32]string{
		0:  "ACCOUNT_CHANGE_STATUS_ID_UNKNOWN",
		1:  "ACCOUNT_CHANGE_STATUS_ID_SUCCESS",
		2:  "ACCOUNT_CHANGE_STATUS_ID_FAILURE",
		99: "ACCOUNT_CHANGE_STATUS_ID_OTHER",
	}
	ACCOUNT_CHANGE_STATUS_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_STATUS_ID_UNKNOWN": 0,
		"ACCOUNT_CHANGE_STATUS_ID_SUCCESS": 1,
		"ACCOUNT_CHANGE_STATUS_ID_FAILURE": 2,
		"ACCOUNT_CHANGE_STATUS_ID_OTHER":   99,
	}
)

func (x ACCOUNT_CHANGE_STATUS_ID) Enum() *ACCOUNT_CHANGE_STATUS_ID {
	p := new(ACCOUNT_CHANGE_STATUS_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[4].Descriptor()
}

func (ACCOUNT_CHANGE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[4]
}

func (x ACCOUNT_CHANGE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_STATUS_ID.Descriptor instead.
func (ACCOUNT_CHANGE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{4}
}

type ACCOUNT_CHANGE_TYPE_UID int32

const (
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_UNSPECIFIED                       ACCOUNT_CHANGE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_UNKNOWN            ACCOUNT_CHANGE_TYPE_UID = 300100 // Type: OCSF_VALUE; EnumValue: 300100;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_CREATE             ACCOUNT_CHANGE_TYPE_UID = 300101 // Type: OCSF_VALUE; EnumValue: 300101;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ENABLE             ACCOUNT_CHANGE_TYPE_UID = 300102 // Type: OCSF_VALUE; EnumValue: 300102;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_CHANGE    ACCOUNT_CHANGE_TYPE_UID = 300103 // Type: OCSF_VALUE; EnumValue: 300103;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_RESET     ACCOUNT_CHANGE_TYPE_UID = 300104 // Type: OCSF_VALUE; EnumValue: 300104;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DISABLE            ACCOUNT_CHANGE_TYPE_UID = 300105 // Type: OCSF_VALUE; EnumValue: 300105;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DELETE             ACCOUNT_CHANGE_TYPE_UID = 300106 // Type: OCSF_VALUE; EnumValue: 300106;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ATTACH_POLICY      ACCOUNT_CHANGE_TYPE_UID = 300107 // Type: OCSF_VALUE; EnumValue: 300107;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DETACH_POLICY      ACCOUNT_CHANGE_TYPE_UID = 300108 // Type: OCSF_VALUE; EnumValue: 300108;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_LOCK               ACCOUNT_CHANGE_TYPE_UID = 300109 // Type: OCSF_VALUE; EnumValue: 300109;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_ENABLE  ACCOUNT_CHANGE_TYPE_UID = 300110 // Type: OCSF_VALUE; EnumValue: 300110;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_DISABLE ACCOUNT_CHANGE_TYPE_UID = 300111 // Type: OCSF_VALUE; EnumValue: 300111;
	ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_OTHER              ACCOUNT_CHANGE_TYPE_UID = 300199 // Type: OCSF_VALUE; EnumValue: 300199;
)

// Enum value maps for ACCOUNT_CHANGE_TYPE_UID.
var (
	ACCOUNT_CHANGE_TYPE_UID_name = map[int32]string{
		0:      "ACCOUNT_CHANGE_TYPE_UID_UNSPECIFIED",
		300100: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_UNKNOWN",
		300101: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_CREATE",
		300102: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ENABLE",
		300103: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_CHANGE",
		300104: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_RESET",
		300105: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DISABLE",
		300106: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DELETE",
		300107: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ATTACH_POLICY",
		300108: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DETACH_POLICY",
		300109: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_LOCK",
		300110: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_ENABLE",
		300111: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_DISABLE",
		300199: "ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_OTHER",
	}
	ACCOUNT_CHANGE_TYPE_UID_value = map[string]int32{
		"ACCOUNT_CHANGE_TYPE_UID_UNSPECIFIED":                       0,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_UNKNOWN":            300100,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_CREATE":             300101,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ENABLE":             300102,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_CHANGE":    300103,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_PASSWORD_RESET":     300104,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DISABLE":            300105,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DELETE":             300106,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_ATTACH_POLICY":      300107,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_DETACH_POLICY":      300108,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_LOCK":               300109,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_ENABLE":  300110,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_MFA_FACTOR_DISABLE": 300111,
		"ACCOUNT_CHANGE_TYPE_UID_ACCOUNT_CHANGE_OTHER":              300199,
	}
)

func (x ACCOUNT_CHANGE_TYPE_UID) Enum() *ACCOUNT_CHANGE_TYPE_UID {
	p := new(ACCOUNT_CHANGE_TYPE_UID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[5].Descriptor()
}

func (ACCOUNT_CHANGE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[5]
}

func (x ACCOUNT_CHANGE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_TYPE_UID.Descriptor instead.
func (ACCOUNT_CHANGE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{5}
}

type AUTHENTICATION_ACTIVITY_ID int32

const (
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_UNKNOWN                AUTHENTICATION_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_LOGON                  AUTHENTICATION_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_LOGOFF                 AUTHENTICATION_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_TICKET  AUTHENTICATION_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_REQUEST AUTHENTICATION_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_RENEW   AUTHENTICATION_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_PREAUTH                AUTHENTICATION_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_OTHER                  AUTHENTICATION_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHENTICATION_ACTIVITY_ID.
var (
	AUTHENTICATION_ACTIVITY_ID_name = map[int32]string{
		0:  "AUTHENTICATION_ACTIVITY_ID_UNKNOWN",
		1:  "AUTHENTICATION_ACTIVITY_ID_LOGON",
		2:  "AUTHENTICATION_ACTIVITY_ID_LOGOFF",
		3:  "AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_TICKET",
		4:  "AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_REQUEST",
		5:  "AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_RENEW",
		6:  "AUTHENTICATION_ACTIVITY_ID_PREAUTH",
		99: "AUTHENTICATION_ACTIVITY_ID_OTHER",
	}
	AUTHENTICATION_ACTIVITY_ID_value = map[string]int32{
		"AUTHENTICATION_ACTIVITY_ID_UNKNOWN":                0,
		"AUTHENTICATION_ACTIVITY_ID_LOGON":                  1,
		"AUTHENTICATION_ACTIVITY_ID_LOGOFF":                 2,
		"AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_TICKET":  3,
		"AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_REQUEST": 4,
		"AUTHENTICATION_ACTIVITY_ID_SERVICE_TICKET_RENEW":   5,
		"AUTHENTICATION_ACTIVITY_ID_PREAUTH":                6,
		"AUTHENTICATION_ACTIVITY_ID_OTHER":                  99,
	}
)

func (x AUTHENTICATION_ACTIVITY_ID) Enum() *AUTHENTICATION_ACTIVITY_ID {
	p := new(AUTHENTICATION_ACTIVITY_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[6].Descriptor()
}

func (AUTHENTICATION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[6]
}

func (x AUTHENTICATION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_ACTIVITY_ID.Descriptor instead.
func (AUTHENTICATION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{6}
}

type AUTHENTICATION_AUTH_PROTOCOL_ID int32

const (
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN   AUTHENTICATION_AUTH_PROTOCOL_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM      AUTHENTICATION_AUTH_PROTOCOL_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS  AUTHENTICATION_AUTH_PROTOCOL_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST    AUTHENTICATION_AUTH_PROTOCOL_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID   AUTHENTICATION_AUTH_PROTOCOL_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_SAML      AUTHENTICATION_AUTH_PROTOCOL_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0 AUTHENTICATION_AUTH_PROTOCOL_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_PAP       AUTHENTICATION_AUTH_PROTOCOL_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP      AUTHENTICATION_AUTH_PROTOCOL_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_EAP       AUTHENTICATION_AUTH_PROTOCOL_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS    AUTHENTICATION_AUTH_PROTOCOL_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER     AUTHENTICATION_AUTH_PROTOCOL_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHENTICATION_AUTH_PROTOCOL_ID.
var (
	AUTHENTICATION_AUTH_PROTOCOL_ID_name = map[int32]string{
		0:  "AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN",
		1:  "AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM",
		2:  "AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS",
		3:  "AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST",
		4:  "AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID",
		5:  "AUTHENTICATION_AUTH_PROTOCOL_ID_SAML",
		6:  "AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0",
		7:  "AUTHENTICATION_AUTH_PROTOCOL_ID_PAP",
		8:  "AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP",
		9:  "AUTHENTICATION_AUTH_PROTOCOL_ID_EAP",
		10: "AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS",
		99: "AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER",
	}
	AUTHENTICATION_AUTH_PROTOCOL_ID_value = map[string]int32{
		"AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN":   0,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM":      1,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS":  2,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST":    3,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID":   4,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_SAML":      5,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0": 6,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_PAP":       7,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP":      8,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_EAP":       9,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS":    10,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER":     99,
	}
)

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) Enum() *AUTHENTICATION_AUTH_PROTOCOL_ID {
	p := new(AUTHENTICATION_AUTH_PROTOCOL_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_AUTH_PROTOCOL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[7].Descriptor()
}

func (AUTHENTICATION_AUTH_PROTOCOL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[7]
}

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_AUTH_PROTOCOL_ID.Descriptor instead.
func (AUTHENTICATION_AUTH_PROTOCOL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{7}
}

type AUTHENTICATION_CATEGORY_UID int32

const (
	AUTHENTICATION_CATEGORY_UID_AUTHENTICATION_CATEGORY_UID_UNSPECIFIED                AUTHENTICATION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHENTICATION_CATEGORY_UID_AUTHENTICATION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT AUTHENTICATION_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for AUTHENTICATION_CATEGORY_UID.
var (
	AUTHENTICATION_CATEGORY_UID_name = map[int32]string{
		0: "AUTHENTICATION_CATEGORY_UID_UNSPECIFIED",
		3: "AUTHENTICATION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	AUTHENTICATION_CATEGORY_UID_value = map[string]int32{
		"AUTHENTICATION_CATEGORY_UID_UNSPECIFIED":                0,
		"AUTHENTICATION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x AUTHENTICATION_CATEGORY_UID) Enum() *AUTHENTICATION_CATEGORY_UID {
	p := new(AUTHENTICATION_CATEGORY_UID)
	*p = x
	return p
}

func (x AUTHENTICATION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[8].Descriptor()
}

func (AUTHENTICATION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[8]
}

func (x AUTHENTICATION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_CATEGORY_UID.Descriptor instead.
func (AUTHENTICATION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{8}
}

type AUTHENTICATION_CLASS_UID int32

const (
	AUTHENTICATION_CLASS_UID_AUTHENTICATION_CLASS_UID_UNSPECIFIED    AUTHENTICATION_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	AUTHENTICATION_CLASS_UID_AUTHENTICATION_CLASS_UID_AUTHENTICATION AUTHENTICATION_CLASS_UID = 3002 // Type: OCSF_VALUE; EnumValue: 3002;
)

// Enum value maps for AUTHENTICATION_CLASS_UID.
var (
	AUTHENTICATION_CLASS_UID_name = map[int32]string{
		0:    "AUTHENTICATION_CLASS_UID_UNSPECIFIED",
		3002: "AUTHENTICATION_CLASS_UID_AUTHENTICATION",
	}
	AUTHENTICATION_CLASS_UID_value = map[string]int32{
		"AUTHENTICATION_CLASS_UID_UNSPECIFIED":    0,
		"AUTHENTICATION_CLASS_UID_AUTHENTICATION": 3002,
	}
)

func (x AUTHENTICATION_CLASS_UID) Enum() *AUTHENTICATION_CLASS_UID {
	p := new(AUTHENTICATION_CLASS_UID)
	*p = x
	return p
}

func (x AUTHENTICATION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[9].Descriptor()
}

func (AUTHENTICATION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[9]
}

func (x AUTHENTICATION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_CLASS_UID.Descriptor instead.
func (AUTHENTICATION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{9}
}

type AUTHENTICATION_LOGON_TYPE_ID int32

const (
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN                   AUTHENTICATION_LOGON_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_SYSTEM                    AUTHENTICATION_LOGON_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE               AUTHENTICATION_LOGON_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NETWORK                   AUTHENTICATION_LOGON_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_BATCH                     AUTHENTICATION_LOGON_TYPE_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE                AUTHENTICATION_LOGON_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_UNLOCK                    AUTHENTICATION_LOGON_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT         AUTHENTICATION_LOGON_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS           AUTHENTICATION_LOGON_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE        AUTHENTICATION_LOGON_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE        AUTHENTICATION_LOGON_TYPE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE AUTHENTICATION_LOGON_TYPE_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK             AUTHENTICATION_LOGON_TYPE_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_OTHER                     AUTHENTICATION_LOGON_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHENTICATION_LOGON_TYPE_ID.
var (
	AUTHENTICATION_LOGON_TYPE_ID_name = map[int32]string{
		0:  "AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN",
		1:  "AUTHENTICATION_LOGON_TYPE_ID_SYSTEM",
		2:  "AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE",
		3:  "AUTHENTICATION_LOGON_TYPE_ID_NETWORK",
		4:  "AUTHENTICATION_LOGON_TYPE_ID_BATCH",
		5:  "AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE",
		7:  "AUTHENTICATION_LOGON_TYPE_ID_UNLOCK",
		8:  "AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT",
		9:  "AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS",
		10: "AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE",
		11: "AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE",
		12: "AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE",
		13: "AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK",
		99: "AUTHENTICATION_LOGON_TYPE_ID_OTHER",
	}
	AUTHENTICATION_LOGON_TYPE_ID_value = map[string]int32{
		"AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN":                   0,
		"AUTHENTICATION_LOGON_TYPE_ID_SYSTEM":                    1,
		"AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE":               2,
		"AUTHENTICATION_LOGON_TYPE_ID_NETWORK":                   3,
		"AUTHENTICATION_LOGON_TYPE_ID_BATCH":                     4,
		"AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE":                5,
		"AUTHENTICATION_LOGON_TYPE_ID_UNLOCK":                    7,
		"AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT":         8,
		"AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS":           9,
		"AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE":        10,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE":        11,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE": 12,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK":             13,
		"AUTHENTICATION_LOGON_TYPE_ID_OTHER":                     99,
	}
)

func (x AUTHENTICATION_LOGON_TYPE_ID) Enum() *AUTHENTICATION_LOGON_TYPE_ID {
	p := new(AUTHENTICATION_LOGON_TYPE_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_LOGON_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_LOGON_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[10].Descriptor()
}

func (AUTHENTICATION_LOGON_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[10]
}

func (x AUTHENTICATION_LOGON_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_LOGON_TYPE_ID.Descriptor instead.
func (AUTHENTICATION_LOGON_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{10}
}

type AUTHENTICATION_SEVERITY_ID int32

const (
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_UNKNOWN       AUTHENTICATION_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_INFORMATIONAL AUTHENTICATION_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_LOW           AUTHENTICATION_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_MEDIUM        AUTHENTICATION_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_HIGH          AUTHENTICATION_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_CRITICAL      AUTHENTICATION_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_FATAL         AUTHENTICATION_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_OTHER         AUTHENTICATION_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHENTICATION_SEVERITY_ID.
var (
	AUTHENTICATION_SEVERITY_ID_name = map[int32]string{
		0:  "AUTHENTICATION_SEVERITY_ID_UNKNOWN",
		1:  "AUTHENTICATION_SEVERITY_ID_INFORMATIONAL",
		2:  "AUTHENTICATION_SEVERITY_ID_LOW",
		3:  "AUTHENTICATION_SEVERITY_ID_MEDIUM",
		4:  "AUTHENTICATION_SEVERITY_ID_HIGH",
		5:  "AUTHENTICATION_SEVERITY_ID_CRITICAL",
		6:  "AUTHENTICATION_SEVERITY_ID_FATAL",
		99: "AUTHENTICATION_SEVERITY_ID_OTHER",
	}
	AUTHENTICATION_SEVERITY_ID_value = map[string]int32{
		"AUTHENTICATION_SEVERITY_ID_UNKNOWN":       0,
		"AUTHENTICATION_SEVERITY_ID_INFORMATIONAL": 1,
		"AUTHENTICATION_SEVERITY_ID_LOW":           2,
		"AUTHENTICATION_SEVERITY_ID_MEDIUM":        3,
		"AUTHENTICATION_SEVERITY_ID_HIGH":          4,
		"AUTHENTICATION_SEVERITY_ID_CRITICAL":      5,
		"AUTHENTICATION_SEVERITY_ID_FATAL":         6,
		"AUTHENTICATION_SEVERITY_ID_OTHER":         99,
	}
)

func (x AUTHENTICATION_SEVERITY_ID) Enum() *AUTHENTICATION_SEVERITY_ID {
	p := new(AUTHENTICATION_SEVERITY_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[11].Descriptor()
}

func (AUTHENTICATION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[11]
}

func (x AUTHENTICATION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_SEVERITY_ID.Descriptor instead.
func (AUTHENTICATION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{11}
}

type AUTHENTICATION_STATUS_ID int32

const (
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_UNKNOWN AUTHENTICATION_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_SUCCESS AUTHENTICATION_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_FAILURE AUTHENTICATION_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_OTHER   AUTHENTICATION_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHENTICATION_STATUS_ID.
var (
	AUTHENTICATION_STATUS_ID_name = map[int32]string{
		0:  "AUTHENTICATION_STATUS_ID_UNKNOWN",
		1:  "AUTHENTICATION_STATUS_ID_SUCCESS",
		2:  "AUTHENTICATION_STATUS_ID_FAILURE",
		99: "AUTHENTICATION_STATUS_ID_OTHER",
	}
	AUTHENTICATION_STATUS_ID_value = map[string]int32{
		"AUTHENTICATION_STATUS_ID_UNKNOWN": 0,
		"AUTHENTICATION_STATUS_ID_SUCCESS": 1,
		"AUTHENTICATION_STATUS_ID_FAILURE": 2,
		"AUTHENTICATION_STATUS_ID_OTHER":   99,
	}
)

func (x AUTHENTICATION_STATUS_ID) Enum() *AUTHENTICATION_STATUS_ID {
	p := new(AUTHENTICATION_STATUS_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[12].Descriptor()
}

func (AUTHENTICATION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[12]
}

func (x AUTHENTICATION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_STATUS_ID.Descriptor instead.
func (AUTHENTICATION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{12}
}

type AUTHENTICATION_TYPE_UID int32

const (
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_UNSPECIFIED                           AUTHENTICATION_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_UNKNOWN                AUTHENTICATION_TYPE_UID = 300200 // Type: OCSF_VALUE; EnumValue: 300200;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGON                  AUTHENTICATION_TYPE_UID = 300201 // Type: OCSF_VALUE; EnumValue: 300201;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGOFF                 AUTHENTICATION_TYPE_UID = 300202 // Type: OCSF_VALUE; EnumValue: 300202;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_AUTHENTICATION_TICKET  AUTHENTICATION_TYPE_UID = 300203 // Type: OCSF_VALUE; EnumValue: 300203;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_REQUEST AUTHENTICATION_TYPE_UID = 300204 // Type: OCSF_VALUE; EnumValue: 300204;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_RENEW   AUTHENTICATION_TYPE_UID = 300205 // Type: OCSF_VALUE; EnumValue: 300205;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_PREAUTH                AUTHENTICATION_TYPE_UID = 300206 // EnumValue: 300206; Type: OCSF_VALUE;
	AUTHENTICATION_TYPE_UID_AUTHENTICATION_TYPE_UID_AUTHENTICATION_OTHER                  AUTHENTICATION_TYPE_UID = 300299 // Type: OCSF_VALUE; EnumValue: 300299;
)

// Enum value maps for AUTHENTICATION_TYPE_UID.
var (
	AUTHENTICATION_TYPE_UID_name = map[int32]string{
		0:      "AUTHENTICATION_TYPE_UID_UNSPECIFIED",
		300200: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_UNKNOWN",
		300201: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGON",
		300202: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGOFF",
		300203: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_AUTHENTICATION_TICKET",
		300204: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_REQUEST",
		300205: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_RENEW",
		300206: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_PREAUTH",
		300299: "AUTHENTICATION_TYPE_UID_AUTHENTICATION_OTHER",
	}
	AUTHENTICATION_TYPE_UID_value = map[string]int32{
		"AUTHENTICATION_TYPE_UID_UNSPECIFIED":                           0,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_UNKNOWN":                300200,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGON":                  300201,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_LOGOFF":                 300202,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_AUTHENTICATION_TICKET":  300203,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_REQUEST": 300204,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_SERVICE_TICKET_RENEW":   300205,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_PREAUTH":                300206,
		"AUTHENTICATION_TYPE_UID_AUTHENTICATION_OTHER":                  300299,
	}
)

func (x AUTHENTICATION_TYPE_UID) Enum() *AUTHENTICATION_TYPE_UID {
	p := new(AUTHENTICATION_TYPE_UID)
	*p = x
	return p
}

func (x AUTHENTICATION_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[13].Descriptor()
}

func (AUTHENTICATION_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[13]
}

func (x AUTHENTICATION_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_TYPE_UID.Descriptor instead.
func (AUTHENTICATION_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{13}
}

type AUTHORIZE_SESSION_ACTIVITY_ID int32

const (
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN           AUTHORIZE_SESSION_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_PRIVILEGES AUTHORIZE_SESSION_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_GROUPS     AUTHORIZE_SESSION_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_OTHER             AUTHORIZE_SESSION_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_ACTIVITY_ID.
var (
	AUTHORIZE_SESSION_ACTIVITY_ID_name = map[int32]string{
		0:  "AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN",
		1:  "AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_PRIVILEGES",
		2:  "AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_GROUPS",
		99: "AUTHORIZE_SESSION_ACTIVITY_ID_OTHER",
	}
	AUTHORIZE_SESSION_ACTIVITY_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN":           0,
		"AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_PRIVILEGES": 1,
		"AUTHORIZE_SESSION_ACTIVITY_ID_ASSIGN_GROUPS":     2,
		"AUTHORIZE_SESSION_ACTIVITY_ID_OTHER":             99,
	}
)

func (x AUTHORIZE_SESSION_ACTIVITY_ID) Enum() *AUTHORIZE_SESSION_ACTIVITY_ID {
	p := new(AUTHORIZE_SESSION_ACTIVITY_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[14].Descriptor()
}

func (AUTHORIZE_SESSION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[14]
}

func (x AUTHORIZE_SESSION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_ACTIVITY_ID.Descriptor instead.
func (AUTHORIZE_SESSION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{14}
}

type AUTHORIZE_SESSION_CATEGORY_UID int32

const (
	AUTHORIZE_SESSION_CATEGORY_UID_AUTHORIZE_SESSION_CATEGORY_UID_UNSPECIFIED                AUTHORIZE_SESSION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHORIZE_SESSION_CATEGORY_UID_AUTHORIZE_SESSION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT AUTHORIZE_SESSION_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for AUTHORIZE_SESSION_CATEGORY_UID.
var (
	AUTHORIZE_SESSION_CATEGORY_UID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_CATEGORY_UID_UNSPECIFIED",
		3: "AUTHORIZE_SESSION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	AUTHORIZE_SESSION_CATEGORY_UID_value = map[string]int32{
		"AUTHORIZE_SESSION_CATEGORY_UID_UNSPECIFIED":                0,
		"AUTHORIZE_SESSION_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x AUTHORIZE_SESSION_CATEGORY_UID) Enum() *AUTHORIZE_SESSION_CATEGORY_UID {
	p := new(AUTHORIZE_SESSION_CATEGORY_UID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[15].Descriptor()
}

func (AUTHORIZE_SESSION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[15]
}

func (x AUTHORIZE_SESSION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_CATEGORY_UID.Descriptor instead.
func (AUTHORIZE_SESSION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{15}
}

type AUTHORIZE_SESSION_CLASS_UID int32

const (
	AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION_CLASS_UID_UNSPECIFIED       AUTHORIZE_SESSION_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION AUTHORIZE_SESSION_CLASS_UID = 3003 // EnumValue: 3003; Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_CLASS_UID.
var (
	AUTHORIZE_SESSION_CLASS_UID_name = map[int32]string{
		0:    "AUTHORIZE_SESSION_CLASS_UID_UNSPECIFIED",
		3003: "AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION",
	}
	AUTHORIZE_SESSION_CLASS_UID_value = map[string]int32{
		"AUTHORIZE_SESSION_CLASS_UID_UNSPECIFIED":       0,
		"AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION": 3003,
	}
)

func (x AUTHORIZE_SESSION_CLASS_UID) Enum() *AUTHORIZE_SESSION_CLASS_UID {
	p := new(AUTHORIZE_SESSION_CLASS_UID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[16].Descriptor()
}

func (AUTHORIZE_SESSION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[16]
}

func (x AUTHORIZE_SESSION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_CLASS_UID.Descriptor instead.
func (AUTHORIZE_SESSION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{16}
}

type AUTHORIZE_SESSION_SEVERITY_ID int32

const (
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN       AUTHORIZE_SESSION_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL AUTHORIZE_SESSION_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_LOW           AUTHORIZE_SESSION_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM        AUTHORIZE_SESSION_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_HIGH          AUTHORIZE_SESSION_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL      AUTHORIZE_SESSION_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_FATAL         AUTHORIZE_SESSION_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_OTHER         AUTHORIZE_SESSION_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHORIZE_SESSION_SEVERITY_ID.
var (
	AUTHORIZE_SESSION_SEVERITY_ID_name = map[int32]string{
		0:  "AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN",
		1:  "AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL",
		2:  "AUTHORIZE_SESSION_SEVERITY_ID_LOW",
		3:  "AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM",
		4:  "AUTHORIZE_SESSION_SEVERITY_ID_HIGH",
		5:  "AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL",
		6:  "AUTHORIZE_SESSION_SEVERITY_ID_FATAL",
		99: "AUTHORIZE_SESSION_SEVERITY_ID_OTHER",
	}
	AUTHORIZE_SESSION_SEVERITY_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN":       0,
		"AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL": 1,
		"AUTHORIZE_SESSION_SEVERITY_ID_LOW":           2,
		"AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM":        3,
		"AUTHORIZE_SESSION_SEVERITY_ID_HIGH":          4,
		"AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL":      5,
		"AUTHORIZE_SESSION_SEVERITY_ID_FATAL":         6,
		"AUTHORIZE_SESSION_SEVERITY_ID_OTHER":         99,
	}
)

func (x AUTHORIZE_SESSION_SEVERITY_ID) Enum() *AUTHORIZE_SESSION_SEVERITY_ID {
	p := new(AUTHORIZE_SESSION_SEVERITY_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[17].Descriptor()
}

func (AUTHORIZE_SESSION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[17]
}

func (x AUTHORIZE_SESSION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_SEVERITY_ID.Descriptor instead.
func (AUTHORIZE_SESSION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{17}
}

type AUTHORIZE_SESSION_STATUS_ID int32

const (
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_UNKNOWN AUTHORIZE_SESSION_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_SUCCESS AUTHORIZE_SESSION_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_FAILURE AUTHORIZE_SESSION_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_OTHER   AUTHORIZE_SESSION_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTHORIZE_SESSION_STATUS_ID.
var (
	AUTHORIZE_SESSION_STATUS_ID_name = map[int32]string{
		0:  "AUTHORIZE_SESSION_STATUS_ID_UNKNOWN",
		1:  "AUTHORIZE_SESSION_STATUS_ID_SUCCESS",
		2:  "AUTHORIZE_SESSION_STATUS_ID_FAILURE",
		99: "AUTHORIZE_SESSION_STATUS_ID_OTHER",
	}
	AUTHORIZE_SESSION_STATUS_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_STATUS_ID_UNKNOWN": 0,
		"AUTHORIZE_SESSION_STATUS_ID_SUCCESS": 1,
		"AUTHORIZE_SESSION_STATUS_ID_FAILURE": 2,
		"AUTHORIZE_SESSION_STATUS_ID_OTHER":   99,
	}
)

func (x AUTHORIZE_SESSION_STATUS_ID) Enum() *AUTHORIZE_SESSION_STATUS_ID {
	p := new(AUTHORIZE_SESSION_STATUS_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[18].Descriptor()
}

func (AUTHORIZE_SESSION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[18]
}

func (x AUTHORIZE_SESSION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_STATUS_ID.Descriptor instead.
func (AUTHORIZE_SESSION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{18}
}

type AUTHORIZE_SESSION_TYPE_UID int32

const (
	AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_TYPE_UID_UNSPECIFIED                         AUTHORIZE_SESSION_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_UNKNOWN           AUTHORIZE_SESSION_TYPE_UID = 300300 // Type: OCSF_VALUE; EnumValue: 300300;
	AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_PRIVILEGES AUTHORIZE_SESSION_TYPE_UID = 300301 // Type: OCSF_VALUE; EnumValue: 300301;
	AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_GROUPS     AUTHORIZE_SESSION_TYPE_UID = 300302 // Type: OCSF_VALUE; EnumValue: 300302;
	AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_OTHER             AUTHORIZE_SESSION_TYPE_UID = 300399 // Type: OCSF_VALUE; EnumValue: 300399;
)

// Enum value maps for AUTHORIZE_SESSION_TYPE_UID.
var (
	AUTHORIZE_SESSION_TYPE_UID_name = map[int32]string{
		0:      "AUTHORIZE_SESSION_TYPE_UID_UNSPECIFIED",
		300300: "AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_UNKNOWN",
		300301: "AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_PRIVILEGES",
		300302: "AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_GROUPS",
		300399: "AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_OTHER",
	}
	AUTHORIZE_SESSION_TYPE_UID_value = map[string]int32{
		"AUTHORIZE_SESSION_TYPE_UID_UNSPECIFIED":                         0,
		"AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_UNKNOWN":           300300,
		"AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_PRIVILEGES": 300301,
		"AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_ASSIGN_GROUPS":     300302,
		"AUTHORIZE_SESSION_TYPE_UID_AUTHORIZE_SESSION_OTHER":             300399,
	}
)

func (x AUTHORIZE_SESSION_TYPE_UID) Enum() *AUTHORIZE_SESSION_TYPE_UID {
	p := new(AUTHORIZE_SESSION_TYPE_UID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[19].Descriptor()
}

func (AUTHORIZE_SESSION_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[19]
}

func (x AUTHORIZE_SESSION_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_TYPE_UID.Descriptor instead.
func (AUTHORIZE_SESSION_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{19}
}

type ENTITY_MANAGEMENT_ACTIVITY_ID int32

const (
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN    ENTITY_MANAGEMENT_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_CREATE     ENTITY_MANAGEMENT_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_READ       ENTITY_MANAGEMENT_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_UPDATE     ENTITY_MANAGEMENT_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_DELETE     ENTITY_MANAGEMENT_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_MOVE       ENTITY_MANAGEMENT_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_ENROLL     ENTITY_MANAGEMENT_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_UNENROLL   ENTITY_MANAGEMENT_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_ENABLE     ENTITY_MANAGEMENT_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_DISABLE    ENTITY_MANAGEMENT_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_ACTIVATE   ENTITY_MANAGEMENT_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_DEACTIVATE ENTITY_MANAGEMENT_ACTIVITY_ID = 11 // EnumValue: 11; Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_SUSPEND    ENTITY_MANAGEMENT_ACTIVITY_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_RESUME     ENTITY_MANAGEMENT_ACTIVITY_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER      ENTITY_MANAGEMENT_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_ACTIVITY_ID.
var (
	ENTITY_MANAGEMENT_ACTIVITY_ID_name = map[int32]string{
		0:  "ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN",
		1:  "ENTITY_MANAGEMENT_ACTIVITY_ID_CREATE",
		2:  "ENTITY_MANAGEMENT_ACTIVITY_ID_READ",
		3:  "ENTITY_MANAGEMENT_ACTIVITY_ID_UPDATE",
		4:  "ENTITY_MANAGEMENT_ACTIVITY_ID_DELETE",
		5:  "ENTITY_MANAGEMENT_ACTIVITY_ID_MOVE",
		6:  "ENTITY_MANAGEMENT_ACTIVITY_ID_ENROLL",
		7:  "ENTITY_MANAGEMENT_ACTIVITY_ID_UNENROLL",
		8:  "ENTITY_MANAGEMENT_ACTIVITY_ID_ENABLE",
		9:  "ENTITY_MANAGEMENT_ACTIVITY_ID_DISABLE",
		10: "ENTITY_MANAGEMENT_ACTIVITY_ID_ACTIVATE",
		11: "ENTITY_MANAGEMENT_ACTIVITY_ID_DEACTIVATE",
		12: "ENTITY_MANAGEMENT_ACTIVITY_ID_SUSPEND",
		13: "ENTITY_MANAGEMENT_ACTIVITY_ID_RESUME",
		99: "ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER",
	}
	ENTITY_MANAGEMENT_ACTIVITY_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN":    0,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_CREATE":     1,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_READ":       2,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_UPDATE":     3,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_DELETE":     4,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_MOVE":       5,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_ENROLL":     6,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_UNENROLL":   7,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_ENABLE":     8,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_DISABLE":    9,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_ACTIVATE":   10,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_DEACTIVATE": 11,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_SUSPEND":    12,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_RESUME":     13,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER":      99,
	}
)

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) Enum() *ENTITY_MANAGEMENT_ACTIVITY_ID {
	p := new(ENTITY_MANAGEMENT_ACTIVITY_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[20].Descriptor()
}

func (ENTITY_MANAGEMENT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[20]
}

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_ACTIVITY_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{20}
}

type ENTITY_MANAGEMENT_CATEGORY_UID int32

const (
	ENTITY_MANAGEMENT_CATEGORY_UID_ENTITY_MANAGEMENT_CATEGORY_UID_UNSPECIFIED                ENTITY_MANAGEMENT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	ENTITY_MANAGEMENT_CATEGORY_UID_ENTITY_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT ENTITY_MANAGEMENT_CATEGORY_UID = 3 // EnumValue: 3; Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_CATEGORY_UID.
var (
	ENTITY_MANAGEMENT_CATEGORY_UID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_CATEGORY_UID_UNSPECIFIED",
		3: "ENTITY_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	ENTITY_MANAGEMENT_CATEGORY_UID_value = map[string]int32{
		"ENTITY_MANAGEMENT_CATEGORY_UID_UNSPECIFIED":                0,
		"ENTITY_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x ENTITY_MANAGEMENT_CATEGORY_UID) Enum() *ENTITY_MANAGEMENT_CATEGORY_UID {
	p := new(ENTITY_MANAGEMENT_CATEGORY_UID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[21].Descriptor()
}

func (ENTITY_MANAGEMENT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[21]
}

func (x ENTITY_MANAGEMENT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_CATEGORY_UID.Descriptor instead.
func (ENTITY_MANAGEMENT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{21}
}

type ENTITY_MANAGEMENT_CLASS_UID int32

const (
	ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT_CLASS_UID_UNSPECIFIED       ENTITY_MANAGEMENT_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT ENTITY_MANAGEMENT_CLASS_UID = 3004 // Type: OCSF_VALUE; EnumValue: 3004;
)

// Enum value maps for ENTITY_MANAGEMENT_CLASS_UID.
var (
	ENTITY_MANAGEMENT_CLASS_UID_name = map[int32]string{
		0:    "ENTITY_MANAGEMENT_CLASS_UID_UNSPECIFIED",
		3004: "ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT",
	}
	ENTITY_MANAGEMENT_CLASS_UID_value = map[string]int32{
		"ENTITY_MANAGEMENT_CLASS_UID_UNSPECIFIED":       0,
		"ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT": 3004,
	}
)

func (x ENTITY_MANAGEMENT_CLASS_UID) Enum() *ENTITY_MANAGEMENT_CLASS_UID {
	p := new(ENTITY_MANAGEMENT_CLASS_UID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[22].Descriptor()
}

func (ENTITY_MANAGEMENT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[22]
}

func (x ENTITY_MANAGEMENT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_CLASS_UID.Descriptor instead.
func (ENTITY_MANAGEMENT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{22}
}

type ENTITY_MANAGEMENT_SEVERITY_ID int32

const (
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN       ENTITY_MANAGEMENT_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL ENTITY_MANAGEMENT_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_LOW           ENTITY_MANAGEMENT_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM        ENTITY_MANAGEMENT_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_HIGH          ENTITY_MANAGEMENT_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL      ENTITY_MANAGEMENT_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_FATAL         ENTITY_MANAGEMENT_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_OTHER         ENTITY_MANAGEMENT_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ENTITY_MANAGEMENT_SEVERITY_ID.
var (
	ENTITY_MANAGEMENT_SEVERITY_ID_name = map[int32]string{
		0:  "ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN",
		1:  "ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL",
		2:  "ENTITY_MANAGEMENT_SEVERITY_ID_LOW",
		3:  "ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM",
		4:  "ENTITY_MANAGEMENT_SEVERITY_ID_HIGH",
		5:  "ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL",
		6:  "ENTITY_MANAGEMENT_SEVERITY_ID_FATAL",
		99: "ENTITY_MANAGEMENT_SEVERITY_ID_OTHER",
	}
	ENTITY_MANAGEMENT_SEVERITY_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN":       0,
		"ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL": 1,
		"ENTITY_MANAGEMENT_SEVERITY_ID_LOW":           2,
		"ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM":        3,
		"ENTITY_MANAGEMENT_SEVERITY_ID_HIGH":          4,
		"ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL":      5,
		"ENTITY_MANAGEMENT_SEVERITY_ID_FATAL":         6,
		"ENTITY_MANAGEMENT_SEVERITY_ID_OTHER":         99,
	}
)

func (x ENTITY_MANAGEMENT_SEVERITY_ID) Enum() *ENTITY_MANAGEMENT_SEVERITY_ID {
	p := new(ENTITY_MANAGEMENT_SEVERITY_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[23].Descriptor()
}

func (ENTITY_MANAGEMENT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[23]
}

func (x ENTITY_MANAGEMENT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_SEVERITY_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{23}
}

type ENTITY_MANAGEMENT_STATUS_ID int32

const (
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN ENTITY_MANAGEMENT_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_SUCCESS ENTITY_MANAGEMENT_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_FAILURE ENTITY_MANAGEMENT_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_OTHER   ENTITY_MANAGEMENT_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ENTITY_MANAGEMENT_STATUS_ID.
var (
	ENTITY_MANAGEMENT_STATUS_ID_name = map[int32]string{
		0:  "ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN",
		1:  "ENTITY_MANAGEMENT_STATUS_ID_SUCCESS",
		2:  "ENTITY_MANAGEMENT_STATUS_ID_FAILURE",
		99: "ENTITY_MANAGEMENT_STATUS_ID_OTHER",
	}
	ENTITY_MANAGEMENT_STATUS_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN": 0,
		"ENTITY_MANAGEMENT_STATUS_ID_SUCCESS": 1,
		"ENTITY_MANAGEMENT_STATUS_ID_FAILURE": 2,
		"ENTITY_MANAGEMENT_STATUS_ID_OTHER":   99,
	}
)

func (x ENTITY_MANAGEMENT_STATUS_ID) Enum() *ENTITY_MANAGEMENT_STATUS_ID {
	p := new(ENTITY_MANAGEMENT_STATUS_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[24].Descriptor()
}

func (ENTITY_MANAGEMENT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[24]
}

func (x ENTITY_MANAGEMENT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_STATUS_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{24}
}

type ENTITY_MANAGEMENT_TYPE_UID int32

const (
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_UNSPECIFIED                  ENTITY_MANAGEMENT_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNKNOWN    ENTITY_MANAGEMENT_TYPE_UID = 300400 // Type: OCSF_VALUE; EnumValue: 300400;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_CREATE     ENTITY_MANAGEMENT_TYPE_UID = 300401 // EnumValue: 300401; Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_READ       ENTITY_MANAGEMENT_TYPE_UID = 300402 // Type: OCSF_VALUE; EnumValue: 300402;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UPDATE     ENTITY_MANAGEMENT_TYPE_UID = 300403 // Type: OCSF_VALUE; EnumValue: 300403;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DELETE     ENTITY_MANAGEMENT_TYPE_UID = 300404 // Type: OCSF_VALUE; EnumValue: 300404;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_MOVE       ENTITY_MANAGEMENT_TYPE_UID = 300405 // Type: OCSF_VALUE; EnumValue: 300405;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENROLL     ENTITY_MANAGEMENT_TYPE_UID = 300406 // Type: OCSF_VALUE; EnumValue: 300406;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNENROLL   ENTITY_MANAGEMENT_TYPE_UID = 300407 // Type: OCSF_VALUE; EnumValue: 300407;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENABLE     ENTITY_MANAGEMENT_TYPE_UID = 300408 // Type: OCSF_VALUE; EnumValue: 300408;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DISABLE    ENTITY_MANAGEMENT_TYPE_UID = 300409 // EnumValue: 300409; Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ACTIVATE   ENTITY_MANAGEMENT_TYPE_UID = 300410 // Type: OCSF_VALUE; EnumValue: 300410;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DEACTIVATE ENTITY_MANAGEMENT_TYPE_UID = 300411 // Type: OCSF_VALUE; EnumValue: 300411;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_SUSPEND    ENTITY_MANAGEMENT_TYPE_UID = 300412 // Type: OCSF_VALUE; EnumValue: 300412;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_RESUME     ENTITY_MANAGEMENT_TYPE_UID = 300413 // Type: OCSF_VALUE; EnumValue: 300413;
	ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_OTHER      ENTITY_MANAGEMENT_TYPE_UID = 300499 // Type: OCSF_VALUE; EnumValue: 300499;
)

// Enum value maps for ENTITY_MANAGEMENT_TYPE_UID.
var (
	ENTITY_MANAGEMENT_TYPE_UID_name = map[int32]string{
		0:      "ENTITY_MANAGEMENT_TYPE_UID_UNSPECIFIED",
		300400: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNKNOWN",
		300401: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_CREATE",
		300402: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_READ",
		300403: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UPDATE",
		300404: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DELETE",
		300405: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_MOVE",
		300406: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENROLL",
		300407: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNENROLL",
		300408: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENABLE",
		300409: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DISABLE",
		300410: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ACTIVATE",
		300411: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DEACTIVATE",
		300412: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_SUSPEND",
		300413: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_RESUME",
		300499: "ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_OTHER",
	}
	ENTITY_MANAGEMENT_TYPE_UID_value = map[string]int32{
		"ENTITY_MANAGEMENT_TYPE_UID_UNSPECIFIED":                  0,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNKNOWN":    300400,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_CREATE":     300401,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_READ":       300402,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UPDATE":     300403,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DELETE":     300404,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_MOVE":       300405,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENROLL":     300406,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_UNENROLL":   300407,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ENABLE":     300408,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DISABLE":    300409,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_ACTIVATE":   300410,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_DEACTIVATE": 300411,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_SUSPEND":    300412,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_RESUME":     300413,
		"ENTITY_MANAGEMENT_TYPE_UID_ENTITY_MANAGEMENT_OTHER":      300499,
	}
)

func (x ENTITY_MANAGEMENT_TYPE_UID) Enum() *ENTITY_MANAGEMENT_TYPE_UID {
	p := new(ENTITY_MANAGEMENT_TYPE_UID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[25].Descriptor()
}

func (ENTITY_MANAGEMENT_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[25]
}

func (x ENTITY_MANAGEMENT_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_TYPE_UID.Descriptor instead.
func (ENTITY_MANAGEMENT_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{25}
}

type GROUP_MANAGEMENT_ACTIVITY_ID int32

const (
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN           GROUP_MANAGEMENT_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_ASSIGN_PRIVILEGES GROUP_MANAGEMENT_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_REVOKE_PRIVILEGES GROUP_MANAGEMENT_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_ADD_USER          GROUP_MANAGEMENT_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_REMOVE_USER       GROUP_MANAGEMENT_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_DELETE            GROUP_MANAGEMENT_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_CREATE            GROUP_MANAGEMENT_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_OTHER             GROUP_MANAGEMENT_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_ACTIVITY_ID.
var (
	GROUP_MANAGEMENT_ACTIVITY_ID_name = map[int32]string{
		0:  "GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN",
		1:  "GROUP_MANAGEMENT_ACTIVITY_ID_ASSIGN_PRIVILEGES",
		2:  "GROUP_MANAGEMENT_ACTIVITY_ID_REVOKE_PRIVILEGES",
		3:  "GROUP_MANAGEMENT_ACTIVITY_ID_ADD_USER",
		4:  "GROUP_MANAGEMENT_ACTIVITY_ID_REMOVE_USER",
		5:  "GROUP_MANAGEMENT_ACTIVITY_ID_DELETE",
		6:  "GROUP_MANAGEMENT_ACTIVITY_ID_CREATE",
		99: "GROUP_MANAGEMENT_ACTIVITY_ID_OTHER",
	}
	GROUP_MANAGEMENT_ACTIVITY_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN":           0,
		"GROUP_MANAGEMENT_ACTIVITY_ID_ASSIGN_PRIVILEGES": 1,
		"GROUP_MANAGEMENT_ACTIVITY_ID_REVOKE_PRIVILEGES": 2,
		"GROUP_MANAGEMENT_ACTIVITY_ID_ADD_USER":          3,
		"GROUP_MANAGEMENT_ACTIVITY_ID_REMOVE_USER":       4,
		"GROUP_MANAGEMENT_ACTIVITY_ID_DELETE":            5,
		"GROUP_MANAGEMENT_ACTIVITY_ID_CREATE":            6,
		"GROUP_MANAGEMENT_ACTIVITY_ID_OTHER":             99,
	}
)

func (x GROUP_MANAGEMENT_ACTIVITY_ID) Enum() *GROUP_MANAGEMENT_ACTIVITY_ID {
	p := new(GROUP_MANAGEMENT_ACTIVITY_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[26].Descriptor()
}

func (GROUP_MANAGEMENT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[26]
}

func (x GROUP_MANAGEMENT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_ACTIVITY_ID.Descriptor instead.
func (GROUP_MANAGEMENT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{26}
}

type GROUP_MANAGEMENT_CATEGORY_UID int32

const (
	GROUP_MANAGEMENT_CATEGORY_UID_GROUP_MANAGEMENT_CATEGORY_UID_UNSPECIFIED                GROUP_MANAGEMENT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	GROUP_MANAGEMENT_CATEGORY_UID_GROUP_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT GROUP_MANAGEMENT_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for GROUP_MANAGEMENT_CATEGORY_UID.
var (
	GROUP_MANAGEMENT_CATEGORY_UID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_CATEGORY_UID_UNSPECIFIED",
		3: "GROUP_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	GROUP_MANAGEMENT_CATEGORY_UID_value = map[string]int32{
		"GROUP_MANAGEMENT_CATEGORY_UID_UNSPECIFIED":                0,
		"GROUP_MANAGEMENT_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x GROUP_MANAGEMENT_CATEGORY_UID) Enum() *GROUP_MANAGEMENT_CATEGORY_UID {
	p := new(GROUP_MANAGEMENT_CATEGORY_UID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[27].Descriptor()
}

func (GROUP_MANAGEMENT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[27]
}

func (x GROUP_MANAGEMENT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_CATEGORY_UID.Descriptor instead.
func (GROUP_MANAGEMENT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{27}
}

type GROUP_MANAGEMENT_CLASS_UID int32

const (
	GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT_CLASS_UID_UNSPECIFIED      GROUP_MANAGEMENT_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT GROUP_MANAGEMENT_CLASS_UID = 3006 // Type: OCSF_VALUE; EnumValue: 3006;
)

// Enum value maps for GROUP_MANAGEMENT_CLASS_UID.
var (
	GROUP_MANAGEMENT_CLASS_UID_name = map[int32]string{
		0:    "GROUP_MANAGEMENT_CLASS_UID_UNSPECIFIED",
		3006: "GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT",
	}
	GROUP_MANAGEMENT_CLASS_UID_value = map[string]int32{
		"GROUP_MANAGEMENT_CLASS_UID_UNSPECIFIED":      0,
		"GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT": 3006,
	}
)

func (x GROUP_MANAGEMENT_CLASS_UID) Enum() *GROUP_MANAGEMENT_CLASS_UID {
	p := new(GROUP_MANAGEMENT_CLASS_UID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[28].Descriptor()
}

func (GROUP_MANAGEMENT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[28]
}

func (x GROUP_MANAGEMENT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_CLASS_UID.Descriptor instead.
func (GROUP_MANAGEMENT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{28}
}

type GROUP_MANAGEMENT_SEVERITY_ID int32

const (
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN       GROUP_MANAGEMENT_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL GROUP_MANAGEMENT_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_LOW           GROUP_MANAGEMENT_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM        GROUP_MANAGEMENT_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_HIGH          GROUP_MANAGEMENT_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL      GROUP_MANAGEMENT_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_FATAL         GROUP_MANAGEMENT_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_OTHER         GROUP_MANAGEMENT_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for GROUP_MANAGEMENT_SEVERITY_ID.
var (
	GROUP_MANAGEMENT_SEVERITY_ID_name = map[int32]string{
		0:  "GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN",
		1:  "GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL",
		2:  "GROUP_MANAGEMENT_SEVERITY_ID_LOW",
		3:  "GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM",
		4:  "GROUP_MANAGEMENT_SEVERITY_ID_HIGH",
		5:  "GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL",
		6:  "GROUP_MANAGEMENT_SEVERITY_ID_FATAL",
		99: "GROUP_MANAGEMENT_SEVERITY_ID_OTHER",
	}
	GROUP_MANAGEMENT_SEVERITY_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN":       0,
		"GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL": 1,
		"GROUP_MANAGEMENT_SEVERITY_ID_LOW":           2,
		"GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM":        3,
		"GROUP_MANAGEMENT_SEVERITY_ID_HIGH":          4,
		"GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL":      5,
		"GROUP_MANAGEMENT_SEVERITY_ID_FATAL":         6,
		"GROUP_MANAGEMENT_SEVERITY_ID_OTHER":         99,
	}
)

func (x GROUP_MANAGEMENT_SEVERITY_ID) Enum() *GROUP_MANAGEMENT_SEVERITY_ID {
	p := new(GROUP_MANAGEMENT_SEVERITY_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[29].Descriptor()
}

func (GROUP_MANAGEMENT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[29]
}

func (x GROUP_MANAGEMENT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_SEVERITY_ID.Descriptor instead.
func (GROUP_MANAGEMENT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{29}
}

type GROUP_MANAGEMENT_STATUS_ID int32

const (
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_UNKNOWN GROUP_MANAGEMENT_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_SUCCESS GROUP_MANAGEMENT_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_FAILURE GROUP_MANAGEMENT_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_OTHER   GROUP_MANAGEMENT_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for GROUP_MANAGEMENT_STATUS_ID.
var (
	GROUP_MANAGEMENT_STATUS_ID_name = map[int32]string{
		0:  "GROUP_MANAGEMENT_STATUS_ID_UNKNOWN",
		1:  "GROUP_MANAGEMENT_STATUS_ID_SUCCESS",
		2:  "GROUP_MANAGEMENT_STATUS_ID_FAILURE",
		99: "GROUP_MANAGEMENT_STATUS_ID_OTHER",
	}
	GROUP_MANAGEMENT_STATUS_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_STATUS_ID_UNKNOWN": 0,
		"GROUP_MANAGEMENT_STATUS_ID_SUCCESS": 1,
		"GROUP_MANAGEMENT_STATUS_ID_FAILURE": 2,
		"GROUP_MANAGEMENT_STATUS_ID_OTHER":   99,
	}
)

func (x GROUP_MANAGEMENT_STATUS_ID) Enum() *GROUP_MANAGEMENT_STATUS_ID {
	p := new(GROUP_MANAGEMENT_STATUS_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[30].Descriptor()
}

func (GROUP_MANAGEMENT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[30]
}

func (x GROUP_MANAGEMENT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_STATUS_ID.Descriptor instead.
func (GROUP_MANAGEMENT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{30}
}

type GROUP_MANAGEMENT_TYPE_UID int32

const (
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_UNSPECIFIED                        GROUP_MANAGEMENT_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_UNKNOWN           GROUP_MANAGEMENT_TYPE_UID = 300600 // Type: OCSF_VALUE; EnumValue: 300600;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ASSIGN_PRIVILEGES GROUP_MANAGEMENT_TYPE_UID = 300601 // Type: OCSF_VALUE; EnumValue: 300601;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REVOKE_PRIVILEGES GROUP_MANAGEMENT_TYPE_UID = 300602 // Type: OCSF_VALUE; EnumValue: 300602;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ADD_USER          GROUP_MANAGEMENT_TYPE_UID = 300603 // Type: OCSF_VALUE; EnumValue: 300603;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REMOVE_USER       GROUP_MANAGEMENT_TYPE_UID = 300604 // Type: OCSF_VALUE; EnumValue: 300604;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_DELETE            GROUP_MANAGEMENT_TYPE_UID = 300605 // Type: OCSF_VALUE; EnumValue: 300605;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_CREATE            GROUP_MANAGEMENT_TYPE_UID = 300606 // Type: OCSF_VALUE; EnumValue: 300606;
	GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_OTHER             GROUP_MANAGEMENT_TYPE_UID = 300699 // Type: OCSF_VALUE; EnumValue: 300699;
)

// Enum value maps for GROUP_MANAGEMENT_TYPE_UID.
var (
	GROUP_MANAGEMENT_TYPE_UID_name = map[int32]string{
		0:      "GROUP_MANAGEMENT_TYPE_UID_UNSPECIFIED",
		300600: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_UNKNOWN",
		300601: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ASSIGN_PRIVILEGES",
		300602: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REVOKE_PRIVILEGES",
		300603: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ADD_USER",
		300604: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REMOVE_USER",
		300605: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_DELETE",
		300606: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_CREATE",
		300699: "GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_OTHER",
	}
	GROUP_MANAGEMENT_TYPE_UID_value = map[string]int32{
		"GROUP_MANAGEMENT_TYPE_UID_UNSPECIFIED":                        0,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_UNKNOWN":           300600,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ASSIGN_PRIVILEGES": 300601,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REVOKE_PRIVILEGES": 300602,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_ADD_USER":          300603,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_REMOVE_USER":       300604,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_DELETE":            300605,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_CREATE":            300606,
		"GROUP_MANAGEMENT_TYPE_UID_GROUP_MANAGEMENT_OTHER":             300699,
	}
)

func (x GROUP_MANAGEMENT_TYPE_UID) Enum() *GROUP_MANAGEMENT_TYPE_UID {
	p := new(GROUP_MANAGEMENT_TYPE_UID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[31].Descriptor()
}

func (GROUP_MANAGEMENT_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[31]
}

func (x GROUP_MANAGEMENT_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_TYPE_UID.Descriptor instead.
func (GROUP_MANAGEMENT_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{31}
}

type IAM_ACTIVITY_ID int32

const (
	IAM_ACTIVITY_ID_IAM_ACTIVITY_ID_UNKNOWN IAM_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	IAM_ACTIVITY_ID_IAM_ACTIVITY_ID_OTHER   IAM_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for IAM_ACTIVITY_ID.
var (
	IAM_ACTIVITY_ID_name = map[int32]string{
		0:  "IAM_ACTIVITY_ID_UNKNOWN",
		99: "IAM_ACTIVITY_ID_OTHER",
	}
	IAM_ACTIVITY_ID_value = map[string]int32{
		"IAM_ACTIVITY_ID_UNKNOWN": 0,
		"IAM_ACTIVITY_ID_OTHER":   99,
	}
)

func (x IAM_ACTIVITY_ID) Enum() *IAM_ACTIVITY_ID {
	p := new(IAM_ACTIVITY_ID)
	*p = x
	return p
}

func (x IAM_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[32].Descriptor()
}

func (IAM_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[32]
}

func (x IAM_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_ACTIVITY_ID.Descriptor instead.
func (IAM_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{32}
}

type IAM_CATEGORY_UID int32

const (
	IAM_CATEGORY_UID_IAM_CATEGORY_UID_UNSPECIFIED                IAM_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	IAM_CATEGORY_UID_IAM_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT IAM_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for IAM_CATEGORY_UID.
var (
	IAM_CATEGORY_UID_name = map[int32]string{
		0: "IAM_CATEGORY_UID_UNSPECIFIED",
		3: "IAM_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	IAM_CATEGORY_UID_value = map[string]int32{
		"IAM_CATEGORY_UID_UNSPECIFIED":                0,
		"IAM_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x IAM_CATEGORY_UID) Enum() *IAM_CATEGORY_UID {
	p := new(IAM_CATEGORY_UID)
	*p = x
	return p
}

func (x IAM_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[33].Descriptor()
}

func (IAM_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[33]
}

func (x IAM_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_CATEGORY_UID.Descriptor instead.
func (IAM_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{33}
}

type IAM_CLASS_UID int32

const (
	IAM_CLASS_UID_IAM_CLASS_UID_UNSPECIFIED                IAM_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	IAM_CLASS_UID_IAM_CLASS_UID_IDENTITY_ACCESS_MANAGEMENT IAM_CLASS_UID = 3000 // Type: OCSF_VALUE; EnumValue: 3000;
)

// Enum value maps for IAM_CLASS_UID.
var (
	IAM_CLASS_UID_name = map[int32]string{
		0:    "IAM_CLASS_UID_UNSPECIFIED",
		3000: "IAM_CLASS_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	IAM_CLASS_UID_value = map[string]int32{
		"IAM_CLASS_UID_UNSPECIFIED":                0,
		"IAM_CLASS_UID_IDENTITY_ACCESS_MANAGEMENT": 3000,
	}
)

func (x IAM_CLASS_UID) Enum() *IAM_CLASS_UID {
	p := new(IAM_CLASS_UID)
	*p = x
	return p
}

func (x IAM_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[34].Descriptor()
}

func (IAM_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[34]
}

func (x IAM_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_CLASS_UID.Descriptor instead.
func (IAM_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{34}
}

type IAM_SEVERITY_ID int32

const (
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_UNKNOWN       IAM_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_INFORMATIONAL IAM_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_LOW           IAM_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_MEDIUM        IAM_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_HIGH          IAM_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_CRITICAL      IAM_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_FATAL         IAM_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_OTHER         IAM_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for IAM_SEVERITY_ID.
var (
	IAM_SEVERITY_ID_name = map[int32]string{
		0:  "IAM_SEVERITY_ID_UNKNOWN",
		1:  "IAM_SEVERITY_ID_INFORMATIONAL",
		2:  "IAM_SEVERITY_ID_LOW",
		3:  "IAM_SEVERITY_ID_MEDIUM",
		4:  "IAM_SEVERITY_ID_HIGH",
		5:  "IAM_SEVERITY_ID_CRITICAL",
		6:  "IAM_SEVERITY_ID_FATAL",
		99: "IAM_SEVERITY_ID_OTHER",
	}
	IAM_SEVERITY_ID_value = map[string]int32{
		"IAM_SEVERITY_ID_UNKNOWN":       0,
		"IAM_SEVERITY_ID_INFORMATIONAL": 1,
		"IAM_SEVERITY_ID_LOW":           2,
		"IAM_SEVERITY_ID_MEDIUM":        3,
		"IAM_SEVERITY_ID_HIGH":          4,
		"IAM_SEVERITY_ID_CRITICAL":      5,
		"IAM_SEVERITY_ID_FATAL":         6,
		"IAM_SEVERITY_ID_OTHER":         99,
	}
)

func (x IAM_SEVERITY_ID) Enum() *IAM_SEVERITY_ID {
	p := new(IAM_SEVERITY_ID)
	*p = x
	return p
}

func (x IAM_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[35].Descriptor()
}

func (IAM_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[35]
}

func (x IAM_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_SEVERITY_ID.Descriptor instead.
func (IAM_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{35}
}

type IAM_STATUS_ID int32

const (
	IAM_STATUS_ID_IAM_STATUS_ID_UNKNOWN IAM_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	IAM_STATUS_ID_IAM_STATUS_ID_SUCCESS IAM_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	IAM_STATUS_ID_IAM_STATUS_ID_FAILURE IAM_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	IAM_STATUS_ID_IAM_STATUS_ID_OTHER   IAM_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for IAM_STATUS_ID.
var (
	IAM_STATUS_ID_name = map[int32]string{
		0:  "IAM_STATUS_ID_UNKNOWN",
		1:  "IAM_STATUS_ID_SUCCESS",
		2:  "IAM_STATUS_ID_FAILURE",
		99: "IAM_STATUS_ID_OTHER",
	}
	IAM_STATUS_ID_value = map[string]int32{
		"IAM_STATUS_ID_UNKNOWN": 0,
		"IAM_STATUS_ID_SUCCESS": 1,
		"IAM_STATUS_ID_FAILURE": 2,
		"IAM_STATUS_ID_OTHER":   99,
	}
)

func (x IAM_STATUS_ID) Enum() *IAM_STATUS_ID {
	p := new(IAM_STATUS_ID)
	*p = x
	return p
}

func (x IAM_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[36].Descriptor()
}

func (IAM_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[36]
}

func (x IAM_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_STATUS_ID.Descriptor instead.
func (IAM_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{36}
}

type IAM_TYPE_UID int32

const (
	IAM_TYPE_UID_IAM_TYPE_UID_UNSPECIFIED                        IAM_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	IAM_TYPE_UID_IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_UNKNOWN IAM_TYPE_UID = 300000 // Type: OCSF_VALUE; EnumValue: 300000;
	IAM_TYPE_UID_IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_OTHER   IAM_TYPE_UID = 300099 // Type: OCSF_VALUE; EnumValue: 300099;
)

// Enum value maps for IAM_TYPE_UID.
var (
	IAM_TYPE_UID_name = map[int32]string{
		0:      "IAM_TYPE_UID_UNSPECIFIED",
		300000: "IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_UNKNOWN",
		300099: "IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_OTHER",
	}
	IAM_TYPE_UID_value = map[string]int32{
		"IAM_TYPE_UID_UNSPECIFIED":                        0,
		"IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_UNKNOWN": 300000,
		"IAM_TYPE_UID_IDENTITY_ACCESS_MANAGEMENT_OTHER":   300099,
	}
)

func (x IAM_TYPE_UID) Enum() *IAM_TYPE_UID {
	p := new(IAM_TYPE_UID)
	*p = x
	return p
}

func (x IAM_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[37].Descriptor()
}

func (IAM_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[37]
}

func (x IAM_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_TYPE_UID.Descriptor instead.
func (IAM_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{37}
}

type USER_ACCESS_ACTIVITY_ID int32

const (
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_UNKNOWN           USER_ACCESS_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_ASSIGN_PRIVILEGES USER_ACCESS_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_REVOKE_PRIVILEGES USER_ACCESS_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_OTHER             USER_ACCESS_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_ACTIVITY_ID.
var (
	USER_ACCESS_ACTIVITY_ID_name = map[int32]string{
		0:  "USER_ACCESS_ACTIVITY_ID_UNKNOWN",
		1:  "USER_ACCESS_ACTIVITY_ID_ASSIGN_PRIVILEGES",
		2:  "USER_ACCESS_ACTIVITY_ID_REVOKE_PRIVILEGES",
		99: "USER_ACCESS_ACTIVITY_ID_OTHER",
	}
	USER_ACCESS_ACTIVITY_ID_value = map[string]int32{
		"USER_ACCESS_ACTIVITY_ID_UNKNOWN":           0,
		"USER_ACCESS_ACTIVITY_ID_ASSIGN_PRIVILEGES": 1,
		"USER_ACCESS_ACTIVITY_ID_REVOKE_PRIVILEGES": 2,
		"USER_ACCESS_ACTIVITY_ID_OTHER":             99,
	}
)

func (x USER_ACCESS_ACTIVITY_ID) Enum() *USER_ACCESS_ACTIVITY_ID {
	p := new(USER_ACCESS_ACTIVITY_ID)
	*p = x
	return p
}

func (x USER_ACCESS_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[38].Descriptor()
}

func (USER_ACCESS_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[38]
}

func (x USER_ACCESS_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_ACTIVITY_ID.Descriptor instead.
func (USER_ACCESS_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{38}
}

type USER_ACCESS_CATEGORY_UID int32

const (
	USER_ACCESS_CATEGORY_UID_USER_ACCESS_CATEGORY_UID_UNSPECIFIED                USER_ACCESS_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	USER_ACCESS_CATEGORY_UID_USER_ACCESS_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT USER_ACCESS_CATEGORY_UID = 3 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for USER_ACCESS_CATEGORY_UID.
var (
	USER_ACCESS_CATEGORY_UID_name = map[int32]string{
		0: "USER_ACCESS_CATEGORY_UID_UNSPECIFIED",
		3: "USER_ACCESS_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT",
	}
	USER_ACCESS_CATEGORY_UID_value = map[string]int32{
		"USER_ACCESS_CATEGORY_UID_UNSPECIFIED":                0,
		"USER_ACCESS_CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT": 3,
	}
)

func (x USER_ACCESS_CATEGORY_UID) Enum() *USER_ACCESS_CATEGORY_UID {
	p := new(USER_ACCESS_CATEGORY_UID)
	*p = x
	return p
}

func (x USER_ACCESS_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[39].Descriptor()
}

func (USER_ACCESS_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[39]
}

func (x USER_ACCESS_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_CATEGORY_UID.Descriptor instead.
func (USER_ACCESS_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{39}
}

type USER_ACCESS_CLASS_UID int32

const (
	USER_ACCESS_CLASS_UID_USER_ACCESS_CLASS_UID_UNSPECIFIED            USER_ACCESS_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	USER_ACCESS_CLASS_UID_USER_ACCESS_CLASS_UID_USER_ACCESS_MANAGEMENT USER_ACCESS_CLASS_UID = 3005 // Type: OCSF_VALUE; EnumValue: 3005;
)

// Enum value maps for USER_ACCESS_CLASS_UID.
var (
	USER_ACCESS_CLASS_UID_name = map[int32]string{
		0:    "USER_ACCESS_CLASS_UID_UNSPECIFIED",
		3005: "USER_ACCESS_CLASS_UID_USER_ACCESS_MANAGEMENT",
	}
	USER_ACCESS_CLASS_UID_value = map[string]int32{
		"USER_ACCESS_CLASS_UID_UNSPECIFIED":            0,
		"USER_ACCESS_CLASS_UID_USER_ACCESS_MANAGEMENT": 3005,
	}
)

func (x USER_ACCESS_CLASS_UID) Enum() *USER_ACCESS_CLASS_UID {
	p := new(USER_ACCESS_CLASS_UID)
	*p = x
	return p
}

func (x USER_ACCESS_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[40].Descriptor()
}

func (USER_ACCESS_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[40]
}

func (x USER_ACCESS_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_CLASS_UID.Descriptor instead.
func (USER_ACCESS_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{40}
}

type USER_ACCESS_SEVERITY_ID int32

const (
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_UNKNOWN       USER_ACCESS_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_INFORMATIONAL USER_ACCESS_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_LOW           USER_ACCESS_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_MEDIUM        USER_ACCESS_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_HIGH          USER_ACCESS_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_CRITICAL      USER_ACCESS_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_FATAL         USER_ACCESS_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_OTHER         USER_ACCESS_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_ACCESS_SEVERITY_ID.
var (
	USER_ACCESS_SEVERITY_ID_name = map[int32]string{
		0:  "USER_ACCESS_SEVERITY_ID_UNKNOWN",
		1:  "USER_ACCESS_SEVERITY_ID_INFORMATIONAL",
		2:  "USER_ACCESS_SEVERITY_ID_LOW",
		3:  "USER_ACCESS_SEVERITY_ID_MEDIUM",
		4:  "USER_ACCESS_SEVERITY_ID_HIGH",
		5:  "USER_ACCESS_SEVERITY_ID_CRITICAL",
		6:  "USER_ACCESS_SEVERITY_ID_FATAL",
		99: "USER_ACCESS_SEVERITY_ID_OTHER",
	}
	USER_ACCESS_SEVERITY_ID_value = map[string]int32{
		"USER_ACCESS_SEVERITY_ID_UNKNOWN":       0,
		"USER_ACCESS_SEVERITY_ID_INFORMATIONAL": 1,
		"USER_ACCESS_SEVERITY_ID_LOW":           2,
		"USER_ACCESS_SEVERITY_ID_MEDIUM":        3,
		"USER_ACCESS_SEVERITY_ID_HIGH":          4,
		"USER_ACCESS_SEVERITY_ID_CRITICAL":      5,
		"USER_ACCESS_SEVERITY_ID_FATAL":         6,
		"USER_ACCESS_SEVERITY_ID_OTHER":         99,
	}
)

func (x USER_ACCESS_SEVERITY_ID) Enum() *USER_ACCESS_SEVERITY_ID {
	p := new(USER_ACCESS_SEVERITY_ID)
	*p = x
	return p
}

func (x USER_ACCESS_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[41].Descriptor()
}

func (USER_ACCESS_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[41]
}

func (x USER_ACCESS_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_SEVERITY_ID.Descriptor instead.
func (USER_ACCESS_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{41}
}

type USER_ACCESS_STATUS_ID int32

const (
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_UNKNOWN USER_ACCESS_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_SUCCESS USER_ACCESS_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_FAILURE USER_ACCESS_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_OTHER   USER_ACCESS_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_STATUS_ID.
var (
	USER_ACCESS_STATUS_ID_name = map[int32]string{
		0:  "USER_ACCESS_STATUS_ID_UNKNOWN",
		1:  "USER_ACCESS_STATUS_ID_SUCCESS",
		2:  "USER_ACCESS_STATUS_ID_FAILURE",
		99: "USER_ACCESS_STATUS_ID_OTHER",
	}
	USER_ACCESS_STATUS_ID_value = map[string]int32{
		"USER_ACCESS_STATUS_ID_UNKNOWN": 0,
		"USER_ACCESS_STATUS_ID_SUCCESS": 1,
		"USER_ACCESS_STATUS_ID_FAILURE": 2,
		"USER_ACCESS_STATUS_ID_OTHER":   99,
	}
)

func (x USER_ACCESS_STATUS_ID) Enum() *USER_ACCESS_STATUS_ID {
	p := new(USER_ACCESS_STATUS_ID)
	*p = x
	return p
}

func (x USER_ACCESS_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[42].Descriptor()
}

func (USER_ACCESS_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[42]
}

func (x USER_ACCESS_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_STATUS_ID.Descriptor instead.
func (USER_ACCESS_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{42}
}

type USER_ACCESS_TYPE_UID int32

const (
	USER_ACCESS_TYPE_UID_USER_ACCESS_TYPE_UID_UNSPECIFIED                              USER_ACCESS_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	USER_ACCESS_TYPE_UID_USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_UNKNOWN           USER_ACCESS_TYPE_UID = 300500 // Type: OCSF_VALUE; EnumValue: 300500;
	USER_ACCESS_TYPE_UID_USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_ASSIGN_PRIVILEGES USER_ACCESS_TYPE_UID = 300501 // Type: OCSF_VALUE; EnumValue: 300501;
	USER_ACCESS_TYPE_UID_USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_REVOKE_PRIVILEGES USER_ACCESS_TYPE_UID = 300502 // Type: OCSF_VALUE; EnumValue: 300502;
	USER_ACCESS_TYPE_UID_USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_OTHER             USER_ACCESS_TYPE_UID = 300599 // EnumValue: 300599; Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_TYPE_UID.
var (
	USER_ACCESS_TYPE_UID_name = map[int32]string{
		0:      "USER_ACCESS_TYPE_UID_UNSPECIFIED",
		300500: "USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_UNKNOWN",
		300501: "USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_ASSIGN_PRIVILEGES",
		300502: "USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_REVOKE_PRIVILEGES",
		300599: "USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_OTHER",
	}
	USER_ACCESS_TYPE_UID_value = map[string]int32{
		"USER_ACCESS_TYPE_UID_UNSPECIFIED":                              0,
		"USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_UNKNOWN":           300500,
		"USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_ASSIGN_PRIVILEGES": 300501,
		"USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_REVOKE_PRIVILEGES": 300502,
		"USER_ACCESS_TYPE_UID_USER_ACCESS_MANAGEMENT_OTHER":             300599,
	}
)

func (x USER_ACCESS_TYPE_UID) Enum() *USER_ACCESS_TYPE_UID {
	p := new(USER_ACCESS_TYPE_UID)
	*p = x
	return p
}

func (x USER_ACCESS_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[43].Descriptor()
}

func (USER_ACCESS_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes[43]
}

func (x USER_ACCESS_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_TYPE_UID.Descriptor instead.
func (USER_ACCESS_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP(), []int{43}
}

var File_ocsf_v1_3_0_events_iam_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0xcc, 0x04, 0x0a, 0x1a, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x2e, 0x0a,
	0x2a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x2d, 0x0a,
	0x29, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x31,
	0x0a, 0x2d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x46, 0x41,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x0b, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x86, 0x01, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x2a, 0x72, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0xb9, 0x17, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0,
	0x01, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xa8, 0x06, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xc4, 0xa8, 0x12, 0x12, 0x33, 0x0a, 0x2d,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xc5, 0xa8,
	0x12, 0x12, 0x33, 0x0a, 0x2d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xc6, 0xa8, 0x12, 0x12, 0x3c, 0x0a, 0x36, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0xc7, 0xa8, 0x12, 0x12, 0x3b, 0x0a, 0x35, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0xc8, 0xa8,
	0x12, 0x12, 0x34, 0x0a, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0xc9, 0xa8, 0x12, 0x12, 0x33, 0x0a, 0x2d, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xca, 0xa8, 0x12, 0x12, 0x3a, 0x0a, 0x34,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x10, 0xcb, 0xa8, 0x12, 0x12, 0x3a, 0x0a, 0x34, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0xcc, 0xa8, 0x12, 0x12, 0x31, 0x0a, 0x2b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0xcd, 0xa8, 0x12, 0x12, 0x3e, 0x0a, 0x38, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0xce, 0xa8, 0x12, 0x12, 0x3f, 0x0a, 0x39, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0xcf, 0xa8, 0x12, 0x12, 0x32, 0x0a, 0x2c, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xa7, 0xa9, 0x12, 0x2a, 0x81, 0x03, 0x0a,
	0x1a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x12, 0x34, 0x0a, 0x30, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x33, 0x0a,
	0x2f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57,
	0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xab, 0x04, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x54, 0x4c, 0x4d, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4b,
	0x45, 0x52, 0x42, 0x45, 0x52, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x47,
	0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x50, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x08, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x41, 0x50, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x86,
	0x01, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a,
	0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xba, 0x17, 0x2a, 0xab, 0x05, 0x0a, 0x1c,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12,
	0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12,
	0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x54, 0x45, 0x58, 0x54, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f,
	0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a,
	0x12, 0x33, 0x0a, 0x2f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x0c, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x0d, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x97, 0x04, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x2e, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa8, 0xa9,
	0x12, 0x12, 0x32, 0x0a, 0x2c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f,
	0x4e, 0x10, 0xa9, 0xa9, 0x12, 0x12, 0x33, 0x0a, 0x2d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x10, 0xaa, 0xa9, 0x12, 0x12, 0x42, 0x0a, 0x3c, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xab, 0xa9, 0x12, 0x12, 0x43,
	0x0a, 0x3d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0xac, 0xa9, 0x12, 0x12, 0x41, 0x0a, 0x3b, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4e,
	0x45, 0x57, 0x10, 0xad, 0xa9, 0x12, 0x12, 0x34, 0x0a, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x10, 0xae, 0xa9, 0x12, 0x12, 0x32, 0x0a, 0x2c,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8b, 0xaa, 0x12,
	0x2a, 0xd9, 0x01, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a,
	0x2f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x53, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8f, 0x01, 0x0a,
	0x1e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x3d, 0x0a, 0x39, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x7e,
	0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xbb, 0x17, 0x2a, 0xf2,
	0x02, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc6, 0x02, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x3a, 0x0a, 0x34, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x8c, 0xaa, 0x12, 0x12, 0x44, 0x0a, 0x3e,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x8d,
	0xaa, 0x12, 0x12, 0x40, 0x0a, 0x3a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x10, 0x8e, 0xaa, 0x12, 0x12, 0x38, 0x0a, 0x32, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xef, 0xaa, 0x12, 0x2a, 0x9b,
	0x05, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x07, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x0a,
	0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x45, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8f, 0x01, 0x0a,
	0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x3d, 0x0a, 0x39, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x7e,
	0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2d, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xbc, 0x17, 0x2a, 0xf2,
	0x02, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc3, 0x07, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x3a, 0x0a, 0x34, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf0, 0xaa, 0x12, 0x12, 0x39, 0x0a, 0x33,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0xf1, 0xaa, 0x12, 0x12, 0x37, 0x0a, 0x31, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xf2, 0xaa, 0x12,
	0x12, 0x39, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf3, 0xaa, 0x12, 0x12, 0x39, 0x0a, 0x33, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xf4, 0xaa, 0x12, 0x12, 0x37, 0x0a, 0x31, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xf5, 0xaa, 0x12, 0x12,
	0x39, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0xf6, 0xaa, 0x12, 0x12, 0x3b, 0x0a, 0x35, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x10, 0xf7, 0xaa, 0x12, 0x12, 0x39, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf8,
	0xaa, 0x12, 0x12, 0x3a, 0x0a, 0x34, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf9, 0xaa, 0x12, 0x12, 0x3b,
	0x0a, 0x35, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0xfa, 0xaa, 0x12, 0x12, 0x3d, 0x0a, 0x37, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0xfb, 0xaa, 0x12, 0x12, 0x3a, 0x0a, 0x34, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x10, 0xfc, 0xaa, 0x12, 0x12, 0x39, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0xfd, 0xaa,
	0x12, 0x12, 0x38, 0x0a, 0x32, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xd3, 0xab, 0x12, 0x2a, 0x83, 0x03, 0x0a, 0x1c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x27, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x2a, 0x7a, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x26, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2b, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xbe, 0x17, 0x2a, 0xe9, 0x02, 0x0a,
	0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xab, 0x04, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38,
	0x0a, 0x32, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb8, 0xac, 0x12, 0x12, 0x42, 0x0a, 0x3c, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0xb9, 0xac, 0x12, 0x12, 0x42, 0x0a, 0x3c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0xba, 0xac, 0x12,
	0x12, 0x39, 0x0a, 0x33, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xbb, 0xac, 0x12, 0x12, 0x3c, 0x0a, 0x36, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xbc, 0xac, 0x12, 0x12, 0x37, 0x0a, 0x31, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xbd,
	0xac, 0x12, 0x12, 0x37, 0x0a, 0x31, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xbe, 0xac, 0x12, 0x12, 0x36, 0x0a, 0x30, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x9b, 0xad, 0x12, 0x2a, 0x49, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x65,
	0x0a, 0x10, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x0d, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x28, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0xb8, 0x17, 0x2a, 0xf4, 0x01, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x41, 0x4d, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x79, 0x0a, 0x0d, 0x49,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x98, 0x01, 0x0a, 0x0c, 0x49, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x2f, 0x49, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe0, 0xa7, 0x12, 0x12, 0x33, 0x0a, 0x2d,
	0x49, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xc3, 0xa8,
	0x12, 0x2a, 0xbf, 0x01, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x56,
	0x4f, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x7d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x2a, 0x71, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x31, 0x0a, 0x2c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0xbd, 0x17, 0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1, 0x01, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x02, 0x0a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xd4,
	0xab, 0x12, 0x12, 0x43, 0x0a, 0x3d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45,
	0x47, 0x45, 0x53, 0x10, 0xd5, 0xab, 0x12, 0x12, 0x43, 0x0a, 0x3d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0xd6, 0xab, 0x12, 0x12, 0x37, 0x0a, 0x31,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0xb7, 0xac, 0x12, 0x42, 0x81, 0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x33, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05,
	0x4f, 0x56, 0x45, 0x49, 0x45, 0xaa, 0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x33,
	0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x61, 0x6d, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0xca, 0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30, 0x5c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2,
	0x02, 0x26, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x33, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x4f, 0x63, 0x73, 0x66, 0x3a,
	0x3a, 0x56, 0x31, 0x33, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x49,
	0x61, 0x6d, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescData = file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDesc
)

func file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDescData
}

var file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 44)
var file_ocsf_v1_3_0_events_iam_enums_enums_proto_goTypes = []any{
	(ACCOUNT_CHANGE_ACTIVITY_ID)(0),      // 0: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_ACTIVITY_ID
	(ACCOUNT_CHANGE_CATEGORY_UID)(0),     // 1: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_CATEGORY_UID
	(ACCOUNT_CHANGE_CLASS_UID)(0),        // 2: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_CLASS_UID
	(ACCOUNT_CHANGE_SEVERITY_ID)(0),      // 3: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_SEVERITY_ID
	(ACCOUNT_CHANGE_STATUS_ID)(0),        // 4: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_STATUS_ID
	(ACCOUNT_CHANGE_TYPE_UID)(0),         // 5: ocsf.v1_3_0.events.iam.enums.ACCOUNT_CHANGE_TYPE_UID
	(AUTHENTICATION_ACTIVITY_ID)(0),      // 6: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_ACTIVITY_ID
	(AUTHENTICATION_AUTH_PROTOCOL_ID)(0), // 7: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_AUTH_PROTOCOL_ID
	(AUTHENTICATION_CATEGORY_UID)(0),     // 8: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_CATEGORY_UID
	(AUTHENTICATION_CLASS_UID)(0),        // 9: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_CLASS_UID
	(AUTHENTICATION_LOGON_TYPE_ID)(0),    // 10: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_LOGON_TYPE_ID
	(AUTHENTICATION_SEVERITY_ID)(0),      // 11: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_SEVERITY_ID
	(AUTHENTICATION_STATUS_ID)(0),        // 12: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_STATUS_ID
	(AUTHENTICATION_TYPE_UID)(0),         // 13: ocsf.v1_3_0.events.iam.enums.AUTHENTICATION_TYPE_UID
	(AUTHORIZE_SESSION_ACTIVITY_ID)(0),   // 14: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_ACTIVITY_ID
	(AUTHORIZE_SESSION_CATEGORY_UID)(0),  // 15: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_CATEGORY_UID
	(AUTHORIZE_SESSION_CLASS_UID)(0),     // 16: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_CLASS_UID
	(AUTHORIZE_SESSION_SEVERITY_ID)(0),   // 17: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_SEVERITY_ID
	(AUTHORIZE_SESSION_STATUS_ID)(0),     // 18: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_STATUS_ID
	(AUTHORIZE_SESSION_TYPE_UID)(0),      // 19: ocsf.v1_3_0.events.iam.enums.AUTHORIZE_SESSION_TYPE_UID
	(ENTITY_MANAGEMENT_ACTIVITY_ID)(0),   // 20: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_ACTIVITY_ID
	(ENTITY_MANAGEMENT_CATEGORY_UID)(0),  // 21: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_CATEGORY_UID
	(ENTITY_MANAGEMENT_CLASS_UID)(0),     // 22: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_CLASS_UID
	(ENTITY_MANAGEMENT_SEVERITY_ID)(0),   // 23: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_SEVERITY_ID
	(ENTITY_MANAGEMENT_STATUS_ID)(0),     // 24: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_STATUS_ID
	(ENTITY_MANAGEMENT_TYPE_UID)(0),      // 25: ocsf.v1_3_0.events.iam.enums.ENTITY_MANAGEMENT_TYPE_UID
	(GROUP_MANAGEMENT_ACTIVITY_ID)(0),    // 26: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_ACTIVITY_ID
	(GROUP_MANAGEMENT_CATEGORY_UID)(0),   // 27: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_CATEGORY_UID
	(GROUP_MANAGEMENT_CLASS_UID)(0),      // 28: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_CLASS_UID
	(GROUP_MANAGEMENT_SEVERITY_ID)(0),    // 29: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_SEVERITY_ID
	(GROUP_MANAGEMENT_STATUS_ID)(0),      // 30: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_STATUS_ID
	(GROUP_MANAGEMENT_TYPE_UID)(0),       // 31: ocsf.v1_3_0.events.iam.enums.GROUP_MANAGEMENT_TYPE_UID
	(IAM_ACTIVITY_ID)(0),                 // 32: ocsf.v1_3_0.events.iam.enums.IAM_ACTIVITY_ID
	(IAM_CATEGORY_UID)(0),                // 33: ocsf.v1_3_0.events.iam.enums.IAM_CATEGORY_UID
	(IAM_CLASS_UID)(0),                   // 34: ocsf.v1_3_0.events.iam.enums.IAM_CLASS_UID
	(IAM_SEVERITY_ID)(0),                 // 35: ocsf.v1_3_0.events.iam.enums.IAM_SEVERITY_ID
	(IAM_STATUS_ID)(0),                   // 36: ocsf.v1_3_0.events.iam.enums.IAM_STATUS_ID
	(IAM_TYPE_UID)(0),                    // 37: ocsf.v1_3_0.events.iam.enums.IAM_TYPE_UID
	(USER_ACCESS_ACTIVITY_ID)(0),         // 38: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_ACTIVITY_ID
	(USER_ACCESS_CATEGORY_UID)(0),        // 39: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_CATEGORY_UID
	(USER_ACCESS_CLASS_UID)(0),           // 40: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_CLASS_UID
	(USER_ACCESS_SEVERITY_ID)(0),         // 41: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_SEVERITY_ID
	(USER_ACCESS_STATUS_ID)(0),           // 42: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_STATUS_ID
	(USER_ACCESS_TYPE_UID)(0),            // 43: ocsf.v1_3_0.events.iam.enums.USER_ACCESS_TYPE_UID
}
var file_ocsf_v1_3_0_events_iam_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_3_0_events_iam_enums_enums_proto_init() }
func file_ocsf_v1_3_0_events_iam_enums_enums_proto_init() {
	if File_ocsf_v1_3_0_events_iam_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDesc,
			NumEnums:      44,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_3_0_events_iam_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_3_0_events_iam_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_3_0_events_iam_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_3_0_events_iam_enums_enums_proto = out.File
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_goTypes = nil
	file_ocsf_v1_3_0_events_iam_enums_enums_proto_depIdxs = nil
}
