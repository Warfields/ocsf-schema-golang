// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_2_0/events/findings/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type INCIDENT_FINDING_TYPE_UID int32

const (
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_UNSPECIFIED              INCIDENT_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UNKNOWN INCIDENT_FINDING_TYPE_UID = 200500 // Type: OCSF_VALUE; EnumValue: 200500;
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CREATE  INCIDENT_FINDING_TYPE_UID = 200501 // EnumValue: 200501; Type: OCSF_VALUE;
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UPDATE  INCIDENT_FINDING_TYPE_UID = 200502 // Type: OCSF_VALUE; EnumValue: 200502;
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CLOSE   INCIDENT_FINDING_TYPE_UID = 200503 // Type: OCSF_VALUE; EnumValue: 200503;
	INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_OTHER   INCIDENT_FINDING_TYPE_UID = 200599 // EnumValue: 200599; Type: OCSF_VALUE;
)

// Enum value maps for INCIDENT_FINDING_TYPE_UID.
var (
	INCIDENT_FINDING_TYPE_UID_name = map[int32]string{
		0:      "INCIDENT_FINDING_TYPE_UID_UNSPECIFIED",
		200500: "INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UNKNOWN",
		200501: "INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CREATE",
		200502: "INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UPDATE",
		200503: "INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CLOSE",
		200599: "INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_OTHER",
	}
	INCIDENT_FINDING_TYPE_UID_value = map[string]int32{
		"INCIDENT_FINDING_TYPE_UID_UNSPECIFIED":              0,
		"INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UNKNOWN": 200500,
		"INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CREATE":  200501,
		"INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_UPDATE":  200502,
		"INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_CLOSE":   200503,
		"INCIDENT_FINDING_TYPE_UID_INCIDENT_FINDING_OTHER":   200599,
	}
)

func (x INCIDENT_FINDING_TYPE_UID) Enum() *INCIDENT_FINDING_TYPE_UID {
	p := new(INCIDENT_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[0].Descriptor()
}

func (INCIDENT_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[0]
}

func (x INCIDENT_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_TYPE_UID.Descriptor instead.
func (INCIDENT_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{0}
}

type COMPLIANCE_FINDING_STATUS_ID int32

const (
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_UNKNOWN    COMPLIANCE_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_SUCCESS    COMPLIANCE_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_FAILURE    COMPLIANCE_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_SUPPRESSED COMPLIANCE_FINDING_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_RESOLVED   COMPLIANCE_FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	COMPLIANCE_FINDING_STATUS_ID_COMPLIANCE_FINDING_STATUS_ID_OTHER      COMPLIANCE_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for COMPLIANCE_FINDING_STATUS_ID.
var (
	COMPLIANCE_FINDING_STATUS_ID_name = map[int32]string{
		0:  "COMPLIANCE_FINDING_STATUS_ID_UNKNOWN",
		1:  "COMPLIANCE_FINDING_STATUS_ID_SUCCESS",
		2:  "COMPLIANCE_FINDING_STATUS_ID_FAILURE",
		3:  "COMPLIANCE_FINDING_STATUS_ID_SUPPRESSED",
		4:  "COMPLIANCE_FINDING_STATUS_ID_RESOLVED",
		99: "COMPLIANCE_FINDING_STATUS_ID_OTHER",
	}
	COMPLIANCE_FINDING_STATUS_ID_value = map[string]int32{
		"COMPLIANCE_FINDING_STATUS_ID_UNKNOWN":    0,
		"COMPLIANCE_FINDING_STATUS_ID_SUCCESS":    1,
		"COMPLIANCE_FINDING_STATUS_ID_FAILURE":    2,
		"COMPLIANCE_FINDING_STATUS_ID_SUPPRESSED": 3,
		"COMPLIANCE_FINDING_STATUS_ID_RESOLVED":   4,
		"COMPLIANCE_FINDING_STATUS_ID_OTHER":      99,
	}
)

func (x COMPLIANCE_FINDING_STATUS_ID) Enum() *COMPLIANCE_FINDING_STATUS_ID {
	p := new(COMPLIANCE_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[1].Descriptor()
}

func (COMPLIANCE_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[1]
}

func (x COMPLIANCE_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_STATUS_ID.Descriptor instead.
func (COMPLIANCE_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{1}
}

type VULNERABILITY_FINDING_ACTIVITY_ID int32

const (
	VULNERABILITY_FINDING_ACTIVITY_ID_VULNERABILITY_FINDING_ACTIVITY_ID_UNKNOWN VULNERABILITY_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	VULNERABILITY_FINDING_ACTIVITY_ID_VULNERABILITY_FINDING_ACTIVITY_ID_CREATE  VULNERABILITY_FINDING_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	VULNERABILITY_FINDING_ACTIVITY_ID_VULNERABILITY_FINDING_ACTIVITY_ID_UPDATE  VULNERABILITY_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	VULNERABILITY_FINDING_ACTIVITY_ID_VULNERABILITY_FINDING_ACTIVITY_ID_CLOSE   VULNERABILITY_FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	VULNERABILITY_FINDING_ACTIVITY_ID_VULNERABILITY_FINDING_ACTIVITY_ID_OTHER   VULNERABILITY_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for VULNERABILITY_FINDING_ACTIVITY_ID.
var (
	VULNERABILITY_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "VULNERABILITY_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "VULNERABILITY_FINDING_ACTIVITY_ID_CREATE",
		2:  "VULNERABILITY_FINDING_ACTIVITY_ID_UPDATE",
		3:  "VULNERABILITY_FINDING_ACTIVITY_ID_CLOSE",
		99: "VULNERABILITY_FINDING_ACTIVITY_ID_OTHER",
	}
	VULNERABILITY_FINDING_ACTIVITY_ID_value = map[string]int32{
		"VULNERABILITY_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"VULNERABILITY_FINDING_ACTIVITY_ID_CREATE":  1,
		"VULNERABILITY_FINDING_ACTIVITY_ID_UPDATE":  2,
		"VULNERABILITY_FINDING_ACTIVITY_ID_CLOSE":   3,
		"VULNERABILITY_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x VULNERABILITY_FINDING_ACTIVITY_ID) Enum() *VULNERABILITY_FINDING_ACTIVITY_ID {
	p := new(VULNERABILITY_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[2].Descriptor()
}

func (VULNERABILITY_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[2]
}

func (x VULNERABILITY_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_ACTIVITY_ID.Descriptor instead.
func (VULNERABILITY_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{2}
}

type SECURITY_FINDING_CLASS_UID int32

const (
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_UNSPECIFIED      SECURITY_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_SECURITY_FINDING SECURITY_FINDING_CLASS_UID = 2001 // Type: OCSF_VALUE; EnumValue: 2001;
)

// Enum value maps for SECURITY_FINDING_CLASS_UID.
var (
	SECURITY_FINDING_CLASS_UID_name = map[int32]string{
		0:    "SECURITY_FINDING_CLASS_UID_UNSPECIFIED",
		2001: "SECURITY_FINDING_CLASS_UID_SECURITY_FINDING",
	}
	SECURITY_FINDING_CLASS_UID_value = map[string]int32{
		"SECURITY_FINDING_CLASS_UID_UNSPECIFIED":      0,
		"SECURITY_FINDING_CLASS_UID_SECURITY_FINDING": 2001,
	}
)

func (x SECURITY_FINDING_CLASS_UID) Enum() *SECURITY_FINDING_CLASS_UID {
	p := new(SECURITY_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[3].Descriptor()
}

func (SECURITY_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[3]
}

func (x SECURITY_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CLASS_UID.Descriptor instead.
func (SECURITY_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{3}
}

type FINDING_CONFIDENCE_ID int32

const (
	FINDING_CONFIDENCE_ID_FINDING_CONFIDENCE_ID_UNKNOWN FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FINDING_CONFIDENCE_ID_FINDING_CONFIDENCE_ID_LOW     FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDING_CONFIDENCE_ID_FINDING_CONFIDENCE_ID_MEDIUM  FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDING_CONFIDENCE_ID_FINDING_CONFIDENCE_ID_HIGH    FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINDING_CONFIDENCE_ID_FINDING_CONFIDENCE_ID_OTHER   FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDING_CONFIDENCE_ID.
var (
	FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "FINDING_CONFIDENCE_ID_LOW",
		2:  "FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "FINDING_CONFIDENCE_ID_HIGH",
		99: "FINDING_CONFIDENCE_ID_OTHER",
	}
	FINDING_CONFIDENCE_ID_value = map[string]int32{
		"FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"FINDING_CONFIDENCE_ID_LOW":     1,
		"FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"FINDING_CONFIDENCE_ID_HIGH":    3,
		"FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x FINDING_CONFIDENCE_ID) Enum() *FINDING_CONFIDENCE_ID {
	p := new(FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[4].Descriptor()
}

func (FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[4]
}

func (x FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_CONFIDENCE_ID.Descriptor instead.
func (FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{4}
}

type SECURITY_FINDING_SEVERITY_ID int32

const (
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_UNKNOWN       SECURITY_FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL SECURITY_FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_LOW           SECURITY_FINDING_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_MEDIUM        SECURITY_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_HIGH          SECURITY_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_CRITICAL      SECURITY_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_FATAL         SECURITY_FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_OTHER         SECURITY_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_SEVERITY_ID.
var (
	SECURITY_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "SECURITY_FINDING_SEVERITY_ID_LOW",
		3:  "SECURITY_FINDING_SEVERITY_ID_MEDIUM",
		4:  "SECURITY_FINDING_SEVERITY_ID_HIGH",
		5:  "SECURITY_FINDING_SEVERITY_ID_CRITICAL",
		6:  "SECURITY_FINDING_SEVERITY_ID_FATAL",
		99: "SECURITY_FINDING_SEVERITY_ID_OTHER",
	}
	SECURITY_FINDING_SEVERITY_ID_value = map[string]int32{
		"SECURITY_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"SECURITY_FINDING_SEVERITY_ID_LOW":           2,
		"SECURITY_FINDING_SEVERITY_ID_MEDIUM":        3,
		"SECURITY_FINDING_SEVERITY_ID_HIGH":          4,
		"SECURITY_FINDING_SEVERITY_ID_CRITICAL":      5,
		"SECURITY_FINDING_SEVERITY_ID_FATAL":         6,
		"SECURITY_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x SECURITY_FINDING_SEVERITY_ID) Enum() *SECURITY_FINDING_SEVERITY_ID {
	p := new(SECURITY_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[5].Descriptor()
}

func (SECURITY_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[5]
}

func (x SECURITY_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_SEVERITY_ID.Descriptor instead.
func (SECURITY_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{5}
}

type INCIDENT_FINDING_ACTIVITY_ID int32

const (
	INCIDENT_FINDING_ACTIVITY_ID_INCIDENT_FINDING_ACTIVITY_ID_UNKNOWN INCIDENT_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_ACTIVITY_ID_INCIDENT_FINDING_ACTIVITY_ID_CREATE  INCIDENT_FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_ACTIVITY_ID_INCIDENT_FINDING_ACTIVITY_ID_UPDATE  INCIDENT_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_ACTIVITY_ID_INCIDENT_FINDING_ACTIVITY_ID_CLOSE   INCIDENT_FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_ACTIVITY_ID_INCIDENT_FINDING_ACTIVITY_ID_OTHER   INCIDENT_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INCIDENT_FINDING_ACTIVITY_ID.
var (
	INCIDENT_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_ACTIVITY_ID_CREATE",
		2:  "INCIDENT_FINDING_ACTIVITY_ID_UPDATE",
		3:  "INCIDENT_FINDING_ACTIVITY_ID_CLOSE",
		99: "INCIDENT_FINDING_ACTIVITY_ID_OTHER",
	}
	INCIDENT_FINDING_ACTIVITY_ID_value = map[string]int32{
		"INCIDENT_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"INCIDENT_FINDING_ACTIVITY_ID_CREATE":  1,
		"INCIDENT_FINDING_ACTIVITY_ID_UPDATE":  2,
		"INCIDENT_FINDING_ACTIVITY_ID_CLOSE":   3,
		"INCIDENT_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x INCIDENT_FINDING_ACTIVITY_ID) Enum() *INCIDENT_FINDING_ACTIVITY_ID {
	p := new(INCIDENT_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[6].Descriptor()
}

func (INCIDENT_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[6]
}

func (x INCIDENT_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_ACTIVITY_ID.Descriptor instead.
func (INCIDENT_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{6}
}

type DATA_SECURITY_FINDING_SEVERITY_ID int32

const (
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_UNKNOWN       DATA_SECURITY_FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL DATA_SECURITY_FINDING_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_LOW           DATA_SECURITY_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_MEDIUM        DATA_SECURITY_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_HIGH          DATA_SECURITY_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_CRITICAL      DATA_SECURITY_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_FATAL         DATA_SECURITY_FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_SECURITY_FINDING_SEVERITY_ID_DATA_SECURITY_FINDING_SEVERITY_ID_OTHER         DATA_SECURITY_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_SEVERITY_ID.
var (
	DATA_SECURITY_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "DATA_SECURITY_FINDING_SEVERITY_ID_LOW",
		3:  "DATA_SECURITY_FINDING_SEVERITY_ID_MEDIUM",
		4:  "DATA_SECURITY_FINDING_SEVERITY_ID_HIGH",
		5:  "DATA_SECURITY_FINDING_SEVERITY_ID_CRITICAL",
		6:  "DATA_SECURITY_FINDING_SEVERITY_ID_FATAL",
		99: "DATA_SECURITY_FINDING_SEVERITY_ID_OTHER",
	}
	DATA_SECURITY_FINDING_SEVERITY_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"DATA_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"DATA_SECURITY_FINDING_SEVERITY_ID_LOW":           2,
		"DATA_SECURITY_FINDING_SEVERITY_ID_MEDIUM":        3,
		"DATA_SECURITY_FINDING_SEVERITY_ID_HIGH":          4,
		"DATA_SECURITY_FINDING_SEVERITY_ID_CRITICAL":      5,
		"DATA_SECURITY_FINDING_SEVERITY_ID_FATAL":         6,
		"DATA_SECURITY_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x DATA_SECURITY_FINDING_SEVERITY_ID) Enum() *DATA_SECURITY_FINDING_SEVERITY_ID {
	p := new(DATA_SECURITY_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[7].Descriptor()
}

func (DATA_SECURITY_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[7]
}

func (x DATA_SECURITY_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_SEVERITY_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{7}
}

type COMPLIANCE_FINDING_CONFIDENCE_ID int32

const (
	COMPLIANCE_FINDING_CONFIDENCE_ID_COMPLIANCE_FINDING_CONFIDENCE_ID_UNKNOWN COMPLIANCE_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	COMPLIANCE_FINDING_CONFIDENCE_ID_COMPLIANCE_FINDING_CONFIDENCE_ID_LOW     COMPLIANCE_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	COMPLIANCE_FINDING_CONFIDENCE_ID_COMPLIANCE_FINDING_CONFIDENCE_ID_MEDIUM  COMPLIANCE_FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	COMPLIANCE_FINDING_CONFIDENCE_ID_COMPLIANCE_FINDING_CONFIDENCE_ID_HIGH    COMPLIANCE_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	COMPLIANCE_FINDING_CONFIDENCE_ID_COMPLIANCE_FINDING_CONFIDENCE_ID_OTHER   COMPLIANCE_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for COMPLIANCE_FINDING_CONFIDENCE_ID.
var (
	COMPLIANCE_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "COMPLIANCE_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "COMPLIANCE_FINDING_CONFIDENCE_ID_LOW",
		2:  "COMPLIANCE_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "COMPLIANCE_FINDING_CONFIDENCE_ID_HIGH",
		99: "COMPLIANCE_FINDING_CONFIDENCE_ID_OTHER",
	}
	COMPLIANCE_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"COMPLIANCE_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"COMPLIANCE_FINDING_CONFIDENCE_ID_LOW":     1,
		"COMPLIANCE_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"COMPLIANCE_FINDING_CONFIDENCE_ID_HIGH":    3,
		"COMPLIANCE_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x COMPLIANCE_FINDING_CONFIDENCE_ID) Enum() *COMPLIANCE_FINDING_CONFIDENCE_ID {
	p := new(COMPLIANCE_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[8].Descriptor()
}

func (COMPLIANCE_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[8]
}

func (x COMPLIANCE_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_CONFIDENCE_ID.Descriptor instead.
func (COMPLIANCE_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{8}
}

type VULNERABILITY_FINDING_CATEGORY_UID int32

const (
	VULNERABILITY_FINDING_CATEGORY_UID_VULNERABILITY_FINDING_CATEGORY_UID_UNSPECIFIED VULNERABILITY_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	VULNERABILITY_FINDING_CATEGORY_UID_VULNERABILITY_FINDING_CATEGORY_UID_FINDINGS    VULNERABILITY_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for VULNERABILITY_FINDING_CATEGORY_UID.
var (
	VULNERABILITY_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "VULNERABILITY_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "VULNERABILITY_FINDING_CATEGORY_UID_FINDINGS",
	}
	VULNERABILITY_FINDING_CATEGORY_UID_value = map[string]int32{
		"VULNERABILITY_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"VULNERABILITY_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x VULNERABILITY_FINDING_CATEGORY_UID) Enum() *VULNERABILITY_FINDING_CATEGORY_UID {
	p := new(VULNERABILITY_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[9].Descriptor()
}

func (VULNERABILITY_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[9]
}

func (x VULNERABILITY_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_CATEGORY_UID.Descriptor instead.
func (VULNERABILITY_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{9}
}

type DETECTION_FINDING_TYPE_UID int32

const (
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_UNSPECIFIED               DETECTION_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UNKNOWN DETECTION_FINDING_TYPE_UID = 200400 // Type: OCSF_VALUE; EnumValue: 200400;
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CREATE  DETECTION_FINDING_TYPE_UID = 200401 // Type: OCSF_VALUE; EnumValue: 200401;
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UPDATE  DETECTION_FINDING_TYPE_UID = 200402 // Type: OCSF_VALUE; EnumValue: 200402;
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CLOSE   DETECTION_FINDING_TYPE_UID = 200403 // Type: OCSF_VALUE; EnumValue: 200403;
	DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_OTHER   DETECTION_FINDING_TYPE_UID = 200499 // Type: OCSF_VALUE; EnumValue: 200499;
)

// Enum value maps for DETECTION_FINDING_TYPE_UID.
var (
	DETECTION_FINDING_TYPE_UID_name = map[int32]string{
		0:      "DETECTION_FINDING_TYPE_UID_UNSPECIFIED",
		200400: "DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UNKNOWN",
		200401: "DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CREATE",
		200402: "DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UPDATE",
		200403: "DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CLOSE",
		200499: "DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_OTHER",
	}
	DETECTION_FINDING_TYPE_UID_value = map[string]int32{
		"DETECTION_FINDING_TYPE_UID_UNSPECIFIED":               0,
		"DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UNKNOWN": 200400,
		"DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CREATE":  200401,
		"DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_UPDATE":  200402,
		"DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_CLOSE":   200403,
		"DETECTION_FINDING_TYPE_UID_DETECTION_FINDING_OTHER":   200499,
	}
)

func (x DETECTION_FINDING_TYPE_UID) Enum() *DETECTION_FINDING_TYPE_UID {
	p := new(DETECTION_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x DETECTION_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[10].Descriptor()
}

func (DETECTION_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[10]
}

func (x DETECTION_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_TYPE_UID.Descriptor instead.
func (DETECTION_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{10}
}

type DATA_SECURITY_FINDING_CATEGORY_UID int32

const (
	DATA_SECURITY_FINDING_CATEGORY_UID_DATA_SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED DATA_SECURITY_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DATA_SECURITY_FINDING_CATEGORY_UID_DATA_SECURITY_FINDING_CATEGORY_UID_FINDINGS    DATA_SECURITY_FINDING_CATEGORY_UID = 2 // EnumValue: 2; Type: OCSF_VALUE;
)

// Enum value maps for DATA_SECURITY_FINDING_CATEGORY_UID.
var (
	DATA_SECURITY_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "DATA_SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "DATA_SECURITY_FINDING_CATEGORY_UID_FINDINGS",
	}
	DATA_SECURITY_FINDING_CATEGORY_UID_value = map[string]int32{
		"DATA_SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"DATA_SECURITY_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x DATA_SECURITY_FINDING_CATEGORY_UID) Enum() *DATA_SECURITY_FINDING_CATEGORY_UID {
	p := new(DATA_SECURITY_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[11].Descriptor()
}

func (DATA_SECURITY_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[11]
}

func (x DATA_SECURITY_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_CATEGORY_UID.Descriptor instead.
func (DATA_SECURITY_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{11}
}

type DETECTION_FINDING_IMPACT_ID int32

const (
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_UNKNOWN  DETECTION_FINDING_IMPACT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_LOW      DETECTION_FINDING_IMPACT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_MEDIUM   DETECTION_FINDING_IMPACT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_HIGH     DETECTION_FINDING_IMPACT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_CRITICAL DETECTION_FINDING_IMPACT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DETECTION_FINDING_IMPACT_ID_DETECTION_FINDING_IMPACT_ID_OTHER    DETECTION_FINDING_IMPACT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_IMPACT_ID.
var (
	DETECTION_FINDING_IMPACT_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_IMPACT_ID_UNKNOWN",
		1:  "DETECTION_FINDING_IMPACT_ID_LOW",
		2:  "DETECTION_FINDING_IMPACT_ID_MEDIUM",
		3:  "DETECTION_FINDING_IMPACT_ID_HIGH",
		4:  "DETECTION_FINDING_IMPACT_ID_CRITICAL",
		99: "DETECTION_FINDING_IMPACT_ID_OTHER",
	}
	DETECTION_FINDING_IMPACT_ID_value = map[string]int32{
		"DETECTION_FINDING_IMPACT_ID_UNKNOWN":  0,
		"DETECTION_FINDING_IMPACT_ID_LOW":      1,
		"DETECTION_FINDING_IMPACT_ID_MEDIUM":   2,
		"DETECTION_FINDING_IMPACT_ID_HIGH":     3,
		"DETECTION_FINDING_IMPACT_ID_CRITICAL": 4,
		"DETECTION_FINDING_IMPACT_ID_OTHER":    99,
	}
)

func (x DETECTION_FINDING_IMPACT_ID) Enum() *DETECTION_FINDING_IMPACT_ID {
	p := new(DETECTION_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[12].Descriptor()
}

func (DETECTION_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[12]
}

func (x DETECTION_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_IMPACT_ID.Descriptor instead.
func (DETECTION_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{12}
}

type SECURITY_FINDING_RISK_LEVEL_ID int32

const (
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_INFO     SECURITY_FINDING_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_LOW      SECURITY_FINDING_RISK_LEVEL_ID = 1 // EnumValue: 1; Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM   SECURITY_FINDING_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_HIGH     SECURITY_FINDING_RISK_LEVEL_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL SECURITY_FINDING_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for SECURITY_FINDING_RISK_LEVEL_ID.
var (
	SECURITY_FINDING_RISK_LEVEL_ID_name = map[int32]string{
		0: "SECURITY_FINDING_RISK_LEVEL_ID_INFO",
		1: "SECURITY_FINDING_RISK_LEVEL_ID_LOW",
		2: "SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM",
		3: "SECURITY_FINDING_RISK_LEVEL_ID_HIGH",
		4: "SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL",
	}
	SECURITY_FINDING_RISK_LEVEL_ID_value = map[string]int32{
		"SECURITY_FINDING_RISK_LEVEL_ID_INFO":     0,
		"SECURITY_FINDING_RISK_LEVEL_ID_LOW":      1,
		"SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM":   2,
		"SECURITY_FINDING_RISK_LEVEL_ID_HIGH":     3,
		"SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x SECURITY_FINDING_RISK_LEVEL_ID) Enum() *SECURITY_FINDING_RISK_LEVEL_ID {
	p := new(SECURITY_FINDING_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[13].Descriptor()
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[13]
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_RISK_LEVEL_ID.Descriptor instead.
func (SECURITY_FINDING_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{13}
}

type INCIDENT_FINDING_CONFIDENCE_ID int32

const (
	INCIDENT_FINDING_CONFIDENCE_ID_INCIDENT_FINDING_CONFIDENCE_ID_UNKNOWN INCIDENT_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_CONFIDENCE_ID_INCIDENT_FINDING_CONFIDENCE_ID_LOW     INCIDENT_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_CONFIDENCE_ID_INCIDENT_FINDING_CONFIDENCE_ID_MEDIUM  INCIDENT_FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_CONFIDENCE_ID_INCIDENT_FINDING_CONFIDENCE_ID_HIGH    INCIDENT_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_CONFIDENCE_ID_INCIDENT_FINDING_CONFIDENCE_ID_OTHER   INCIDENT_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INCIDENT_FINDING_CONFIDENCE_ID.
var (
	INCIDENT_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_CONFIDENCE_ID_LOW",
		2:  "INCIDENT_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "INCIDENT_FINDING_CONFIDENCE_ID_HIGH",
		99: "INCIDENT_FINDING_CONFIDENCE_ID_OTHER",
	}
	INCIDENT_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"INCIDENT_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"INCIDENT_FINDING_CONFIDENCE_ID_LOW":     1,
		"INCIDENT_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"INCIDENT_FINDING_CONFIDENCE_ID_HIGH":    3,
		"INCIDENT_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x INCIDENT_FINDING_CONFIDENCE_ID) Enum() *INCIDENT_FINDING_CONFIDENCE_ID {
	p := new(INCIDENT_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[14].Descriptor()
}

func (INCIDENT_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[14]
}

func (x INCIDENT_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_CONFIDENCE_ID.Descriptor instead.
func (INCIDENT_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{14}
}

type DETECTION_FINDING_DISPOSITION_ID int32

const (
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_UNKNOWN             DETECTION_FINDING_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_ALLOWED             DETECTION_FINDING_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_BLOCKED             DETECTION_FINDING_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_QUARANTINED         DETECTION_FINDING_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_ISOLATED            DETECTION_FINDING_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_DELETED             DETECTION_FINDING_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_DROPPED             DETECTION_FINDING_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_CUSTOM_ACTION       DETECTION_FINDING_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_APPROVED            DETECTION_FINDING_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_RESTORED            DETECTION_FINDING_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_EXONERATED          DETECTION_FINDING_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_CORRECTED           DETECTION_FINDING_DISPOSITION_ID = 11 // EnumValue: 11; Type: OCSF_VALUE;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED DETECTION_FINDING_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_UNCORRECTED         DETECTION_FINDING_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_DELAYED             DETECTION_FINDING_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_DETECTED            DETECTION_FINDING_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_NO_ACTION           DETECTION_FINDING_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_LOGGED              DETECTION_FINDING_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_TAGGED              DETECTION_FINDING_DISPOSITION_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_ALERT               DETECTION_FINDING_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_COUNT               DETECTION_FINDING_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_RESET               DETECTION_FINDING_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_CAPTCHA             DETECTION_FINDING_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_CHALLENGE           DETECTION_FINDING_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_ACCESS_REVOKED      DETECTION_FINDING_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_REJECTED            DETECTION_FINDING_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_UNAUTHORIZED        DETECTION_FINDING_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_ERROR               DETECTION_FINDING_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	DETECTION_FINDING_DISPOSITION_ID_DETECTION_FINDING_DISPOSITION_ID_OTHER               DETECTION_FINDING_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_DISPOSITION_ID.
var (
	DETECTION_FINDING_DISPOSITION_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_DISPOSITION_ID_UNKNOWN",
		1:  "DETECTION_FINDING_DISPOSITION_ID_ALLOWED",
		2:  "DETECTION_FINDING_DISPOSITION_ID_BLOCKED",
		3:  "DETECTION_FINDING_DISPOSITION_ID_QUARANTINED",
		4:  "DETECTION_FINDING_DISPOSITION_ID_ISOLATED",
		5:  "DETECTION_FINDING_DISPOSITION_ID_DELETED",
		6:  "DETECTION_FINDING_DISPOSITION_ID_DROPPED",
		7:  "DETECTION_FINDING_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "DETECTION_FINDING_DISPOSITION_ID_APPROVED",
		9:  "DETECTION_FINDING_DISPOSITION_ID_RESTORED",
		10: "DETECTION_FINDING_DISPOSITION_ID_EXONERATED",
		11: "DETECTION_FINDING_DISPOSITION_ID_CORRECTED",
		12: "DETECTION_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "DETECTION_FINDING_DISPOSITION_ID_UNCORRECTED",
		14: "DETECTION_FINDING_DISPOSITION_ID_DELAYED",
		15: "DETECTION_FINDING_DISPOSITION_ID_DETECTED",
		16: "DETECTION_FINDING_DISPOSITION_ID_NO_ACTION",
		17: "DETECTION_FINDING_DISPOSITION_ID_LOGGED",
		18: "DETECTION_FINDING_DISPOSITION_ID_TAGGED",
		19: "DETECTION_FINDING_DISPOSITION_ID_ALERT",
		20: "DETECTION_FINDING_DISPOSITION_ID_COUNT",
		21: "DETECTION_FINDING_DISPOSITION_ID_RESET",
		22: "DETECTION_FINDING_DISPOSITION_ID_CAPTCHA",
		23: "DETECTION_FINDING_DISPOSITION_ID_CHALLENGE",
		24: "DETECTION_FINDING_DISPOSITION_ID_ACCESS_REVOKED",
		25: "DETECTION_FINDING_DISPOSITION_ID_REJECTED",
		26: "DETECTION_FINDING_DISPOSITION_ID_UNAUTHORIZED",
		27: "DETECTION_FINDING_DISPOSITION_ID_ERROR",
		99: "DETECTION_FINDING_DISPOSITION_ID_OTHER",
	}
	DETECTION_FINDING_DISPOSITION_ID_value = map[string]int32{
		"DETECTION_FINDING_DISPOSITION_ID_UNKNOWN":             0,
		"DETECTION_FINDING_DISPOSITION_ID_ALLOWED":             1,
		"DETECTION_FINDING_DISPOSITION_ID_BLOCKED":             2,
		"DETECTION_FINDING_DISPOSITION_ID_QUARANTINED":         3,
		"DETECTION_FINDING_DISPOSITION_ID_ISOLATED":            4,
		"DETECTION_FINDING_DISPOSITION_ID_DELETED":             5,
		"DETECTION_FINDING_DISPOSITION_ID_DROPPED":             6,
		"DETECTION_FINDING_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"DETECTION_FINDING_DISPOSITION_ID_APPROVED":            8,
		"DETECTION_FINDING_DISPOSITION_ID_RESTORED":            9,
		"DETECTION_FINDING_DISPOSITION_ID_EXONERATED":          10,
		"DETECTION_FINDING_DISPOSITION_ID_CORRECTED":           11,
		"DETECTION_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"DETECTION_FINDING_DISPOSITION_ID_UNCORRECTED":         13,
		"DETECTION_FINDING_DISPOSITION_ID_DELAYED":             14,
		"DETECTION_FINDING_DISPOSITION_ID_DETECTED":            15,
		"DETECTION_FINDING_DISPOSITION_ID_NO_ACTION":           16,
		"DETECTION_FINDING_DISPOSITION_ID_LOGGED":              17,
		"DETECTION_FINDING_DISPOSITION_ID_TAGGED":              18,
		"DETECTION_FINDING_DISPOSITION_ID_ALERT":               19,
		"DETECTION_FINDING_DISPOSITION_ID_COUNT":               20,
		"DETECTION_FINDING_DISPOSITION_ID_RESET":               21,
		"DETECTION_FINDING_DISPOSITION_ID_CAPTCHA":             22,
		"DETECTION_FINDING_DISPOSITION_ID_CHALLENGE":           23,
		"DETECTION_FINDING_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"DETECTION_FINDING_DISPOSITION_ID_REJECTED":            25,
		"DETECTION_FINDING_DISPOSITION_ID_UNAUTHORIZED":        26,
		"DETECTION_FINDING_DISPOSITION_ID_ERROR":               27,
		"DETECTION_FINDING_DISPOSITION_ID_OTHER":               99,
	}
)

func (x DETECTION_FINDING_DISPOSITION_ID) Enum() *DETECTION_FINDING_DISPOSITION_ID {
	p := new(DETECTION_FINDING_DISPOSITION_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[15].Descriptor()
}

func (DETECTION_FINDING_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[15]
}

func (x DETECTION_FINDING_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_DISPOSITION_ID.Descriptor instead.
func (DETECTION_FINDING_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{15}
}

type FINDING_CLASS_UID int32

const (
	FINDING_CLASS_UID_FINDING_CLASS_UID_UNSPECIFIED FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FINDING_CLASS_UID_FINDING_CLASS_UID_FINDING     FINDING_CLASS_UID = 2000 // Type: OCSF_VALUE; EnumValue: 2000;
)

// Enum value maps for FINDING_CLASS_UID.
var (
	FINDING_CLASS_UID_name = map[int32]string{
		0:    "FINDING_CLASS_UID_UNSPECIFIED",
		2000: "FINDING_CLASS_UID_FINDING",
	}
	FINDING_CLASS_UID_value = map[string]int32{
		"FINDING_CLASS_UID_UNSPECIFIED": 0,
		"FINDING_CLASS_UID_FINDING":     2000,
	}
)

func (x FINDING_CLASS_UID) Enum() *FINDING_CLASS_UID {
	p := new(FINDING_CLASS_UID)
	*p = x
	return p
}

func (x FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[16].Descriptor()
}

func (FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[16]
}

func (x FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_CLASS_UID.Descriptor instead.
func (FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{16}
}

type VULNERABILITY_FINDING_SEVERITY_ID int32

const (
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_UNKNOWN       VULNERABILITY_FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_INFORMATIONAL VULNERABILITY_FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_LOW           VULNERABILITY_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_MEDIUM        VULNERABILITY_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_HIGH          VULNERABILITY_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_CRITICAL      VULNERABILITY_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_FATAL         VULNERABILITY_FINDING_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	VULNERABILITY_FINDING_SEVERITY_ID_VULNERABILITY_FINDING_SEVERITY_ID_OTHER         VULNERABILITY_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for VULNERABILITY_FINDING_SEVERITY_ID.
var (
	VULNERABILITY_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "VULNERABILITY_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "VULNERABILITY_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "VULNERABILITY_FINDING_SEVERITY_ID_LOW",
		3:  "VULNERABILITY_FINDING_SEVERITY_ID_MEDIUM",
		4:  "VULNERABILITY_FINDING_SEVERITY_ID_HIGH",
		5:  "VULNERABILITY_FINDING_SEVERITY_ID_CRITICAL",
		6:  "VULNERABILITY_FINDING_SEVERITY_ID_FATAL",
		99: "VULNERABILITY_FINDING_SEVERITY_ID_OTHER",
	}
	VULNERABILITY_FINDING_SEVERITY_ID_value = map[string]int32{
		"VULNERABILITY_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"VULNERABILITY_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"VULNERABILITY_FINDING_SEVERITY_ID_LOW":           2,
		"VULNERABILITY_FINDING_SEVERITY_ID_MEDIUM":        3,
		"VULNERABILITY_FINDING_SEVERITY_ID_HIGH":          4,
		"VULNERABILITY_FINDING_SEVERITY_ID_CRITICAL":      5,
		"VULNERABILITY_FINDING_SEVERITY_ID_FATAL":         6,
		"VULNERABILITY_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x VULNERABILITY_FINDING_SEVERITY_ID) Enum() *VULNERABILITY_FINDING_SEVERITY_ID {
	p := new(VULNERABILITY_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[17].Descriptor()
}

func (VULNERABILITY_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[17]
}

func (x VULNERABILITY_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_SEVERITY_ID.Descriptor instead.
func (VULNERABILITY_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{17}
}

type DATA_SECURITY_FINDING_STATUS_ID int32

const (
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_UNKNOWN    DATA_SECURITY_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_SUCCESS    DATA_SECURITY_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_FAILURE    DATA_SECURITY_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_SUPPRESSED DATA_SECURITY_FINDING_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_RESOLVED   DATA_SECURITY_FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_FINDING_STATUS_ID_DATA_SECURITY_FINDING_STATUS_ID_OTHER      DATA_SECURITY_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_STATUS_ID.
var (
	DATA_SECURITY_FINDING_STATUS_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_STATUS_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_STATUS_ID_SUCCESS",
		2:  "DATA_SECURITY_FINDING_STATUS_ID_FAILURE",
		3:  "DATA_SECURITY_FINDING_STATUS_ID_SUPPRESSED",
		4:  "DATA_SECURITY_FINDING_STATUS_ID_RESOLVED",
		99: "DATA_SECURITY_FINDING_STATUS_ID_OTHER",
	}
	DATA_SECURITY_FINDING_STATUS_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_STATUS_ID_UNKNOWN":    0,
		"DATA_SECURITY_FINDING_STATUS_ID_SUCCESS":    1,
		"DATA_SECURITY_FINDING_STATUS_ID_FAILURE":    2,
		"DATA_SECURITY_FINDING_STATUS_ID_SUPPRESSED": 3,
		"DATA_SECURITY_FINDING_STATUS_ID_RESOLVED":   4,
		"DATA_SECURITY_FINDING_STATUS_ID_OTHER":      99,
	}
)

func (x DATA_SECURITY_FINDING_STATUS_ID) Enum() *DATA_SECURITY_FINDING_STATUS_ID {
	p := new(DATA_SECURITY_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[18].Descriptor()
}

func (DATA_SECURITY_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[18]
}

func (x DATA_SECURITY_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_STATUS_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{18}
}

type DATA_SECURITY_FINDING_ACTIVITY_ID int32

const (
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN    DATA_SECURITY_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_CREATE     DATA_SECURITY_FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_UPDATE     DATA_SECURITY_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_CLOSE      DATA_SECURITY_FINDING_ACTIVITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_SUPPRESSED DATA_SECURITY_FINDING_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_FINDING_ACTIVITY_ID_DATA_SECURITY_FINDING_ACTIVITY_ID_OTHER      DATA_SECURITY_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_ACTIVITY_ID.
var (
	DATA_SECURITY_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_ACTIVITY_ID_CREATE",
		2:  "DATA_SECURITY_FINDING_ACTIVITY_ID_UPDATE",
		3:  "DATA_SECURITY_FINDING_ACTIVITY_ID_CLOSE",
		4:  "DATA_SECURITY_FINDING_ACTIVITY_ID_SUPPRESSED",
		99: "DATA_SECURITY_FINDING_ACTIVITY_ID_OTHER",
	}
	DATA_SECURITY_FINDING_ACTIVITY_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN":    0,
		"DATA_SECURITY_FINDING_ACTIVITY_ID_CREATE":     1,
		"DATA_SECURITY_FINDING_ACTIVITY_ID_UPDATE":     2,
		"DATA_SECURITY_FINDING_ACTIVITY_ID_CLOSE":      3,
		"DATA_SECURITY_FINDING_ACTIVITY_ID_SUPPRESSED": 4,
		"DATA_SECURITY_FINDING_ACTIVITY_ID_OTHER":      99,
	}
)

func (x DATA_SECURITY_FINDING_ACTIVITY_ID) Enum() *DATA_SECURITY_FINDING_ACTIVITY_ID {
	p := new(DATA_SECURITY_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[19].Descriptor()
}

func (DATA_SECURITY_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[19]
}

func (x DATA_SECURITY_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_ACTIVITY_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{19}
}

type FINDING_TYPE_UID int32

const (
	FINDING_TYPE_UID_FINDING_TYPE_UID_UNSPECIFIED     FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FINDING_TYPE_UID_FINDING_TYPE_UID_FINDING_UNKNOWN FINDING_TYPE_UID = 200000 // Type: OCSF_VALUE; EnumValue: 200000;
	FINDING_TYPE_UID_FINDING_TYPE_UID_FINDING_CREATE  FINDING_TYPE_UID = 200001 // Type: OCSF_VALUE; EnumValue: 200001;
	FINDING_TYPE_UID_FINDING_TYPE_UID_FINDING_UPDATE  FINDING_TYPE_UID = 200002 // Type: OCSF_VALUE; EnumValue: 200002;
	FINDING_TYPE_UID_FINDING_TYPE_UID_FINDING_CLOSE   FINDING_TYPE_UID = 200003 // Type: OCSF_VALUE; EnumValue: 200003;
	FINDING_TYPE_UID_FINDING_TYPE_UID_FINDING_OTHER   FINDING_TYPE_UID = 200099 // Type: OCSF_VALUE; EnumValue: 200099;
)

// Enum value maps for FINDING_TYPE_UID.
var (
	FINDING_TYPE_UID_name = map[int32]string{
		0:      "FINDING_TYPE_UID_UNSPECIFIED",
		200000: "FINDING_TYPE_UID_FINDING_UNKNOWN",
		200001: "FINDING_TYPE_UID_FINDING_CREATE",
		200002: "FINDING_TYPE_UID_FINDING_UPDATE",
		200003: "FINDING_TYPE_UID_FINDING_CLOSE",
		200099: "FINDING_TYPE_UID_FINDING_OTHER",
	}
	FINDING_TYPE_UID_value = map[string]int32{
		"FINDING_TYPE_UID_UNSPECIFIED":     0,
		"FINDING_TYPE_UID_FINDING_UNKNOWN": 200000,
		"FINDING_TYPE_UID_FINDING_CREATE":  200001,
		"FINDING_TYPE_UID_FINDING_UPDATE":  200002,
		"FINDING_TYPE_UID_FINDING_CLOSE":   200003,
		"FINDING_TYPE_UID_FINDING_OTHER":   200099,
	}
)

func (x FINDING_TYPE_UID) Enum() *FINDING_TYPE_UID {
	p := new(FINDING_TYPE_UID)
	*p = x
	return p
}

func (x FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[20].Descriptor()
}

func (FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[20]
}

func (x FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_TYPE_UID.Descriptor instead.
func (FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{20}
}

type VULNERABILITY_FINDING_TYPE_UID int32

const (
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_UNSPECIFIED                   VULNERABILITY_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UNKNOWN VULNERABILITY_FINDING_TYPE_UID = 200200 // Type: OCSF_VALUE; EnumValue: 200200;
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CREATE  VULNERABILITY_FINDING_TYPE_UID = 200201 // Type: OCSF_VALUE; EnumValue: 200201;
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UPDATE  VULNERABILITY_FINDING_TYPE_UID = 200202 // EnumValue: 200202; Type: OCSF_VALUE;
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CLOSE   VULNERABILITY_FINDING_TYPE_UID = 200203 // Type: OCSF_VALUE; EnumValue: 200203;
	VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_OTHER   VULNERABILITY_FINDING_TYPE_UID = 200299 // Type: OCSF_VALUE; EnumValue: 200299;
)

// Enum value maps for VULNERABILITY_FINDING_TYPE_UID.
var (
	VULNERABILITY_FINDING_TYPE_UID_name = map[int32]string{
		0:      "VULNERABILITY_FINDING_TYPE_UID_UNSPECIFIED",
		200200: "VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UNKNOWN",
		200201: "VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CREATE",
		200202: "VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UPDATE",
		200203: "VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CLOSE",
		200299: "VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_OTHER",
	}
	VULNERABILITY_FINDING_TYPE_UID_value = map[string]int32{
		"VULNERABILITY_FINDING_TYPE_UID_UNSPECIFIED":                   0,
		"VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UNKNOWN": 200200,
		"VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CREATE":  200201,
		"VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_UPDATE":  200202,
		"VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_CLOSE":   200203,
		"VULNERABILITY_FINDING_TYPE_UID_VULNERABILITY_FINDING_OTHER":   200299,
	}
)

func (x VULNERABILITY_FINDING_TYPE_UID) Enum() *VULNERABILITY_FINDING_TYPE_UID {
	p := new(VULNERABILITY_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[21].Descriptor()
}

func (VULNERABILITY_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[21]
}

func (x VULNERABILITY_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_TYPE_UID.Descriptor instead.
func (VULNERABILITY_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{21}
}

type SECURITY_FINDING_IMPACT_ID int32

const (
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_UNKNOWN  SECURITY_FINDING_IMPACT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_LOW      SECURITY_FINDING_IMPACT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_MEDIUM   SECURITY_FINDING_IMPACT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_HIGH     SECURITY_FINDING_IMPACT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_CRITICAL SECURITY_FINDING_IMPACT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_OTHER    SECURITY_FINDING_IMPACT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_IMPACT_ID.
var (
	SECURITY_FINDING_IMPACT_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_IMPACT_ID_UNKNOWN",
		1:  "SECURITY_FINDING_IMPACT_ID_LOW",
		2:  "SECURITY_FINDING_IMPACT_ID_MEDIUM",
		3:  "SECURITY_FINDING_IMPACT_ID_HIGH",
		4:  "SECURITY_FINDING_IMPACT_ID_CRITICAL",
		99: "SECURITY_FINDING_IMPACT_ID_OTHER",
	}
	SECURITY_FINDING_IMPACT_ID_value = map[string]int32{
		"SECURITY_FINDING_IMPACT_ID_UNKNOWN":  0,
		"SECURITY_FINDING_IMPACT_ID_LOW":      1,
		"SECURITY_FINDING_IMPACT_ID_MEDIUM":   2,
		"SECURITY_FINDING_IMPACT_ID_HIGH":     3,
		"SECURITY_FINDING_IMPACT_ID_CRITICAL": 4,
		"SECURITY_FINDING_IMPACT_ID_OTHER":    99,
	}
)

func (x SECURITY_FINDING_IMPACT_ID) Enum() *SECURITY_FINDING_IMPACT_ID {
	p := new(SECURITY_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[22].Descriptor()
}

func (SECURITY_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[22]
}

func (x SECURITY_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_IMPACT_ID.Descriptor instead.
func (SECURITY_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{22}
}

type DETECTION_FINDING_STATUS_ID int32

const (
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_UNKNOWN    DETECTION_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_SUCCESS    DETECTION_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_FAILURE    DETECTION_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_SUPPRESSED DETECTION_FINDING_STATUS_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_RESOLVED   DETECTION_FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DETECTION_FINDING_STATUS_ID_DETECTION_FINDING_STATUS_ID_OTHER      DETECTION_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_STATUS_ID.
var (
	DETECTION_FINDING_STATUS_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_STATUS_ID_UNKNOWN",
		1:  "DETECTION_FINDING_STATUS_ID_SUCCESS",
		2:  "DETECTION_FINDING_STATUS_ID_FAILURE",
		3:  "DETECTION_FINDING_STATUS_ID_SUPPRESSED",
		4:  "DETECTION_FINDING_STATUS_ID_RESOLVED",
		99: "DETECTION_FINDING_STATUS_ID_OTHER",
	}
	DETECTION_FINDING_STATUS_ID_value = map[string]int32{
		"DETECTION_FINDING_STATUS_ID_UNKNOWN":    0,
		"DETECTION_FINDING_STATUS_ID_SUCCESS":    1,
		"DETECTION_FINDING_STATUS_ID_FAILURE":    2,
		"DETECTION_FINDING_STATUS_ID_SUPPRESSED": 3,
		"DETECTION_FINDING_STATUS_ID_RESOLVED":   4,
		"DETECTION_FINDING_STATUS_ID_OTHER":      99,
	}
)

func (x DETECTION_FINDING_STATUS_ID) Enum() *DETECTION_FINDING_STATUS_ID {
	p := new(DETECTION_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[23].Descriptor()
}

func (DETECTION_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[23]
}

func (x DETECTION_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_STATUS_ID.Descriptor instead.
func (DETECTION_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{23}
}

type COMPLIANCE_FINDING_ACTIVITY_ID int32

const (
	COMPLIANCE_FINDING_ACTIVITY_ID_COMPLIANCE_FINDING_ACTIVITY_ID_UNKNOWN COMPLIANCE_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	COMPLIANCE_FINDING_ACTIVITY_ID_COMPLIANCE_FINDING_ACTIVITY_ID_CREATE  COMPLIANCE_FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	COMPLIANCE_FINDING_ACTIVITY_ID_COMPLIANCE_FINDING_ACTIVITY_ID_UPDATE  COMPLIANCE_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	COMPLIANCE_FINDING_ACTIVITY_ID_COMPLIANCE_FINDING_ACTIVITY_ID_CLOSE   COMPLIANCE_FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	COMPLIANCE_FINDING_ACTIVITY_ID_COMPLIANCE_FINDING_ACTIVITY_ID_OTHER   COMPLIANCE_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for COMPLIANCE_FINDING_ACTIVITY_ID.
var (
	COMPLIANCE_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "COMPLIANCE_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "COMPLIANCE_FINDING_ACTIVITY_ID_CREATE",
		2:  "COMPLIANCE_FINDING_ACTIVITY_ID_UPDATE",
		3:  "COMPLIANCE_FINDING_ACTIVITY_ID_CLOSE",
		99: "COMPLIANCE_FINDING_ACTIVITY_ID_OTHER",
	}
	COMPLIANCE_FINDING_ACTIVITY_ID_value = map[string]int32{
		"COMPLIANCE_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"COMPLIANCE_FINDING_ACTIVITY_ID_CREATE":  1,
		"COMPLIANCE_FINDING_ACTIVITY_ID_UPDATE":  2,
		"COMPLIANCE_FINDING_ACTIVITY_ID_CLOSE":   3,
		"COMPLIANCE_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x COMPLIANCE_FINDING_ACTIVITY_ID) Enum() *COMPLIANCE_FINDING_ACTIVITY_ID {
	p := new(COMPLIANCE_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[24].Descriptor()
}

func (COMPLIANCE_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[24]
}

func (x COMPLIANCE_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_ACTIVITY_ID.Descriptor instead.
func (COMPLIANCE_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{24}
}

type COMPLIANCE_FINDING_TYPE_UID int32

const (
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_UNSPECIFIED                COMPLIANCE_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UNKNOWN COMPLIANCE_FINDING_TYPE_UID = 200300 // Type: OCSF_VALUE; EnumValue: 200300;
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CREATE  COMPLIANCE_FINDING_TYPE_UID = 200301 // Type: OCSF_VALUE; EnumValue: 200301;
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UPDATE  COMPLIANCE_FINDING_TYPE_UID = 200302 // Type: OCSF_VALUE; EnumValue: 200302;
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CLOSE   COMPLIANCE_FINDING_TYPE_UID = 200303 // Type: OCSF_VALUE; EnumValue: 200303;
	COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_OTHER   COMPLIANCE_FINDING_TYPE_UID = 200399 // Type: OCSF_VALUE; EnumValue: 200399;
)

// Enum value maps for COMPLIANCE_FINDING_TYPE_UID.
var (
	COMPLIANCE_FINDING_TYPE_UID_name = map[int32]string{
		0:      "COMPLIANCE_FINDING_TYPE_UID_UNSPECIFIED",
		200300: "COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UNKNOWN",
		200301: "COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CREATE",
		200302: "COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UPDATE",
		200303: "COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CLOSE",
		200399: "COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_OTHER",
	}
	COMPLIANCE_FINDING_TYPE_UID_value = map[string]int32{
		"COMPLIANCE_FINDING_TYPE_UID_UNSPECIFIED":                0,
		"COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UNKNOWN": 200300,
		"COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CREATE":  200301,
		"COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_UPDATE":  200302,
		"COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_CLOSE":   200303,
		"COMPLIANCE_FINDING_TYPE_UID_COMPLIANCE_FINDING_OTHER":   200399,
	}
)

func (x COMPLIANCE_FINDING_TYPE_UID) Enum() *COMPLIANCE_FINDING_TYPE_UID {
	p := new(COMPLIANCE_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[25].Descriptor()
}

func (COMPLIANCE_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[25]
}

func (x COMPLIANCE_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_TYPE_UID.Descriptor instead.
func (COMPLIANCE_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{25}
}

type INCIDENT_FINDING_PRIORITY_ID int32

const (
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_UNKNOWN  INCIDENT_FINDING_PRIORITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_LOW      INCIDENT_FINDING_PRIORITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_MEDIUM   INCIDENT_FINDING_PRIORITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_HIGH     INCIDENT_FINDING_PRIORITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_CRITICAL INCIDENT_FINDING_PRIORITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	INCIDENT_FINDING_PRIORITY_ID_INCIDENT_FINDING_PRIORITY_ID_OTHER    INCIDENT_FINDING_PRIORITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INCIDENT_FINDING_PRIORITY_ID.
var (
	INCIDENT_FINDING_PRIORITY_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_PRIORITY_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_PRIORITY_ID_LOW",
		2:  "INCIDENT_FINDING_PRIORITY_ID_MEDIUM",
		3:  "INCIDENT_FINDING_PRIORITY_ID_HIGH",
		4:  "INCIDENT_FINDING_PRIORITY_ID_CRITICAL",
		99: "INCIDENT_FINDING_PRIORITY_ID_OTHER",
	}
	INCIDENT_FINDING_PRIORITY_ID_value = map[string]int32{
		"INCIDENT_FINDING_PRIORITY_ID_UNKNOWN":  0,
		"INCIDENT_FINDING_PRIORITY_ID_LOW":      1,
		"INCIDENT_FINDING_PRIORITY_ID_MEDIUM":   2,
		"INCIDENT_FINDING_PRIORITY_ID_HIGH":     3,
		"INCIDENT_FINDING_PRIORITY_ID_CRITICAL": 4,
		"INCIDENT_FINDING_PRIORITY_ID_OTHER":    99,
	}
)

func (x INCIDENT_FINDING_PRIORITY_ID) Enum() *INCIDENT_FINDING_PRIORITY_ID {
	p := new(INCIDENT_FINDING_PRIORITY_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_PRIORITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_PRIORITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[26].Descriptor()
}

func (INCIDENT_FINDING_PRIORITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[26]
}

func (x INCIDENT_FINDING_PRIORITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_PRIORITY_ID.Descriptor instead.
func (INCIDENT_FINDING_PRIORITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{26}
}

type VULNERABILITY_FINDING_CLASS_UID int32

const (
	VULNERABILITY_FINDING_CLASS_UID_VULNERABILITY_FINDING_CLASS_UID_UNSPECIFIED           VULNERABILITY_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	VULNERABILITY_FINDING_CLASS_UID_VULNERABILITY_FINDING_CLASS_UID_VULNERABILITY_FINDING VULNERABILITY_FINDING_CLASS_UID = 2002 // Type: OCSF_VALUE; EnumValue: 2002;
)

// Enum value maps for VULNERABILITY_FINDING_CLASS_UID.
var (
	VULNERABILITY_FINDING_CLASS_UID_name = map[int32]string{
		0:    "VULNERABILITY_FINDING_CLASS_UID_UNSPECIFIED",
		2002: "VULNERABILITY_FINDING_CLASS_UID_VULNERABILITY_FINDING",
	}
	VULNERABILITY_FINDING_CLASS_UID_value = map[string]int32{
		"VULNERABILITY_FINDING_CLASS_UID_UNSPECIFIED":           0,
		"VULNERABILITY_FINDING_CLASS_UID_VULNERABILITY_FINDING": 2002,
	}
)

func (x VULNERABILITY_FINDING_CLASS_UID) Enum() *VULNERABILITY_FINDING_CLASS_UID {
	p := new(VULNERABILITY_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[27].Descriptor()
}

func (VULNERABILITY_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[27]
}

func (x VULNERABILITY_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_CLASS_UID.Descriptor instead.
func (VULNERABILITY_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{27}
}

type SECURITY_FINDING_STATUS_ID int32

const (
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_UNKNOWN SECURITY_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_SUCCESS SECURITY_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_FAILURE SECURITY_FINDING_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_OTHER   SECURITY_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_STATUS_ID.
var (
	SECURITY_FINDING_STATUS_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_STATUS_ID_UNKNOWN",
		1:  "SECURITY_FINDING_STATUS_ID_SUCCESS",
		2:  "SECURITY_FINDING_STATUS_ID_FAILURE",
		99: "SECURITY_FINDING_STATUS_ID_OTHER",
	}
	SECURITY_FINDING_STATUS_ID_value = map[string]int32{
		"SECURITY_FINDING_STATUS_ID_UNKNOWN": 0,
		"SECURITY_FINDING_STATUS_ID_SUCCESS": 1,
		"SECURITY_FINDING_STATUS_ID_FAILURE": 2,
		"SECURITY_FINDING_STATUS_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_STATUS_ID) Enum() *SECURITY_FINDING_STATUS_ID {
	p := new(SECURITY_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[28].Descriptor()
}

func (SECURITY_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[28]
}

func (x SECURITY_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATUS_ID.Descriptor instead.
func (SECURITY_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{28}
}

type COMPLIANCE_FINDING_CLASS_UID int32

const (
	COMPLIANCE_FINDING_CLASS_UID_COMPLIANCE_FINDING_CLASS_UID_UNSPECIFIED        COMPLIANCE_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	COMPLIANCE_FINDING_CLASS_UID_COMPLIANCE_FINDING_CLASS_UID_COMPLIANCE_FINDING COMPLIANCE_FINDING_CLASS_UID = 2003 // Type: OCSF_VALUE; EnumValue: 2003;
)

// Enum value maps for COMPLIANCE_FINDING_CLASS_UID.
var (
	COMPLIANCE_FINDING_CLASS_UID_name = map[int32]string{
		0:    "COMPLIANCE_FINDING_CLASS_UID_UNSPECIFIED",
		2003: "COMPLIANCE_FINDING_CLASS_UID_COMPLIANCE_FINDING",
	}
	COMPLIANCE_FINDING_CLASS_UID_value = map[string]int32{
		"COMPLIANCE_FINDING_CLASS_UID_UNSPECIFIED":        0,
		"COMPLIANCE_FINDING_CLASS_UID_COMPLIANCE_FINDING": 2003,
	}
)

func (x COMPLIANCE_FINDING_CLASS_UID) Enum() *COMPLIANCE_FINDING_CLASS_UID {
	p := new(COMPLIANCE_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[29].Descriptor()
}

func (COMPLIANCE_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[29]
}

func (x COMPLIANCE_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_CLASS_UID.Descriptor instead.
func (COMPLIANCE_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{29}
}

type SECURITY_FINDING_CONFIDENCE_ID int32

const (
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN SECURITY_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_LOW     SECURITY_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM  SECURITY_FINDING_CONFIDENCE_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_HIGH    SECURITY_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_OTHER   SECURITY_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_CONFIDENCE_ID.
var (
	SECURITY_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "SECURITY_FINDING_CONFIDENCE_ID_LOW",
		2:  "SECURITY_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "SECURITY_FINDING_CONFIDENCE_ID_HIGH",
		99: "SECURITY_FINDING_CONFIDENCE_ID_OTHER",
	}
	SECURITY_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"SECURITY_FINDING_CONFIDENCE_ID_LOW":     1,
		"SECURITY_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"SECURITY_FINDING_CONFIDENCE_ID_HIGH":    3,
		"SECURITY_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_CONFIDENCE_ID) Enum() *SECURITY_FINDING_CONFIDENCE_ID {
	p := new(SECURITY_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[30].Descriptor()
}

func (SECURITY_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[30]
}

func (x SECURITY_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CONFIDENCE_ID.Descriptor instead.
func (SECURITY_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{30}
}

type FINDING_SEVERITY_ID int32

const (
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_UNKNOWN       FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_INFORMATIONAL FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_LOW           FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_MEDIUM        FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_HIGH          FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_CRITICAL      FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_FATAL         FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FINDING_SEVERITY_ID_FINDING_SEVERITY_ID_OTHER         FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDING_SEVERITY_ID.
var (
	FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "FINDING_SEVERITY_ID_UNKNOWN",
		1:  "FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "FINDING_SEVERITY_ID_LOW",
		3:  "FINDING_SEVERITY_ID_MEDIUM",
		4:  "FINDING_SEVERITY_ID_HIGH",
		5:  "FINDING_SEVERITY_ID_CRITICAL",
		6:  "FINDING_SEVERITY_ID_FATAL",
		99: "FINDING_SEVERITY_ID_OTHER",
	}
	FINDING_SEVERITY_ID_value = map[string]int32{
		"FINDING_SEVERITY_ID_UNKNOWN":       0,
		"FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"FINDING_SEVERITY_ID_LOW":           2,
		"FINDING_SEVERITY_ID_MEDIUM":        3,
		"FINDING_SEVERITY_ID_HIGH":          4,
		"FINDING_SEVERITY_ID_CRITICAL":      5,
		"FINDING_SEVERITY_ID_FATAL":         6,
		"FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x FINDING_SEVERITY_ID) Enum() *FINDING_SEVERITY_ID {
	p := new(FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[31].Descriptor()
}

func (FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[31]
}

func (x FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_SEVERITY_ID.Descriptor instead.
func (FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{31}
}

type DATA_SECURITY_FINDING_TYPE_UID int32

const (
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_UNSPECIFIED                      DATA_SECURITY_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UNKNOWN    DATA_SECURITY_FINDING_TYPE_UID = 200600 // EnumValue: 200600; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CREATE     DATA_SECURITY_FINDING_TYPE_UID = 200601 // Type: OCSF_VALUE; EnumValue: 200601;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UPDATE     DATA_SECURITY_FINDING_TYPE_UID = 200602 // Type: OCSF_VALUE; EnumValue: 200602;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CLOSE      DATA_SECURITY_FINDING_TYPE_UID = 200603 // Type: OCSF_VALUE; EnumValue: 200603;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_SUPPRESSED DATA_SECURITY_FINDING_TYPE_UID = 200604 // Type: OCSF_VALUE; EnumValue: 200604;
	DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_OTHER      DATA_SECURITY_FINDING_TYPE_UID = 200699 // Type: OCSF_VALUE; EnumValue: 200699;
)

// Enum value maps for DATA_SECURITY_FINDING_TYPE_UID.
var (
	DATA_SECURITY_FINDING_TYPE_UID_name = map[int32]string{
		0:      "DATA_SECURITY_FINDING_TYPE_UID_UNSPECIFIED",
		200600: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UNKNOWN",
		200601: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CREATE",
		200602: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UPDATE",
		200603: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CLOSE",
		200604: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_SUPPRESSED",
		200699: "DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_OTHER",
	}
	DATA_SECURITY_FINDING_TYPE_UID_value = map[string]int32{
		"DATA_SECURITY_FINDING_TYPE_UID_UNSPECIFIED":                      0,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UNKNOWN":    200600,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CREATE":     200601,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_UPDATE":     200602,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_CLOSE":      200603,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_SUPPRESSED": 200604,
		"DATA_SECURITY_FINDING_TYPE_UID_DATA_SECURITY_FINDING_OTHER":      200699,
	}
)

func (x DATA_SECURITY_FINDING_TYPE_UID) Enum() *DATA_SECURITY_FINDING_TYPE_UID {
	p := new(DATA_SECURITY_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[32].Descriptor()
}

func (DATA_SECURITY_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[32]
}

func (x DATA_SECURITY_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_TYPE_UID.Descriptor instead.
func (DATA_SECURITY_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{32}
}

type DATA_SECURITY_FINDING_DISPOSITION_ID int32

const (
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_UNKNOWN             DATA_SECURITY_FINDING_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_ALLOWED             DATA_SECURITY_FINDING_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_BLOCKED             DATA_SECURITY_FINDING_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_QUARANTINED         DATA_SECURITY_FINDING_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_ISOLATED            DATA_SECURITY_FINDING_DISPOSITION_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_DELETED             DATA_SECURITY_FINDING_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_DROPPED             DATA_SECURITY_FINDING_DISPOSITION_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_CUSTOM_ACTION       DATA_SECURITY_FINDING_DISPOSITION_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_APPROVED            DATA_SECURITY_FINDING_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_RESTORED            DATA_SECURITY_FINDING_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_EXONERATED          DATA_SECURITY_FINDING_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_CORRECTED           DATA_SECURITY_FINDING_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED DATA_SECURITY_FINDING_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_UNCORRECTED         DATA_SECURITY_FINDING_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_DELAYED             DATA_SECURITY_FINDING_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_DETECTED            DATA_SECURITY_FINDING_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_NO_ACTION           DATA_SECURITY_FINDING_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_LOGGED              DATA_SECURITY_FINDING_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_TAGGED              DATA_SECURITY_FINDING_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_ALERT               DATA_SECURITY_FINDING_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_COUNT               DATA_SECURITY_FINDING_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_RESET               DATA_SECURITY_FINDING_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_CAPTCHA             DATA_SECURITY_FINDING_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_CHALLENGE           DATA_SECURITY_FINDING_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_ACCESS_REVOKED      DATA_SECURITY_FINDING_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_REJECTED            DATA_SECURITY_FINDING_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_UNAUTHORIZED        DATA_SECURITY_FINDING_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_ERROR               DATA_SECURITY_FINDING_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	DATA_SECURITY_FINDING_DISPOSITION_ID_DATA_SECURITY_FINDING_DISPOSITION_ID_OTHER               DATA_SECURITY_FINDING_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_DISPOSITION_ID.
var (
	DATA_SECURITY_FINDING_DISPOSITION_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_DISPOSITION_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_DISPOSITION_ID_ALLOWED",
		2:  "DATA_SECURITY_FINDING_DISPOSITION_ID_BLOCKED",
		3:  "DATA_SECURITY_FINDING_DISPOSITION_ID_QUARANTINED",
		4:  "DATA_SECURITY_FINDING_DISPOSITION_ID_ISOLATED",
		5:  "DATA_SECURITY_FINDING_DISPOSITION_ID_DELETED",
		6:  "DATA_SECURITY_FINDING_DISPOSITION_ID_DROPPED",
		7:  "DATA_SECURITY_FINDING_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "DATA_SECURITY_FINDING_DISPOSITION_ID_APPROVED",
		9:  "DATA_SECURITY_FINDING_DISPOSITION_ID_RESTORED",
		10: "DATA_SECURITY_FINDING_DISPOSITION_ID_EXONERATED",
		11: "DATA_SECURITY_FINDING_DISPOSITION_ID_CORRECTED",
		12: "DATA_SECURITY_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "DATA_SECURITY_FINDING_DISPOSITION_ID_UNCORRECTED",
		14: "DATA_SECURITY_FINDING_DISPOSITION_ID_DELAYED",
		15: "DATA_SECURITY_FINDING_DISPOSITION_ID_DETECTED",
		16: "DATA_SECURITY_FINDING_DISPOSITION_ID_NO_ACTION",
		17: "DATA_SECURITY_FINDING_DISPOSITION_ID_LOGGED",
		18: "DATA_SECURITY_FINDING_DISPOSITION_ID_TAGGED",
		19: "DATA_SECURITY_FINDING_DISPOSITION_ID_ALERT",
		20: "DATA_SECURITY_FINDING_DISPOSITION_ID_COUNT",
		21: "DATA_SECURITY_FINDING_DISPOSITION_ID_RESET",
		22: "DATA_SECURITY_FINDING_DISPOSITION_ID_CAPTCHA",
		23: "DATA_SECURITY_FINDING_DISPOSITION_ID_CHALLENGE",
		24: "DATA_SECURITY_FINDING_DISPOSITION_ID_ACCESS_REVOKED",
		25: "DATA_SECURITY_FINDING_DISPOSITION_ID_REJECTED",
		26: "DATA_SECURITY_FINDING_DISPOSITION_ID_UNAUTHORIZED",
		27: "DATA_SECURITY_FINDING_DISPOSITION_ID_ERROR",
		99: "DATA_SECURITY_FINDING_DISPOSITION_ID_OTHER",
	}
	DATA_SECURITY_FINDING_DISPOSITION_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_DISPOSITION_ID_UNKNOWN":             0,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_ALLOWED":             1,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_BLOCKED":             2,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_QUARANTINED":         3,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_ISOLATED":            4,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_DELETED":             5,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_DROPPED":             6,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_APPROVED":            8,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_RESTORED":            9,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_EXONERATED":          10,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_CORRECTED":           11,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_UNCORRECTED":         13,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_DELAYED":             14,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_DETECTED":            15,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_NO_ACTION":           16,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_LOGGED":              17,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_TAGGED":              18,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_ALERT":               19,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_COUNT":               20,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_RESET":               21,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_CAPTCHA":             22,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_CHALLENGE":           23,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_REJECTED":            25,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_UNAUTHORIZED":        26,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_ERROR":               27,
		"DATA_SECURITY_FINDING_DISPOSITION_ID_OTHER":               99,
	}
)

func (x DATA_SECURITY_FINDING_DISPOSITION_ID) Enum() *DATA_SECURITY_FINDING_DISPOSITION_ID {
	p := new(DATA_SECURITY_FINDING_DISPOSITION_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[33].Descriptor()
}

func (DATA_SECURITY_FINDING_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[33]
}

func (x DATA_SECURITY_FINDING_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_DISPOSITION_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{33}
}

type DETECTION_FINDING_CLASS_UID int32

const (
	DETECTION_FINDING_CLASS_UID_DETECTION_FINDING_CLASS_UID_UNSPECIFIED       DETECTION_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DETECTION_FINDING_CLASS_UID_DETECTION_FINDING_CLASS_UID_DETECTION_FINDING DETECTION_FINDING_CLASS_UID = 2004 // Type: OCSF_VALUE; EnumValue: 2004;
)

// Enum value maps for DETECTION_FINDING_CLASS_UID.
var (
	DETECTION_FINDING_CLASS_UID_name = map[int32]string{
		0:    "DETECTION_FINDING_CLASS_UID_UNSPECIFIED",
		2004: "DETECTION_FINDING_CLASS_UID_DETECTION_FINDING",
	}
	DETECTION_FINDING_CLASS_UID_value = map[string]int32{
		"DETECTION_FINDING_CLASS_UID_UNSPECIFIED":       0,
		"DETECTION_FINDING_CLASS_UID_DETECTION_FINDING": 2004,
	}
)

func (x DETECTION_FINDING_CLASS_UID) Enum() *DETECTION_FINDING_CLASS_UID {
	p := new(DETECTION_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x DETECTION_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[34].Descriptor()
}

func (DETECTION_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[34]
}

func (x DETECTION_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_CLASS_UID.Descriptor instead.
func (DETECTION_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{34}
}

type VULNERABILITY_FINDING_STATUS_ID int32

const (
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_UNKNOWN    VULNERABILITY_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_SUCCESS    VULNERABILITY_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_FAILURE    VULNERABILITY_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_SUPPRESSED VULNERABILITY_FINDING_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_RESOLVED   VULNERABILITY_FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	VULNERABILITY_FINDING_STATUS_ID_VULNERABILITY_FINDING_STATUS_ID_OTHER      VULNERABILITY_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for VULNERABILITY_FINDING_STATUS_ID.
var (
	VULNERABILITY_FINDING_STATUS_ID_name = map[int32]string{
		0:  "VULNERABILITY_FINDING_STATUS_ID_UNKNOWN",
		1:  "VULNERABILITY_FINDING_STATUS_ID_SUCCESS",
		2:  "VULNERABILITY_FINDING_STATUS_ID_FAILURE",
		3:  "VULNERABILITY_FINDING_STATUS_ID_SUPPRESSED",
		4:  "VULNERABILITY_FINDING_STATUS_ID_RESOLVED",
		99: "VULNERABILITY_FINDING_STATUS_ID_OTHER",
	}
	VULNERABILITY_FINDING_STATUS_ID_value = map[string]int32{
		"VULNERABILITY_FINDING_STATUS_ID_UNKNOWN":    0,
		"VULNERABILITY_FINDING_STATUS_ID_SUCCESS":    1,
		"VULNERABILITY_FINDING_STATUS_ID_FAILURE":    2,
		"VULNERABILITY_FINDING_STATUS_ID_SUPPRESSED": 3,
		"VULNERABILITY_FINDING_STATUS_ID_RESOLVED":   4,
		"VULNERABILITY_FINDING_STATUS_ID_OTHER":      99,
	}
)

func (x VULNERABILITY_FINDING_STATUS_ID) Enum() *VULNERABILITY_FINDING_STATUS_ID {
	p := new(VULNERABILITY_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[35].Descriptor()
}

func (VULNERABILITY_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[35]
}

func (x VULNERABILITY_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_STATUS_ID.Descriptor instead.
func (VULNERABILITY_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{35}
}

type VULNERABILITY_FINDING_CONFIDENCE_ID int32

const (
	VULNERABILITY_FINDING_CONFIDENCE_ID_VULNERABILITY_FINDING_CONFIDENCE_ID_UNKNOWN VULNERABILITY_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	VULNERABILITY_FINDING_CONFIDENCE_ID_VULNERABILITY_FINDING_CONFIDENCE_ID_LOW     VULNERABILITY_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	VULNERABILITY_FINDING_CONFIDENCE_ID_VULNERABILITY_FINDING_CONFIDENCE_ID_MEDIUM  VULNERABILITY_FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	VULNERABILITY_FINDING_CONFIDENCE_ID_VULNERABILITY_FINDING_CONFIDENCE_ID_HIGH    VULNERABILITY_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	VULNERABILITY_FINDING_CONFIDENCE_ID_VULNERABILITY_FINDING_CONFIDENCE_ID_OTHER   VULNERABILITY_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for VULNERABILITY_FINDING_CONFIDENCE_ID.
var (
	VULNERABILITY_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "VULNERABILITY_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "VULNERABILITY_FINDING_CONFIDENCE_ID_LOW",
		2:  "VULNERABILITY_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "VULNERABILITY_FINDING_CONFIDENCE_ID_HIGH",
		99: "VULNERABILITY_FINDING_CONFIDENCE_ID_OTHER",
	}
	VULNERABILITY_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"VULNERABILITY_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"VULNERABILITY_FINDING_CONFIDENCE_ID_LOW":     1,
		"VULNERABILITY_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"VULNERABILITY_FINDING_CONFIDENCE_ID_HIGH":    3,
		"VULNERABILITY_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x VULNERABILITY_FINDING_CONFIDENCE_ID) Enum() *VULNERABILITY_FINDING_CONFIDENCE_ID {
	p := new(VULNERABILITY_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x VULNERABILITY_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VULNERABILITY_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[36].Descriptor()
}

func (VULNERABILITY_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[36]
}

func (x VULNERABILITY_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VULNERABILITY_FINDING_CONFIDENCE_ID.Descriptor instead.
func (VULNERABILITY_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{36}
}

type FINDING_ACTIVITY_ID int32

const (
	FINDING_ACTIVITY_ID_FINDING_ACTIVITY_ID_UNKNOWN FINDING_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FINDING_ACTIVITY_ID_FINDING_ACTIVITY_ID_CREATE  FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDING_ACTIVITY_ID_FINDING_ACTIVITY_ID_UPDATE  FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDING_ACTIVITY_ID_FINDING_ACTIVITY_ID_CLOSE   FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINDING_ACTIVITY_ID_FINDING_ACTIVITY_ID_OTHER   FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDING_ACTIVITY_ID.
var (
	FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "FINDING_ACTIVITY_ID_CREATE",
		2:  "FINDING_ACTIVITY_ID_UPDATE",
		3:  "FINDING_ACTIVITY_ID_CLOSE",
		99: "FINDING_ACTIVITY_ID_OTHER",
	}
	FINDING_ACTIVITY_ID_value = map[string]int32{
		"FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"FINDING_ACTIVITY_ID_CREATE":  1,
		"FINDING_ACTIVITY_ID_UPDATE":  2,
		"FINDING_ACTIVITY_ID_CLOSE":   3,
		"FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FINDING_ACTIVITY_ID) Enum() *FINDING_ACTIVITY_ID {
	p := new(FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[37].Descriptor()
}

func (FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[37]
}

func (x FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_ACTIVITY_ID.Descriptor instead.
func (FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{37}
}

type INCIDENT_FINDING_STATUS_ID int32

const (
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_UNKNOWN  INCIDENT_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_SUCCESS  INCIDENT_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_FAILURE  INCIDENT_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_ON_HOLD  INCIDENT_FINDING_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_RESOLVED INCIDENT_FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_CLOSED   INCIDENT_FINDING_STATUS_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	INCIDENT_FINDING_STATUS_ID_INCIDENT_FINDING_STATUS_ID_OTHER    INCIDENT_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INCIDENT_FINDING_STATUS_ID.
var (
	INCIDENT_FINDING_STATUS_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_STATUS_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_STATUS_ID_SUCCESS",
		2:  "INCIDENT_FINDING_STATUS_ID_FAILURE",
		3:  "INCIDENT_FINDING_STATUS_ID_ON_HOLD",
		4:  "INCIDENT_FINDING_STATUS_ID_RESOLVED",
		5:  "INCIDENT_FINDING_STATUS_ID_CLOSED",
		99: "INCIDENT_FINDING_STATUS_ID_OTHER",
	}
	INCIDENT_FINDING_STATUS_ID_value = map[string]int32{
		"INCIDENT_FINDING_STATUS_ID_UNKNOWN":  0,
		"INCIDENT_FINDING_STATUS_ID_SUCCESS":  1,
		"INCIDENT_FINDING_STATUS_ID_FAILURE":  2,
		"INCIDENT_FINDING_STATUS_ID_ON_HOLD":  3,
		"INCIDENT_FINDING_STATUS_ID_RESOLVED": 4,
		"INCIDENT_FINDING_STATUS_ID_CLOSED":   5,
		"INCIDENT_FINDING_STATUS_ID_OTHER":    99,
	}
)

func (x INCIDENT_FINDING_STATUS_ID) Enum() *INCIDENT_FINDING_STATUS_ID {
	p := new(INCIDENT_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[38].Descriptor()
}

func (INCIDENT_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[38]
}

func (x INCIDENT_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_STATUS_ID.Descriptor instead.
func (INCIDENT_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{38}
}

type COMPLIANCE_FINDING_SEVERITY_ID int32

const (
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_UNKNOWN       COMPLIANCE_FINDING_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_INFORMATIONAL COMPLIANCE_FINDING_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_LOW           COMPLIANCE_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_MEDIUM        COMPLIANCE_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_HIGH          COMPLIANCE_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_CRITICAL      COMPLIANCE_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_FATAL         COMPLIANCE_FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	COMPLIANCE_FINDING_SEVERITY_ID_COMPLIANCE_FINDING_SEVERITY_ID_OTHER         COMPLIANCE_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for COMPLIANCE_FINDING_SEVERITY_ID.
var (
	COMPLIANCE_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "COMPLIANCE_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "COMPLIANCE_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "COMPLIANCE_FINDING_SEVERITY_ID_LOW",
		3:  "COMPLIANCE_FINDING_SEVERITY_ID_MEDIUM",
		4:  "COMPLIANCE_FINDING_SEVERITY_ID_HIGH",
		5:  "COMPLIANCE_FINDING_SEVERITY_ID_CRITICAL",
		6:  "COMPLIANCE_FINDING_SEVERITY_ID_FATAL",
		99: "COMPLIANCE_FINDING_SEVERITY_ID_OTHER",
	}
	COMPLIANCE_FINDING_SEVERITY_ID_value = map[string]int32{
		"COMPLIANCE_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"COMPLIANCE_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"COMPLIANCE_FINDING_SEVERITY_ID_LOW":           2,
		"COMPLIANCE_FINDING_SEVERITY_ID_MEDIUM":        3,
		"COMPLIANCE_FINDING_SEVERITY_ID_HIGH":          4,
		"COMPLIANCE_FINDING_SEVERITY_ID_CRITICAL":      5,
		"COMPLIANCE_FINDING_SEVERITY_ID_FATAL":         6,
		"COMPLIANCE_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x COMPLIANCE_FINDING_SEVERITY_ID) Enum() *COMPLIANCE_FINDING_SEVERITY_ID {
	p := new(COMPLIANCE_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[39].Descriptor()
}

func (COMPLIANCE_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[39]
}

func (x COMPLIANCE_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_SEVERITY_ID.Descriptor instead.
func (COMPLIANCE_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{39}
}

type INCIDENT_FINDING_CATEGORY_UID int32

const (
	INCIDENT_FINDING_CATEGORY_UID_INCIDENT_FINDING_CATEGORY_UID_UNSPECIFIED INCIDENT_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	INCIDENT_FINDING_CATEGORY_UID_INCIDENT_FINDING_CATEGORY_UID_FINDINGS    INCIDENT_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for INCIDENT_FINDING_CATEGORY_UID.
var (
	INCIDENT_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "INCIDENT_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "INCIDENT_FINDING_CATEGORY_UID_FINDINGS",
	}
	INCIDENT_FINDING_CATEGORY_UID_value = map[string]int32{
		"INCIDENT_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"INCIDENT_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x INCIDENT_FINDING_CATEGORY_UID) Enum() *INCIDENT_FINDING_CATEGORY_UID {
	p := new(INCIDENT_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[40].Descriptor()
}

func (INCIDENT_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[40]
}

func (x INCIDENT_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_CATEGORY_UID.Descriptor instead.
func (INCIDENT_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{40}
}

type INCIDENT_FINDING_VERDICT_ID int32

const (
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_UNKNOWN            INCIDENT_FINDING_VERDICT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_FALSE_POSITIVE     INCIDENT_FINDING_VERDICT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_TRUE_POSITIVE      INCIDENT_FINDING_VERDICT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_DISREGARD          INCIDENT_FINDING_VERDICT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_SUSPICIOUS         INCIDENT_FINDING_VERDICT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_BENIGN             INCIDENT_FINDING_VERDICT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_TEST               INCIDENT_FINDING_VERDICT_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_INSUFFICIENT_DATA  INCIDENT_FINDING_VERDICT_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_SECURITY_RISK      INCIDENT_FINDING_VERDICT_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_MANAGED_EXTERNALLY INCIDENT_FINDING_VERDICT_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_DUPLICATE          INCIDENT_FINDING_VERDICT_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	INCIDENT_FINDING_VERDICT_ID_INCIDENT_FINDING_VERDICT_ID_OTHER              INCIDENT_FINDING_VERDICT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for INCIDENT_FINDING_VERDICT_ID.
var (
	INCIDENT_FINDING_VERDICT_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_VERDICT_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_VERDICT_ID_FALSE_POSITIVE",
		2:  "INCIDENT_FINDING_VERDICT_ID_TRUE_POSITIVE",
		3:  "INCIDENT_FINDING_VERDICT_ID_DISREGARD",
		4:  "INCIDENT_FINDING_VERDICT_ID_SUSPICIOUS",
		5:  "INCIDENT_FINDING_VERDICT_ID_BENIGN",
		6:  "INCIDENT_FINDING_VERDICT_ID_TEST",
		7:  "INCIDENT_FINDING_VERDICT_ID_INSUFFICIENT_DATA",
		8:  "INCIDENT_FINDING_VERDICT_ID_SECURITY_RISK",
		9:  "INCIDENT_FINDING_VERDICT_ID_MANAGED_EXTERNALLY",
		10: "INCIDENT_FINDING_VERDICT_ID_DUPLICATE",
		99: "INCIDENT_FINDING_VERDICT_ID_OTHER",
	}
	INCIDENT_FINDING_VERDICT_ID_value = map[string]int32{
		"INCIDENT_FINDING_VERDICT_ID_UNKNOWN":            0,
		"INCIDENT_FINDING_VERDICT_ID_FALSE_POSITIVE":     1,
		"INCIDENT_FINDING_VERDICT_ID_TRUE_POSITIVE":      2,
		"INCIDENT_FINDING_VERDICT_ID_DISREGARD":          3,
		"INCIDENT_FINDING_VERDICT_ID_SUSPICIOUS":         4,
		"INCIDENT_FINDING_VERDICT_ID_BENIGN":             5,
		"INCIDENT_FINDING_VERDICT_ID_TEST":               6,
		"INCIDENT_FINDING_VERDICT_ID_INSUFFICIENT_DATA":  7,
		"INCIDENT_FINDING_VERDICT_ID_SECURITY_RISK":      8,
		"INCIDENT_FINDING_VERDICT_ID_MANAGED_EXTERNALLY": 9,
		"INCIDENT_FINDING_VERDICT_ID_DUPLICATE":          10,
		"INCIDENT_FINDING_VERDICT_ID_OTHER":              99,
	}
)

func (x INCIDENT_FINDING_VERDICT_ID) Enum() *INCIDENT_FINDING_VERDICT_ID {
	p := new(INCIDENT_FINDING_VERDICT_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_VERDICT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_VERDICT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[41].Descriptor()
}

func (INCIDENT_FINDING_VERDICT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[41]
}

func (x INCIDENT_FINDING_VERDICT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_VERDICT_ID.Descriptor instead.
func (INCIDENT_FINDING_VERDICT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{41}
}

type DATA_SECURITY_FINDING_ACTION_ID int32

const (
	DATA_SECURITY_FINDING_ACTION_ID_DATA_SECURITY_FINDING_ACTION_ID_UNKNOWN DATA_SECURITY_FINDING_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_ACTION_ID_DATA_SECURITY_FINDING_ACTION_ID_ALLOWED DATA_SECURITY_FINDING_ACTION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_ACTION_ID_DATA_SECURITY_FINDING_ACTION_ID_DENIED  DATA_SECURITY_FINDING_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_ACTION_ID_DATA_SECURITY_FINDING_ACTION_ID_OTHER   DATA_SECURITY_FINDING_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_ACTION_ID.
var (
	DATA_SECURITY_FINDING_ACTION_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_ACTION_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_ACTION_ID_ALLOWED",
		2:  "DATA_SECURITY_FINDING_ACTION_ID_DENIED",
		99: "DATA_SECURITY_FINDING_ACTION_ID_OTHER",
	}
	DATA_SECURITY_FINDING_ACTION_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_ACTION_ID_UNKNOWN": 0,
		"DATA_SECURITY_FINDING_ACTION_ID_ALLOWED": 1,
		"DATA_SECURITY_FINDING_ACTION_ID_DENIED":  2,
		"DATA_SECURITY_FINDING_ACTION_ID_OTHER":   99,
	}
)

func (x DATA_SECURITY_FINDING_ACTION_ID) Enum() *DATA_SECURITY_FINDING_ACTION_ID {
	p := new(DATA_SECURITY_FINDING_ACTION_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[42].Descriptor()
}

func (DATA_SECURITY_FINDING_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[42]
}

func (x DATA_SECURITY_FINDING_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_ACTION_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{42}
}

type DATA_SECURITY_FINDING_IMPACT_ID int32

const (
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_UNKNOWN  DATA_SECURITY_FINDING_IMPACT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_LOW      DATA_SECURITY_FINDING_IMPACT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_MEDIUM   DATA_SECURITY_FINDING_IMPACT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_HIGH     DATA_SECURITY_FINDING_IMPACT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_CRITICAL DATA_SECURITY_FINDING_IMPACT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_FINDING_IMPACT_ID_DATA_SECURITY_FINDING_IMPACT_ID_OTHER    DATA_SECURITY_FINDING_IMPACT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_IMPACT_ID.
var (
	DATA_SECURITY_FINDING_IMPACT_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_IMPACT_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_IMPACT_ID_LOW",
		2:  "DATA_SECURITY_FINDING_IMPACT_ID_MEDIUM",
		3:  "DATA_SECURITY_FINDING_IMPACT_ID_HIGH",
		4:  "DATA_SECURITY_FINDING_IMPACT_ID_CRITICAL",
		99: "DATA_SECURITY_FINDING_IMPACT_ID_OTHER",
	}
	DATA_SECURITY_FINDING_IMPACT_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_IMPACT_ID_UNKNOWN":  0,
		"DATA_SECURITY_FINDING_IMPACT_ID_LOW":      1,
		"DATA_SECURITY_FINDING_IMPACT_ID_MEDIUM":   2,
		"DATA_SECURITY_FINDING_IMPACT_ID_HIGH":     3,
		"DATA_SECURITY_FINDING_IMPACT_ID_CRITICAL": 4,
		"DATA_SECURITY_FINDING_IMPACT_ID_OTHER":    99,
	}
)

func (x DATA_SECURITY_FINDING_IMPACT_ID) Enum() *DATA_SECURITY_FINDING_IMPACT_ID {
	p := new(DATA_SECURITY_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[43].Descriptor()
}

func (DATA_SECURITY_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[43]
}

func (x DATA_SECURITY_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_IMPACT_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{43}
}

type DETECTION_FINDING_ACTION_ID int32

const (
	DETECTION_FINDING_ACTION_ID_DETECTION_FINDING_ACTION_ID_UNKNOWN DETECTION_FINDING_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_ACTION_ID_DETECTION_FINDING_ACTION_ID_ALLOWED DETECTION_FINDING_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_ACTION_ID_DETECTION_FINDING_ACTION_ID_DENIED  DETECTION_FINDING_ACTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_ACTION_ID_DETECTION_FINDING_ACTION_ID_OTHER   DETECTION_FINDING_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_ACTION_ID.
var (
	DETECTION_FINDING_ACTION_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_ACTION_ID_UNKNOWN",
		1:  "DETECTION_FINDING_ACTION_ID_ALLOWED",
		2:  "DETECTION_FINDING_ACTION_ID_DENIED",
		99: "DETECTION_FINDING_ACTION_ID_OTHER",
	}
	DETECTION_FINDING_ACTION_ID_value = map[string]int32{
		"DETECTION_FINDING_ACTION_ID_UNKNOWN": 0,
		"DETECTION_FINDING_ACTION_ID_ALLOWED": 1,
		"DETECTION_FINDING_ACTION_ID_DENIED":  2,
		"DETECTION_FINDING_ACTION_ID_OTHER":   99,
	}
)

func (x DETECTION_FINDING_ACTION_ID) Enum() *DETECTION_FINDING_ACTION_ID {
	p := new(DETECTION_FINDING_ACTION_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[44].Descriptor()
}

func (DETECTION_FINDING_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[44]
}

func (x DETECTION_FINDING_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_ACTION_ID.Descriptor instead.
func (DETECTION_FINDING_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{44}
}

type DATA_SECURITY_FINDING_CLASS_UID int32

const (
	DATA_SECURITY_FINDING_CLASS_UID_DATA_SECURITY_FINDING_CLASS_UID_UNSPECIFIED           DATA_SECURITY_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DATA_SECURITY_FINDING_CLASS_UID_DATA_SECURITY_FINDING_CLASS_UID_DATA_SECURITY_FINDING DATA_SECURITY_FINDING_CLASS_UID = 2006 // Type: OCSF_VALUE; EnumValue: 2006;
)

// Enum value maps for DATA_SECURITY_FINDING_CLASS_UID.
var (
	DATA_SECURITY_FINDING_CLASS_UID_name = map[int32]string{
		0:    "DATA_SECURITY_FINDING_CLASS_UID_UNSPECIFIED",
		2006: "DATA_SECURITY_FINDING_CLASS_UID_DATA_SECURITY_FINDING",
	}
	DATA_SECURITY_FINDING_CLASS_UID_value = map[string]int32{
		"DATA_SECURITY_FINDING_CLASS_UID_UNSPECIFIED":           0,
		"DATA_SECURITY_FINDING_CLASS_UID_DATA_SECURITY_FINDING": 2006,
	}
)

func (x DATA_SECURITY_FINDING_CLASS_UID) Enum() *DATA_SECURITY_FINDING_CLASS_UID {
	p := new(DATA_SECURITY_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[45].Descriptor()
}

func (DATA_SECURITY_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[45]
}

func (x DATA_SECURITY_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_CLASS_UID.Descriptor instead.
func (DATA_SECURITY_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{45}
}

type INCIDENT_FINDING_IMPACT_ID int32

const (
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_UNKNOWN  INCIDENT_FINDING_IMPACT_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_LOW      INCIDENT_FINDING_IMPACT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_MEDIUM   INCIDENT_FINDING_IMPACT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_HIGH     INCIDENT_FINDING_IMPACT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_CRITICAL INCIDENT_FINDING_IMPACT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INCIDENT_FINDING_IMPACT_ID_INCIDENT_FINDING_IMPACT_ID_OTHER    INCIDENT_FINDING_IMPACT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for INCIDENT_FINDING_IMPACT_ID.
var (
	INCIDENT_FINDING_IMPACT_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_IMPACT_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_IMPACT_ID_LOW",
		2:  "INCIDENT_FINDING_IMPACT_ID_MEDIUM",
		3:  "INCIDENT_FINDING_IMPACT_ID_HIGH",
		4:  "INCIDENT_FINDING_IMPACT_ID_CRITICAL",
		99: "INCIDENT_FINDING_IMPACT_ID_OTHER",
	}
	INCIDENT_FINDING_IMPACT_ID_value = map[string]int32{
		"INCIDENT_FINDING_IMPACT_ID_UNKNOWN":  0,
		"INCIDENT_FINDING_IMPACT_ID_LOW":      1,
		"INCIDENT_FINDING_IMPACT_ID_MEDIUM":   2,
		"INCIDENT_FINDING_IMPACT_ID_HIGH":     3,
		"INCIDENT_FINDING_IMPACT_ID_CRITICAL": 4,
		"INCIDENT_FINDING_IMPACT_ID_OTHER":    99,
	}
)

func (x INCIDENT_FINDING_IMPACT_ID) Enum() *INCIDENT_FINDING_IMPACT_ID {
	p := new(INCIDENT_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[46].Descriptor()
}

func (INCIDENT_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[46]
}

func (x INCIDENT_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_IMPACT_ID.Descriptor instead.
func (INCIDENT_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{46}
}

type SECURITY_FINDING_TYPE_UID int32

const (
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_UNSPECIFIED              SECURITY_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN SECURITY_FINDING_TYPE_UID = 200100 // Type: OCSF_VALUE; EnumValue: 200100;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE  SECURITY_FINDING_TYPE_UID = 200101 // Type: OCSF_VALUE; EnumValue: 200101;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE  SECURITY_FINDING_TYPE_UID = 200102 // Type: OCSF_VALUE; EnumValue: 200102;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CLOSE   SECURITY_FINDING_TYPE_UID = 200103 // Type: OCSF_VALUE; EnumValue: 200103;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER   SECURITY_FINDING_TYPE_UID = 200199 // Type: OCSF_VALUE; EnumValue: 200199;
)

// Enum value maps for SECURITY_FINDING_TYPE_UID.
var (
	SECURITY_FINDING_TYPE_UID_name = map[int32]string{
		0:      "SECURITY_FINDING_TYPE_UID_UNSPECIFIED",
		200100: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN",
		200101: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE",
		200102: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE",
		200103: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CLOSE",
		200199: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER",
	}
	SECURITY_FINDING_TYPE_UID_value = map[string]int32{
		"SECURITY_FINDING_TYPE_UID_UNSPECIFIED":              0,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN": 200100,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE":  200101,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE":  200102,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CLOSE":   200103,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER":   200199,
	}
)

func (x SECURITY_FINDING_TYPE_UID) Enum() *SECURITY_FINDING_TYPE_UID {
	p := new(SECURITY_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[47].Descriptor()
}

func (SECURITY_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[47]
}

func (x SECURITY_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_TYPE_UID.Descriptor instead.
func (SECURITY_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{47}
}

type DETECTION_FINDING_SEVERITY_ID int32

const (
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_UNKNOWN       DETECTION_FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_INFORMATIONAL DETECTION_FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_LOW           DETECTION_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_MEDIUM        DETECTION_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_HIGH          DETECTION_FINDING_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_CRITICAL      DETECTION_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_FATAL         DETECTION_FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DETECTION_FINDING_SEVERITY_ID_DETECTION_FINDING_SEVERITY_ID_OTHER         DETECTION_FINDING_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DETECTION_FINDING_SEVERITY_ID.
var (
	DETECTION_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "DETECTION_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "DETECTION_FINDING_SEVERITY_ID_LOW",
		3:  "DETECTION_FINDING_SEVERITY_ID_MEDIUM",
		4:  "DETECTION_FINDING_SEVERITY_ID_HIGH",
		5:  "DETECTION_FINDING_SEVERITY_ID_CRITICAL",
		6:  "DETECTION_FINDING_SEVERITY_ID_FATAL",
		99: "DETECTION_FINDING_SEVERITY_ID_OTHER",
	}
	DETECTION_FINDING_SEVERITY_ID_value = map[string]int32{
		"DETECTION_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"DETECTION_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"DETECTION_FINDING_SEVERITY_ID_LOW":           2,
		"DETECTION_FINDING_SEVERITY_ID_MEDIUM":        3,
		"DETECTION_FINDING_SEVERITY_ID_HIGH":          4,
		"DETECTION_FINDING_SEVERITY_ID_CRITICAL":      5,
		"DETECTION_FINDING_SEVERITY_ID_FATAL":         6,
		"DETECTION_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x DETECTION_FINDING_SEVERITY_ID) Enum() *DETECTION_FINDING_SEVERITY_ID {
	p := new(DETECTION_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[48].Descriptor()
}

func (DETECTION_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[48]
}

func (x DETECTION_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_SEVERITY_ID.Descriptor instead.
func (DETECTION_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{48}
}

type INCIDENT_FINDING_CLASS_UID int32

const (
	INCIDENT_FINDING_CLASS_UID_INCIDENT_FINDING_CLASS_UID_UNSPECIFIED      INCIDENT_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	INCIDENT_FINDING_CLASS_UID_INCIDENT_FINDING_CLASS_UID_INCIDENT_FINDING INCIDENT_FINDING_CLASS_UID = 2005 // EnumValue: 2005; Type: OCSF_VALUE;
)

// Enum value maps for INCIDENT_FINDING_CLASS_UID.
var (
	INCIDENT_FINDING_CLASS_UID_name = map[int32]string{
		0:    "INCIDENT_FINDING_CLASS_UID_UNSPECIFIED",
		2005: "INCIDENT_FINDING_CLASS_UID_INCIDENT_FINDING",
	}
	INCIDENT_FINDING_CLASS_UID_value = map[string]int32{
		"INCIDENT_FINDING_CLASS_UID_UNSPECIFIED":      0,
		"INCIDENT_FINDING_CLASS_UID_INCIDENT_FINDING": 2005,
	}
)

func (x INCIDENT_FINDING_CLASS_UID) Enum() *INCIDENT_FINDING_CLASS_UID {
	p := new(INCIDENT_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[49].Descriptor()
}

func (INCIDENT_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[49]
}

func (x INCIDENT_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_CLASS_UID.Descriptor instead.
func (INCIDENT_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{49}
}

type DETECTION_FINDING_ACTIVITY_ID int32

const (
	DETECTION_FINDING_ACTIVITY_ID_DETECTION_FINDING_ACTIVITY_ID_UNKNOWN DETECTION_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_ACTIVITY_ID_DETECTION_FINDING_ACTIVITY_ID_CREATE  DETECTION_FINDING_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DETECTION_FINDING_ACTIVITY_ID_DETECTION_FINDING_ACTIVITY_ID_UPDATE  DETECTION_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_ACTIVITY_ID_DETECTION_FINDING_ACTIVITY_ID_CLOSE   DETECTION_FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DETECTION_FINDING_ACTIVITY_ID_DETECTION_FINDING_ACTIVITY_ID_OTHER   DETECTION_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_ACTIVITY_ID.
var (
	DETECTION_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "DETECTION_FINDING_ACTIVITY_ID_CREATE",
		2:  "DETECTION_FINDING_ACTIVITY_ID_UPDATE",
		3:  "DETECTION_FINDING_ACTIVITY_ID_CLOSE",
		99: "DETECTION_FINDING_ACTIVITY_ID_OTHER",
	}
	DETECTION_FINDING_ACTIVITY_ID_value = map[string]int32{
		"DETECTION_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"DETECTION_FINDING_ACTIVITY_ID_CREATE":  1,
		"DETECTION_FINDING_ACTIVITY_ID_UPDATE":  2,
		"DETECTION_FINDING_ACTIVITY_ID_CLOSE":   3,
		"DETECTION_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DETECTION_FINDING_ACTIVITY_ID) Enum() *DETECTION_FINDING_ACTIVITY_ID {
	p := new(DETECTION_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[50].Descriptor()
}

func (DETECTION_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[50]
}

func (x DETECTION_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_ACTIVITY_ID.Descriptor instead.
func (DETECTION_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{50}
}

type DATA_SECURITY_FINDING_RISK_LEVEL_ID int32

const (
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_DATA_SECURITY_FINDING_RISK_LEVEL_ID_INFO     DATA_SECURITY_FINDING_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_DATA_SECURITY_FINDING_RISK_LEVEL_ID_LOW      DATA_SECURITY_FINDING_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_DATA_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM   DATA_SECURITY_FINDING_RISK_LEVEL_ID = 2 // EnumValue: 2; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_DATA_SECURITY_FINDING_RISK_LEVEL_ID_HIGH     DATA_SECURITY_FINDING_RISK_LEVEL_ID = 3 // EnumValue: 3; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_DATA_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL DATA_SECURITY_FINDING_RISK_LEVEL_ID = 4 // EnumValue: 4; Type: OCSF_VALUE;
)

// Enum value maps for DATA_SECURITY_FINDING_RISK_LEVEL_ID.
var (
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_name = map[int32]string{
		0: "DATA_SECURITY_FINDING_RISK_LEVEL_ID_INFO",
		1: "DATA_SECURITY_FINDING_RISK_LEVEL_ID_LOW",
		2: "DATA_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM",
		3: "DATA_SECURITY_FINDING_RISK_LEVEL_ID_HIGH",
		4: "DATA_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL",
	}
	DATA_SECURITY_FINDING_RISK_LEVEL_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_RISK_LEVEL_ID_INFO":     0,
		"DATA_SECURITY_FINDING_RISK_LEVEL_ID_LOW":      1,
		"DATA_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM":   2,
		"DATA_SECURITY_FINDING_RISK_LEVEL_ID_HIGH":     3,
		"DATA_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x DATA_SECURITY_FINDING_RISK_LEVEL_ID) Enum() *DATA_SECURITY_FINDING_RISK_LEVEL_ID {
	p := new(DATA_SECURITY_FINDING_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[51].Descriptor()
}

func (DATA_SECURITY_FINDING_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[51]
}

func (x DATA_SECURITY_FINDING_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_RISK_LEVEL_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{51}
}

type DETECTION_FINDING_CATEGORY_UID int32

const (
	DETECTION_FINDING_CATEGORY_UID_DETECTION_FINDING_CATEGORY_UID_UNSPECIFIED DETECTION_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DETECTION_FINDING_CATEGORY_UID_DETECTION_FINDING_CATEGORY_UID_FINDINGS    DETECTION_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for DETECTION_FINDING_CATEGORY_UID.
var (
	DETECTION_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "DETECTION_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "DETECTION_FINDING_CATEGORY_UID_FINDINGS",
	}
	DETECTION_FINDING_CATEGORY_UID_value = map[string]int32{
		"DETECTION_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"DETECTION_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x DETECTION_FINDING_CATEGORY_UID) Enum() *DETECTION_FINDING_CATEGORY_UID {
	p := new(DETECTION_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x DETECTION_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[52].Descriptor()
}

func (DETECTION_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[52]
}

func (x DETECTION_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_CATEGORY_UID.Descriptor instead.
func (DETECTION_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{52}
}

type COMPLIANCE_FINDING_CATEGORY_UID int32

const (
	COMPLIANCE_FINDING_CATEGORY_UID_COMPLIANCE_FINDING_CATEGORY_UID_UNSPECIFIED COMPLIANCE_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	COMPLIANCE_FINDING_CATEGORY_UID_COMPLIANCE_FINDING_CATEGORY_UID_FINDINGS    COMPLIANCE_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for COMPLIANCE_FINDING_CATEGORY_UID.
var (
	COMPLIANCE_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "COMPLIANCE_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "COMPLIANCE_FINDING_CATEGORY_UID_FINDINGS",
	}
	COMPLIANCE_FINDING_CATEGORY_UID_value = map[string]int32{
		"COMPLIANCE_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"COMPLIANCE_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x COMPLIANCE_FINDING_CATEGORY_UID) Enum() *COMPLIANCE_FINDING_CATEGORY_UID {
	p := new(COMPLIANCE_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x COMPLIANCE_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[53].Descriptor()
}

func (COMPLIANCE_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[53]
}

func (x COMPLIANCE_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_FINDING_CATEGORY_UID.Descriptor instead.
func (COMPLIANCE_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{53}
}

type FINDING_CATEGORY_UID int32

const (
	FINDING_CATEGORY_UID_FINDING_CATEGORY_UID_UNSPECIFIED FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FINDING_CATEGORY_UID_FINDING_CATEGORY_UID_FINDINGS    FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for FINDING_CATEGORY_UID.
var (
	FINDING_CATEGORY_UID_name = map[int32]string{
		0: "FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "FINDING_CATEGORY_UID_FINDINGS",
	}
	FINDING_CATEGORY_UID_value = map[string]int32{
		"FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x FINDING_CATEGORY_UID) Enum() *FINDING_CATEGORY_UID {
	p := new(FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[54].Descriptor()
}

func (FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[54]
}

func (x FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_CATEGORY_UID.Descriptor instead.
func (FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{54}
}

type INCIDENT_FINDING_SEVERITY_ID int32

const (
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_UNKNOWN       INCIDENT_FINDING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_INFORMATIONAL INCIDENT_FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_LOW           INCIDENT_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_MEDIUM        INCIDENT_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_HIGH          INCIDENT_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_CRITICAL      INCIDENT_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_FATAL         INCIDENT_FINDING_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	INCIDENT_FINDING_SEVERITY_ID_INCIDENT_FINDING_SEVERITY_ID_OTHER         INCIDENT_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INCIDENT_FINDING_SEVERITY_ID.
var (
	INCIDENT_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "INCIDENT_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "INCIDENT_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "INCIDENT_FINDING_SEVERITY_ID_LOW",
		3:  "INCIDENT_FINDING_SEVERITY_ID_MEDIUM",
		4:  "INCIDENT_FINDING_SEVERITY_ID_HIGH",
		5:  "INCIDENT_FINDING_SEVERITY_ID_CRITICAL",
		6:  "INCIDENT_FINDING_SEVERITY_ID_FATAL",
		99: "INCIDENT_FINDING_SEVERITY_ID_OTHER",
	}
	INCIDENT_FINDING_SEVERITY_ID_value = map[string]int32{
		"INCIDENT_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"INCIDENT_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"INCIDENT_FINDING_SEVERITY_ID_LOW":           2,
		"INCIDENT_FINDING_SEVERITY_ID_MEDIUM":        3,
		"INCIDENT_FINDING_SEVERITY_ID_HIGH":          4,
		"INCIDENT_FINDING_SEVERITY_ID_CRITICAL":      5,
		"INCIDENT_FINDING_SEVERITY_ID_FATAL":         6,
		"INCIDENT_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x INCIDENT_FINDING_SEVERITY_ID) Enum() *INCIDENT_FINDING_SEVERITY_ID {
	p := new(INCIDENT_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x INCIDENT_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INCIDENT_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[55].Descriptor()
}

func (INCIDENT_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[55]
}

func (x INCIDENT_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INCIDENT_FINDING_SEVERITY_ID.Descriptor instead.
func (INCIDENT_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{55}
}

type DATA_SECURITY_FINDING_CONFIDENCE_ID int32

const (
	DATA_SECURITY_FINDING_CONFIDENCE_ID_DATA_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN DATA_SECURITY_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_FINDING_CONFIDENCE_ID_DATA_SECURITY_FINDING_CONFIDENCE_ID_LOW     DATA_SECURITY_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_FINDING_CONFIDENCE_ID_DATA_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM  DATA_SECURITY_FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_FINDING_CONFIDENCE_ID_DATA_SECURITY_FINDING_CONFIDENCE_ID_HIGH    DATA_SECURITY_FINDING_CONFIDENCE_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	DATA_SECURITY_FINDING_CONFIDENCE_ID_DATA_SECURITY_FINDING_CONFIDENCE_ID_OTHER   DATA_SECURITY_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_FINDING_CONFIDENCE_ID.
var (
	DATA_SECURITY_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "DATA_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "DATA_SECURITY_FINDING_CONFIDENCE_ID_LOW",
		2:  "DATA_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "DATA_SECURITY_FINDING_CONFIDENCE_ID_HIGH",
		99: "DATA_SECURITY_FINDING_CONFIDENCE_ID_OTHER",
	}
	DATA_SECURITY_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"DATA_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"DATA_SECURITY_FINDING_CONFIDENCE_ID_LOW":     1,
		"DATA_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"DATA_SECURITY_FINDING_CONFIDENCE_ID_HIGH":    3,
		"DATA_SECURITY_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x DATA_SECURITY_FINDING_CONFIDENCE_ID) Enum() *DATA_SECURITY_FINDING_CONFIDENCE_ID {
	p := new(DATA_SECURITY_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[56].Descriptor()
}

func (DATA_SECURITY_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[56]
}

func (x DATA_SECURITY_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_FINDING_CONFIDENCE_ID.Descriptor instead.
func (DATA_SECURITY_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{56}
}

type SECURITY_FINDING_ACTIVITY_ID int32

const (
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN SECURITY_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_CREATE  SECURITY_FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_UPDATE  SECURITY_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_CLOSE   SECURITY_FINDING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_OTHER   SECURITY_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_ACTIVITY_ID.
var (
	SECURITY_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "SECURITY_FINDING_ACTIVITY_ID_CREATE",
		2:  "SECURITY_FINDING_ACTIVITY_ID_UPDATE",
		3:  "SECURITY_FINDING_ACTIVITY_ID_CLOSE",
		99: "SECURITY_FINDING_ACTIVITY_ID_OTHER",
	}
	SECURITY_FINDING_ACTIVITY_ID_value = map[string]int32{
		"SECURITY_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"SECURITY_FINDING_ACTIVITY_ID_CREATE":  1,
		"SECURITY_FINDING_ACTIVITY_ID_UPDATE":  2,
		"SECURITY_FINDING_ACTIVITY_ID_CLOSE":   3,
		"SECURITY_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_ACTIVITY_ID) Enum() *SECURITY_FINDING_ACTIVITY_ID {
	p := new(SECURITY_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[57].Descriptor()
}

func (SECURITY_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[57]
}

func (x SECURITY_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_ACTIVITY_ID.Descriptor instead.
func (SECURITY_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{57}
}

type SECURITY_FINDING_CATEGORY_UID int32

const (
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED SECURITY_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_FINDINGS    SECURITY_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for SECURITY_FINDING_CATEGORY_UID.
var (
	SECURITY_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "SECURITY_FINDING_CATEGORY_UID_FINDINGS",
	}
	SECURITY_FINDING_CATEGORY_UID_value = map[string]int32{
		"SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"SECURITY_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x SECURITY_FINDING_CATEGORY_UID) Enum() *SECURITY_FINDING_CATEGORY_UID {
	p := new(SECURITY_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[58].Descriptor()
}

func (SECURITY_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[58]
}

func (x SECURITY_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CATEGORY_UID.Descriptor instead.
func (SECURITY_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{58}
}

type DETECTION_FINDING_RISK_LEVEL_ID int32

const (
	DETECTION_FINDING_RISK_LEVEL_ID_DETECTION_FINDING_RISK_LEVEL_ID_INFO     DETECTION_FINDING_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_RISK_LEVEL_ID_DETECTION_FINDING_RISK_LEVEL_ID_LOW      DETECTION_FINDING_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_RISK_LEVEL_ID_DETECTION_FINDING_RISK_LEVEL_ID_MEDIUM   DETECTION_FINDING_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_RISK_LEVEL_ID_DETECTION_FINDING_RISK_LEVEL_ID_HIGH     DETECTION_FINDING_RISK_LEVEL_ID = 3 // EnumValue: 3; Type: OCSF_VALUE;
	DETECTION_FINDING_RISK_LEVEL_ID_DETECTION_FINDING_RISK_LEVEL_ID_CRITICAL DETECTION_FINDING_RISK_LEVEL_ID = 4 // EnumValue: 4; Type: OCSF_VALUE;
)

// Enum value maps for DETECTION_FINDING_RISK_LEVEL_ID.
var (
	DETECTION_FINDING_RISK_LEVEL_ID_name = map[int32]string{
		0: "DETECTION_FINDING_RISK_LEVEL_ID_INFO",
		1: "DETECTION_FINDING_RISK_LEVEL_ID_LOW",
		2: "DETECTION_FINDING_RISK_LEVEL_ID_MEDIUM",
		3: "DETECTION_FINDING_RISK_LEVEL_ID_HIGH",
		4: "DETECTION_FINDING_RISK_LEVEL_ID_CRITICAL",
	}
	DETECTION_FINDING_RISK_LEVEL_ID_value = map[string]int32{
		"DETECTION_FINDING_RISK_LEVEL_ID_INFO":     0,
		"DETECTION_FINDING_RISK_LEVEL_ID_LOW":      1,
		"DETECTION_FINDING_RISK_LEVEL_ID_MEDIUM":   2,
		"DETECTION_FINDING_RISK_LEVEL_ID_HIGH":     3,
		"DETECTION_FINDING_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x DETECTION_FINDING_RISK_LEVEL_ID) Enum() *DETECTION_FINDING_RISK_LEVEL_ID {
	p := new(DETECTION_FINDING_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[59].Descriptor()
}

func (DETECTION_FINDING_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[59]
}

func (x DETECTION_FINDING_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_RISK_LEVEL_ID.Descriptor instead.
func (DETECTION_FINDING_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{59}
}

type SECURITY_FINDING_STATE_ID int32

const (
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_UNKNOWN     SECURITY_FINDING_STATE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_NEW         SECURITY_FINDING_STATE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_IN_PROGRESS SECURITY_FINDING_STATE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_SUPPRESSED  SECURITY_FINDING_STATE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_RESOLVED    SECURITY_FINDING_STATE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_OTHER       SECURITY_FINDING_STATE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_STATE_ID.
var (
	SECURITY_FINDING_STATE_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_STATE_ID_UNKNOWN",
		1:  "SECURITY_FINDING_STATE_ID_NEW",
		2:  "SECURITY_FINDING_STATE_ID_IN_PROGRESS",
		3:  "SECURITY_FINDING_STATE_ID_SUPPRESSED",
		4:  "SECURITY_FINDING_STATE_ID_RESOLVED",
		99: "SECURITY_FINDING_STATE_ID_OTHER",
	}
	SECURITY_FINDING_STATE_ID_value = map[string]int32{
		"SECURITY_FINDING_STATE_ID_UNKNOWN":     0,
		"SECURITY_FINDING_STATE_ID_NEW":         1,
		"SECURITY_FINDING_STATE_ID_IN_PROGRESS": 2,
		"SECURITY_FINDING_STATE_ID_SUPPRESSED":  3,
		"SECURITY_FINDING_STATE_ID_RESOLVED":    4,
		"SECURITY_FINDING_STATE_ID_OTHER":       99,
	}
)

func (x SECURITY_FINDING_STATE_ID) Enum() *SECURITY_FINDING_STATE_ID {
	p := new(SECURITY_FINDING_STATE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[60].Descriptor()
}

func (SECURITY_FINDING_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[60]
}

func (x SECURITY_FINDING_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATE_ID.Descriptor instead.
func (SECURITY_FINDING_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{60}
}

type DETECTION_FINDING_CONFIDENCE_ID int32

const (
	DETECTION_FINDING_CONFIDENCE_ID_DETECTION_FINDING_CONFIDENCE_ID_UNKNOWN DETECTION_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DETECTION_FINDING_CONFIDENCE_ID_DETECTION_FINDING_CONFIDENCE_ID_LOW     DETECTION_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DETECTION_FINDING_CONFIDENCE_ID_DETECTION_FINDING_CONFIDENCE_ID_MEDIUM  DETECTION_FINDING_CONFIDENCE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DETECTION_FINDING_CONFIDENCE_ID_DETECTION_FINDING_CONFIDENCE_ID_HIGH    DETECTION_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DETECTION_FINDING_CONFIDENCE_ID_DETECTION_FINDING_CONFIDENCE_ID_OTHER   DETECTION_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DETECTION_FINDING_CONFIDENCE_ID.
var (
	DETECTION_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "DETECTION_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "DETECTION_FINDING_CONFIDENCE_ID_LOW",
		2:  "DETECTION_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "DETECTION_FINDING_CONFIDENCE_ID_HIGH",
		99: "DETECTION_FINDING_CONFIDENCE_ID_OTHER",
	}
	DETECTION_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"DETECTION_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"DETECTION_FINDING_CONFIDENCE_ID_LOW":     1,
		"DETECTION_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"DETECTION_FINDING_CONFIDENCE_ID_HIGH":    3,
		"DETECTION_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x DETECTION_FINDING_CONFIDENCE_ID) Enum() *DETECTION_FINDING_CONFIDENCE_ID {
	p := new(DETECTION_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x DETECTION_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DETECTION_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[61].Descriptor()
}

func (DETECTION_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[61]
}

func (x DETECTION_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DETECTION_FINDING_CONFIDENCE_ID.Descriptor instead.
func (DETECTION_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{61}
}

type FINDING_STATUS_ID int32

const (
	FINDING_STATUS_ID_FINDING_STATUS_ID_UNKNOWN    FINDING_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FINDING_STATUS_ID_FINDING_STATUS_ID_SUCCESS    FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDING_STATUS_ID_FINDING_STATUS_ID_FAILURE    FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDING_STATUS_ID_FINDING_STATUS_ID_SUPPRESSED FINDING_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINDING_STATUS_ID_FINDING_STATUS_ID_RESOLVED   FINDING_STATUS_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FINDING_STATUS_ID_FINDING_STATUS_ID_OTHER      FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDING_STATUS_ID.
var (
	FINDING_STATUS_ID_name = map[int32]string{
		0:  "FINDING_STATUS_ID_UNKNOWN",
		1:  "FINDING_STATUS_ID_SUCCESS",
		2:  "FINDING_STATUS_ID_FAILURE",
		3:  "FINDING_STATUS_ID_SUPPRESSED",
		4:  "FINDING_STATUS_ID_RESOLVED",
		99: "FINDING_STATUS_ID_OTHER",
	}
	FINDING_STATUS_ID_value = map[string]int32{
		"FINDING_STATUS_ID_UNKNOWN":    0,
		"FINDING_STATUS_ID_SUCCESS":    1,
		"FINDING_STATUS_ID_FAILURE":    2,
		"FINDING_STATUS_ID_SUPPRESSED": 3,
		"FINDING_STATUS_ID_RESOLVED":   4,
		"FINDING_STATUS_ID_OTHER":      99,
	}
)

func (x FINDING_STATUS_ID) Enum() *FINDING_STATUS_ID {
	p := new(FINDING_STATUS_ID)
	*p = x
	return p
}

func (x FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[62].Descriptor()
}

func (FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes[62]
}

func (x FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDING_STATUS_ID.Descriptor instead.
func (FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{62}
}

var File_ocsf_v1_2_0_events_findings_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2a, 0xe2, 0x02, 0x0a, 0x19, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x32, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xb4, 0x9e, 0x0c, 0x12, 0x37, 0x0a, 0x31, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xb5, 0x9e, 0x0c, 0x12, 0x37,
	0x0a, 0x31, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0xb6, 0x9e, 0x0c, 0x12, 0x36, 0x0a, 0x30, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xb7, 0x9e, 0x0c, 0x12,
	0x36, 0x0a, 0x30, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x97, 0x9f, 0x0c, 0x2a, 0x9c, 0x02, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x26,
	0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x88, 0x02, 0x0a, 0x21, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x7a, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2b, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd1, 0x0f, 0x2a, 0xbc, 0x01,
	0x0a, 0x15, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe9, 0x02, 0x0a,
	0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea, 0x01, 0x0a, 0x1c, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x96, 0x03, 0x0a, 0x21, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xfe,
	0x01, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x89, 0x01, 0x0a, 0x22, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a, 0xee, 0x02, 0x0a, 0x1a,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x34, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xd0,
	0x9d, 0x0c, 0x12, 0x39, 0x0a, 0x33, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xd1, 0x9d, 0x0c, 0x12, 0x39, 0x0a,
	0x33, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0xd2, 0x9d, 0x0c, 0x12, 0x38, 0x0a, 0x32, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xd3,
	0x9d, 0x0c, 0x12, 0x38, 0x0a, 0x32, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xb3, 0x9e, 0x0c, 0x2a, 0x89, 0x01, 0x0a,
	0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a, 0x8a, 0x02, 0x0a, 0x1b, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x26, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x80, 0x0b, 0x0a, 0x20, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2c, 0x0a,
	0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x2d, 0x0a, 0x29, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2d,
	0x0a, 0x29, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2f, 0x0a,
	0x2b, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2e,
	0x0a, 0x2a, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x38,
	0x0a, 0x34, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10,
	0x12, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48,
	0x41, 0x10, 0x16, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x17, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x56, 0x0a, 0x11, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x19, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd0, 0x0f, 0x2a, 0x96, 0x03, 0x0a, 0x21, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x29, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x33, 0x0a, 0x2f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xb1, 0x02, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x2e,
	0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c,
	0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x02, 0x0a, 0x21, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x29, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xf6, 0x01, 0x0a, 0x10, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x20, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xc0, 0x9a, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xc1, 0x9a, 0x0c, 0x12, 0x25, 0x0a, 0x1f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xc2, 0x9a,
	0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0xc3, 0x9a, 0x0c, 0x12, 0x24, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xa3, 0x9b, 0x0c, 0x2a, 0x9e, 0x03,
	0x0a, 0x1e, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x42, 0x0a, 0x3c, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x88, 0x9c, 0x0c, 0x12, 0x41, 0x0a, 0x3b, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x89, 0x9c, 0x0c, 0x12, 0x41, 0x0a, 0x3b, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x9c, 0x0c, 0x12, 0x40, 0x0a, 0x3a, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x8b, 0x9c, 0x0c, 0x12, 0x40, 0x0a, 0x3a,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xeb, 0x9c, 0x0c, 0x2a, 0x83,
	0x02, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x95, 0x02, 0x0a, 0x1b, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf6, 0x01, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xfa, 0x02, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x3c, 0x0a, 0x36, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xec, 0x9c, 0x0c,
	0x12, 0x3b, 0x0a, 0x35, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xed, 0x9c, 0x0c, 0x12, 0x3b, 0x0a,
	0x35, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xee, 0x9c, 0x0c, 0x12, 0x3a, 0x0a, 0x34, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0xef, 0x9c, 0x0c, 0x12, 0x3a, 0x0a, 0x34, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xcf,
	0x9d, 0x0c, 0x2a, 0x91, 0x02, 0x0a, 0x1c, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x26,
	0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8e, 0x01, 0x0a, 0x1f, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x35, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x56,
	0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0xd2, 0x0f, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x82, 0x01, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x2f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd3, 0x0f, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x98,
	0x02, 0x0a, 0x13, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe5, 0x03, 0x0a, 0x1e, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3c,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x98, 0x9f, 0x0c,
	0x12, 0x41, 0x0a, 0x3b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x99, 0x9f, 0x0c, 0x12, 0x41, 0x0a, 0x3b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x9a, 0x9f, 0x0c, 0x12, 0x40, 0x0a, 0x3a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x9b, 0x9f, 0x0c, 0x12, 0x45, 0x0a, 0x3f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x9c, 0x9f, 0x0c, 0x12,
	0x40, 0x0a, 0x3a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xfb, 0x9f,
	0x0c, 0x2a, 0xf8, 0x0b, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x34, 0x0a, 0x30, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x36, 0x0a,
	0x32, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x32, 0x0a, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x3c, 0x0a, 0x38, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x32, 0x0a,
	0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x10, 0x13, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x15, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54,
	0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44,
	0x10, 0x18, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x2e, 0x0a, 0x2a,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2e, 0x0a, 0x2a,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x7e, 0x0a, 0x1b,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2d, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd4, 0x0f, 0x2a, 0xb1, 0x02, 0x0a,
	0x1f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a,
	0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55,
	0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x55, 0x4c, 0x4e, 0x45,
	0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x90, 0x02, 0x0a, 0x23, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x55, 0x4c, 0x4e,
	0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c,
	0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xb4, 0x01, 0x0a, 0x13, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb2, 0x02, 0x0a, 0x1a, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xfb, 0x02, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x2c, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x7a, 0x0a,
	0x1d, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d,
	0x0a, 0x29, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a, 0xb2, 0x04, 0x0a, 0x1b, 0x49, 0x4e,
	0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56,
	0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45,
	0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x52, 0x45, 0x47, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52,
	0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x4e, 0x49, 0x47, 0x4e, 0x10, 0x05,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44, 0x49,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45,
	0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x49, 0x4e, 0x43, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52,
	0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x56, 0x45, 0x52, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x44,
	0x49, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd2,
	0x01, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xa6, 0x02, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xbe, 0x01, 0x0a,
	0x1b, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x8e, 0x01,
	0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x3a, 0x0a, 0x35, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd6, 0x0f, 0x2a, 0x83,
	0x02, 0x0a, 0x1a, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xe2, 0x02, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a,
	0x32, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xa4, 0x9b, 0x0c, 0x12, 0x37, 0x0a, 0x31, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xa5, 0x9b, 0x0c,
	0x12, 0x37, 0x0a, 0x31, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xa6, 0x9b, 0x0c, 0x12, 0x36, 0x0a, 0x30, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xa7, 0x9b,
	0x0c, 0x12, 0x36, 0x0a, 0x30, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x87, 0x9c, 0x0c, 0x2a, 0xf2, 0x02, 0x0a, 0x1d, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x7a,
	0x0a, 0x1a, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2b, 0x49, 0x4e, 0x43, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd5, 0x0f, 0x2a, 0xf0, 0x01, 0x0a, 0x1d, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x90, 0x02,
	0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04,
	0x2a, 0x7d, 0x0a, 0x1e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a,
	0x80, 0x01, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53,
	0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x14, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x02, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x90, 0x02, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xea, 0x01, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x7a, 0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x29, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a, 0xf8, 0x01, 0x0a, 0x1f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x87, 0x02, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xf8, 0x01, 0x0a, 0x1f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xcf, 0x01, 0x0a, 0x11,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x42, 0x9f, 0x02,
	0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2,
	0x02, 0x05, 0x4f, 0x56, 0x45, 0x46, 0x45, 0xaa, 0x02, 0x1f, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56,
	0x31, 0x32, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x1f, 0x4f, 0x63, 0x73, 0x66,
	0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x2b, 0x4f, 0x63,
	0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x23, 0x4f, 0x63, 0x73, 0x66,
	0x3a, 0x3a, 0x56, 0x31, 0x32, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescData = file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDesc
)

func file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDescData
}

var file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 63)
var file_ocsf_v1_2_0_events_findings_enums_enums_proto_goTypes = []interface{}{
	(INCIDENT_FINDING_TYPE_UID)(0),            // 0: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_TYPE_UID
	(COMPLIANCE_FINDING_STATUS_ID)(0),         // 1: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_STATUS_ID
	(VULNERABILITY_FINDING_ACTIVITY_ID)(0),    // 2: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_ACTIVITY_ID
	(SECURITY_FINDING_CLASS_UID)(0),           // 3: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	(FINDING_CONFIDENCE_ID)(0),                // 4: ocsf.v1_2_0.events.findings.enums.FINDING_CONFIDENCE_ID
	(SECURITY_FINDING_SEVERITY_ID)(0),         // 5: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	(INCIDENT_FINDING_ACTIVITY_ID)(0),         // 6: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_ACTIVITY_ID
	(DATA_SECURITY_FINDING_SEVERITY_ID)(0),    // 7: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_SEVERITY_ID
	(COMPLIANCE_FINDING_CONFIDENCE_ID)(0),     // 8: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_CONFIDENCE_ID
	(VULNERABILITY_FINDING_CATEGORY_UID)(0),   // 9: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_CATEGORY_UID
	(DETECTION_FINDING_TYPE_UID)(0),           // 10: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_TYPE_UID
	(DATA_SECURITY_FINDING_CATEGORY_UID)(0),   // 11: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_CATEGORY_UID
	(DETECTION_FINDING_IMPACT_ID)(0),          // 12: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_IMPACT_ID
	(SECURITY_FINDING_RISK_LEVEL_ID)(0),       // 13: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	(INCIDENT_FINDING_CONFIDENCE_ID)(0),       // 14: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_CONFIDENCE_ID
	(DETECTION_FINDING_DISPOSITION_ID)(0),     // 15: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_DISPOSITION_ID
	(FINDING_CLASS_UID)(0),                    // 16: ocsf.v1_2_0.events.findings.enums.FINDING_CLASS_UID
	(VULNERABILITY_FINDING_SEVERITY_ID)(0),    // 17: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_SEVERITY_ID
	(DATA_SECURITY_FINDING_STATUS_ID)(0),      // 18: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_STATUS_ID
	(DATA_SECURITY_FINDING_ACTIVITY_ID)(0),    // 19: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_ACTIVITY_ID
	(FINDING_TYPE_UID)(0),                     // 20: ocsf.v1_2_0.events.findings.enums.FINDING_TYPE_UID
	(VULNERABILITY_FINDING_TYPE_UID)(0),       // 21: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_TYPE_UID
	(SECURITY_FINDING_IMPACT_ID)(0),           // 22: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	(DETECTION_FINDING_STATUS_ID)(0),          // 23: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_STATUS_ID
	(COMPLIANCE_FINDING_ACTIVITY_ID)(0),       // 24: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_ACTIVITY_ID
	(COMPLIANCE_FINDING_TYPE_UID)(0),          // 25: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_TYPE_UID
	(INCIDENT_FINDING_PRIORITY_ID)(0),         // 26: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_PRIORITY_ID
	(VULNERABILITY_FINDING_CLASS_UID)(0),      // 27: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_CLASS_UID
	(SECURITY_FINDING_STATUS_ID)(0),           // 28: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	(COMPLIANCE_FINDING_CLASS_UID)(0),         // 29: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_CLASS_UID
	(SECURITY_FINDING_CONFIDENCE_ID)(0),       // 30: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	(FINDING_SEVERITY_ID)(0),                  // 31: ocsf.v1_2_0.events.findings.enums.FINDING_SEVERITY_ID
	(DATA_SECURITY_FINDING_TYPE_UID)(0),       // 32: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_TYPE_UID
	(DATA_SECURITY_FINDING_DISPOSITION_ID)(0), // 33: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_DISPOSITION_ID
	(DETECTION_FINDING_CLASS_UID)(0),          // 34: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_CLASS_UID
	(VULNERABILITY_FINDING_STATUS_ID)(0),      // 35: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_STATUS_ID
	(VULNERABILITY_FINDING_CONFIDENCE_ID)(0),  // 36: ocsf.v1_2_0.events.findings.enums.VULNERABILITY_FINDING_CONFIDENCE_ID
	(FINDING_ACTIVITY_ID)(0),                  // 37: ocsf.v1_2_0.events.findings.enums.FINDING_ACTIVITY_ID
	(INCIDENT_FINDING_STATUS_ID)(0),           // 38: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_STATUS_ID
	(COMPLIANCE_FINDING_SEVERITY_ID)(0),       // 39: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_SEVERITY_ID
	(INCIDENT_FINDING_CATEGORY_UID)(0),        // 40: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_CATEGORY_UID
	(INCIDENT_FINDING_VERDICT_ID)(0),          // 41: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_VERDICT_ID
	(DATA_SECURITY_FINDING_ACTION_ID)(0),      // 42: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_ACTION_ID
	(DATA_SECURITY_FINDING_IMPACT_ID)(0),      // 43: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_IMPACT_ID
	(DETECTION_FINDING_ACTION_ID)(0),          // 44: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_ACTION_ID
	(DATA_SECURITY_FINDING_CLASS_UID)(0),      // 45: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_CLASS_UID
	(INCIDENT_FINDING_IMPACT_ID)(0),           // 46: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_IMPACT_ID
	(SECURITY_FINDING_TYPE_UID)(0),            // 47: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_TYPE_UID
	(DETECTION_FINDING_SEVERITY_ID)(0),        // 48: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_SEVERITY_ID
	(INCIDENT_FINDING_CLASS_UID)(0),           // 49: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_CLASS_UID
	(DETECTION_FINDING_ACTIVITY_ID)(0),        // 50: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_ACTIVITY_ID
	(DATA_SECURITY_FINDING_RISK_LEVEL_ID)(0),  // 51: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_RISK_LEVEL_ID
	(DETECTION_FINDING_CATEGORY_UID)(0),       // 52: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_CATEGORY_UID
	(COMPLIANCE_FINDING_CATEGORY_UID)(0),      // 53: ocsf.v1_2_0.events.findings.enums.COMPLIANCE_FINDING_CATEGORY_UID
	(FINDING_CATEGORY_UID)(0),                 // 54: ocsf.v1_2_0.events.findings.enums.FINDING_CATEGORY_UID
	(INCIDENT_FINDING_SEVERITY_ID)(0),         // 55: ocsf.v1_2_0.events.findings.enums.INCIDENT_FINDING_SEVERITY_ID
	(DATA_SECURITY_FINDING_CONFIDENCE_ID)(0),  // 56: ocsf.v1_2_0.events.findings.enums.DATA_SECURITY_FINDING_CONFIDENCE_ID
	(SECURITY_FINDING_ACTIVITY_ID)(0),         // 57: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	(SECURITY_FINDING_CATEGORY_UID)(0),        // 58: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	(DETECTION_FINDING_RISK_LEVEL_ID)(0),      // 59: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_RISK_LEVEL_ID
	(SECURITY_FINDING_STATE_ID)(0),            // 60: ocsf.v1_2_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	(DETECTION_FINDING_CONFIDENCE_ID)(0),      // 61: ocsf.v1_2_0.events.findings.enums.DETECTION_FINDING_CONFIDENCE_ID
	(FINDING_STATUS_ID)(0),                    // 62: ocsf.v1_2_0.events.findings.enums.FINDING_STATUS_ID
}
var file_ocsf_v1_2_0_events_findings_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_events_findings_enums_enums_proto_init() }
func file_ocsf_v1_2_0_events_findings_enums_enums_proto_init() {
	if File_ocsf_v1_2_0_events_findings_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDesc,
			NumEnums:      63,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_events_findings_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_events_findings_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_2_0_events_findings_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_2_0_events_findings_enums_enums_proto = out.File
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_goTypes = nil
	file_ocsf_v1_2_0_events_findings_enums_enums_proto_depIdxs = nil
}
