// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_2_0/events/iam/iam.proto

package iam

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_2_0/events/iam/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_2_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: iam
// Event UID: 4
// URL: https://schema.ocsf.io/1.2.0/classes/entity_management
type EntityManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count          int32                                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                                                                                                  // Caption: Count;
	ClassUid       enums.ENTITY_MANAGEMENT_CLASS_UID    `protobuf:"varint,2,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CLASS_UID" json:"class_uid,omitempty"`              // Caption: Class ID;
	CategoryName   string                               `protobuf:"bytes,3,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                 // Caption: Category;
	StatusId       enums.ENTITY_MANAGEMENT_STATUS_ID    `protobuf:"varint,4,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	EntityResult   *objects.ManagedEntity               `protobuf:"bytes,5,opt,name=entity_result,json=entityResult,proto3" json:"entity_result,omitempty"`                                                                 // Caption: Entity Result;
	StartTime      int64                                `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                         // Caption: Start Time;
	ActivityName   string                               `protobuf:"bytes,7,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                 // Caption: Activity;
	RawData        string                               `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                // Caption: Raw Data;
	SeverityId     enums.ENTITY_MANAGEMENT_SEVERITY_ID  `protobuf:"varint,9,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_SEVERITY_ID" json:"severity_id,omitempty"`      // Caption: Severity ID;
	Duration       int32                                `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                           // Caption: Duration;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,11,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                      // Caption: Enrichments;
	Entity         *objects.ManagedEntity               `protobuf:"bytes,12,opt,name=entity,proto3" json:"entity,omitempty"`                                                                                                // Caption: Entity;
	ActivityId     enums.ENTITY_MANAGEMENT_ACTIVITY_ID  `protobuf:"varint,13,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	StatusDetail   string                               `protobuf:"bytes,14,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                // Caption: Status Details;
	Device         *objects.Device                      `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`                                                                                                // Caption: Device; Profile: host;
	TypeName       string                               `protobuf:"bytes,16,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	Status         string                               `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	Comment        string                               `protobuf:"bytes,18,opt,name=comment,proto3" json:"comment,omitempty"`                                                                                              // Caption: Comment;
	Observables    []*objects.Observable                `protobuf:"bytes,19,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	Api            *objects.Api                         `protobuf:"bytes,20,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Caption: API Details; Profile: cloud;
	Cloud          *objects.Cloud                       `protobuf:"bytes,21,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	TypeUid        enums.ENTITY_MANAGEMENT_TYPE_UID     `protobuf:"varint,22,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Severity       string                               `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	Actor          *objects.Actor                       `protobuf:"bytes,24,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                  // Caption: Actor;
	Metadata       *objects.Metadata                    `protobuf:"bytes,25,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	TimezoneOffset int32                                `protobuf:"varint,26,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                         // Caption: Timezone Offset;
	Unmapped       *objects.Object                      `protobuf:"bytes,27,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                            // Caption: Unmapped Data;
	Message        string                               `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	Time           int64                                `protobuf:"varint,29,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	SrcEndpoint    *objects.NetworkEndpoint             `protobuf:"bytes,30,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                   // Caption: Source Endpoint;
	EndTime        int64                                `protobuf:"varint,31,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                              // Caption: End Time;
	ClassName      string                               `protobuf:"bytes,32,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                         // Caption: Class;
	CategoryUid    enums.ENTITY_MANAGEMENT_CATEGORY_UID `protobuf:"varint,33,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	HttpRequest    *objects.HttpRequest                 `protobuf:"bytes,34,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                   // Caption: HTTP Request;
	StatusCode     string                               `protobuf:"bytes,35,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
}

func (x *EntityManagement) Reset() {
	*x = EntityManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityManagement) ProtoMessage() {}

func (x *EntityManagement) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityManagement.ProtoReflect.Descriptor instead.
func (*EntityManagement) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{0}
}

func (x *EntityManagement) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EntityManagement) GetClassUid() enums.ENTITY_MANAGEMENT_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.ENTITY_MANAGEMENT_CLASS_UID(0)
}

func (x *EntityManagement) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *EntityManagement) GetStatusId() enums.ENTITY_MANAGEMENT_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.ENTITY_MANAGEMENT_STATUS_ID(0)
}

func (x *EntityManagement) GetEntityResult() *objects.ManagedEntity {
	if x != nil {
		return x.EntityResult
	}
	return nil
}

func (x *EntityManagement) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EntityManagement) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *EntityManagement) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *EntityManagement) GetSeverityId() enums.ENTITY_MANAGEMENT_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.ENTITY_MANAGEMENT_SEVERITY_ID(0)
}

func (x *EntityManagement) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EntityManagement) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *EntityManagement) GetEntity() *objects.ManagedEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *EntityManagement) GetActivityId() enums.ENTITY_MANAGEMENT_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.ENTITY_MANAGEMENT_ACTIVITY_ID(0)
}

func (x *EntityManagement) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *EntityManagement) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EntityManagement) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EntityManagement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EntityManagement) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *EntityManagement) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *EntityManagement) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *EntityManagement) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *EntityManagement) GetTypeUid() enums.ENTITY_MANAGEMENT_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.ENTITY_MANAGEMENT_TYPE_UID(0)
}

func (x *EntityManagement) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *EntityManagement) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *EntityManagement) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EntityManagement) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *EntityManagement) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *EntityManagement) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EntityManagement) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *EntityManagement) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *EntityManagement) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EntityManagement) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *EntityManagement) GetCategoryUid() enums.ENTITY_MANAGEMENT_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.ENTITY_MANAGEMENT_CATEGORY_UID(0)
}

func (x *EntityManagement) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *EntityManagement) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

// URL: https://schema.ocsf.io/1.2.0/classes/group_management
// Event: iam
// Event UID: 6
type GroupManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *objects.User                       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                                                                                                    // Caption: User;
	SrcEndpoint    *objects.NetworkEndpoint            `protobuf:"bytes,2,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                   // Caption: Source Endpoint;
	EndTime        int64                               `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                              // Caption: End Time;
	Group          *objects.Group                      `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`                                                                                                  // Caption: Group;
	Cloud          *objects.Cloud                      `protobuf:"bytes,5,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	TypeName       string                              `protobuf:"bytes,6,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	StatusId       enums.GROUP_MANAGEMENT_STATUS_ID    `protobuf:"varint,7,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	StatusDetail   string                              `protobuf:"bytes,8,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                // Caption: Status Details;
	RawData        string                              `protobuf:"bytes,9,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	SeverityId     enums.GROUP_MANAGEMENT_SEVERITY_ID  `protobuf:"varint,10,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	ClassName      string                              `protobuf:"bytes,11,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                        // Caption: Class;
	Unmapped       *objects.Object                     `protobuf:"bytes,12,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                           // Caption: Unmapped Data;
	TimezoneOffset int32                               `protobuf:"varint,13,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                        // Caption: Timezone Offset;
	Api            *objects.Api                        `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                     // Caption: API Details; Profile: cloud;
	Device         *objects.Device                     `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`                                                                                               // Profile: host; Caption: Device;
	CategoryUid    enums.GROUP_MANAGEMENT_CATEGORY_UID `protobuf:"varint,16,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Privileges     []string                            `protobuf:"bytes,17,rep,name=privileges,proto3" json:"privileges,omitempty"`                                                                                       // Caption: Privileges;
	Message        string                              `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                             // Caption: Message;
	Metadata       *objects.Metadata                   `protobuf:"bytes,19,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                           // Caption: Metadata;
	TypeUid        enums.GROUP_MANAGEMENT_TYPE_UID     `protobuf:"varint,20,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Observables    []*objects.Observable               `protobuf:"bytes,21,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                     // Caption: Observables;
	Resource       *objects.ResourceDetails            `protobuf:"bytes,22,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                           // Caption: Resource;
	Actor          *objects.Actor                      `protobuf:"bytes,23,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                 // Caption: Actor; Profile: host;
	ClassUid       enums.GROUP_MANAGEMENT_CLASS_UID    `protobuf:"varint,24,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	StatusCode     string                              `protobuf:"bytes,25,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                     // Caption: Status Code;
	Severity       string                              `protobuf:"bytes,26,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                           // Caption: Severity;
	HttpRequest    *objects.HttpRequest                `protobuf:"bytes,27,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                  // Caption: HTTP Request;
	Status         string                              `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`                                                                                               // Caption: Status;
	StartTime      int64                               `protobuf:"varint,29,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                       // Caption: Start Time;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,30,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                     // Caption: Enrichments;
	Count          int32                               `protobuf:"varint,31,opt,name=count,proto3" json:"count,omitempty"`                                                                                                // Caption: Count;
	ActivityId     enums.GROUP_MANAGEMENT_ACTIVITY_ID  `protobuf:"varint,32,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	ActivityName   string                              `protobuf:"bytes,33,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                               // Caption: Activity;
	Time           int64                               `protobuf:"varint,34,opt,name=time,proto3" json:"time,omitempty"`                                                                                                  // Caption: Event Time;
	CategoryName   string                              `protobuf:"bytes,35,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                               // Caption: Category;
	Duration       int32                               `protobuf:"varint,36,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                          // Caption: Duration;
}

func (x *GroupManagement) Reset() {
	*x = GroupManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupManagement) ProtoMessage() {}

func (x *GroupManagement) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupManagement.ProtoReflect.Descriptor instead.
func (*GroupManagement) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{1}
}

func (x *GroupManagement) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GroupManagement) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *GroupManagement) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GroupManagement) GetGroup() *objects.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupManagement) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *GroupManagement) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *GroupManagement) GetStatusId() enums.GROUP_MANAGEMENT_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.GROUP_MANAGEMENT_STATUS_ID(0)
}

func (x *GroupManagement) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *GroupManagement) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *GroupManagement) GetSeverityId() enums.GROUP_MANAGEMENT_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.GROUP_MANAGEMENT_SEVERITY_ID(0)
}

func (x *GroupManagement) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GroupManagement) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *GroupManagement) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *GroupManagement) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *GroupManagement) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GroupManagement) GetCategoryUid() enums.GROUP_MANAGEMENT_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.GROUP_MANAGEMENT_CATEGORY_UID(0)
}

func (x *GroupManagement) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *GroupManagement) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GroupManagement) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GroupManagement) GetTypeUid() enums.GROUP_MANAGEMENT_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.GROUP_MANAGEMENT_TYPE_UID(0)
}

func (x *GroupManagement) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *GroupManagement) GetResource() *objects.ResourceDetails {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GroupManagement) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *GroupManagement) GetClassUid() enums.GROUP_MANAGEMENT_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.GROUP_MANAGEMENT_CLASS_UID(0)
}

func (x *GroupManagement) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *GroupManagement) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *GroupManagement) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *GroupManagement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GroupManagement) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GroupManagement) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *GroupManagement) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GroupManagement) GetActivityId() enums.GROUP_MANAGEMENT_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.GROUP_MANAGEMENT_ACTIVITY_ID(0)
}

func (x *GroupManagement) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *GroupManagement) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GroupManagement) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *GroupManagement) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event: iam
// Event UID: 2
// URL: https://schema.ocsf.io/1.2.0/classes/authentication
type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimezoneOffset int32                                 `protobuf:"varint,1,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                      // Caption: Timezone Offset;
	ClassUid       enums.AUTHENTICATION_CLASS_UID        `protobuf:"varint,2,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CLASS_UID" json:"class_uid,omitempty"`                             // Caption: Class ID;
	Time           int64                                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                // Caption: Event Time;
	Actor          *objects.Actor                        `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor;
	StatusDetail   string                                `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	IsNewLogon     bool                                  `protobuf:"varint,6,opt,name=is_new_logon,json=isNewLogon,proto3" json:"is_new_logon,omitempty"`                                                                                // Caption: New Logon;
	StatusCode     string                                `protobuf:"bytes,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	CategoryUid    enums.AUTHENTICATION_CATEGORY_UID     `protobuf:"varint,8,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CATEGORY_UID" json:"category_uid,omitempty"`                 // Caption: Category ID;
	Observables    []*objects.Observable                 `protobuf:"bytes,9,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                   // Caption: Observables;
	Api            *objects.Api                          `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                  // Caption: API Details; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint              `protobuf:"bytes,11,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                               // Caption: Source Endpoint;
	IsRemote       bool                                  `protobuf:"varint,12,opt,name=is_remote,json=isRemote,proto3" json:"is_remote,omitempty"`                                                                                       // Caption: Remote;
	IsCleartext    bool                                  `protobuf:"varint,13,opt,name=is_cleartext,json=isCleartext,proto3" json:"is_cleartext,omitempty"`                                                                              // Caption: Cleartext Credentials;
	User           *objects.User                         `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty"`                                                                                                                // Caption: User;
	AuthProtocol   string                                `protobuf:"bytes,15,opt,name=auth_protocol,json=authProtocol,proto3" json:"auth_protocol,omitempty"`                                                                            // Caption: Auth Protocol;
	Count          int32                                 `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`                                                                                                             // Caption: Count;
	Cloud          *objects.Cloud                        `protobuf:"bytes,17,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                              // Caption: Cloud; Profile: cloud;
	Unmapped       *objects.Object                       `protobuf:"bytes,18,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                        // Caption: Unmapped Data;
	ActivityName   string                                `protobuf:"bytes,19,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                            // Caption: Activity;
	StatusId       enums.AUTHENTICATION_STATUS_ID        `protobuf:"varint,20,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_STATUS_ID" json:"status_id,omitempty"`                            // Caption: Status ID;
	LogonTypeId    enums.AUTHENTICATION_LOGON_TYPE_ID    `protobuf:"varint,21,opt,name=logon_type_id,json=logonTypeId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_LOGON_TYPE_ID" json:"logon_type_id,omitempty"`             // Caption: Logon Type ID;
	IsMfa          bool                                  `protobuf:"varint,22,opt,name=is_mfa,json=isMfa,proto3" json:"is_mfa,omitempty"`                                                                                                // Caption: Multi Factor Authentication;
	AuthFactors    []*objects.AuthFactor                 `protobuf:"bytes,23,rep,name=auth_factors,json=authFactors,proto3" json:"auth_factors,omitempty"`                                                                               // Caption: Authentication Factors;
	ClassName      string                                `protobuf:"bytes,24,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                     // Caption: Class;
	Severity       string                                `protobuf:"bytes,25,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	HttpRequest    *objects.HttpRequest                  `protobuf:"bytes,26,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                               // Caption: HTTP Request;
	RawData        string                                `protobuf:"bytes,27,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                           // Caption: Raw Data;
	SeverityId     enums.AUTHENTICATION_SEVERITY_ID      `protobuf:"varint,28,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_SEVERITY_ID" json:"severity_id,omitempty"`                    // Caption: Severity ID;
	Certificate    *objects.Certificate                  `protobuf:"bytes,29,opt,name=certificate,proto3" json:"certificate,omitempty"`                                                                                                  // Caption: Certificate;
	AuthProtocolId enums.AUTHENTICATION_AUTH_PROTOCOL_ID `protobuf:"varint,30,opt,name=auth_protocol_id,json=authProtocolId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_AUTH_PROTOCOL_ID" json:"auth_protocol_id,omitempty"` // Caption: Auth Protocol ID;
	Metadata       *objects.Metadata                     `protobuf:"bytes,31,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                        // Caption: Metadata;
	CategoryName   string                                `protobuf:"bytes,32,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                            // Caption: Category;
	LogonProcess   *objects.Process                      `protobuf:"bytes,33,opt,name=logon_process,json=logonProcess,proto3" json:"logon_process,omitempty"`                                                                            // Caption: Logon Process;
	Session        *objects.Session                      `protobuf:"bytes,34,opt,name=session,proto3" json:"session,omitempty"`                                                                                                          // Caption: Session;
	StartTime      int64                                 `protobuf:"varint,35,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                    // Caption: Start Time;
	Device         *objects.Device                       `protobuf:"bytes,36,opt,name=device,proto3" json:"device,omitempty"`                                                                                                            // Caption: Device; Profile: host;
	Enrichments    []*objects.Enrichment                 `protobuf:"bytes,37,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                  // Caption: Enrichments;
	DstEndpoint    *objects.NetworkEndpoint              `protobuf:"bytes,38,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                               // Caption: Destination Endpoint;
	LogonType      string                                `protobuf:"bytes,39,opt,name=logon_type,json=logonType,proto3" json:"logon_type,omitempty"`                                                                                     // Caption: Logon Type;
	Service        *objects.Service                      `protobuf:"bytes,40,opt,name=service,proto3" json:"service,omitempty"`                                                                                                          // Caption: Service;
	TypeUid        enums.AUTHENTICATION_TYPE_UID         `protobuf:"varint,41,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_TYPE_UID" json:"type_uid,omitempty"`                                // Caption: Type ID;
	EndTime        int64                                 `protobuf:"varint,42,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                          // Caption: End Time;
	ActivityId     enums.AUTHENTICATION_ACTIVITY_ID      `protobuf:"varint,43,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_ACTIVITY_ID" json:"activity_id,omitempty"`                    // Caption: Activity ID;
	Status         string                                `protobuf:"bytes,44,opt,name=status,proto3" json:"status,omitempty"`                                                                                                            // Caption: Status;
	Message        string                                `protobuf:"bytes,45,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	TypeName       string                                `protobuf:"bytes,46,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                        // Caption: Type Name;
	Duration       int32                                 `protobuf:"varint,47,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                       // Caption: Duration;
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{2}
}

func (x *Authentication) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Authentication) GetClassUid() enums.AUTHENTICATION_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.AUTHENTICATION_CLASS_UID(0)
}

func (x *Authentication) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Authentication) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Authentication) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Authentication) GetIsNewLogon() bool {
	if x != nil {
		return x.IsNewLogon
	}
	return false
}

func (x *Authentication) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Authentication) GetCategoryUid() enums.AUTHENTICATION_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.AUTHENTICATION_CATEGORY_UID(0)
}

func (x *Authentication) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Authentication) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Authentication) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *Authentication) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

func (x *Authentication) GetIsCleartext() bool {
	if x != nil {
		return x.IsCleartext
	}
	return false
}

func (x *Authentication) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Authentication) GetAuthProtocol() string {
	if x != nil {
		return x.AuthProtocol
	}
	return ""
}

func (x *Authentication) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Authentication) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Authentication) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Authentication) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Authentication) GetStatusId() enums.AUTHENTICATION_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.AUTHENTICATION_STATUS_ID(0)
}

func (x *Authentication) GetLogonTypeId() enums.AUTHENTICATION_LOGON_TYPE_ID {
	if x != nil {
		return x.LogonTypeId
	}
	return enums.AUTHENTICATION_LOGON_TYPE_ID(0)
}

func (x *Authentication) GetIsMfa() bool {
	if x != nil {
		return x.IsMfa
	}
	return false
}

func (x *Authentication) GetAuthFactors() []*objects.AuthFactor {
	if x != nil {
		return x.AuthFactors
	}
	return nil
}

func (x *Authentication) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Authentication) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Authentication) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *Authentication) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Authentication) GetSeverityId() enums.AUTHENTICATION_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.AUTHENTICATION_SEVERITY_ID(0)
}

func (x *Authentication) GetCertificate() *objects.Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Authentication) GetAuthProtocolId() enums.AUTHENTICATION_AUTH_PROTOCOL_ID {
	if x != nil {
		return x.AuthProtocolId
	}
	return enums.AUTHENTICATION_AUTH_PROTOCOL_ID(0)
}

func (x *Authentication) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Authentication) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Authentication) GetLogonProcess() *objects.Process {
	if x != nil {
		return x.LogonProcess
	}
	return nil
}

func (x *Authentication) GetSession() *objects.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Authentication) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Authentication) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Authentication) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Authentication) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *Authentication) GetLogonType() string {
	if x != nil {
		return x.LogonType
	}
	return ""
}

func (x *Authentication) GetService() *objects.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Authentication) GetTypeUid() enums.AUTHENTICATION_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.AUTHENTICATION_TYPE_UID(0)
}

func (x *Authentication) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Authentication) GetActivityId() enums.AUTHENTICATION_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.AUTHENTICATION_ACTIVITY_ID(0)
}

func (x *Authentication) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Authentication) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Authentication) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Authentication) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event: iam
// Event UID: 5
// URL: https://schema.ocsf.io/1.2.0/classes/user_access
type UserAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcEndpoint    *objects.NetworkEndpoint       `protobuf:"bytes,1,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                             // Caption: Source Endpoint;
	EndTime        int64                          `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                        // Caption: End Time;
	SeverityId     enums.USER_ACCESS_SEVERITY_ID  `protobuf:"varint,3,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Count          int32                          `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                                                                                           // Caption: Count;
	Metadata       *objects.Metadata              `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                      // Caption: Metadata;
	TimezoneOffset int32                          `protobuf:"varint,6,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                   // Caption: Timezone Offset;
	Time           int64                          `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                                                                             // Caption: Event Time;
	CategoryUid    enums.USER_ACCESS_CATEGORY_UID `protobuf:"varint,8,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Unmapped       *objects.Object                `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                      // Caption: Unmapped Data;
	StatusDetail   string                         `protobuf:"bytes,10,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                         // Caption: Status Details;
	User           *objects.User                  `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`                                                                                             // Caption: User;
	TypeName       string                         `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                     // Caption: Type Name;
	Message        string                         `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`                                                                                       // Caption: Message;
	RawData        string                         `protobuf:"bytes,14,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                        // Caption: Raw Data;
	Api            *objects.Api                   `protobuf:"bytes,15,opt,name=api,proto3" json:"api,omitempty"`                                                                                               // Caption: API Details; Profile: cloud;
	StatusId       enums.USER_ACCESS_STATUS_ID    `protobuf:"varint,16,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	ClassName      string                         `protobuf:"bytes,17,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                  // Caption: Class;
	ClassUid       enums.USER_ACCESS_CLASS_UID    `protobuf:"varint,18,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CLASS_UID" json:"class_uid,omitempty"`            // Caption: Class ID;
	TypeUid        enums.USER_ACCESS_TYPE_UID     `protobuf:"varint,19,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	Status         string                         `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`                                                                                         // Caption: Status;
	Actor          *objects.Actor                 `protobuf:"bytes,21,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                           // Caption: Actor; Profile: host;
	Privileges     []string                       `protobuf:"bytes,22,rep,name=privileges,proto3" json:"privileges,omitempty"`                                                                                 // Caption: Privileges;
	Resource       *objects.ResourceDetails       `protobuf:"bytes,23,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                     // Caption: Resource;
	Device         *objects.Device                `protobuf:"bytes,24,opt,name=device,proto3" json:"device,omitempty"`                                                                                         // Caption: Device; Profile: host;
	Cloud          *objects.Cloud                 `protobuf:"bytes,25,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                           // Caption: Cloud; Profile: cloud;
	Observables    []*objects.Observable          `protobuf:"bytes,26,rep,name=observables,proto3" json:"observables,omitempty"`                                                                               // Caption: Observables;
	StartTime      int64                          `protobuf:"varint,27,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                 // Caption: Start Time;
	HttpRequest    *objects.HttpRequest           `protobuf:"bytes,28,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                            // Caption: HTTP Request;
	Enrichments    []*objects.Enrichment          `protobuf:"bytes,29,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                               // Caption: Enrichments;
	StatusCode     string                         `protobuf:"bytes,30,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                               // Caption: Status Code;
	Severity       string                         `protobuf:"bytes,31,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                     // Caption: Severity;
	ActivityId     enums.USER_ACCESS_ACTIVITY_ID  `protobuf:"varint,32,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.USER_ACCESS_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	CategoryName   string                         `protobuf:"bytes,33,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                         // Caption: Category;
	Duration       int32                          `protobuf:"varint,34,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                    // Caption: Duration;
	ActivityName   string                         `protobuf:"bytes,35,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                         // Caption: Activity;
}

func (x *UserAccess) Reset() {
	*x = UserAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccess) ProtoMessage() {}

func (x *UserAccess) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccess.ProtoReflect.Descriptor instead.
func (*UserAccess) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{3}
}

func (x *UserAccess) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *UserAccess) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserAccess) GetSeverityId() enums.USER_ACCESS_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.USER_ACCESS_SEVERITY_ID(0)
}

func (x *UserAccess) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserAccess) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserAccess) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *UserAccess) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserAccess) GetCategoryUid() enums.USER_ACCESS_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.USER_ACCESS_CATEGORY_UID(0)
}

func (x *UserAccess) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *UserAccess) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *UserAccess) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserAccess) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UserAccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAccess) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *UserAccess) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *UserAccess) GetStatusId() enums.USER_ACCESS_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.USER_ACCESS_STATUS_ID(0)
}

func (x *UserAccess) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *UserAccess) GetClassUid() enums.USER_ACCESS_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.USER_ACCESS_CLASS_UID(0)
}

func (x *UserAccess) GetTypeUid() enums.USER_ACCESS_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.USER_ACCESS_TYPE_UID(0)
}

func (x *UserAccess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserAccess) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UserAccess) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *UserAccess) GetResource() *objects.ResourceDetails {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UserAccess) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UserAccess) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *UserAccess) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *UserAccess) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserAccess) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *UserAccess) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *UserAccess) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *UserAccess) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UserAccess) GetActivityId() enums.USER_ACCESS_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.USER_ACCESS_ACTIVITY_ID(0)
}

func (x *UserAccess) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UserAccess) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserAccess) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

// Event: iam
// Event UID: 1
// URL: https://schema.ocsf.io/1.2.0/classes/account_change
type AccountChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpRequest    *objects.HttpRequest              `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                 // Caption: HTTP Request;
	RawData        string                            `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                             // Caption: Raw Data;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,3,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                    // Caption: Enrichments;
	ClassName      string                            `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                       // Caption: Class;
	ActivityName   string                            `protobuf:"bytes,5,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                              // Caption: Activity;
	UserResult     *objects.User                     `protobuf:"bytes,6,opt,name=user_result,json=userResult,proto3" json:"user_result,omitempty"`                                                                    // Caption: User Result;
	Api            *objects.Api                      `protobuf:"bytes,7,opt,name=api,proto3" json:"api,omitempty"`                                                                                                    // Caption: API Details; Profile: cloud;
	Cloud          *objects.Cloud                    `protobuf:"bytes,8,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                // Caption: Cloud; Profile: cloud;
	CategoryName   string                            `protobuf:"bytes,9,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                              // Caption: Category;
	SeverityId     enums.ACCOUNT_CHANGE_SEVERITY_ID  `protobuf:"varint,10,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Severity       string                            `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                         // Caption: Severity;
	CategoryUid    enums.ACCOUNT_CHANGE_CATEGORY_UID `protobuf:"varint,12,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Unmapped       *objects.Object                   `protobuf:"bytes,13,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                         // Caption: Unmapped Data;
	Message        string                            `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`                                                                                           // Caption: Message;
	Time           int64                             `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`                                                                                                // Caption: Event Time;
	EndTime        int64                             `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                           // Caption: End Time;
	StatusId       enums.ACCOUNT_CHANGE_STATUS_ID    `protobuf:"varint,17,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	TypeUid        enums.ACCOUNT_CHANGE_TYPE_UID     `protobuf:"varint,18,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Policy         *objects.Policy                   `protobuf:"bytes,19,opt,name=policy,proto3" json:"policy,omitempty"`                                                                                             // Caption: Policy;
	Actor          *objects.Actor                    `protobuf:"bytes,20,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                               // Caption: Actor;
	ClassUid       enums.ACCOUNT_CHANGE_CLASS_UID    `protobuf:"varint,21,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Duration       int32                             `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                        // Caption: Duration;
	ActivityId     enums.ACCOUNT_CHANGE_ACTIVITY_ID  `protobuf:"varint,23,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	StatusDetail   string                            `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                             // Caption: Status Details;
	TypeName       string                            `protobuf:"bytes,25,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                         // Caption: Type Name;
	Status         string                            `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`                                                                                             // Caption: Status;
	Count          int32                             `protobuf:"varint,27,opt,name=count,proto3" json:"count,omitempty"`                                                                                              // Caption: Count;
	Observables    []*objects.Observable             `protobuf:"bytes,28,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                   // Caption: Observables;
	User           *objects.User                     `protobuf:"bytes,29,opt,name=user,proto3" json:"user,omitempty"`                                                                                                 // Caption: User;
	StatusCode     string                            `protobuf:"bytes,30,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                   // Caption: Status Code;
	SrcEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,31,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                // Caption: Source Endpoint;
	Device         *objects.Device                   `protobuf:"bytes,32,opt,name=device,proto3" json:"device,omitempty"`                                                                                             // Caption: Device; Profile: host;
	StartTime      int64                             `protobuf:"varint,33,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                     // Caption: Start Time;
	Metadata       *objects.Metadata                 `protobuf:"bytes,34,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                         // Caption: Metadata;
	TimezoneOffset int32                             `protobuf:"varint,35,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                      // Caption: Timezone Offset;
}

func (x *AccountChange) Reset() {
	*x = AccountChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChange) ProtoMessage() {}

func (x *AccountChange) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChange.ProtoReflect.Descriptor instead.
func (*AccountChange) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{4}
}

func (x *AccountChange) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *AccountChange) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *AccountChange) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *AccountChange) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *AccountChange) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *AccountChange) GetUserResult() *objects.User {
	if x != nil {
		return x.UserResult
	}
	return nil
}

func (x *AccountChange) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *AccountChange) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *AccountChange) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *AccountChange) GetSeverityId() enums.ACCOUNT_CHANGE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.ACCOUNT_CHANGE_SEVERITY_ID(0)
}

func (x *AccountChange) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AccountChange) GetCategoryUid() enums.ACCOUNT_CHANGE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.ACCOUNT_CHANGE_CATEGORY_UID(0)
}

func (x *AccountChange) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *AccountChange) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AccountChange) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AccountChange) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AccountChange) GetStatusId() enums.ACCOUNT_CHANGE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.ACCOUNT_CHANGE_STATUS_ID(0)
}

func (x *AccountChange) GetTypeUid() enums.ACCOUNT_CHANGE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.ACCOUNT_CHANGE_TYPE_UID(0)
}

func (x *AccountChange) GetPolicy() *objects.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *AccountChange) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AccountChange) GetClassUid() enums.ACCOUNT_CHANGE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.ACCOUNT_CHANGE_CLASS_UID(0)
}

func (x *AccountChange) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AccountChange) GetActivityId() enums.ACCOUNT_CHANGE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.ACCOUNT_CHANGE_ACTIVITY_ID(0)
}

func (x *AccountChange) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *AccountChange) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *AccountChange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AccountChange) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AccountChange) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *AccountChange) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AccountChange) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *AccountChange) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *AccountChange) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AccountChange) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AccountChange) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccountChange) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

// Event: iam
// Event UID: 0
// URL: https://schema.ocsf.io/1.2.0/classes/iam
type Iam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusDetail   string                   `protobuf:"bytes,1,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                   // Caption: Status Details;
	ActivityId     enums.IAM_ACTIVITY_ID    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_ACTIVITY_ID" json:"activity_id,omitempty"`      // Caption: Activity ID;
	Message        string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                                                                 // Caption: Message;
	HttpRequest    *objects.HttpRequest     `protobuf:"bytes,4,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                      // Caption: HTTP Request;
	Actor          *objects.Actor           `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                     // Caption: Actor; Profile: host;
	ClassUid       enums.IAM_CLASS_UID      `protobuf:"varint,6,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_CLASS_UID" json:"class_uid,omitempty"`              // Caption: Class ID;
	Time           int64                    `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                                                                      // Caption: Event Time;
	RawData        string                   `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                  // Caption: Raw Data;
	Api            *objects.Api             `protobuf:"bytes,9,opt,name=api,proto3" json:"api,omitempty"`                                                                                         // Caption: API Details; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint `protobuf:"bytes,10,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                     // Caption: Source Endpoint;
	Device         *objects.Device          `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`                                                                                  // Profile: host; Caption: Device;
	EndTime        int64                    `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                // Caption: End Time;
	Cloud          *objects.Cloud           `protobuf:"bytes,13,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                    // Caption: Cloud; Profile: cloud;
	TypeName       string                   `protobuf:"bytes,14,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                              // Caption: Type Name;
	CategoryName   string                   `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                  // Caption: Category;
	SeverityId     enums.IAM_SEVERITY_ID    `protobuf:"varint,16,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Duration       int32                    `protobuf:"varint,17,opt,name=duration,proto3" json:"duration,omitempty"`                                                                             // Caption: Duration;
	StatusId       enums.IAM_STATUS_ID      `protobuf:"varint,18,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Enrichments    []*objects.Enrichment    `protobuf:"bytes,19,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                        // Caption: Enrichments;
	ClassName      string                   `protobuf:"bytes,20,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                           // Caption: Class;
	StatusCode     string                   `protobuf:"bytes,21,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                        // Caption: Status Code;
	Status         string                   `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`                                                                                  // Caption: Status;
	Severity       string                   `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                              // Caption: Severity;
	TypeUid        enums.IAM_TYPE_UID       `protobuf:"varint,24,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	StartTime      int64                    `protobuf:"varint,25,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                          // Caption: Start Time;
	CategoryUid    enums.IAM_CATEGORY_UID   `protobuf:"varint,26,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.IAM_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Unmapped       *objects.Object          `protobuf:"bytes,27,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                              // Caption: Unmapped Data;
	Metadata       *objects.Metadata        `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                              // Caption: Metadata;
	Count          int32                    `protobuf:"varint,29,opt,name=count,proto3" json:"count,omitempty"`                                                                                   // Caption: Count;
	Observables    []*objects.Observable    `protobuf:"bytes,30,rep,name=observables,proto3" json:"observables,omitempty"`                                                                        // Caption: Observables;
	ActivityName   string                   `protobuf:"bytes,31,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                  // Caption: Activity;
	TimezoneOffset int32                    `protobuf:"varint,32,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                           // Caption: Timezone Offset;
}

func (x *Iam) Reset() {
	*x = Iam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iam) ProtoMessage() {}

func (x *Iam) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iam.ProtoReflect.Descriptor instead.
func (*Iam) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{5}
}

func (x *Iam) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Iam) GetActivityId() enums.IAM_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.IAM_ACTIVITY_ID(0)
}

func (x *Iam) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Iam) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *Iam) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Iam) GetClassUid() enums.IAM_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.IAM_CLASS_UID(0)
}

func (x *Iam) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Iam) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Iam) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Iam) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *Iam) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Iam) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Iam) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Iam) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Iam) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Iam) GetSeverityId() enums.IAM_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.IAM_SEVERITY_ID(0)
}

func (x *Iam) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Iam) GetStatusId() enums.IAM_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.IAM_STATUS_ID(0)
}

func (x *Iam) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Iam) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Iam) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Iam) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Iam) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Iam) GetTypeUid() enums.IAM_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.IAM_TYPE_UID(0)
}

func (x *Iam) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Iam) GetCategoryUid() enums.IAM_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.IAM_CATEGORY_UID(0)
}

func (x *Iam) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Iam) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Iam) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Iam) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Iam) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Iam) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

// Event UID: 3
// URL: https://schema.ocsf.io/1.2.0/classes/authorize_session
// Event: iam
type AuthorizeSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime        int64                                `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	TypeName       string                               `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                             // Caption: Type Name;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,3,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
	StatusDetail   string                               `protobuf:"bytes,4,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                 // Caption: Status Details;
	ClassUid       enums.AUTHORIZE_SESSION_CLASS_UID    `protobuf:"varint,5,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CLASS_UID" json:"class_uid,omitempty"`              // Caption: Class ID;
	StatusId       enums.AUTHORIZE_SESSION_STATUS_ID    `protobuf:"varint,6,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	StartTime      int64                                `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                         // Caption: Start Time;
	HttpRequest    *objects.HttpRequest                 `protobuf:"bytes,8,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                    // Caption: HTTP Request;
	Device         *objects.Device                      `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 // Caption: Device; Profile: host;
	Severity       string                               `protobuf:"bytes,10,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	Session        *objects.Session                     `protobuf:"bytes,11,opt,name=session,proto3" json:"session,omitempty"`                                                                                              // Caption: Session;
	Privileges     []string                             `protobuf:"bytes,12,rep,name=privileges,proto3" json:"privileges,omitempty"`                                                                                        // Caption: Privileges;
	Unmapped       *objects.Object                      `protobuf:"bytes,13,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                            // Caption: Unmapped Data;
	Metadata       *objects.Metadata                    `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	TypeUid        enums.AUTHORIZE_SESSION_TYPE_UID     `protobuf:"varint,15,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Group          *objects.Group                       `protobuf:"bytes,16,opt,name=group,proto3" json:"group,omitempty"`                                                                                                  // Caption: Group;
	ActivityName   string                               `protobuf:"bytes,17,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	Message        string                               `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	Api            *objects.Api                         `protobuf:"bytes,19,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Caption: API Details; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint             `protobuf:"bytes,20,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                   // Caption: Source Endpoint;
	CategoryUid    enums.AUTHORIZE_SESSION_CATEGORY_UID `protobuf:"varint,21,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Actor          *objects.Actor                       `protobuf:"bytes,22,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                  // Caption: Actor; Profile: host;
	RawData        string                               `protobuf:"bytes,23,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	Status         string                               `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	User           *objects.User                        `protobuf:"bytes,25,opt,name=user,proto3" json:"user,omitempty"`                                                                                                    // Caption: User;
	Cloud          *objects.Cloud                       `protobuf:"bytes,26,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	CategoryName   string                               `protobuf:"bytes,27,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	SeverityId     enums.AUTHORIZE_SESSION_SEVERITY_ID  `protobuf:"varint,28,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	ClassName      string                               `protobuf:"bytes,29,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                         // Caption: Class;
	Observables    []*objects.Observable                `protobuf:"bytes,30,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	DstEndpoint    *objects.NetworkEndpoint             `protobuf:"bytes,31,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                   // Caption: Destination Endpoint;
	Count          int32                                `protobuf:"varint,32,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	TimezoneOffset int32                                `protobuf:"varint,33,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                         // Caption: Timezone Offset;
	Time           int64                                `protobuf:"varint,34,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	Duration       int32                                `protobuf:"varint,35,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                           // Caption: Duration;
	StatusCode     string                               `protobuf:"bytes,36,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
	ActivityId     enums.AUTHORIZE_SESSION_ACTIVITY_ID  `protobuf:"varint,37,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
}

func (x *AuthorizeSession) Reset() {
	*x = AuthorizeSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeSession) ProtoMessage() {}

func (x *AuthorizeSession) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeSession.ProtoReflect.Descriptor instead.
func (*AuthorizeSession) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP(), []int{6}
}

func (x *AuthorizeSession) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AuthorizeSession) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *AuthorizeSession) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *AuthorizeSession) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *AuthorizeSession) GetClassUid() enums.AUTHORIZE_SESSION_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.AUTHORIZE_SESSION_CLASS_UID(0)
}

func (x *AuthorizeSession) GetStatusId() enums.AUTHORIZE_SESSION_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.AUTHORIZE_SESSION_STATUS_ID(0)
}

func (x *AuthorizeSession) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AuthorizeSession) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *AuthorizeSession) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AuthorizeSession) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AuthorizeSession) GetSession() *objects.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *AuthorizeSession) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *AuthorizeSession) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *AuthorizeSession) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AuthorizeSession) GetTypeUid() enums.AUTHORIZE_SESSION_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.AUTHORIZE_SESSION_TYPE_UID(0)
}

func (x *AuthorizeSession) GetGroup() *objects.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AuthorizeSession) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *AuthorizeSession) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AuthorizeSession) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *AuthorizeSession) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *AuthorizeSession) GetCategoryUid() enums.AUTHORIZE_SESSION_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.AUTHORIZE_SESSION_CATEGORY_UID(0)
}

func (x *AuthorizeSession) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AuthorizeSession) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *AuthorizeSession) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AuthorizeSession) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AuthorizeSession) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *AuthorizeSession) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *AuthorizeSession) GetSeverityId() enums.AUTHORIZE_SESSION_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.AUTHORIZE_SESSION_SEVERITY_ID(0)
}

func (x *AuthorizeSession) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *AuthorizeSession) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *AuthorizeSession) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *AuthorizeSession) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AuthorizeSession) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *AuthorizeSession) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AuthorizeSession) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AuthorizeSession) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *AuthorizeSession) GetActivityId() enums.AUTHORIZE_SESSION_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.AUTHORIZE_SESSION_ACTIVITY_ID(0)
}

var File_ocsf_v1_2_0_events_iam_iam_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_events_iam_iam_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x1a, 0x28, 0x6f, 0x63, 0x73, 0x66,
	0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x0d, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x56, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x30,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x53, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x0e, 0x0a, 0x0f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x13, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x4c,
	0x6f, 0x67, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x6c, 0x6f,
	0x67, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6d, 0x66, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x66,
	0x61, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x59, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x67, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x0d,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x50, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12,
	0x4d, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x0d, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xfe, 0x0b, 0x0a, 0x03, 0x49, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x45, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x41, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xe1, 0x0e, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0xd9, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x69, 0x61, 0x6d, 0x42, 0x08, 0x49, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66,
	0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69,
	0x61, 0x6d, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x49, 0xaa, 0x02, 0x14, 0x4f, 0x63, 0x73, 0x66,
	0x2e, 0x56, 0x31, 0x32, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x61, 0x6d,
	0xca, 0x02, 0x14, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0xe2, 0x02, 0x20, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x49, 0x61, 0x6d, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x4f, 0x63, 0x73,
	0x66, 0x3a, 0x3a, 0x56, 0x31, 0x32, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x3a, 0x49, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_events_iam_iam_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_events_iam_iam_proto_rawDescData = file_ocsf_v1_2_0_events_iam_iam_proto_rawDesc
)

func file_ocsf_v1_2_0_events_iam_iam_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_events_iam_iam_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_events_iam_iam_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_events_iam_iam_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_events_iam_iam_proto_rawDescData
}

var file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ocsf_v1_2_0_events_iam_iam_proto_goTypes = []interface{}{
	(*EntityManagement)(nil),                   // 0: ocsf.v1_2_0.events.iam.EntityManagement
	(*GroupManagement)(nil),                    // 1: ocsf.v1_2_0.events.iam.GroupManagement
	(*Authentication)(nil),                     // 2: ocsf.v1_2_0.events.iam.Authentication
	(*UserAccess)(nil),                         // 3: ocsf.v1_2_0.events.iam.UserAccess
	(*AccountChange)(nil),                      // 4: ocsf.v1_2_0.events.iam.AccountChange
	(*Iam)(nil),                                // 5: ocsf.v1_2_0.events.iam.Iam
	(*AuthorizeSession)(nil),                   // 6: ocsf.v1_2_0.events.iam.AuthorizeSession
	(enums.ENTITY_MANAGEMENT_CLASS_UID)(0),     // 7: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CLASS_UID
	(enums.ENTITY_MANAGEMENT_STATUS_ID)(0),     // 8: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_STATUS_ID
	(*objects.ManagedEntity)(nil),              // 9: ocsf.v1_2_0.objects.ManagedEntity
	(enums.ENTITY_MANAGEMENT_SEVERITY_ID)(0),   // 10: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_SEVERITY_ID
	(*objects.Enrichment)(nil),                 // 11: ocsf.v1_2_0.objects.Enrichment
	(enums.ENTITY_MANAGEMENT_ACTIVITY_ID)(0),   // 12: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_ACTIVITY_ID
	(*objects.Device)(nil),                     // 13: ocsf.v1_2_0.objects.Device
	(*objects.Observable)(nil),                 // 14: ocsf.v1_2_0.objects.Observable
	(*objects.Api)(nil),                        // 15: ocsf.v1_2_0.objects.Api
	(*objects.Cloud)(nil),                      // 16: ocsf.v1_2_0.objects.Cloud
	(enums.ENTITY_MANAGEMENT_TYPE_UID)(0),      // 17: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_TYPE_UID
	(*objects.Actor)(nil),                      // 18: ocsf.v1_2_0.objects.Actor
	(*objects.Metadata)(nil),                   // 19: ocsf.v1_2_0.objects.Metadata
	(*objects.Object)(nil),                     // 20: ocsf.v1_2_0.objects.Object
	(*objects.NetworkEndpoint)(nil),            // 21: ocsf.v1_2_0.objects.NetworkEndpoint
	(enums.ENTITY_MANAGEMENT_CATEGORY_UID)(0),  // 22: ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CATEGORY_UID
	(*objects.HttpRequest)(nil),                // 23: ocsf.v1_2_0.objects.HttpRequest
	(*objects.User)(nil),                       // 24: ocsf.v1_2_0.objects.User
	(*objects.Group)(nil),                      // 25: ocsf.v1_2_0.objects.Group
	(enums.GROUP_MANAGEMENT_STATUS_ID)(0),      // 26: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_STATUS_ID
	(enums.GROUP_MANAGEMENT_SEVERITY_ID)(0),    // 27: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_SEVERITY_ID
	(enums.GROUP_MANAGEMENT_CATEGORY_UID)(0),   // 28: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CATEGORY_UID
	(enums.GROUP_MANAGEMENT_TYPE_UID)(0),       // 29: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_TYPE_UID
	(*objects.ResourceDetails)(nil),            // 30: ocsf.v1_2_0.objects.ResourceDetails
	(enums.GROUP_MANAGEMENT_CLASS_UID)(0),      // 31: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CLASS_UID
	(enums.GROUP_MANAGEMENT_ACTIVITY_ID)(0),    // 32: ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_ACTIVITY_ID
	(enums.AUTHENTICATION_CLASS_UID)(0),        // 33: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CLASS_UID
	(enums.AUTHENTICATION_CATEGORY_UID)(0),     // 34: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CATEGORY_UID
	(enums.AUTHENTICATION_STATUS_ID)(0),        // 35: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_STATUS_ID
	(enums.AUTHENTICATION_LOGON_TYPE_ID)(0),    // 36: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_LOGON_TYPE_ID
	(*objects.AuthFactor)(nil),                 // 37: ocsf.v1_2_0.objects.AuthFactor
	(enums.AUTHENTICATION_SEVERITY_ID)(0),      // 38: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_SEVERITY_ID
	(*objects.Certificate)(nil),                // 39: ocsf.v1_2_0.objects.Certificate
	(enums.AUTHENTICATION_AUTH_PROTOCOL_ID)(0), // 40: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_AUTH_PROTOCOL_ID
	(*objects.Process)(nil),                    // 41: ocsf.v1_2_0.objects.Process
	(*objects.Session)(nil),                    // 42: ocsf.v1_2_0.objects.Session
	(*objects.Service)(nil),                    // 43: ocsf.v1_2_0.objects.Service
	(enums.AUTHENTICATION_TYPE_UID)(0),         // 44: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_TYPE_UID
	(enums.AUTHENTICATION_ACTIVITY_ID)(0),      // 45: ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_ACTIVITY_ID
	(enums.USER_ACCESS_SEVERITY_ID)(0),         // 46: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_SEVERITY_ID
	(enums.USER_ACCESS_CATEGORY_UID)(0),        // 47: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CATEGORY_UID
	(enums.USER_ACCESS_STATUS_ID)(0),           // 48: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_STATUS_ID
	(enums.USER_ACCESS_CLASS_UID)(0),           // 49: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CLASS_UID
	(enums.USER_ACCESS_TYPE_UID)(0),            // 50: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_TYPE_UID
	(enums.USER_ACCESS_ACTIVITY_ID)(0),         // 51: ocsf.v1_2_0.events.iam.enums.USER_ACCESS_ACTIVITY_ID
	(enums.ACCOUNT_CHANGE_SEVERITY_ID)(0),      // 52: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_SEVERITY_ID
	(enums.ACCOUNT_CHANGE_CATEGORY_UID)(0),     // 53: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CATEGORY_UID
	(enums.ACCOUNT_CHANGE_STATUS_ID)(0),        // 54: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_STATUS_ID
	(enums.ACCOUNT_CHANGE_TYPE_UID)(0),         // 55: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_TYPE_UID
	(*objects.Policy)(nil),                     // 56: ocsf.v1_2_0.objects.Policy
	(enums.ACCOUNT_CHANGE_CLASS_UID)(0),        // 57: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CLASS_UID
	(enums.ACCOUNT_CHANGE_ACTIVITY_ID)(0),      // 58: ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_ACTIVITY_ID
	(enums.IAM_ACTIVITY_ID)(0),                 // 59: ocsf.v1_2_0.events.iam.enums.IAM_ACTIVITY_ID
	(enums.IAM_CLASS_UID)(0),                   // 60: ocsf.v1_2_0.events.iam.enums.IAM_CLASS_UID
	(enums.IAM_SEVERITY_ID)(0),                 // 61: ocsf.v1_2_0.events.iam.enums.IAM_SEVERITY_ID
	(enums.IAM_STATUS_ID)(0),                   // 62: ocsf.v1_2_0.events.iam.enums.IAM_STATUS_ID
	(enums.IAM_TYPE_UID)(0),                    // 63: ocsf.v1_2_0.events.iam.enums.IAM_TYPE_UID
	(enums.IAM_CATEGORY_UID)(0),                // 64: ocsf.v1_2_0.events.iam.enums.IAM_CATEGORY_UID
	(enums.AUTHORIZE_SESSION_CLASS_UID)(0),     // 65: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CLASS_UID
	(enums.AUTHORIZE_SESSION_STATUS_ID)(0),     // 66: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_STATUS_ID
	(enums.AUTHORIZE_SESSION_TYPE_UID)(0),      // 67: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_TYPE_UID
	(enums.AUTHORIZE_SESSION_CATEGORY_UID)(0),  // 68: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CATEGORY_UID
	(enums.AUTHORIZE_SESSION_SEVERITY_ID)(0),   // 69: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_SEVERITY_ID
	(enums.AUTHORIZE_SESSION_ACTIVITY_ID)(0),   // 70: ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_ACTIVITY_ID
}
var file_ocsf_v1_2_0_events_iam_iam_proto_depIdxs = []int32{
	7,   // 0: ocsf.v1_2_0.events.iam.EntityManagement.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CLASS_UID
	8,   // 1: ocsf.v1_2_0.events.iam.EntityManagement.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_STATUS_ID
	9,   // 2: ocsf.v1_2_0.events.iam.EntityManagement.entity_result:type_name -> ocsf.v1_2_0.objects.ManagedEntity
	10,  // 3: ocsf.v1_2_0.events.iam.EntityManagement.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_SEVERITY_ID
	11,  // 4: ocsf.v1_2_0.events.iam.EntityManagement.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	9,   // 5: ocsf.v1_2_0.events.iam.EntityManagement.entity:type_name -> ocsf.v1_2_0.objects.ManagedEntity
	12,  // 6: ocsf.v1_2_0.events.iam.EntityManagement.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_ACTIVITY_ID
	13,  // 7: ocsf.v1_2_0.events.iam.EntityManagement.device:type_name -> ocsf.v1_2_0.objects.Device
	14,  // 8: ocsf.v1_2_0.events.iam.EntityManagement.observables:type_name -> ocsf.v1_2_0.objects.Observable
	15,  // 9: ocsf.v1_2_0.events.iam.EntityManagement.api:type_name -> ocsf.v1_2_0.objects.Api
	16,  // 10: ocsf.v1_2_0.events.iam.EntityManagement.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	17,  // 11: ocsf.v1_2_0.events.iam.EntityManagement.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_TYPE_UID
	18,  // 12: ocsf.v1_2_0.events.iam.EntityManagement.actor:type_name -> ocsf.v1_2_0.objects.Actor
	19,  // 13: ocsf.v1_2_0.events.iam.EntityManagement.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	20,  // 14: ocsf.v1_2_0.events.iam.EntityManagement.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	21,  // 15: ocsf.v1_2_0.events.iam.EntityManagement.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	22,  // 16: ocsf.v1_2_0.events.iam.EntityManagement.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ENTITY_MANAGEMENT_CATEGORY_UID
	23,  // 17: ocsf.v1_2_0.events.iam.EntityManagement.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	24,  // 18: ocsf.v1_2_0.events.iam.GroupManagement.user:type_name -> ocsf.v1_2_0.objects.User
	21,  // 19: ocsf.v1_2_0.events.iam.GroupManagement.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	25,  // 20: ocsf.v1_2_0.events.iam.GroupManagement.group:type_name -> ocsf.v1_2_0.objects.Group
	16,  // 21: ocsf.v1_2_0.events.iam.GroupManagement.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	26,  // 22: ocsf.v1_2_0.events.iam.GroupManagement.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_STATUS_ID
	27,  // 23: ocsf.v1_2_0.events.iam.GroupManagement.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_SEVERITY_ID
	20,  // 24: ocsf.v1_2_0.events.iam.GroupManagement.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	15,  // 25: ocsf.v1_2_0.events.iam.GroupManagement.api:type_name -> ocsf.v1_2_0.objects.Api
	13,  // 26: ocsf.v1_2_0.events.iam.GroupManagement.device:type_name -> ocsf.v1_2_0.objects.Device
	28,  // 27: ocsf.v1_2_0.events.iam.GroupManagement.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CATEGORY_UID
	19,  // 28: ocsf.v1_2_0.events.iam.GroupManagement.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	29,  // 29: ocsf.v1_2_0.events.iam.GroupManagement.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_TYPE_UID
	14,  // 30: ocsf.v1_2_0.events.iam.GroupManagement.observables:type_name -> ocsf.v1_2_0.objects.Observable
	30,  // 31: ocsf.v1_2_0.events.iam.GroupManagement.resource:type_name -> ocsf.v1_2_0.objects.ResourceDetails
	18,  // 32: ocsf.v1_2_0.events.iam.GroupManagement.actor:type_name -> ocsf.v1_2_0.objects.Actor
	31,  // 33: ocsf.v1_2_0.events.iam.GroupManagement.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_CLASS_UID
	23,  // 34: ocsf.v1_2_0.events.iam.GroupManagement.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	11,  // 35: ocsf.v1_2_0.events.iam.GroupManagement.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	32,  // 36: ocsf.v1_2_0.events.iam.GroupManagement.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.GROUP_MANAGEMENT_ACTIVITY_ID
	33,  // 37: ocsf.v1_2_0.events.iam.Authentication.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CLASS_UID
	18,  // 38: ocsf.v1_2_0.events.iam.Authentication.actor:type_name -> ocsf.v1_2_0.objects.Actor
	34,  // 39: ocsf.v1_2_0.events.iam.Authentication.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_CATEGORY_UID
	14,  // 40: ocsf.v1_2_0.events.iam.Authentication.observables:type_name -> ocsf.v1_2_0.objects.Observable
	15,  // 41: ocsf.v1_2_0.events.iam.Authentication.api:type_name -> ocsf.v1_2_0.objects.Api
	21,  // 42: ocsf.v1_2_0.events.iam.Authentication.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	24,  // 43: ocsf.v1_2_0.events.iam.Authentication.user:type_name -> ocsf.v1_2_0.objects.User
	16,  // 44: ocsf.v1_2_0.events.iam.Authentication.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	20,  // 45: ocsf.v1_2_0.events.iam.Authentication.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	35,  // 46: ocsf.v1_2_0.events.iam.Authentication.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_STATUS_ID
	36,  // 47: ocsf.v1_2_0.events.iam.Authentication.logon_type_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_LOGON_TYPE_ID
	37,  // 48: ocsf.v1_2_0.events.iam.Authentication.auth_factors:type_name -> ocsf.v1_2_0.objects.AuthFactor
	23,  // 49: ocsf.v1_2_0.events.iam.Authentication.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	38,  // 50: ocsf.v1_2_0.events.iam.Authentication.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_SEVERITY_ID
	39,  // 51: ocsf.v1_2_0.events.iam.Authentication.certificate:type_name -> ocsf.v1_2_0.objects.Certificate
	40,  // 52: ocsf.v1_2_0.events.iam.Authentication.auth_protocol_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_AUTH_PROTOCOL_ID
	19,  // 53: ocsf.v1_2_0.events.iam.Authentication.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	41,  // 54: ocsf.v1_2_0.events.iam.Authentication.logon_process:type_name -> ocsf.v1_2_0.objects.Process
	42,  // 55: ocsf.v1_2_0.events.iam.Authentication.session:type_name -> ocsf.v1_2_0.objects.Session
	13,  // 56: ocsf.v1_2_0.events.iam.Authentication.device:type_name -> ocsf.v1_2_0.objects.Device
	11,  // 57: ocsf.v1_2_0.events.iam.Authentication.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	21,  // 58: ocsf.v1_2_0.events.iam.Authentication.dst_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	43,  // 59: ocsf.v1_2_0.events.iam.Authentication.service:type_name -> ocsf.v1_2_0.objects.Service
	44,  // 60: ocsf.v1_2_0.events.iam.Authentication.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_TYPE_UID
	45,  // 61: ocsf.v1_2_0.events.iam.Authentication.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHENTICATION_ACTIVITY_ID
	21,  // 62: ocsf.v1_2_0.events.iam.UserAccess.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	46,  // 63: ocsf.v1_2_0.events.iam.UserAccess.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_SEVERITY_ID
	19,  // 64: ocsf.v1_2_0.events.iam.UserAccess.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	47,  // 65: ocsf.v1_2_0.events.iam.UserAccess.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CATEGORY_UID
	20,  // 66: ocsf.v1_2_0.events.iam.UserAccess.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	24,  // 67: ocsf.v1_2_0.events.iam.UserAccess.user:type_name -> ocsf.v1_2_0.objects.User
	15,  // 68: ocsf.v1_2_0.events.iam.UserAccess.api:type_name -> ocsf.v1_2_0.objects.Api
	48,  // 69: ocsf.v1_2_0.events.iam.UserAccess.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_STATUS_ID
	49,  // 70: ocsf.v1_2_0.events.iam.UserAccess.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_CLASS_UID
	50,  // 71: ocsf.v1_2_0.events.iam.UserAccess.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_TYPE_UID
	18,  // 72: ocsf.v1_2_0.events.iam.UserAccess.actor:type_name -> ocsf.v1_2_0.objects.Actor
	30,  // 73: ocsf.v1_2_0.events.iam.UserAccess.resource:type_name -> ocsf.v1_2_0.objects.ResourceDetails
	13,  // 74: ocsf.v1_2_0.events.iam.UserAccess.device:type_name -> ocsf.v1_2_0.objects.Device
	16,  // 75: ocsf.v1_2_0.events.iam.UserAccess.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	14,  // 76: ocsf.v1_2_0.events.iam.UserAccess.observables:type_name -> ocsf.v1_2_0.objects.Observable
	23,  // 77: ocsf.v1_2_0.events.iam.UserAccess.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	11,  // 78: ocsf.v1_2_0.events.iam.UserAccess.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	51,  // 79: ocsf.v1_2_0.events.iam.UserAccess.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.USER_ACCESS_ACTIVITY_ID
	23,  // 80: ocsf.v1_2_0.events.iam.AccountChange.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	11,  // 81: ocsf.v1_2_0.events.iam.AccountChange.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	24,  // 82: ocsf.v1_2_0.events.iam.AccountChange.user_result:type_name -> ocsf.v1_2_0.objects.User
	15,  // 83: ocsf.v1_2_0.events.iam.AccountChange.api:type_name -> ocsf.v1_2_0.objects.Api
	16,  // 84: ocsf.v1_2_0.events.iam.AccountChange.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	52,  // 85: ocsf.v1_2_0.events.iam.AccountChange.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_SEVERITY_ID
	53,  // 86: ocsf.v1_2_0.events.iam.AccountChange.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CATEGORY_UID
	20,  // 87: ocsf.v1_2_0.events.iam.AccountChange.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	54,  // 88: ocsf.v1_2_0.events.iam.AccountChange.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_STATUS_ID
	55,  // 89: ocsf.v1_2_0.events.iam.AccountChange.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_TYPE_UID
	56,  // 90: ocsf.v1_2_0.events.iam.AccountChange.policy:type_name -> ocsf.v1_2_0.objects.Policy
	18,  // 91: ocsf.v1_2_0.events.iam.AccountChange.actor:type_name -> ocsf.v1_2_0.objects.Actor
	57,  // 92: ocsf.v1_2_0.events.iam.AccountChange.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_CLASS_UID
	58,  // 93: ocsf.v1_2_0.events.iam.AccountChange.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.ACCOUNT_CHANGE_ACTIVITY_ID
	14,  // 94: ocsf.v1_2_0.events.iam.AccountChange.observables:type_name -> ocsf.v1_2_0.objects.Observable
	24,  // 95: ocsf.v1_2_0.events.iam.AccountChange.user:type_name -> ocsf.v1_2_0.objects.User
	21,  // 96: ocsf.v1_2_0.events.iam.AccountChange.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	13,  // 97: ocsf.v1_2_0.events.iam.AccountChange.device:type_name -> ocsf.v1_2_0.objects.Device
	19,  // 98: ocsf.v1_2_0.events.iam.AccountChange.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	59,  // 99: ocsf.v1_2_0.events.iam.Iam.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_ACTIVITY_ID
	23,  // 100: ocsf.v1_2_0.events.iam.Iam.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	18,  // 101: ocsf.v1_2_0.events.iam.Iam.actor:type_name -> ocsf.v1_2_0.objects.Actor
	60,  // 102: ocsf.v1_2_0.events.iam.Iam.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_CLASS_UID
	15,  // 103: ocsf.v1_2_0.events.iam.Iam.api:type_name -> ocsf.v1_2_0.objects.Api
	21,  // 104: ocsf.v1_2_0.events.iam.Iam.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	13,  // 105: ocsf.v1_2_0.events.iam.Iam.device:type_name -> ocsf.v1_2_0.objects.Device
	16,  // 106: ocsf.v1_2_0.events.iam.Iam.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	61,  // 107: ocsf.v1_2_0.events.iam.Iam.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_SEVERITY_ID
	62,  // 108: ocsf.v1_2_0.events.iam.Iam.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_STATUS_ID
	11,  // 109: ocsf.v1_2_0.events.iam.Iam.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	63,  // 110: ocsf.v1_2_0.events.iam.Iam.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_TYPE_UID
	64,  // 111: ocsf.v1_2_0.events.iam.Iam.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.IAM_CATEGORY_UID
	20,  // 112: ocsf.v1_2_0.events.iam.Iam.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	19,  // 113: ocsf.v1_2_0.events.iam.Iam.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	14,  // 114: ocsf.v1_2_0.events.iam.Iam.observables:type_name -> ocsf.v1_2_0.objects.Observable
	11,  // 115: ocsf.v1_2_0.events.iam.AuthorizeSession.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	65,  // 116: ocsf.v1_2_0.events.iam.AuthorizeSession.class_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CLASS_UID
	66,  // 117: ocsf.v1_2_0.events.iam.AuthorizeSession.status_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_STATUS_ID
	23,  // 118: ocsf.v1_2_0.events.iam.AuthorizeSession.http_request:type_name -> ocsf.v1_2_0.objects.HttpRequest
	13,  // 119: ocsf.v1_2_0.events.iam.AuthorizeSession.device:type_name -> ocsf.v1_2_0.objects.Device
	42,  // 120: ocsf.v1_2_0.events.iam.AuthorizeSession.session:type_name -> ocsf.v1_2_0.objects.Session
	20,  // 121: ocsf.v1_2_0.events.iam.AuthorizeSession.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	19,  // 122: ocsf.v1_2_0.events.iam.AuthorizeSession.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	67,  // 123: ocsf.v1_2_0.events.iam.AuthorizeSession.type_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_TYPE_UID
	25,  // 124: ocsf.v1_2_0.events.iam.AuthorizeSession.group:type_name -> ocsf.v1_2_0.objects.Group
	15,  // 125: ocsf.v1_2_0.events.iam.AuthorizeSession.api:type_name -> ocsf.v1_2_0.objects.Api
	21,  // 126: ocsf.v1_2_0.events.iam.AuthorizeSession.src_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	68,  // 127: ocsf.v1_2_0.events.iam.AuthorizeSession.category_uid:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_CATEGORY_UID
	18,  // 128: ocsf.v1_2_0.events.iam.AuthorizeSession.actor:type_name -> ocsf.v1_2_0.objects.Actor
	24,  // 129: ocsf.v1_2_0.events.iam.AuthorizeSession.user:type_name -> ocsf.v1_2_0.objects.User
	16,  // 130: ocsf.v1_2_0.events.iam.AuthorizeSession.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	69,  // 131: ocsf.v1_2_0.events.iam.AuthorizeSession.severity_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_SEVERITY_ID
	14,  // 132: ocsf.v1_2_0.events.iam.AuthorizeSession.observables:type_name -> ocsf.v1_2_0.objects.Observable
	21,  // 133: ocsf.v1_2_0.events.iam.AuthorizeSession.dst_endpoint:type_name -> ocsf.v1_2_0.objects.NetworkEndpoint
	70,  // 134: ocsf.v1_2_0.events.iam.AuthorizeSession.activity_id:type_name -> ocsf.v1_2_0.events.iam.enums.AUTHORIZE_SESSION_ACTIVITY_ID
	135, // [135:135] is the sub-list for method output_type
	135, // [135:135] is the sub-list for method input_type
	135, // [135:135] is the sub-list for extension type_name
	135, // [135:135] is the sub-list for extension extendee
	0,   // [0:135] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_events_iam_iam_proto_init() }
func file_ocsf_v1_2_0_events_iam_iam_proto_init() {
	if File_ocsf_v1_2_0_events_iam_iam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_events_iam_iam_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_events_iam_iam_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_events_iam_iam_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_2_0_events_iam_iam_proto_msgTypes,
	}.Build()
	File_ocsf_v1_2_0_events_iam_iam_proto = out.File
	file_ocsf_v1_2_0_events_iam_iam_proto_rawDesc = nil
	file_ocsf_v1_2_0_events_iam_iam_proto_goTypes = nil
	file_ocsf_v1_2_0_events_iam_iam_proto_depIdxs = nil
}
