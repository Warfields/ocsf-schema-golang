// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_2_0/events/discovery/discovery.proto

package discovery

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_2_0/events/discovery/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_2_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: discovery
// Event UID: 18
// URL: https://schema.ocsf.io/1.2.0/classes/user_query
type UserQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUid        enums.USER_QUERY_TYPE_UID        `protobuf:"varint,1,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_TYPE_UID" json:"type_uid,omitempty"`                             // Caption: Type ID;
	Api            *objects.Api                     `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                 // Caption: API Details; Profile: cloud;
	StatusCode     string                           `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                 // Caption: Status Code;
	ClassUid       enums.USER_QUERY_CLASS_UID       `protobuf:"varint,4,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	Count          int32                            `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                                                                                            // Caption: Count;
	EndTime        int64                            `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                         // Caption: End Time;
	Duration       int32                            `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                      // Caption: Duration;
	Metadata       *objects.Metadata                `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                       // Caption: Metadata;
	Time           int64                            `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`                                                                                                              // Caption: Event Time;
	Actor          *objects.Actor                   `protobuf:"bytes,10,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                            // Caption: Actor; Profile: host;
	RawData        string                           `protobuf:"bytes,11,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                         // Caption: Raw Data;
	StartTime      int64                            `protobuf:"varint,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                  // Caption: Start Time;
	Device         *objects.Device                  `protobuf:"bytes,13,opt,name=device,proto3" json:"device,omitempty"`                                                                                                          // Caption: Device; Profile: host;
	StatusId       enums.USER_QUERY_STATUS_ID       `protobuf:"varint,14,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	TypeName       string                           `protobuf:"bytes,15,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                      // Caption: Type Name;
	Severity       string                           `protobuf:"bytes,16,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                      // Caption: Severity;
	CategoryName   string                           `protobuf:"bytes,17,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                          // Caption: Category;
	Observables    []*objects.Observable            `protobuf:"bytes,18,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                // Caption: Observables;
	Unmapped       *objects.Object                  `protobuf:"bytes,19,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                      // Caption: Unmapped Data;
	CategoryUid    enums.USER_QUERY_CATEGORY_UID    `protobuf:"varint,20,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Message        string                           `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`                                                                                                        // Caption: Message;
	StatusDetail   string                           `protobuf:"bytes,22,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                          // Caption: Status Details;
	ClassName      string                           `protobuf:"bytes,23,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                   // Caption: Class;
	QueryResultId  enums.USER_QUERY_QUERY_RESULT_ID `protobuf:"varint,24,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	TimezoneOffset int32                            `protobuf:"varint,25,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                   // Caption: Timezone Offset;
	ActivityId     enums.USER_QUERY_ACTIVITY_ID     `protobuf:"varint,26,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	Enrichments    []*objects.Enrichment            `protobuf:"bytes,27,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                // Caption: Enrichments;
	QueryResult    string                           `protobuf:"bytes,28,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                             // Caption: Query Result;
	Status         string                           `protobuf:"bytes,29,opt,name=status,proto3" json:"status,omitempty"`                                                                                                          // Caption: Status;
	ActivityName   string                           `protobuf:"bytes,30,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                          // Caption: Activity;
	QueryInfo      *objects.QueryInfo               `protobuf:"bytes,31,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                   // Caption: Query Info;
	SeverityId     enums.USER_QUERY_SEVERITY_ID     `protobuf:"varint,32,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	User           *objects.User                    `protobuf:"bytes,33,opt,name=user,proto3" json:"user,omitempty"`                                                                                                              // Caption: User;
	Cloud          *objects.Cloud                   `protobuf:"bytes,34,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                            // Caption: Cloud; Profile: cloud;
}

func (x *UserQuery) Reset() {
	*x = UserQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuery) ProtoMessage() {}

func (x *UserQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuery.ProtoReflect.Descriptor instead.
func (*UserQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *UserQuery) GetTypeUid() enums.USER_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.USER_QUERY_TYPE_UID(0)
}

func (x *UserQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *UserQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *UserQuery) GetClassUid() enums.USER_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.USER_QUERY_CLASS_UID(0)
}

func (x *UserQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UserQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *UserQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UserQuery) GetStatusId() enums.USER_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.USER_QUERY_STATUS_ID(0)
}

func (x *UserQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UserQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UserQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UserQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *UserQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *UserQuery) GetCategoryUid() enums.USER_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.USER_QUERY_CATEGORY_UID(0)
}

func (x *UserQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *UserQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *UserQuery) GetQueryResultId() enums.USER_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.USER_QUERY_QUERY_RESULT_ID(0)
}

func (x *UserQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *UserQuery) GetActivityId() enums.USER_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.USER_QUERY_ACTIVITY_ID(0)
}

func (x *UserQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *UserQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *UserQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *UserQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *UserQuery) GetSeverityId() enums.USER_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.USER_QUERY_SEVERITY_ID(0)
}

func (x *UserQuery) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

// URL: https://schema.ocsf.io/1.2.0/classes/device_config_state_change
// Event: discovery
// Event UID: 19
type DeviceConfigStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device              *objects.Device                                         `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                                                      // Caption: Device;
	Api                 *objects.Api                                            `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                                                            // Caption: API Details; Profile: cloud;
	Severity            string                                                  `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                                                  // Caption: Severity;
	ClassName           string                                                  `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                                                               // Caption: Class;
	SeverityId          enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID            `protobuf:"varint,5,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID" json:"severity_id,omitempty"`                                            // Caption: Severity ID;
	Cloud               *objects.Cloud                                          `protobuf:"bytes,6,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                                                        // Caption: Cloud; Profile: cloud;
	TypeName            string                                                  `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                                                                  // Caption: Type Name;
	PrevSecurityLevel   string                                                  `protobuf:"bytes,8,opt,name=prev_security_level,json=prevSecurityLevel,proto3" json:"prev_security_level,omitempty"`                                                                                                     // Caption: Previous Security Level;
	Actor               *objects.Actor                                          `protobuf:"bytes,9,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                                                        // Caption: Actor;
	Status              string                                                  `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                                                     // Caption: Status;
	StatusId            enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID              `protobuf:"varint,11,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID" json:"status_id,omitempty"`                                                   // Caption: Status ID;
	RawData             string                                                  `protobuf:"bytes,12,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                                                    // Caption: Raw Data;
	Message             string                                                  `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                                                   // Caption: Message;
	SecurityStates      []*objects.SecurityState                                `protobuf:"bytes,14,rep,name=security_states,json=securityStates,proto3" json:"security_states,omitempty"`                                                                                                               // Caption: Security States;
	Unmapped            *objects.Object                                         `protobuf:"bytes,15,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                                                 // Caption: Unmapped Data;
	ClassUid            enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID              `protobuf:"varint,16,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID" json:"class_uid,omitempty"`                                                   // Caption: Class ID;
	StartTime           int64                                                   `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                                                             // Caption: Start Time;
	Time                int64                                                   `protobuf:"varint,18,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                                                        // Caption: Event Time;
	SecurityLevel       string                                                  `protobuf:"bytes,19,opt,name=security_level,json=securityLevel,proto3" json:"security_level,omitempty"`                                                                                                                  // Caption: Security Level;
	Count               int32                                                   `protobuf:"varint,20,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                                                      // Caption: Count;
	StatusCode          string                                                  `protobuf:"bytes,21,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                                                           // Caption: Status Code;
	Duration            int32                                                   `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                                                // Caption: Duration;
	PrevSecurityLevelId enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID `protobuf:"varint,23,opt,name=prev_security_level_id,json=prevSecurityLevelId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID" json:"prev_security_level_id,omitempty"` // Caption: Previous Security Level ID;
	PrevSecurityStates  []*objects.SecurityState                                `protobuf:"bytes,24,rep,name=prev_security_states,json=prevSecurityStates,proto3" json:"prev_security_states,omitempty"`                                                                                                 // Caption: Previous Security States;
	EndTime             int64                                                   `protobuf:"varint,25,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                                                   // Caption: End Time;
	CategoryName        string                                                  `protobuf:"bytes,26,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                                                     // Caption: Category;
	TypeUid             enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID               `protobuf:"varint,27,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID" json:"type_uid,omitempty"`                                                       // Caption: Type ID;
	Metadata            *objects.Metadata                                       `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                                                                 // Caption: Metadata;
	Enrichments         []*objects.Enrichment                                   `protobuf:"bytes,29,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                                                           // Caption: Enrichments;
	CategoryUid         enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID           `protobuf:"varint,30,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID" json:"category_uid,omitempty"`                                       // Caption: Category ID;
	StatusDetail        string                                                  `protobuf:"bytes,31,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                                                     // Caption: Status Details;
	TimezoneOffset      int32                                                   `protobuf:"varint,32,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                                                              // Caption: Timezone Offset;
	SecurityLevelId     enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID      `protobuf:"varint,33,opt,name=security_level_id,json=securityLevelId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID" json:"security_level_id,omitempty"`                    // Caption: Security Level ID;
	Observables         []*objects.Observable                                   `protobuf:"bytes,34,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                                                           // Caption: Observables;
	ActivityId          enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID            `protobuf:"varint,35,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID" json:"activity_id,omitempty"`                                           // Caption: Activity ID;
	ActivityName        string                                                  `protobuf:"bytes,36,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                                                     // Caption: Activity;
}

func (x *DeviceConfigStateChange) Reset() {
	*x = DeviceConfigStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigStateChange) ProtoMessage() {}

func (x *DeviceConfigStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigStateChange.ProtoReflect.Descriptor instead.
func (*DeviceConfigStateChange) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceConfigStateChange) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceConfigStateChange) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DeviceConfigStateChange) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DeviceConfigStateChange) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetSeverityId() enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID(0)
}

func (x *DeviceConfigStateChange) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DeviceConfigStateChange) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetPrevSecurityLevel() string {
	if x != nil {
		return x.PrevSecurityLevel
	}
	return ""
}

func (x *DeviceConfigStateChange) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DeviceConfigStateChange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeviceConfigStateChange) GetStatusId() enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID(0)
}

func (x *DeviceConfigStateChange) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DeviceConfigStateChange) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeviceConfigStateChange) GetSecurityStates() []*objects.SecurityState {
	if x != nil {
		return x.SecurityStates
	}
	return nil
}

func (x *DeviceConfigStateChange) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DeviceConfigStateChange) GetClassUid() enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID(0)
}

func (x *DeviceConfigStateChange) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DeviceConfigStateChange) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DeviceConfigStateChange) GetSecurityLevel() string {
	if x != nil {
		return x.SecurityLevel
	}
	return ""
}

func (x *DeviceConfigStateChange) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DeviceConfigStateChange) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DeviceConfigStateChange) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DeviceConfigStateChange) GetPrevSecurityLevelId() enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID {
	if x != nil {
		return x.PrevSecurityLevelId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID(0)
}

func (x *DeviceConfigStateChange) GetPrevSecurityStates() []*objects.SecurityState {
	if x != nil {
		return x.PrevSecurityStates
	}
	return nil
}

func (x *DeviceConfigStateChange) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DeviceConfigStateChange) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DeviceConfigStateChange) GetTypeUid() enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID(0)
}

func (x *DeviceConfigStateChange) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeviceConfigStateChange) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DeviceConfigStateChange) GetCategoryUid() enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID(0)
}

func (x *DeviceConfigStateChange) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DeviceConfigStateChange) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DeviceConfigStateChange) GetSecurityLevelId() enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID {
	if x != nil {
		return x.SecurityLevelId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID(0)
}

func (x *DeviceConfigStateChange) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DeviceConfigStateChange) GetActivityId() enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID(0)
}

func (x *DeviceConfigStateChange) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

// Event: discovery
// Event UID: 17
// URL: https://schema.ocsf.io/1.2.0/classes/session_query
type SessionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryResultId  enums.SESSION_QUERY_QUERY_RESULT_ID `protobuf:"varint,1,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	RawData        string                              `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
	TypeName       string                              `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	Count          int32                               `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                                                                                                              // Caption: Count;
	Duration       int32                               `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                        // Caption: Duration;
	ActivityName   string                              `protobuf:"bytes,6,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                             // Caption: Activity;
	Actor          *objects.Actor                      `protobuf:"bytes,7,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor; Profile: host;
	ActivityId     enums.SESSION_QUERY_ACTIVITY_ID     `protobuf:"varint,8,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	StartTime      int64                               `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
	TypeUid        enums.SESSION_QUERY_TYPE_UID        `protobuf:"varint,10,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_TYPE_UID" json:"type_uid,omitempty"`                           // Caption: Type ID;
	Severity       string                              `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	SeverityId     enums.SESSION_QUERY_SEVERITY_ID     `protobuf:"varint,12,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`               // Caption: Severity ID;
	StatusCode     string                              `protobuf:"bytes,13,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                  // Caption: Status Code;
	Time           int64                               `protobuf:"varint,14,opt,name=time,proto3" json:"time,omitempty"`                                                                                                               // Caption: Event Time;
	QueryResult    string                              `protobuf:"bytes,15,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                               // Caption: Query Result;
	EndTime        int64                               `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                          // Caption: End Time;
	Message        string                              `protobuf:"bytes,17,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	Observables    []*objects.Observable               `protobuf:"bytes,18,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                  // Caption: Observables;
	CategoryName   string                              `protobuf:"bytes,19,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                            // Caption: Category;
	Session        *objects.Session                    `protobuf:"bytes,20,opt,name=session,proto3" json:"session,omitempty"`                                                                                                          // Caption: Session;
	StatusDetail   string                              `protobuf:"bytes,21,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                            // Caption: Status Details;
	ClassUid       enums.SESSION_QUERY_CLASS_UID       `protobuf:"varint,22,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CLASS_UID" json:"class_uid,omitempty"`                       // Caption: Class ID;
	StatusId       enums.SESSION_QUERY_STATUS_ID       `protobuf:"varint,23,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_STATUS_ID" json:"status_id,omitempty"`                       // Caption: Status ID;
	CategoryUid    enums.SESSION_QUERY_CATEGORY_UID    `protobuf:"varint,24,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`           // Caption: Category ID;
	Unmapped       *objects.Object                     `protobuf:"bytes,25,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                        // Caption: Unmapped Data;
	Status         string                              `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`                                                                                                            // Caption: Status;
	TimezoneOffset int32                               `protobuf:"varint,27,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                     // Caption: Timezone Offset;
	ClassName      string                              `protobuf:"bytes,28,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                     // Caption: Class;
	Device         *objects.Device                     `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`                                                                                                            // Caption: Device; Profile: host;
	QueryInfo      *objects.QueryInfo                  `protobuf:"bytes,30,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                     // Caption: Query Info;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,31,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                  // Caption: Enrichments;
	Cloud          *objects.Cloud                      `protobuf:"bytes,32,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                              // Caption: Cloud; Profile: cloud;
	Metadata       *objects.Metadata                   `protobuf:"bytes,33,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                        // Caption: Metadata;
	Api            *objects.Api                        `protobuf:"bytes,34,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                  // Caption: API Details; Profile: cloud;
}

func (x *SessionQuery) Reset() {
	*x = SessionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQuery) ProtoMessage() {}

func (x *SessionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQuery.ProtoReflect.Descriptor instead.
func (*SessionQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *SessionQuery) GetQueryResultId() enums.SESSION_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.SESSION_QUERY_QUERY_RESULT_ID(0)
}

func (x *SessionQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SessionQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SessionQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SessionQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SessionQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *SessionQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *SessionQuery) GetActivityId() enums.SESSION_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SESSION_QUERY_ACTIVITY_ID(0)
}

func (x *SessionQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SessionQuery) GetTypeUid() enums.SESSION_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SESSION_QUERY_TYPE_UID(0)
}

func (x *SessionQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SessionQuery) GetSeverityId() enums.SESSION_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SESSION_QUERY_SEVERITY_ID(0)
}

func (x *SessionQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SessionQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SessionQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *SessionQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SessionQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SessionQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *SessionQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SessionQuery) GetSession() *objects.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *SessionQuery) GetClassUid() enums.SESSION_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SESSION_QUERY_CLASS_UID(0)
}

func (x *SessionQuery) GetStatusId() enums.SESSION_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SESSION_QUERY_STATUS_ID(0)
}

func (x *SessionQuery) GetCategoryUid() enums.SESSION_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SESSION_QUERY_CATEGORY_UID(0)
}

func (x *SessionQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *SessionQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SessionQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *SessionQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SessionQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SessionQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *SessionQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *SessionQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *SessionQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SessionQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

// Event: discovery
// Event UID: 9
// URL: https://schema.ocsf.io/1.2.0/classes/admin_group_query
type AdminGroupQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityName   string                                  `protobuf:"bytes,1,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                  // Caption: Activity;
	Enrichments    []*objects.Enrichment                   `protobuf:"bytes,2,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                        // Caption: Enrichments;
	QueryResult    string                                  `protobuf:"bytes,3,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                     // Caption: Query Result;
	Users          []*objects.User                         `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`                                                                                                                    // Caption: Users;
	Metadata       *objects.Metadata                       `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                              // Caption: Metadata;
	TimezoneOffset int32                                   `protobuf:"varint,6,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                           // Caption: Timezone Offset;
	ActivityId     enums.ADMIN_GROUP_QUERY_ACTIVITY_ID     `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                 // Caption: Activity ID;
	ClassName      string                                  `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                           // Caption: Class;
	Unmapped       *objects.Object                         `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                              // Caption: Unmapped Data;
	QueryInfo      *objects.QueryInfo                      `protobuf:"bytes,10,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                          // Caption: Query Info;
	Severity       string                                  `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                             // Caption: Severity;
	Count          int32                                   `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                  // Caption: Count;
	Device         *objects.Device                         `protobuf:"bytes,13,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                 // Caption: Device; Profile: host;
	StatusId       enums.ADMIN_GROUP_QUERY_STATUS_ID       `protobuf:"varint,14,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	StatusDetail   string                                  `protobuf:"bytes,15,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                 // Caption: Status Details;
	Group          *objects.Group                          `protobuf:"bytes,16,opt,name=group,proto3" json:"group,omitempty"`                                                                                                                   // Caption: Group;
	Duration       int32                                   `protobuf:"varint,17,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                            // Caption: Duration;
	QueryResultId  enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID `protobuf:"varint,18,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	EndTime        int64                                   `protobuf:"varint,19,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                               // Caption: End Time;
	Observables    []*objects.Observable                   `protobuf:"bytes,20,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                       // Caption: Observables;
	TypeUid        enums.ADMIN_GROUP_QUERY_TYPE_UID        `protobuf:"varint,21,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	Api            *objects.Api                            `protobuf:"bytes,22,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                       // Caption: API Details; Profile: cloud;
	StartTime      int64                                   `protobuf:"varint,23,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                         // Caption: Start Time;
	TypeName       string                                  `protobuf:"bytes,24,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                             // Caption: Type Name;
	SeverityId     enums.ADMIN_GROUP_QUERY_SEVERITY_ID     `protobuf:"varint,25,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	Actor          *objects.Actor                          `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                   // Caption: Actor; Profile: host;
	Status         string                                  `protobuf:"bytes,27,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                 // Caption: Status;
	CategoryUid    enums.ADMIN_GROUP_QUERY_CATEGORY_UID    `protobuf:"varint,28,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Message        string                                  `protobuf:"bytes,29,opt,name=message,proto3" json:"message,omitempty"`                                                                                                               // Caption: Message;
	CategoryName   string                                  `protobuf:"bytes,30,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                 // Caption: Category;
	Cloud          *objects.Cloud                          `protobuf:"bytes,31,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                   // Caption: Cloud; Profile: cloud;
	RawData        string                                  `protobuf:"bytes,32,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                // Caption: Raw Data;
	Time           int64                                   `protobuf:"varint,33,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                    // Caption: Event Time;
	StatusCode     string                                  `protobuf:"bytes,34,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                       // Caption: Status Code;
	ClassUid       enums.ADMIN_GROUP_QUERY_CLASS_UID       `protobuf:"varint,35,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
}

func (x *AdminGroupQuery) Reset() {
	*x = AdminGroupQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGroupQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGroupQuery) ProtoMessage() {}

func (x *AdminGroupQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGroupQuery.ProtoReflect.Descriptor instead.
func (*AdminGroupQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{3}
}

func (x *AdminGroupQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *AdminGroupQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *AdminGroupQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *AdminGroupQuery) GetUsers() []*objects.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AdminGroupQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AdminGroupQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *AdminGroupQuery) GetActivityId() enums.ADMIN_GROUP_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.ADMIN_GROUP_QUERY_ACTIVITY_ID(0)
}

func (x *AdminGroupQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *AdminGroupQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *AdminGroupQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *AdminGroupQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AdminGroupQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AdminGroupQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AdminGroupQuery) GetStatusId() enums.ADMIN_GROUP_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.ADMIN_GROUP_QUERY_STATUS_ID(0)
}

func (x *AdminGroupQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *AdminGroupQuery) GetGroup() *objects.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AdminGroupQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AdminGroupQuery) GetQueryResultId() enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID(0)
}

func (x *AdminGroupQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AdminGroupQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *AdminGroupQuery) GetTypeUid() enums.ADMIN_GROUP_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.ADMIN_GROUP_QUERY_TYPE_UID(0)
}

func (x *AdminGroupQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *AdminGroupQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AdminGroupQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *AdminGroupQuery) GetSeverityId() enums.ADMIN_GROUP_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.ADMIN_GROUP_QUERY_SEVERITY_ID(0)
}

func (x *AdminGroupQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AdminGroupQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AdminGroupQuery) GetCategoryUid() enums.ADMIN_GROUP_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.ADMIN_GROUP_QUERY_CATEGORY_UID(0)
}

func (x *AdminGroupQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AdminGroupQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *AdminGroupQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *AdminGroupQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *AdminGroupQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AdminGroupQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *AdminGroupQuery) GetClassUid() enums.ADMIN_GROUP_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.ADMIN_GROUP_QUERY_CLASS_UID(0)
}

// Event UID: 8
// URL: https://schema.ocsf.io/1.2.0/classes/folder_query
// Event: discovery
type FolderQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cloud          *objects.Cloud                     `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                               // Profile: cloud; Caption: Cloud;
	StartTime      int64                              `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
	EndTime        int64                              `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                           // Caption: End Time;
	CategoryName   string                             `protobuf:"bytes,4,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                             // Caption: Category;
	StatusCode     string                             `protobuf:"bytes,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	TypeName       string                             `protobuf:"bytes,6,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	Count          int32                              `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                                                                                                              // Caption: Count;
	ClassUid       enums.FOLDER_QUERY_CLASS_UID       `protobuf:"varint,8,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	Status         string                             `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // Caption: Status;
	Message        string                             `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	ClassName      string                             `protobuf:"bytes,11,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                     // Caption: Class;
	Time           int64                              `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`                                                                                                               // Caption: Event Time;
	ActivityId     enums.FOLDER_QUERY_ACTIVITY_ID     `protobuf:"varint,13,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	StatusDetail   string                             `protobuf:"bytes,14,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                            // Caption: Status Details;
	Duration       int32                              `protobuf:"varint,15,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                       // Caption: Duration;
	TimezoneOffset int32                              `protobuf:"varint,16,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                     // Caption: Timezone Offset;
	QueryResultId  enums.FOLDER_QUERY_QUERY_RESULT_ID `protobuf:"varint,17,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	ActivityName   string                             `protobuf:"bytes,18,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                            // Caption: Activity;
	SeverityId     enums.FOLDER_QUERY_SEVERITY_ID     `protobuf:"varint,19,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	StatusId       enums.FOLDER_QUERY_STATUS_ID       `protobuf:"varint,20,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Severity       string                             `protobuf:"bytes,21,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	QueryInfo      *objects.QueryInfo                 `protobuf:"bytes,22,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                     // Caption: Query Info;
	Metadata       *objects.Metadata                  `protobuf:"bytes,23,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                        // Caption: Metadata;
	TypeUid        enums.FOLDER_QUERY_TYPE_UID        `protobuf:"varint,24,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	Api            *objects.Api                       `protobuf:"bytes,25,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                  // Profile: cloud; Caption: API Details;
	Device         *objects.Device                    `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`                                                                                                            // Caption: Device; Profile: host;
	CategoryUid    enums.FOLDER_QUERY_CATEGORY_UID    `protobuf:"varint,27,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Actor          *objects.Actor                     `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                              // Caption: Actor; Profile: host;
	QueryResult    string                             `protobuf:"bytes,29,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                               // Caption: Query Result;
	RawData        string                             `protobuf:"bytes,30,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                           // Caption: Raw Data;
	Folder         *objects.File                      `protobuf:"bytes,31,opt,name=folder,proto3" json:"folder,omitempty"`                                                                                                            // Caption: Folder;
	Unmapped       *objects.Object                    `protobuf:"bytes,32,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                        // Caption: Unmapped Data;
	Enrichments    []*objects.Enrichment              `protobuf:"bytes,33,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                  // Caption: Enrichments;
	Observables    []*objects.Observable              `protobuf:"bytes,34,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                  // Caption: Observables;
}

func (x *FolderQuery) Reset() {
	*x = FolderQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderQuery) ProtoMessage() {}

func (x *FolderQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderQuery.ProtoReflect.Descriptor instead.
func (*FolderQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{4}
}

func (x *FolderQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *FolderQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FolderQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FolderQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *FolderQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *FolderQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FolderQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FolderQuery) GetClassUid() enums.FOLDER_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FOLDER_QUERY_CLASS_UID(0)
}

func (x *FolderQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FolderQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FolderQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FolderQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FolderQuery) GetActivityId() enums.FOLDER_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FOLDER_QUERY_ACTIVITY_ID(0)
}

func (x *FolderQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *FolderQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FolderQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *FolderQuery) GetQueryResultId() enums.FOLDER_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.FOLDER_QUERY_QUERY_RESULT_ID(0)
}

func (x *FolderQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *FolderQuery) GetSeverityId() enums.FOLDER_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FOLDER_QUERY_SEVERITY_ID(0)
}

func (x *FolderQuery) GetStatusId() enums.FOLDER_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FOLDER_QUERY_STATUS_ID(0)
}

func (x *FolderQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *FolderQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *FolderQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FolderQuery) GetTypeUid() enums.FOLDER_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.FOLDER_QUERY_TYPE_UID(0)
}

func (x *FolderQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *FolderQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *FolderQuery) GetCategoryUid() enums.FOLDER_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FOLDER_QUERY_CATEGORY_UID(0)
}

func (x *FolderQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FolderQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *FolderQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *FolderQuery) GetFolder() *objects.File {
	if x != nil {
		return x.Folder
	}
	return nil
}

func (x *FolderQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *FolderQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *FolderQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

// Event UID: 4
// URL: https://schema.ocsf.io/1.2.0/classes/registry_key_query
// Event: discovery
type RegistryKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassUid       enums.REGISTRY_KEY_QUERY_CLASS_UID       `protobuf:"varint,1,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	CategoryUid    enums.REGISTRY_KEY_QUERY_CATEGORY_UID    `protobuf:"varint,2,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`             // Caption: Category ID;
	EndTime        int64                                    `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                 // Caption: End Time;
	ActivityName   string                                   `protobuf:"bytes,4,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                   // Caption: Activity;
	Enrichments    []*objects.Enrichment                    `protobuf:"bytes,5,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                         // Caption: Enrichments;
	RawData        string                                   `protobuf:"bytes,6,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                  // Caption: Raw Data;
	Cloud          *objects.Cloud                           `protobuf:"bytes,7,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                     // Caption: Cloud; Profile: cloud;
	TypeUid        enums.REGISTRY_KEY_QUERY_TYPE_UID        `protobuf:"varint,8,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_TYPE_UID" json:"type_uid,omitempty"`                             // Caption: Type ID;
	Duration       int32                                    `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                              // Caption: Duration;
	TimezoneOffset int32                                    `protobuf:"varint,10,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                           // Caption: Timezone Offset;
	StatusCode     string                                   `protobuf:"bytes,11,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                        // Caption: Status Code;
	Status         string                                   `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                  // Caption: Status;
	StatusId       enums.REGISTRY_KEY_QUERY_STATUS_ID       `protobuf:"varint,13,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Api            *objects.Api                             `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                        // Caption: API Details; Profile: cloud;
	Metadata       *objects.Metadata                        `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                              // Caption: Metadata;
	ClassName      string                                   `protobuf:"bytes,16,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                           // Caption: Class;
	QueryInfo      *objects.QueryInfo                       `protobuf:"bytes,17,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                           // Caption: Query Info;
	Count          int32                                    `protobuf:"varint,18,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                   // Caption: Count;
	Unmapped       *objects.Object                          `protobuf:"bytes,19,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                              // Caption: Unmapped Data;
	Time           int64                                    `protobuf:"varint,20,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                     // Caption: Event Time;
	QueryResultId  enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID `protobuf:"varint,21,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	ActivityId     enums.REGISTRY_KEY_QUERY_ACTIVITY_ID     `protobuf:"varint,22,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	RegKey         *objects.RegKey                          `protobuf:"bytes,23,opt,name=reg_key,json=regKey,proto3" json:"reg_key,omitempty"`                                                                                                    // Caption: Registry Key;
	CategoryName   string                                   `protobuf:"bytes,24,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                  // Caption: Category;
	Observables    []*objects.Observable                    `protobuf:"bytes,25,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                        // Caption: Observables;
	TypeName       string                                   `protobuf:"bytes,26,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                              // Caption: Type Name;
	StatusDetail   string                                   `protobuf:"bytes,27,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                  // Caption: Status Details;
	QueryResult    string                                   `protobuf:"bytes,28,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                     // Caption: Query Result;
	Message        string                                   `protobuf:"bytes,29,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                // Caption: Message;
	Severity       string                                   `protobuf:"bytes,30,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                              // Caption: Severity;
	Device         *objects.Device                          `protobuf:"bytes,31,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                  // Caption: Device; Profile: host;
	SeverityId     enums.REGISTRY_KEY_QUERY_SEVERITY_ID     `protobuf:"varint,32,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	Actor          *objects.Actor                           `protobuf:"bytes,33,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                    // Caption: Actor; Profile: host;
	StartTime      int64                                    `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                          // Caption: Start Time;
}

func (x *RegistryKeyQuery) Reset() {
	*x = RegistryKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryKeyQuery) ProtoMessage() {}

func (x *RegistryKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryKeyQuery.ProtoReflect.Descriptor instead.
func (*RegistryKeyQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{5}
}

func (x *RegistryKeyQuery) GetClassUid() enums.REGISTRY_KEY_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_KEY_QUERY_CLASS_UID(0)
}

func (x *RegistryKeyQuery) GetCategoryUid() enums.REGISTRY_KEY_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_KEY_QUERY_CATEGORY_UID(0)
}

func (x *RegistryKeyQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryKeyQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryKeyQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryKeyQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RegistryKeyQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryKeyQuery) GetTypeUid() enums.REGISTRY_KEY_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_KEY_QUERY_TYPE_UID(0)
}

func (x *RegistryKeyQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegistryKeyQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryKeyQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryKeyQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryKeyQuery) GetStatusId() enums.REGISTRY_KEY_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_KEY_QUERY_STATUS_ID(0)
}

func (x *RegistryKeyQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryKeyQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryKeyQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryKeyQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *RegistryKeyQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryKeyQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryKeyQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RegistryKeyQuery) GetQueryResultId() enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID(0)
}

func (x *RegistryKeyQuery) GetActivityId() enums.REGISTRY_KEY_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_KEY_QUERY_ACTIVITY_ID(0)
}

func (x *RegistryKeyQuery) GetRegKey() *objects.RegKey {
	if x != nil {
		return x.RegKey
	}
	return nil
}

func (x *RegistryKeyQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryKeyQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryKeyQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryKeyQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryKeyQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *RegistryKeyQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryKeyQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryKeyQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RegistryKeyQuery) GetSeverityId() enums.REGISTRY_KEY_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_KEY_QUERY_SEVERITY_ID(0)
}

func (x *RegistryKeyQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryKeyQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Event: discovery
// Event UID: 12
// URL: https://schema.ocsf.io/1.2.0/classes/network_connection_query
type NetworkConnectionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryResult    string                                         `protobuf:"bytes,1,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                            // Caption: Query Result;
	EndTime        int64                                          `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                       // Caption: End Time;
	Message        string                                         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                       // Caption: Message;
	Metadata       *objects.Metadata                              `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                                     // Caption: Metadata;
	StateId        enums.NETWORK_CONNECTION_QUERY_STATE_ID        `protobuf:"varint,5,opt,name=state_id,json=stateId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATE_ID" json:"state_id,omitempty"`                             // Caption: State ID;
	StatusCode     string                                         `protobuf:"bytes,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                               // Caption: Status Code;
	RawData        string                                         `protobuf:"bytes,7,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                        // Caption: Raw Data;
	StartTime      int64                                          `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                                 // Caption: Start Time;
	TypeName       string                                         `protobuf:"bytes,9,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                                     // Caption: Type Name;
	Count          int32                                          `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                         // Caption: Count;
	Observables    []*objects.Observable                          `protobuf:"bytes,11,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                              // Caption: Observables;
	Enrichments    []*objects.Enrichment                          `protobuf:"bytes,12,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                              // Caption: Enrichments;
	ClassUid       enums.NETWORK_CONNECTION_QUERY_CLASS_UID       `protobuf:"varint,13,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	TimezoneOffset int32                                          `protobuf:"varint,14,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                                 // Caption: Timezone Offset;
	Severity       string                                         `protobuf:"bytes,15,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                    // Caption: Severity;
	StatusId       enums.NETWORK_CONNECTION_QUERY_STATUS_ID       `protobuf:"varint,16,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	CategoryUid    enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID    `protobuf:"varint,17,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	TypeUid        enums.NETWORK_CONNECTION_QUERY_TYPE_UID        `protobuf:"varint,18,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	Api            *objects.Api                                   `protobuf:"bytes,19,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                              // Profile: cloud; Caption: API Details;
	ActivityId     enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID     `protobuf:"varint,20,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	State          string                                         `protobuf:"bytes,21,opt,name=state,proto3" json:"state,omitempty"`                                                                                                                          // Caption: State;
	Status         string                                         `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                        // Caption: Status;
	CategoryName   string                                         `protobuf:"bytes,23,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                        // Caption: Category;
	ActivityName   string                                         `protobuf:"bytes,24,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                        // Caption: Activity;
	Time           int64                                          `protobuf:"varint,25,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                           // Caption: Event Time;
	Actor          *objects.Actor                                 `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                          // Caption: Actor; Profile: host;
	Duration       int32                                          `protobuf:"varint,27,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                   // Caption: Duration;
	Cloud          *objects.Cloud                                 `protobuf:"bytes,28,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                          // Profile: cloud; Caption: Cloud;
	QueryResultId  enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID `protobuf:"varint,29,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	QueryInfo      *objects.QueryInfo                             `protobuf:"bytes,30,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                                 // Caption: Query Info;
	SeverityId     enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID     `protobuf:"varint,31,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	ConnectionInfo *objects.NetworkConnectionInfo                 `protobuf:"bytes,32,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                                  // Caption: Connection Info;
	Process        *objects.Process                               `protobuf:"bytes,33,opt,name=process,proto3" json:"process,omitempty"`                                                                                                                      // Caption: Process;
	StatusDetail   string                                         `protobuf:"bytes,34,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                        // Caption: Status Details;
	ClassName      string                                         `protobuf:"bytes,35,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                                 // Caption: Class;
	Unmapped       *objects.Object                                `protobuf:"bytes,36,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                    // Caption: Unmapped Data;
	Device         *objects.Device                                `protobuf:"bytes,37,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                        // Caption: Device; Profile: host;
}

func (x *NetworkConnectionQuery) Reset() {
	*x = NetworkConnectionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConnectionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConnectionQuery) ProtoMessage() {}

func (x *NetworkConnectionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConnectionQuery.ProtoReflect.Descriptor instead.
func (*NetworkConnectionQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkConnectionQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *NetworkConnectionQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NetworkConnectionQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NetworkConnectionQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkConnectionQuery) GetStateId() enums.NETWORK_CONNECTION_QUERY_STATE_ID {
	if x != nil {
		return x.StateId
	}
	return enums.NETWORK_CONNECTION_QUERY_STATE_ID(0)
}

func (x *NetworkConnectionQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *NetworkConnectionQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *NetworkConnectionQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NetworkConnectionQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NetworkConnectionQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NetworkConnectionQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *NetworkConnectionQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *NetworkConnectionQuery) GetClassUid() enums.NETWORK_CONNECTION_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.NETWORK_CONNECTION_QUERY_CLASS_UID(0)
}

func (x *NetworkConnectionQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *NetworkConnectionQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *NetworkConnectionQuery) GetStatusId() enums.NETWORK_CONNECTION_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.NETWORK_CONNECTION_QUERY_STATUS_ID(0)
}

func (x *NetworkConnectionQuery) GetCategoryUid() enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID(0)
}

func (x *NetworkConnectionQuery) GetTypeUid() enums.NETWORK_CONNECTION_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.NETWORK_CONNECTION_QUERY_TYPE_UID(0)
}

func (x *NetworkConnectionQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *NetworkConnectionQuery) GetActivityId() enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID(0)
}

func (x *NetworkConnectionQuery) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NetworkConnectionQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkConnectionQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *NetworkConnectionQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *NetworkConnectionQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworkConnectionQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *NetworkConnectionQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetworkConnectionQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *NetworkConnectionQuery) GetQueryResultId() enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID(0)
}

func (x *NetworkConnectionQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *NetworkConnectionQuery) GetSeverityId() enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID(0)
}

func (x *NetworkConnectionQuery) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *NetworkConnectionQuery) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *NetworkConnectionQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *NetworkConnectionQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *NetworkConnectionQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *NetworkConnectionQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// Event UID: 19
// URL: https://schema.ocsf.io/1.2.0/classes/prefetch_query
// Event: discovery
type PrefetchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity       string                               `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                           // Caption: Severity;
	Name           string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                   // Caption: Name;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,3,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                     // Caption: Enrichments;
	Actor          *objects.Actor                       `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                 // Caption: Actor; Profile: host;
	StatusDetail   string                               `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                               // Caption: Status Details;
	EndTime        int64                                `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                             // Caption: End Time;
	Count          int32                                `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                // Caption: Count;
	ActivityId     enums.PREFETCH_QUERY_ACTIVITY_ID     `protobuf:"varint,8,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                 // Caption: Activity ID;
	SeverityId     enums.PREFETCH_QUERY_SEVERITY_ID     `protobuf:"varint,9,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                 // Caption: Severity ID;
	StartTime      int64                                `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                      // Caption: Start Time;
	ClassUid       enums.PREFETCH_QUERY_CLASS_UID       `protobuf:"varint,11,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	CategoryUid    enums.PREFETCH_QUERY_CATEGORY_UID    `protobuf:"varint,12,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	CategoryName   string                               `protobuf:"bytes,13,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                              // Caption: Category;
	ClassName      string                               `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                       // Caption: Class;
	QueryInfo      *objects.QueryInfo                   `protobuf:"bytes,15,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                       // Caption: Query Info;
	ActivityName   string                               `protobuf:"bytes,16,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                              // Caption: Activity;
	Status         string                               `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`                                                                                                              // Caption: Status;
	Message        string                               `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                                            // Caption: Message;
	LastRunTime    int64                                `protobuf:"varint,19,opt,name=last_run_time,json=lastRunTime,proto3" json:"last_run_time,omitempty"`                                                                              // Caption: Last Run;
	RunCount       int32                                `protobuf:"varint,20,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`                                                                                         // Caption: Run Count;
	Device         *objects.Device                      `protobuf:"bytes,21,opt,name=device,proto3" json:"device,omitempty"`                                                                                                              // Caption: Device; Profile: host;
	QueryResultId  enums.PREFETCH_QUERY_QUERY_RESULT_ID `protobuf:"varint,22,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	StatusId       enums.PREFETCH_QUERY_STATUS_ID       `protobuf:"varint,23,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Metadata       *objects.Metadata                    `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                          // Caption: Metadata;
	Observables    []*objects.Observable                `protobuf:"bytes,25,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                    // Caption: Observables;
	Unmapped       *objects.Object                      `protobuf:"bytes,26,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                          // Caption: Unmapped Data;
	Api            *objects.Api                         `protobuf:"bytes,27,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                    // Caption: API Details; Profile: cloud;
	Time           int64                                `protobuf:"varint,28,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                 // Caption: Event Time;
	QueryResult    string                               `protobuf:"bytes,29,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                 // Caption: Query Result;
	RawData        string                               `protobuf:"bytes,30,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                             // Caption: Raw Data;
	TypeName       string                               `protobuf:"bytes,31,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                          // Caption: Type Name;
	TypeUid        enums.PREFETCH_QUERY_TYPE_UID        `protobuf:"varint,32,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	TimezoneOffset int32                                `protobuf:"varint,33,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                       // Caption: Timezone Offset;
	StatusCode     string                               `protobuf:"bytes,34,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                    // Caption: Status Code;
	Cloud          *objects.Cloud                       `protobuf:"bytes,35,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                // Profile: cloud; Caption: Cloud;
	Duration       int32                                `protobuf:"varint,36,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                         // Caption: Duration;
}

func (x *PrefetchQuery) Reset() {
	*x = PrefetchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefetchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefetchQuery) ProtoMessage() {}

func (x *PrefetchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefetchQuery.ProtoReflect.Descriptor instead.
func (*PrefetchQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{7}
}

func (x *PrefetchQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PrefetchQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrefetchQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *PrefetchQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *PrefetchQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PrefetchQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PrefetchQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PrefetchQuery) GetActivityId() enums.PREFETCH_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PREFETCH_QUERY_ACTIVITY_ID(0)
}

func (x *PrefetchQuery) GetSeverityId() enums.PREFETCH_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PREFETCH_QUERY_SEVERITY_ID(0)
}

func (x *PrefetchQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PrefetchQuery) GetClassUid() enums.PREFETCH_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PREFETCH_QUERY_CLASS_UID(0)
}

func (x *PrefetchQuery) GetCategoryUid() enums.PREFETCH_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PREFETCH_QUERY_CATEGORY_UID(0)
}

func (x *PrefetchQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PrefetchQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PrefetchQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *PrefetchQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PrefetchQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PrefetchQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PrefetchQuery) GetLastRunTime() int64 {
	if x != nil {
		return x.LastRunTime
	}
	return 0
}

func (x *PrefetchQuery) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *PrefetchQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PrefetchQuery) GetQueryResultId() enums.PREFETCH_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.PREFETCH_QUERY_QUERY_RESULT_ID(0)
}

func (x *PrefetchQuery) GetStatusId() enums.PREFETCH_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PREFETCH_QUERY_STATUS_ID(0)
}

func (x *PrefetchQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PrefetchQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *PrefetchQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *PrefetchQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PrefetchQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PrefetchQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *PrefetchQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *PrefetchQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PrefetchQuery) GetTypeUid() enums.PREFETCH_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PREFETCH_QUERY_TYPE_UID(0)
}

func (x *PrefetchQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *PrefetchQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PrefetchQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *PrefetchQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event: discovery
// Event UID: 3
// URL: https://schema.ocsf.io/1.2.0/classes/user_inventory
type UserInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observables    []*objects.Observable             `protobuf:"bytes,1,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                         // Caption: Observables;
	Severity       string                            `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                               // Caption: Severity;
	Actor          *objects.Actor                    `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                     // Caption: Actor;
	ClassUid       enums.USER_INVENTORY_CLASS_UID    `protobuf:"varint,4,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Duration       int32                             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                              // Caption: Duration;
	CategoryUid    enums.USER_INVENTORY_CATEGORY_UID `protobuf:"varint,6,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	ClassName      string                            `protobuf:"bytes,7,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                            // Caption: Class;
	Time           int64                             `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`                                                                                                      // Caption: Event Time;
	Status         string                            `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // Caption: Status;
	EndTime        int64                             `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                // Caption: End Time;
	TypeUid        enums.USER_INVENTORY_TYPE_UID     `protobuf:"varint,11,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	Count          int32                             `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`                                                                                                   // Caption: Count;
	SeverityId     enums.USER_INVENTORY_SEVERITY_ID  `protobuf:"varint,13,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID" json:"severity_id,omitempty"`    // Caption: Severity ID;
	Metadata       *objects.Metadata                 `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                              // Caption: Metadata;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,15,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                        // Caption: Enrichments;
	StatusDetail   string                            `protobuf:"bytes,16,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                  // Caption: Status Details;
	StatusId       enums.USER_INVENTORY_STATUS_ID    `protobuf:"varint,17,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	RawData        string                            `protobuf:"bytes,18,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                 // Caption: Raw Data;
	User           *objects.User                     `protobuf:"bytes,19,opt,name=user,proto3" json:"user,omitempty"`                                                                                                      // Caption: User;
	Cloud          *objects.Cloud                    `protobuf:"bytes,20,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                    // Profile: cloud; Caption: Cloud;
	StartTime      int64                             `protobuf:"varint,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                          // Caption: Start Time;
	CategoryName   string                            `protobuf:"bytes,22,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                  // Caption: Category;
	Api            *objects.Api                      `protobuf:"bytes,23,opt,name=api,proto3" json:"api,omitempty"`                                                                                                        // Caption: API Details; Profile: cloud;
	Message        string                            `protobuf:"bytes,24,opt,name=message,proto3" json:"message,omitempty"`                                                                                                // Caption: Message;
	StatusCode     string                            `protobuf:"bytes,25,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                        // Caption: Status Code;
	TypeName       string                            `protobuf:"bytes,26,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                              // Caption: Type Name;
	TimezoneOffset int32                             `protobuf:"varint,27,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                           // Caption: Timezone Offset;
	ActivityId     enums.USER_INVENTORY_ACTIVITY_ID  `protobuf:"varint,28,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	ActivityName   string                            `protobuf:"bytes,29,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                  // Caption: Activity;
	Unmapped       *objects.Object                   `protobuf:"bytes,30,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                              // Caption: Unmapped Data;
}

func (x *UserInventory) Reset() {
	*x = UserInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventory) ProtoMessage() {}

func (x *UserInventory) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventory.ProtoReflect.Descriptor instead.
func (*UserInventory) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{8}
}

func (x *UserInventory) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *UserInventory) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *UserInventory) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *UserInventory) GetClassUid() enums.USER_INVENTORY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.USER_INVENTORY_CLASS_UID(0)
}

func (x *UserInventory) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserInventory) GetCategoryUid() enums.USER_INVENTORY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.USER_INVENTORY_CATEGORY_UID(0)
}

func (x *UserInventory) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *UserInventory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserInventory) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserInventory) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserInventory) GetTypeUid() enums.USER_INVENTORY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.USER_INVENTORY_TYPE_UID(0)
}

func (x *UserInventory) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserInventory) GetSeverityId() enums.USER_INVENTORY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.USER_INVENTORY_SEVERITY_ID(0)
}

func (x *UserInventory) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserInventory) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *UserInventory) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *UserInventory) GetStatusId() enums.USER_INVENTORY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.USER_INVENTORY_STATUS_ID(0)
}

func (x *UserInventory) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *UserInventory) GetUser() *objects.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserInventory) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *UserInventory) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserInventory) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UserInventory) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *UserInventory) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserInventory) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *UserInventory) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UserInventory) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *UserInventory) GetActivityId() enums.USER_INVENTORY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.USER_INVENTORY_ACTIVITY_ID(0)
}

func (x *UserInventory) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *UserInventory) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

// Event: discovery
// Event UID: 2
// URL: https://schema.ocsf.io/1.2.0/classes/config_state
type ConfigState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime          int64                           `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                         // Caption: Start Time;
	StatusId           enums.CONFIG_STATE_STATUS_ID    `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Severity           string                          `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                             // Caption: Severity;
	Unmapped           *objects.Object                 `protobuf:"bytes,4,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                             // Caption: Unmapped Data;
	Enrichments        []*objects.Enrichment           `protobuf:"bytes,5,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
	CategoryUid        enums.CONFIG_STATE_CATEGORY_UID `protobuf:"varint,6,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	TimezoneOffset     int32                           `protobuf:"varint,7,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                          // Caption: Timezone Offset;
	ClassName          string                          `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                          // Caption: Class;
	Status             string                          `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                                                                                                 // Caption: Status;
	Observables        []*objects.Observable           `protobuf:"bytes,10,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	RawData            string                          `protobuf:"bytes,11,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	TypeName           string                          `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	Time               int64                           `protobuf:"varint,13,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	Count              int32                           `protobuf:"varint,14,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	Metadata           *objects.Metadata               `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	StatusDetail       string                          `protobuf:"bytes,16,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                // Caption: Status Details;
	CategoryName       string                          `protobuf:"bytes,17,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	ActivityId         enums.CONFIG_STATE_ACTIVITY_ID  `protobuf:"varint,18,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	SeverityId         enums.CONFIG_STATE_SEVERITY_ID  `protobuf:"varint,19,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID" json:"severity_id,omitempty"`    // Caption: Severity ID;
	StatusCode         string                          `protobuf:"bytes,20,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
	Duration           int32                           `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                           // Caption: Duration;
	Actor              *objects.Actor                  `protobuf:"bytes,22,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                  // Caption: Actor;
	Cloud              *objects.Cloud                  `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	ActivityName       string                          `protobuf:"bytes,24,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	Message            string                          `protobuf:"bytes,25,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	TypeUid            enums.CONFIG_STATE_TYPE_UID     `protobuf:"varint,26,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	CisBenchmarkResult *objects.CisBenchmarkResult     `protobuf:"bytes,27,opt,name=cis_benchmark_result,json=cisBenchmarkResult,proto3" json:"cis_benchmark_result,omitempty"`                                            // Caption: CIS Benchmark Result;
	Api                *objects.Api                    `protobuf:"bytes,28,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Caption: API Details; Profile: cloud;
	ClassUid           enums.CONFIG_STATE_CLASS_UID    `protobuf:"varint,29,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CLASS_UID" json:"class_uid,omitempty"`            // Caption: Class ID;
	Device             *objects.Device                 `protobuf:"bytes,30,opt,name=device,proto3" json:"device,omitempty"`                                                                                                // Caption: Device;
	EndTime            int64                           `protobuf:"varint,31,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                              // Caption: End Time;
}

func (x *ConfigState) Reset() {
	*x = ConfigState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigState) ProtoMessage() {}

func (x *ConfigState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigState.ProtoReflect.Descriptor instead.
func (*ConfigState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ConfigState) GetStatusId() enums.CONFIG_STATE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.CONFIG_STATE_STATUS_ID(0)
}

func (x *ConfigState) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ConfigState) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ConfigState) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ConfigState) GetCategoryUid() enums.CONFIG_STATE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.CONFIG_STATE_CATEGORY_UID(0)
}

func (x *ConfigState) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ConfigState) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ConfigState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConfigState) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ConfigState) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ConfigState) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ConfigState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ConfigState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfigState) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConfigState) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ConfigState) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ConfigState) GetActivityId() enums.CONFIG_STATE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.CONFIG_STATE_ACTIVITY_ID(0)
}

func (x *ConfigState) GetSeverityId() enums.CONFIG_STATE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.CONFIG_STATE_SEVERITY_ID(0)
}

func (x *ConfigState) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ConfigState) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ConfigState) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ConfigState) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ConfigState) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ConfigState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigState) GetTypeUid() enums.CONFIG_STATE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.CONFIG_STATE_TYPE_UID(0)
}

func (x *ConfigState) GetCisBenchmarkResult() *objects.CisBenchmarkResult {
	if x != nil {
		return x.CisBenchmarkResult
	}
	return nil
}

func (x *ConfigState) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ConfigState) GetClassUid() enums.CONFIG_STATE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.CONFIG_STATE_CLASS_UID(0)
}

func (x *ConfigState) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ConfigState) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// URL: https://schema.ocsf.io/1.2.0/classes/kernel_object_query
// Event: discovery
// Event UID: 6
type KernelObjectQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityId     enums.KERNEL_OBJECT_QUERY_SEVERITY_ID     `protobuf:"varint,1,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                 // Caption: Severity ID;
	StatusCode     string                                    `protobuf:"bytes,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                          // Caption: Status Code;
	Unmapped       *objects.Object                           `protobuf:"bytes,3,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                // Caption: Unmapped Data;
	Severity       string                                    `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                // Caption: Severity;
	Device         *objects.Device                           `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                    // Caption: Device; Profile: host;
	ActivityId     enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID     `protobuf:"varint,6,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                 // Caption: Activity ID;
	Enrichments    []*objects.Enrichment                     `protobuf:"bytes,7,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                          // Caption: Enrichments;
	StartTime      int64                                     `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                            // Caption: Start Time;
	ClassUid       enums.KERNEL_OBJECT_QUERY_CLASS_UID       `protobuf:"varint,9,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	Status         string                                    `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                   // Caption: Status;
	Message        string                                    `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                 // Caption: Message;
	RawData        string                                    `protobuf:"bytes,12,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                  // Caption: Raw Data;
	EndTime        int64                                     `protobuf:"varint,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                 // Caption: End Time;
	Count          int32                                     `protobuf:"varint,14,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                    // Caption: Count;
	CategoryName   string                                    `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                   // Caption: Category;
	QueryInfo      *objects.QueryInfo                        `protobuf:"bytes,16,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                            // Caption: Query Info;
	Actor          *objects.Actor                            `protobuf:"bytes,17,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                     // Caption: Actor; Profile: host;
	StatusId       enums.KERNEL_OBJECT_QUERY_STATUS_ID       `protobuf:"varint,18,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	CategoryUid    enums.KERNEL_OBJECT_QUERY_CATEGORY_UID    `protobuf:"varint,19,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Metadata       *objects.Metadata                         `protobuf:"bytes,20,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                               // Caption: Metadata;
	ActivityName   string                                    `protobuf:"bytes,21,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                   // Caption: Activity;
	QueryResultId  enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID `protobuf:"varint,22,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	Duration       int32                                     `protobuf:"varint,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                              // Caption: Duration;
	StatusDetail   string                                    `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                   // Caption: Status Details;
	QueryResult    string                                    `protobuf:"bytes,25,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                      // Caption: Query Result;
	Observables    []*objects.Observable                     `protobuf:"bytes,26,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                         // Caption: Observables;
	ClassName      string                                    `protobuf:"bytes,27,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                            // Caption: Class;
	Kernel         *objects.Kernel                           `protobuf:"bytes,28,opt,name=kernel,proto3" json:"kernel,omitempty"`                                                                                                                   // Caption: Kernel;
	Cloud          *objects.Cloud                            `protobuf:"bytes,29,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                     // Profile: cloud; Caption: Cloud;
	TypeUid        enums.KERNEL_OBJECT_QUERY_TYPE_UID        `protobuf:"varint,30,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	Api            *objects.Api                              `protobuf:"bytes,31,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                         // Caption: API Details; Profile: cloud;
	Time           int64                                     `protobuf:"varint,32,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                      // Caption: Event Time;
	TypeName       string                                    `protobuf:"bytes,33,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                               // Caption: Type Name;
	TimezoneOffset int32                                     `protobuf:"varint,34,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                            // Caption: Timezone Offset;
}

func (x *KernelObjectQuery) Reset() {
	*x = KernelObjectQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelObjectQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelObjectQuery) ProtoMessage() {}

func (x *KernelObjectQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelObjectQuery.ProtoReflect.Descriptor instead.
func (*KernelObjectQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{10}
}

func (x *KernelObjectQuery) GetSeverityId() enums.KERNEL_OBJECT_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.KERNEL_OBJECT_QUERY_SEVERITY_ID(0)
}

func (x *KernelObjectQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *KernelObjectQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *KernelObjectQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *KernelObjectQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *KernelObjectQuery) GetActivityId() enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID(0)
}

func (x *KernelObjectQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *KernelObjectQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KernelObjectQuery) GetClassUid() enums.KERNEL_OBJECT_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.KERNEL_OBJECT_QUERY_CLASS_UID(0)
}

func (x *KernelObjectQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KernelObjectQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KernelObjectQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *KernelObjectQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KernelObjectQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KernelObjectQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *KernelObjectQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *KernelObjectQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *KernelObjectQuery) GetStatusId() enums.KERNEL_OBJECT_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.KERNEL_OBJECT_QUERY_STATUS_ID(0)
}

func (x *KernelObjectQuery) GetCategoryUid() enums.KERNEL_OBJECT_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.KERNEL_OBJECT_QUERY_CATEGORY_UID(0)
}

func (x *KernelObjectQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KernelObjectQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *KernelObjectQuery) GetQueryResultId() enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID(0)
}

func (x *KernelObjectQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *KernelObjectQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *KernelObjectQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *KernelObjectQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *KernelObjectQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *KernelObjectQuery) GetKernel() *objects.Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *KernelObjectQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *KernelObjectQuery) GetTypeUid() enums.KERNEL_OBJECT_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.KERNEL_OBJECT_QUERY_TYPE_UID(0)
}

func (x *KernelObjectQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *KernelObjectQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KernelObjectQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *KernelObjectQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

// Event: discovery
// Event UID: 7
// URL: https://schema.ocsf.io/1.2.0/classes/file_query
type FileQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64                            `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`                                                                                                              // Caption: Event Time;
	RawData        string                           `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                          // Caption: Raw Data;
	Observables    []*objects.Observable            `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                 // Caption: Observables;
	File           *objects.File                    `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`                                                                                                               // Caption: File;
	Api            *objects.Api                     `protobuf:"bytes,5,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                 // Profile: cloud; Caption: API Details;
	QueryInfo      *objects.QueryInfo               `protobuf:"bytes,6,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                    // Caption: Query Info;
	StatusId       enums.FILE_QUERY_STATUS_ID       `protobuf:"varint,7,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_STATUS_ID" json:"status_id,omitempty"`                         // Caption: Status ID;
	Metadata       *objects.Metadata                `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                       // Caption: Metadata;
	Unmapped       *objects.Object                  `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                       // Caption: Unmapped Data;
	QueryResult    string                           `protobuf:"bytes,10,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                             // Caption: Query Result;
	Status         string                           `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`                                                                                                          // Caption: Status;
	TypeName       string                           `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                      // Caption: Type Name;
	TypeUid        enums.FILE_QUERY_TYPE_UID        `protobuf:"varint,13,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	ClassName      string                           `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                   // Caption: Class;
	Device         *objects.Device                  `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`                                                                                                          // Caption: Device; Profile: host;
	Enrichments    []*objects.Enrichment            `protobuf:"bytes,16,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                // Caption: Enrichments;
	Actor          *objects.Actor                   `protobuf:"bytes,17,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                            // Caption: Actor; Profile: host;
	StatusDetail   string                           `protobuf:"bytes,18,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                          // Caption: Status Details;
	TimezoneOffset int32                            `protobuf:"varint,19,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                   // Caption: Timezone Offset;
	QueryResultId  enums.FILE_QUERY_QUERY_RESULT_ID `protobuf:"varint,20,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	ActivityName   string                           `protobuf:"bytes,21,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                          // Caption: Activity;
	EndTime        int64                            `protobuf:"varint,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                        // Caption: End Time;
	Count          int32                            `protobuf:"varint,23,opt,name=count,proto3" json:"count,omitempty"`                                                                                                           // Caption: Count;
	Severity       string                           `protobuf:"bytes,24,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                      // Caption: Severity;
	ActivityId     enums.FILE_QUERY_ACTIVITY_ID     `protobuf:"varint,25,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	StatusCode     string                           `protobuf:"bytes,26,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                // Caption: Status Code;
	Cloud          *objects.Cloud                   `protobuf:"bytes,27,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                            // Caption: Cloud; Profile: cloud;
	CategoryName   string                           `protobuf:"bytes,28,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                          // Caption: Category;
	ClassUid       enums.FILE_QUERY_CLASS_UID       `protobuf:"varint,29,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	CategoryUid    enums.FILE_QUERY_CATEGORY_UID    `protobuf:"varint,30,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Message        string                           `protobuf:"bytes,31,opt,name=message,proto3" json:"message,omitempty"`                                                                                                        // Caption: Message;
	SeverityId     enums.FILE_QUERY_SEVERITY_ID     `protobuf:"varint,32,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	StartTime      int64                            `protobuf:"varint,33,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                  // Caption: Start Time;
	Duration       int32                            `protobuf:"varint,34,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                     // Caption: Duration;
}

func (x *FileQuery) Reset() {
	*x = FileQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileQuery) ProtoMessage() {}

func (x *FileQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileQuery.ProtoReflect.Descriptor instead.
func (*FileQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{11}
}

func (x *FileQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FileQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *FileQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *FileQuery) GetFile() *objects.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *FileQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *FileQuery) GetStatusId() enums.FILE_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FILE_QUERY_STATUS_ID(0)
}

func (x *FileQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *FileQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *FileQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FileQuery) GetTypeUid() enums.FILE_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.FILE_QUERY_TYPE_UID(0)
}

func (x *FileQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FileQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *FileQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *FileQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FileQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *FileQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *FileQuery) GetQueryResultId() enums.FILE_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.FILE_QUERY_QUERY_RESULT_ID(0)
}

func (x *FileQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *FileQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FileQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FileQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *FileQuery) GetActivityId() enums.FILE_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FILE_QUERY_ACTIVITY_ID(0)
}

func (x *FileQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *FileQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *FileQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *FileQuery) GetClassUid() enums.FILE_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FILE_QUERY_CLASS_UID(0)
}

func (x *FileQuery) GetCategoryUid() enums.FILE_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FILE_QUERY_CATEGORY_UID(0)
}

func (x *FileQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FileQuery) GetSeverityId() enums.FILE_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FILE_QUERY_SEVERITY_ID(0)
}

func (x *FileQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FileQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event UID: 16
// URL: https://schema.ocsf.io/1.2.0/classes/service_query
// Event: discovery
type ServiceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUid        enums.SERVICE_QUERY_TYPE_UID        `protobuf:"varint,1,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_TYPE_UID" json:"type_uid,omitempty"`                             // Caption: Type ID;
	Status         string                              `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                                                              // Caption: Status;
	ClassUid       enums.SERVICE_QUERY_CLASS_UID       `protobuf:"varint,3,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	StatusId       enums.SERVICE_QUERY_STATUS_ID       `protobuf:"varint,4,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_STATUS_ID" json:"status_id,omitempty"`                         // Caption: Status ID;
	Observables    []*objects.Observable               `protobuf:"bytes,5,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                    // Caption: Observables;
	QueryInfo      *objects.QueryInfo                  `protobuf:"bytes,6,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                       // Caption: Query Info;
	ActivityName   string                              `protobuf:"bytes,7,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                              // Caption: Activity;
	Count          int32                               `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`                                                                                                               // Caption: Count;
	Duration       int32                               `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                         // Caption: Duration;
	Severity       string                              `protobuf:"bytes,10,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                         // Caption: Severity;
	Time           int64                               `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                // Caption: Event Time;
	QueryResult    string                              `protobuf:"bytes,12,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                // Caption: Query Result;
	Cloud          *objects.Cloud                      `protobuf:"bytes,13,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                               // Caption: Cloud; Profile: cloud;
	EndTime        int64                               `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                           // Caption: End Time;
	CategoryUid    enums.SERVICE_QUERY_CATEGORY_UID    `protobuf:"varint,15,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Unmapped       *objects.Object                     `protobuf:"bytes,16,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	QueryResultId  enums.SERVICE_QUERY_QUERY_RESULT_ID `protobuf:"varint,17,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	Device         *objects.Device                     `protobuf:"bytes,18,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	StatusDetail   string                              `protobuf:"bytes,19,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	ActivityId     enums.SERVICE_QUERY_ACTIVITY_ID     `protobuf:"varint,20,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	SeverityId     enums.SERVICE_QUERY_SEVERITY_ID     `protobuf:"varint,21,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	Actor          *objects.Actor                      `protobuf:"bytes,22,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor; Profile: host;
	StatusCode     string                              `protobuf:"bytes,23,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	Metadata       *objects.Metadata                   `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                         // Caption: Metadata;
	CategoryName   string                              `protobuf:"bytes,25,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                             // Caption: Category;
	TimezoneOffset int32                               `protobuf:"varint,26,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                      // Caption: Timezone Offset;
	ClassName      string                              `protobuf:"bytes,27,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                      // Caption: Class;
	RawData        string                              `protobuf:"bytes,28,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
	Message        string                              `protobuf:"bytes,29,opt,name=message,proto3" json:"message,omitempty"`                                                                                                           // Caption: Message;
	TypeName       string                              `protobuf:"bytes,30,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	Service        *objects.Service                    `protobuf:"bytes,31,opt,name=service,proto3" json:"service,omitempty"`                                                                                                           // Caption: Service;
	Api            *objects.Api                        `protobuf:"bytes,32,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                   // Caption: API Details; Profile: cloud;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,33,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                   // Caption: Enrichments;
	StartTime      int64                               `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
}

func (x *ServiceQuery) Reset() {
	*x = ServiceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceQuery) ProtoMessage() {}

func (x *ServiceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceQuery.ProtoReflect.Descriptor instead.
func (*ServiceQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceQuery) GetTypeUid() enums.SERVICE_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SERVICE_QUERY_TYPE_UID(0)
}

func (x *ServiceQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServiceQuery) GetClassUid() enums.SERVICE_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SERVICE_QUERY_CLASS_UID(0)
}

func (x *ServiceQuery) GetStatusId() enums.SERVICE_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SERVICE_QUERY_STATUS_ID(0)
}

func (x *ServiceQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ServiceQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *ServiceQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ServiceQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ServiceQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ServiceQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ServiceQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *ServiceQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ServiceQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ServiceQuery) GetCategoryUid() enums.SERVICE_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SERVICE_QUERY_CATEGORY_UID(0)
}

func (x *ServiceQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ServiceQuery) GetQueryResultId() enums.SERVICE_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.SERVICE_QUERY_QUERY_RESULT_ID(0)
}

func (x *ServiceQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ServiceQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ServiceQuery) GetActivityId() enums.SERVICE_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SERVICE_QUERY_ACTIVITY_ID(0)
}

func (x *ServiceQuery) GetSeverityId() enums.SERVICE_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SERVICE_QUERY_SEVERITY_ID(0)
}

func (x *ServiceQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ServiceQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ServiceQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ServiceQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ServiceQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ServiceQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ServiceQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ServiceQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServiceQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ServiceQuery) GetService() *objects.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ServiceQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ServiceQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ServiceQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Event: discovery
// Event UID: 13
// URL: https://schema.ocsf.io/1.2.0/classes/networks_query
type NetworksQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName         string                               `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                        // Caption: Class;
	Unmapped          *objects.Object                      `protobuf:"bytes,2,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                           // Caption: Unmapped Data;
	Device            *objects.Device                      `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`                                                                                                               // Caption: Device; Profile: host;
	TypeName          string                               `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                           // Caption: Type Name;
	ActivityId        enums.NETWORKS_QUERY_ACTIVITY_ID     `protobuf:"varint,5,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                 // Caption: Activity ID;
	Actor             *objects.Actor                       `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                 // Caption: Actor; Profile: host;
	RawData           string                               `protobuf:"bytes,7,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                              // Caption: Raw Data;
	NetworkInterfaces []*objects.NetworkInterface          `protobuf:"bytes,8,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`                                                                // Caption: Network Interfaces;
	Metadata          *objects.Metadata                    `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                           // Caption: Metadata;
	CategoryName      string                               `protobuf:"bytes,10,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                              // Caption: Category;
	Severity          string                               `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                          // Caption: Severity;
	Status            string                               `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`                                                                                                              // Caption: Status;
	EndTime           int64                                `protobuf:"varint,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                            // Caption: End Time;
	Api               *objects.Api                         `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                    // Profile: cloud; Caption: API Details;
	QueryInfo         *objects.QueryInfo                   `protobuf:"bytes,15,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                       // Caption: Query Info;
	Enrichments       []*objects.Enrichment                `protobuf:"bytes,16,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                    // Caption: Enrichments;
	StatusDetail      string                               `protobuf:"bytes,17,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                              // Caption: Status Details;
	Duration          int32                                `protobuf:"varint,18,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                         // Caption: Duration;
	ActivityName      string                               `protobuf:"bytes,19,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                              // Caption: Activity;
	QueryResult       string                               `protobuf:"bytes,20,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                 // Caption: Query Result;
	Cloud             *objects.Cloud                       `protobuf:"bytes,21,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                // Caption: Cloud; Profile: cloud;
	CategoryUid       enums.NETWORKS_QUERY_CATEGORY_UID    `protobuf:"varint,22,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	QueryResultId     enums.NETWORKS_QUERY_QUERY_RESULT_ID `protobuf:"varint,23,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	SeverityId        enums.NETWORKS_QUERY_SEVERITY_ID     `protobuf:"varint,24,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	StatusId          enums.NETWORKS_QUERY_STATUS_ID       `protobuf:"varint,25,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	TypeUid           enums.NETWORKS_QUERY_TYPE_UID        `protobuf:"varint,26,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	TimezoneOffset    int32                                `protobuf:"varint,27,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                       // Caption: Timezone Offset;
	Time              int64                                `protobuf:"varint,28,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                 // Caption: Event Time;
	StatusCode        string                               `protobuf:"bytes,29,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                    // Caption: Status Code;
	ClassUid          enums.NETWORKS_QUERY_CLASS_UID       `protobuf:"varint,30,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	Count             int32                                `protobuf:"varint,31,opt,name=count,proto3" json:"count,omitempty"`                                                                                                               // Caption: Count;
	Message           string                               `protobuf:"bytes,32,opt,name=message,proto3" json:"message,omitempty"`                                                                                                            // Caption: Message;
	Observables       []*objects.Observable                `protobuf:"bytes,33,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                    // Caption: Observables;
	StartTime         int64                                `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                      // Caption: Start Time;
}

func (x *NetworksQuery) Reset() {
	*x = NetworksQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworksQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksQuery) ProtoMessage() {}

func (x *NetworksQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksQuery.ProtoReflect.Descriptor instead.
func (*NetworksQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{13}
}

func (x *NetworksQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *NetworksQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *NetworksQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *NetworksQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NetworksQuery) GetActivityId() enums.NETWORKS_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.NETWORKS_QUERY_ACTIVITY_ID(0)
}

func (x *NetworksQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *NetworksQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *NetworksQuery) GetNetworkInterfaces() []*objects.NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *NetworksQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworksQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *NetworksQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *NetworksQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworksQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NetworksQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *NetworksQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *NetworksQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *NetworksQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *NetworksQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetworksQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *NetworksQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *NetworksQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *NetworksQuery) GetCategoryUid() enums.NETWORKS_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.NETWORKS_QUERY_CATEGORY_UID(0)
}

func (x *NetworksQuery) GetQueryResultId() enums.NETWORKS_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.NETWORKS_QUERY_QUERY_RESULT_ID(0)
}

func (x *NetworksQuery) GetSeverityId() enums.NETWORKS_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.NETWORKS_QUERY_SEVERITY_ID(0)
}

func (x *NetworksQuery) GetStatusId() enums.NETWORKS_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.NETWORKS_QUERY_STATUS_ID(0)
}

func (x *NetworksQuery) GetTypeUid() enums.NETWORKS_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.NETWORKS_QUERY_TYPE_UID(0)
}

func (x *NetworksQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *NetworksQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworksQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *NetworksQuery) GetClassUid() enums.NETWORKS_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.NETWORKS_QUERY_CLASS_UID(0)
}

func (x *NetworksQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NetworksQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NetworksQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *NetworksQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Event: discovery
// Event UID: 0
// URL: https://schema.ocsf.io/1.2.0/classes/discovery
type Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message        string                       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                                                                                             // Caption: Message;
	Observables    []*objects.Observable        `protobuf:"bytes,2,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                     // Caption: Observables;
	StatusId       enums.DISCOVERY_STATUS_ID    `protobuf:"varint,3,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_STATUS_ID" json:"status_id,omitempty"`              // Caption: Status ID;
	Severity       string                       `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                           // Caption: Severity;
	TypeUid        enums.DISCOVERY_TYPE_UID     `protobuf:"varint,5,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_TYPE_UID" json:"type_uid,omitempty"`                  // Caption: Type ID;
	ActivityName   string                       `protobuf:"bytes,6,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                               // Caption: Activity;
	ActivityId     enums.DISCOVERY_ACTIVITY_ID  `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID" json:"activity_id,omitempty"`      // Caption: Activity ID;
	ClassName      string                       `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                        // Caption: Class;
	Unmapped       *objects.Object              `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                           // Caption: Unmapped Data;
	SeverityId     enums.DISCOVERY_SEVERITY_ID  `protobuf:"varint,10,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	StatusCode     string                       `protobuf:"bytes,11,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                    // Caption: Status Code;
	RawData        string                       `protobuf:"bytes,12,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                             // Caption: Raw Data;
	Duration       int32                        `protobuf:"varint,13,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                         // Caption: Duration;
	Metadata       *objects.Metadata            `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                          // Caption: Metadata;
	ClassUid       enums.DISCOVERY_CLASS_UID    `protobuf:"varint,15,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	Enrichments    []*objects.Enrichment        `protobuf:"bytes,16,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                    // Caption: Enrichments;
	CategoryUid    enums.DISCOVERY_CATEGORY_UID `protobuf:"varint,17,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	StatusDetail   string                       `protobuf:"bytes,18,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                              // Caption: Status Details;
	TimezoneOffset int32                        `protobuf:"varint,19,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                       // Caption: Timezone Offset;
	Cloud          *objects.Cloud               `protobuf:"bytes,20,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                // Caption: Cloud; Profile: cloud;
	TypeName       string                       `protobuf:"bytes,21,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                          // Caption: Type Name;
	Time           int64                        `protobuf:"varint,22,opt,name=time,proto3" json:"time,omitempty"`                                                                                                 // Caption: Event Time;
	StartTime      int64                        `protobuf:"varint,23,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // Caption: Start Time;
	Status         string                       `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`                                                                                              // Caption: Status;
	Api            *objects.Api                 `protobuf:"bytes,25,opt,name=api,proto3" json:"api,omitempty"`                                                                                                    // Caption: API Details; Profile: cloud;
	EndTime        int64                        `protobuf:"varint,26,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // Caption: End Time;
	CategoryName   string                       `protobuf:"bytes,27,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                              // Caption: Category;
	Count          int32                        `protobuf:"varint,28,opt,name=count,proto3" json:"count,omitempty"`                                                                                               // Caption: Count;
}

func (x *Discovery) Reset() {
	*x = Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery) ProtoMessage() {}

func (x *Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery.ProtoReflect.Descriptor instead.
func (*Discovery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{14}
}

func (x *Discovery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Discovery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Discovery) GetStatusId() enums.DISCOVERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DISCOVERY_STATUS_ID(0)
}

func (x *Discovery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Discovery) GetTypeUid() enums.DISCOVERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DISCOVERY_TYPE_UID(0)
}

func (x *Discovery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Discovery) GetActivityId() enums.DISCOVERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DISCOVERY_ACTIVITY_ID(0)
}

func (x *Discovery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Discovery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Discovery) GetSeverityId() enums.DISCOVERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DISCOVERY_SEVERITY_ID(0)
}

func (x *Discovery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Discovery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Discovery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Discovery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Discovery) GetClassUid() enums.DISCOVERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DISCOVERY_CLASS_UID(0)
}

func (x *Discovery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Discovery) GetCategoryUid() enums.DISCOVERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DISCOVERY_CATEGORY_UID(0)
}

func (x *Discovery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Discovery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Discovery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Discovery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Discovery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Discovery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Discovery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Discovery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Discovery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Discovery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Discovery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Event: discovery
// Event UID: 14
// URL: https://schema.ocsf.io/1.2.0/classes/peripheral_device_query
type PeripheralDeviceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observables      []*objects.Observable                         `protobuf:"bytes,1,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                              // Caption: Observables;
	Enrichments      []*objects.Enrichment                         `protobuf:"bytes,2,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                              // Caption: Enrichments;
	QueryResult      string                                        `protobuf:"bytes,3,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                           // Caption: Query Result;
	Metadata         *objects.Metadata                             `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                                    // Caption: Metadata;
	TimezoneOffset   int32                                         `protobuf:"varint,5,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                                 // Caption: Timezone Offset;
	Device           *objects.Device                               `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                        // Caption: Device; Profile: host;
	StatusCode       string                                        `protobuf:"bytes,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                              // Caption: Status Code;
	Cloud            *objects.Cloud                                `protobuf:"bytes,8,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                          // Caption: Cloud; Profile: cloud;
	Severity         string                                        `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                    // Caption: Severity;
	ClassName        string                                        `protobuf:"bytes,10,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                                // Caption: Class;
	ActivityName     string                                        `protobuf:"bytes,11,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                       // Caption: Activity;
	Actor            *objects.Actor                                `protobuf:"bytes,12,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                         // Profile: host; Caption: Actor;
	StatusId         enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID       `protobuf:"varint,13,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Status           string                                        `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                       // Caption: Status;
	ClassUid         enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID       `protobuf:"varint,15,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	Duration         int32                                         `protobuf:"varint,16,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                  // Caption: Duration;
	CategoryName     string                                        `protobuf:"bytes,17,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                       // Caption: Category;
	PeripheralDevice *objects.PeripheralDevice                     `protobuf:"bytes,18,opt,name=peripheral_device,json=peripheralDevice,proto3" json:"peripheral_device,omitempty"`                                                                           // Caption: Peripheral Device;
	TypeName         string                                        `protobuf:"bytes,19,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                                   // Caption: Type Name;
	EndTime          int64                                         `protobuf:"varint,20,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                     // Caption: End Time;
	Time             int64                                         `protobuf:"varint,21,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                          // Caption: Event Time;
	SeverityId       enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID     `protobuf:"varint,22,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	QueryInfo        *objects.QueryInfo                            `protobuf:"bytes,23,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                                // Caption: Query Info;
	StatusDetail     string                                        `protobuf:"bytes,24,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                       // Caption: Status Details;
	CategoryUid      enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID    `protobuf:"varint,25,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	TypeUid          enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID        `protobuf:"varint,26,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	Api              *objects.Api                                  `protobuf:"bytes,27,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                             // Caption: API Details; Profile: cloud;
	Unmapped         *objects.Object                               `protobuf:"bytes,28,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                   // Caption: Unmapped Data;
	QueryResultId    enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID `protobuf:"varint,29,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	RawData          string                                        `protobuf:"bytes,30,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                      // Caption: Raw Data;
	ActivityId       enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID     `protobuf:"varint,31,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	StartTime        int64                                         `protobuf:"varint,32,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                               // Caption: Start Time;
	Count            int32                                         `protobuf:"varint,33,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                        // Caption: Count;
	Message          string                                        `protobuf:"bytes,34,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                     // Caption: Message;
}

func (x *PeripheralDeviceQuery) Reset() {
	*x = PeripheralDeviceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeripheralDeviceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeripheralDeviceQuery) ProtoMessage() {}

func (x *PeripheralDeviceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeripheralDeviceQuery.ProtoReflect.Descriptor instead.
func (*PeripheralDeviceQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{15}
}

func (x *PeripheralDeviceQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetStatusId() enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID(0)
}

func (x *PeripheralDeviceQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetClassUid() enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID(0)
}

func (x *PeripheralDeviceQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetPeripheralDevice() *objects.PeripheralDevice {
	if x != nil {
		return x.PeripheralDevice
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetSeverityId() enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID(0)
}

func (x *PeripheralDeviceQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetCategoryUid() enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID(0)
}

func (x *PeripheralDeviceQuery) GetTypeUid() enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID(0)
}

func (x *PeripheralDeviceQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *PeripheralDeviceQuery) GetQueryResultId() enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID(0)
}

func (x *PeripheralDeviceQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *PeripheralDeviceQuery) GetActivityId() enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID(0)
}

func (x *PeripheralDeviceQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PeripheralDeviceQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Event: discovery
// Event UID: 4
// URL: https://schema.ocsf.io/1.2.0/classes/patch_state
type PatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message        string                         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                                                                                               // Caption: Message;
	TypeName       string                         `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                             // Caption: Type Name;
	Cloud          *objects.Cloud                 `protobuf:"bytes,3,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                   // Caption: Cloud; Profile: cloud;
	EndTime        int64                          `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	Duration       int32                          `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                            // Caption: Duration;
	TimezoneOffset int32                          `protobuf:"varint,6,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                          // Caption: Timezone Offset;
	StatusCode     string                         `protobuf:"bytes,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                       // Caption: Status Code;
	Device         *objects.Device                `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 // Caption: Device;
	KbArticleList  []*objects.KbArticle           `protobuf:"bytes,9,rep,name=kb_article_list,json=kbArticleList,proto3" json:"kb_article_list,omitempty"`                                                            // Caption: Knowledgebase Articles;
	ClassName      string                         `protobuf:"bytes,10,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                         // Caption: Class;
	Count          int32                          `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	TypeUid        enums.PATCH_STATE_TYPE_UID     `protobuf:"varint,12,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Unmapped       *objects.Object                `protobuf:"bytes,13,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                            // Caption: Unmapped Data;
	SeverityId     enums.PATCH_STATE_SEVERITY_ID  `protobuf:"varint,14,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	StartTime      int64                          `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                        // Caption: Start Time;
	Time           int64                          `protobuf:"varint,16,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	Status         string                         `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	CategoryName   string                         `protobuf:"bytes,18,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	Severity       string                         `protobuf:"bytes,19,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	RawData        string                         `protobuf:"bytes,20,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	Metadata       *objects.Metadata              `protobuf:"bytes,21,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	Api            *objects.Api                   `protobuf:"bytes,22,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Caption: API Details; Profile: cloud;
	Observables    []*objects.Observable          `protobuf:"bytes,23,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	StatusId       enums.PATCH_STATE_STATUS_ID    `protobuf:"varint,24,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	ClassUid       enums.PATCH_STATE_CLASS_UID    `protobuf:"varint,25,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	CategoryUid    enums.PATCH_STATE_CATEGORY_UID `protobuf:"varint,26,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	StatusDetail   string                         `protobuf:"bytes,27,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                // Caption: Status Details;
	ActivityId     enums.PATCH_STATE_ACTIVITY_ID  `protobuf:"varint,28,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	ActivityName   string                         `protobuf:"bytes,29,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	Enrichments    []*objects.Enrichment          `protobuf:"bytes,30,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                      // Caption: Enrichments;
}

func (x *PatchState) Reset() {
	*x = PatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchState) ProtoMessage() {}

func (x *PatchState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchState.ProtoReflect.Descriptor instead.
func (*PatchState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{16}
}

func (x *PatchState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PatchState) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PatchState) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *PatchState) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PatchState) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PatchState) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *PatchState) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PatchState) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *PatchState) GetKbArticleList() []*objects.KbArticle {
	if x != nil {
		return x.KbArticleList
	}
	return nil
}

func (x *PatchState) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PatchState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PatchState) GetTypeUid() enums.PATCH_STATE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PATCH_STATE_TYPE_UID(0)
}

func (x *PatchState) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *PatchState) GetSeverityId() enums.PATCH_STATE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PATCH_STATE_SEVERITY_ID(0)
}

func (x *PatchState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PatchState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PatchState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PatchState) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PatchState) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PatchState) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *PatchState) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PatchState) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PatchState) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *PatchState) GetStatusId() enums.PATCH_STATE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PATCH_STATE_STATUS_ID(0)
}

func (x *PatchState) GetClassUid() enums.PATCH_STATE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PATCH_STATE_CLASS_UID(0)
}

func (x *PatchState) GetCategoryUid() enums.PATCH_STATE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PATCH_STATE_CATEGORY_UID(0)
}

func (x *PatchState) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PatchState) GetActivityId() enums.PATCH_STATE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PATCH_STATE_ACTIVITY_ID(0)
}

func (x *PatchState) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PatchState) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

// Event: discovery
// Event UID: 1
// URL: https://schema.ocsf.io/1.2.0/classes/inventory_info
type InventoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api            *objects.Api                      `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`                                                                                                         // Profile: cloud; Caption: API Details;
	ActivityName   string                            `protobuf:"bytes,2,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                   // Caption: Activity;
	Unmapped       *objects.Object                   `protobuf:"bytes,3,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                               // Caption: Unmapped Data;
	StatusCode     string                            `protobuf:"bytes,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                         // Caption: Status Code;
	Count          int32                             `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                                                                                    // Caption: Count;
	ClassUid       enums.INVENTORY_INFO_CLASS_UID    `protobuf:"varint,6,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	CategoryUid    enums.INVENTORY_INFO_CATEGORY_UID `protobuf:"varint,7,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Device         *objects.Device                   `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`                                                                                                   // Caption: Device;
	StatusId       enums.INVENTORY_INFO_STATUS_ID    `protobuf:"varint,9,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Severity       string                            `protobuf:"bytes,10,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                              // Caption: Severity;
	StatusDetail   string                            `protobuf:"bytes,11,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                  // Caption: Status Details;
	StartTime      int64                             `protobuf:"varint,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                          // Caption: Start Time;
	TypeUid        enums.INVENTORY_INFO_TYPE_UID     `protobuf:"varint,13,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	ClassName      string                            `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                           // Caption: Class;
	Metadata       *objects.Metadata                 `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                              // Caption: Metadata;
	ActivityId     enums.INVENTORY_INFO_ACTIVITY_ID  `protobuf:"varint,16,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	RawData        string                            `protobuf:"bytes,17,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                 // Caption: Raw Data;
	Time           int64                             `protobuf:"varint,18,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     // Caption: Event Time;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,19,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                        // Caption: Enrichments;
	Cloud          *objects.Cloud                    `protobuf:"bytes,20,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                    // Profile: cloud; Caption: Cloud;
	Status         string                            `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`                                                                                                  // Caption: Status;
	EndTime        int64                             `protobuf:"varint,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                // Caption: End Time;
	TypeName       string                            `protobuf:"bytes,23,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                              // Caption: Type Name;
	TimezoneOffset int32                             `protobuf:"varint,24,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                           // Caption: Timezone Offset;
	CategoryName   string                            `protobuf:"bytes,25,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                  // Caption: Category;
	Observables    []*objects.Observable             `protobuf:"bytes,26,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                        // Caption: Observables;
	SeverityId     enums.INVENTORY_INFO_SEVERITY_ID  `protobuf:"varint,27,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID" json:"severity_id,omitempty"`    // Caption: Severity ID;
	Actor          *objects.Actor                    `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                    // Caption: Actor;
	Message        string                            `protobuf:"bytes,29,opt,name=message,proto3" json:"message,omitempty"`                                                                                                // Caption: Message;
	Duration       int32                             `protobuf:"varint,30,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                             // Caption: Duration;
}

func (x *InventoryInfo) Reset() {
	*x = InventoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfo) ProtoMessage() {}

func (x *InventoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfo.ProtoReflect.Descriptor instead.
func (*InventoryInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{17}
}

func (x *InventoryInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *InventoryInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *InventoryInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *InventoryInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *InventoryInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InventoryInfo) GetClassUid() enums.INVENTORY_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.INVENTORY_INFO_CLASS_UID(0)
}

func (x *InventoryInfo) GetCategoryUid() enums.INVENTORY_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.INVENTORY_INFO_CATEGORY_UID(0)
}

func (x *InventoryInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *InventoryInfo) GetStatusId() enums.INVENTORY_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.INVENTORY_INFO_STATUS_ID(0)
}

func (x *InventoryInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *InventoryInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *InventoryInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InventoryInfo) GetTypeUid() enums.INVENTORY_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.INVENTORY_INFO_TYPE_UID(0)
}

func (x *InventoryInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *InventoryInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InventoryInfo) GetActivityId() enums.INVENTORY_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.INVENTORY_INFO_ACTIVITY_ID(0)
}

func (x *InventoryInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *InventoryInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InventoryInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *InventoryInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *InventoryInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InventoryInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InventoryInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *InventoryInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *InventoryInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *InventoryInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *InventoryInfo) GetSeverityId() enums.INVENTORY_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.INVENTORY_INFO_SEVERITY_ID(0)
}

func (x *InventoryInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *InventoryInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InventoryInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event: discovery
// Event UID: 10
// URL: https://schema.ocsf.io/1.2.0/classes/job_query
type JobQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unmapped       *objects.Object                 `protobuf:"bytes,1,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                     // Caption: Unmapped Data;
	Time           int64                           `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                                                                                            // Caption: Event Time;
	TypeUid        enums.JOB_QUERY_TYPE_UID        `protobuf:"varint,3,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	ActivityName   string                          `protobuf:"bytes,4,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                         // Caption: Activity;
	StartTime      int64                           `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // Caption: Start Time;
	CategoryUid    enums.JOB_QUERY_CATEGORY_UID    `protobuf:"varint,6,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Message        string                          `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`                                                                                                       // Caption: Message;
	QueryResultId  enums.JOB_QUERY_QUERY_RESULT_ID `protobuf:"varint,8,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	StatusId       enums.JOB_QUERY_STATUS_ID       `protobuf:"varint,9,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Status         string                          `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Severity       string                          `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	Observables    []*objects.Observable           `protobuf:"bytes,12,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	ClassName      string                          `protobuf:"bytes,13,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Cloud          *objects.Cloud                  `protobuf:"bytes,14,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	ClassUid       enums.JOB_QUERY_CLASS_UID       `protobuf:"varint,15,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CLASS_UID" json:"class_uid,omitempty"`                       // Caption: Class ID;
	Metadata       *objects.Metadata               `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	CategoryName   string                          `protobuf:"bytes,17,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	QueryInfo      *objects.QueryInfo              `protobuf:"bytes,18,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                 // Caption: Query Info;
	ActivityId     enums.JOB_QUERY_ACTIVITY_ID     `protobuf:"varint,19,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`               // Caption: Activity ID;
	Count          int32                           `protobuf:"varint,20,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	Job            *objects.Job                    `protobuf:"bytes,21,opt,name=job,proto3" json:"job,omitempty"`                                                                                                              // Caption: Job;
	TimezoneOffset int32                           `protobuf:"varint,22,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	Api            *objects.Api                    `protobuf:"bytes,23,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	Enrichments    []*objects.Enrichment           `protobuf:"bytes,24,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	Actor          *objects.Actor                  `protobuf:"bytes,25,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                          // Caption: Actor; Profile: host;
	RawData        string                          `protobuf:"bytes,26,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	Duration       int32                           `protobuf:"varint,27,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	StatusCode     string                          `protobuf:"bytes,28,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	TypeName       string                          `protobuf:"bytes,29,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                    // Caption: Type Name;
	EndTime        int64                           `protobuf:"varint,30,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	Device         *objects.Device                 `protobuf:"bytes,31,opt,name=device,proto3" json:"device,omitempty"`                                                                                                        // Caption: Device; Profile: host;
	StatusDetail   string                          `protobuf:"bytes,32,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	QueryResult    string                          `protobuf:"bytes,33,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                           // Caption: Query Result;
	SeverityId     enums.JOB_QUERY_SEVERITY_ID     `protobuf:"varint,34,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`               // Caption: Severity ID;
}

func (x *JobQuery) Reset() {
	*x = JobQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQuery) ProtoMessage() {}

func (x *JobQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQuery.ProtoReflect.Descriptor instead.
func (*JobQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{18}
}

func (x *JobQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *JobQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *JobQuery) GetTypeUid() enums.JOB_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.JOB_QUERY_TYPE_UID(0)
}

func (x *JobQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *JobQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobQuery) GetCategoryUid() enums.JOB_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.JOB_QUERY_CATEGORY_UID(0)
}

func (x *JobQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JobQuery) GetQueryResultId() enums.JOB_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.JOB_QUERY_QUERY_RESULT_ID(0)
}

func (x *JobQuery) GetStatusId() enums.JOB_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.JOB_QUERY_STATUS_ID(0)
}

func (x *JobQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *JobQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *JobQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *JobQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *JobQuery) GetClassUid() enums.JOB_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.JOB_QUERY_CLASS_UID(0)
}

func (x *JobQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *JobQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *JobQuery) GetActivityId() enums.JOB_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.JOB_QUERY_ACTIVITY_ID(0)
}

func (x *JobQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *JobQuery) GetJob() *objects.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *JobQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *JobQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *JobQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *JobQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *JobQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *JobQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *JobQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *JobQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *JobQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *JobQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *JobQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *JobQuery) GetSeverityId() enums.JOB_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.JOB_QUERY_SEVERITY_ID(0)
}

// Event: discovery
// Event UID: 11
// URL: https://schema.ocsf.io/1.2.0/classes/module_query
type ModuleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName       string                             `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	StatusCode     string                             `protobuf:"bytes,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	QueryInfo      *objects.QueryInfo                 `protobuf:"bytes,3,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                      // Caption: Query Info;
	SeverityId     enums.MODULE_QUERY_SEVERITY_ID     `protobuf:"varint,4,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                 // Caption: Severity ID;
	Module         *objects.Module                    `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`                                                                                                             // Caption: Module;
	Duration       int32                              `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                        // Caption: Duration;
	Metadata       *objects.Metadata                  `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                         // Caption: Metadata;
	Unmapped       *objects.Object                    `protobuf:"bytes,8,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	QueryResult    string                             `protobuf:"bytes,9,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                // Caption: Query Result;
	CategoryUid    enums.MODULE_QUERY_CATEGORY_UID    `protobuf:"varint,10,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Count          int32                              `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`                                                                                                             // Caption: Count;
	Observables    []*objects.Observable              `protobuf:"bytes,12,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                  // Caption: Observables;
	TimezoneOffset int32                              `protobuf:"varint,13,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                     // Caption: Timezone Offset;
	Enrichments    []*objects.Enrichment              `protobuf:"bytes,14,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                  // Caption: Enrichments;
	Actor          *objects.Actor                     `protobuf:"bytes,15,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                              // Caption: Actor; Profile: host;
	Process        *objects.Process                   `protobuf:"bytes,16,opt,name=process,proto3" json:"process,omitempty"`                                                                                                          // Caption: Process;
	TypeUid        enums.MODULE_QUERY_TYPE_UID        `protobuf:"varint,17,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	StatusId       enums.MODULE_QUERY_STATUS_ID       `protobuf:"varint,18,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	QueryResultId  enums.MODULE_QUERY_QUERY_RESULT_ID `protobuf:"varint,19,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	Device         *objects.Device                    `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`                                                                                                            // Caption: Device; Profile: host;
	ActivityId     enums.MODULE_QUERY_ACTIVITY_ID     `protobuf:"varint,21,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	Status         string                             `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`                                                                                                            // Caption: Status;
	RawData        string                             `protobuf:"bytes,23,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                           // Caption: Raw Data;
	StartTime      int64                              `protobuf:"varint,24,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                    // Caption: Start Time;
	ClassUid       enums.MODULE_QUERY_CLASS_UID       `protobuf:"varint,25,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	Message        string                             `protobuf:"bytes,26,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	Api            *objects.Api                       `protobuf:"bytes,27,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                  // Profile: cloud; Caption: API Details;
	Severity       string                             `protobuf:"bytes,28,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	ClassName      string                             `protobuf:"bytes,29,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                     // Caption: Class;
	StatusDetail   string                             `protobuf:"bytes,30,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                            // Caption: Status Details;
	Cloud          *objects.Cloud                     `protobuf:"bytes,31,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                              // Caption: Cloud; Profile: cloud;
	EndTime        int64                              `protobuf:"varint,32,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                          // Caption: End Time;
	CategoryName   string                             `protobuf:"bytes,33,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                            // Caption: Category;
	ActivityName   string                             `protobuf:"bytes,34,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                            // Caption: Activity;
	Time           int64                              `protobuf:"varint,35,opt,name=time,proto3" json:"time,omitempty"`                                                                                                               // Caption: Event Time;
}

func (x *ModuleQuery) Reset() {
	*x = ModuleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleQuery) ProtoMessage() {}

func (x *ModuleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleQuery.ProtoReflect.Descriptor instead.
func (*ModuleQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{19}
}

func (x *ModuleQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ModuleQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ModuleQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *ModuleQuery) GetSeverityId() enums.MODULE_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.MODULE_QUERY_SEVERITY_ID(0)
}

func (x *ModuleQuery) GetModule() *objects.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ModuleQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ModuleQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ModuleQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ModuleQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *ModuleQuery) GetCategoryUid() enums.MODULE_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.MODULE_QUERY_CATEGORY_UID(0)
}

func (x *ModuleQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModuleQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ModuleQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ModuleQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ModuleQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ModuleQuery) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ModuleQuery) GetTypeUid() enums.MODULE_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.MODULE_QUERY_TYPE_UID(0)
}

func (x *ModuleQuery) GetStatusId() enums.MODULE_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.MODULE_QUERY_STATUS_ID(0)
}

func (x *ModuleQuery) GetQueryResultId() enums.MODULE_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.MODULE_QUERY_QUERY_RESULT_ID(0)
}

func (x *ModuleQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ModuleQuery) GetActivityId() enums.MODULE_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.MODULE_QUERY_ACTIVITY_ID(0)
}

func (x *ModuleQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ModuleQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ModuleQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ModuleQuery) GetClassUid() enums.MODULE_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.MODULE_QUERY_CLASS_UID(0)
}

func (x *ModuleQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModuleQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ModuleQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ModuleQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ModuleQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ModuleQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ModuleQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ModuleQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ModuleQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ModuleQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Event: discovery
// Event UID: 0
// URL: https://schema.ocsf.io/1.2.0/classes/discovery_result
type DiscoveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string                                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                 // Caption: Status;
	RawData        string                                 `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                // Caption: Raw Data;
	StartTime      int64                                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                         // Caption: Start Time;
	ClassUid       enums.DISCOVERY_RESULT_CLASS_UID       `protobuf:"varint,4,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID" json:"class_uid,omitempty"`                         // Caption: Class ID;
	QueryResult    string                                 `protobuf:"bytes,5,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                    // Caption: Query Result;
	Cloud          *objects.Cloud                         `protobuf:"bytes,6,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                   // Caption: Cloud; Profile: cloud;
	CategoryUid    enums.DISCOVERY_RESULT_CATEGORY_UID    `protobuf:"varint,7,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID" json:"category_uid,omitempty"`             // Caption: Category ID;
	TypeName       string                                 `protobuf:"bytes,8,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                             // Caption: Type Name;
	EndTime        int64                                  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                               // Caption: End Time;
	Count          int32                                  `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                 // Caption: Count;
	Message        string                                 `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`                                                                                                              // Caption: Message;
	Observables    []*objects.Observable                  `protobuf:"bytes,12,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                      // Caption: Observables;
	TypeUid        enums.DISCOVERY_RESULT_TYPE_UID        `protobuf:"varint,13,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	CategoryName   string                                 `protobuf:"bytes,14,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                // Caption: Category;
	Duration       int32                                  `protobuf:"varint,15,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                           // Caption: Duration;
	Metadata       *objects.Metadata                      `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                            // Caption: Metadata;
	Severity       string                                 `protobuf:"bytes,17,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                            // Caption: Severity;
	ClassName      string                                 `protobuf:"bytes,18,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                         // Caption: Class;
	Unmapped       *objects.Object                        `protobuf:"bytes,19,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                            // Caption: Unmapped Data;
	TimezoneOffset int32                                  `protobuf:"varint,20,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                         // Caption: Timezone Offset;
	Api            *objects.Api                           `protobuf:"bytes,21,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                      // Caption: API Details; Profile: cloud;
	QueryInfo      *objects.QueryInfo                     `protobuf:"bytes,22,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                         // Caption: Query Info;
	ActivityName   string                                 `protobuf:"bytes,23,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                // Caption: Activity;
	Time           int64                                  `protobuf:"varint,24,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                   // Caption: Event Time;
	QueryResultId  enums.DISCOVERY_RESULT_QUERY_RESULT_ID `protobuf:"varint,25,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	Device         *objects.Device                        `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                // Caption: Device; Profile: host;
	Enrichments    []*objects.Enrichment                  `protobuf:"bytes,27,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                      // Caption: Enrichments;
	ActivityId     enums.DISCOVERY_RESULT_ACTIVITY_ID     `protobuf:"varint,28,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID" json:"activity_id,omitempty"`                // Caption: Activity ID;
	SeverityId     enums.DISCOVERY_RESULT_SEVERITY_ID     `protobuf:"varint,29,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	StatusId       enums.DISCOVERY_RESULT_STATUS_ID       `protobuf:"varint,30,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	StatusDetail   string                                 `protobuf:"bytes,31,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                // Caption: Status Details;
	Actor          *objects.Actor                         `protobuf:"bytes,32,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                  // Caption: Actor; Profile: host;
	StatusCode     string                                 `protobuf:"bytes,33,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                      // Caption: Status Code;
}

func (x *DiscoveryResult) Reset() {
	*x = DiscoveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryResult) ProtoMessage() {}

func (x *DiscoveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryResult.ProtoReflect.Descriptor instead.
func (*DiscoveryResult) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{20}
}

func (x *DiscoveryResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DiscoveryResult) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DiscoveryResult) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DiscoveryResult) GetClassUid() enums.DISCOVERY_RESULT_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DISCOVERY_RESULT_CLASS_UID(0)
}

func (x *DiscoveryResult) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *DiscoveryResult) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DiscoveryResult) GetCategoryUid() enums.DISCOVERY_RESULT_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DISCOVERY_RESULT_CATEGORY_UID(0)
}

func (x *DiscoveryResult) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DiscoveryResult) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DiscoveryResult) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DiscoveryResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiscoveryResult) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DiscoveryResult) GetTypeUid() enums.DISCOVERY_RESULT_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DISCOVERY_RESULT_TYPE_UID(0)
}

func (x *DiscoveryResult) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DiscoveryResult) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DiscoveryResult) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DiscoveryResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DiscoveryResult) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DiscoveryResult) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DiscoveryResult) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DiscoveryResult) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DiscoveryResult) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *DiscoveryResult) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DiscoveryResult) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DiscoveryResult) GetQueryResultId() enums.DISCOVERY_RESULT_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.DISCOVERY_RESULT_QUERY_RESULT_ID(0)
}

func (x *DiscoveryResult) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DiscoveryResult) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DiscoveryResult) GetActivityId() enums.DISCOVERY_RESULT_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DISCOVERY_RESULT_ACTIVITY_ID(0)
}

func (x *DiscoveryResult) GetSeverityId() enums.DISCOVERY_RESULT_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DISCOVERY_RESULT_SEVERITY_ID(0)
}

func (x *DiscoveryResult) GetStatusId() enums.DISCOVERY_RESULT_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DISCOVERY_RESULT_STATUS_ID(0)
}

func (x *DiscoveryResult) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DiscoveryResult) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DiscoveryResult) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

// Event: discovery
// Event UID: 15
// URL: https://schema.ocsf.io/1.2.0/classes/process_query
type ProcessQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime        int64                               `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                            // Caption: End Time;
	Message        string                              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                            // Caption: Message;
	TimezoneOffset int32                               `protobuf:"varint,3,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                       // Caption: Timezone Offset;
	StatusId       enums.PROCESS_QUERY_STATUS_ID       `protobuf:"varint,4,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_STATUS_ID" json:"status_id,omitempty"`                         // Caption: Status ID;
	Cloud          *objects.Cloud                      `protobuf:"bytes,5,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                // Caption: Cloud; Profile: cloud;
	Observables    []*objects.Observable               `protobuf:"bytes,6,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                    // Caption: Observables;
	QueryInfo      *objects.QueryInfo                  `protobuf:"bytes,7,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                       // Caption: Query Info;
	Time           int64                               `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                 // Caption: Event Time;
	ActivityId     enums.PROCESS_QUERY_ACTIVITY_ID     `protobuf:"varint,9,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`                 // Caption: Activity ID;
	QueryResult    string                              `protobuf:"bytes,10,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                // Caption: Query Result;
	StartTime      int64                               `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
	ClassUid       enums.PROCESS_QUERY_CLASS_UID       `protobuf:"varint,12,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CLASS_UID" json:"class_uid,omitempty"`                        // Caption: Class ID;
	CategoryUid    enums.PROCESS_QUERY_CATEGORY_UID    `protobuf:"varint,13,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Unmapped       *objects.Object                     `protobuf:"bytes,14,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	Actor          *objects.Actor                      `protobuf:"bytes,15,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor; Profile: host;
	Status         string                              `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // Caption: Status;
	Count          int32                               `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`                                                                                                              // Caption: Count;
	Api            *objects.Api                        `protobuf:"bytes,18,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                   // Caption: API Details; Profile: cloud;
	Device         *objects.Device                     `protobuf:"bytes,19,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	SeverityId     enums.PROCESS_QUERY_SEVERITY_ID     `protobuf:"varint,20,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`                // Caption: Severity ID;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,21,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                   // Caption: Enrichments;
	Process        *objects.Process                    `protobuf:"bytes,22,opt,name=process,proto3" json:"process,omitempty"`                                                                                                           // Caption: Process;
	Metadata       *objects.Metadata                   `protobuf:"bytes,23,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                         // Caption: Metadata;
	CategoryName   string                              `protobuf:"bytes,24,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                             // Caption: Category;
	QueryResultId  enums.PROCESS_QUERY_QUERY_RESULT_ID `protobuf:"varint,25,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	ActivityName   string                              `protobuf:"bytes,26,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                             // Caption: Activity;
	StatusCode     string                              `protobuf:"bytes,27,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	TypeUid        enums.PROCESS_QUERY_TYPE_UID        `protobuf:"varint,28,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_TYPE_UID" json:"type_uid,omitempty"`                            // Caption: Type ID;
	StatusDetail   string                              `protobuf:"bytes,29,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	TypeName       string                              `protobuf:"bytes,30,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	Duration       int32                               `protobuf:"varint,31,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                        // Caption: Duration;
	Severity       string                              `protobuf:"bytes,32,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                         // Caption: Severity;
	ClassName      string                              `protobuf:"bytes,33,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                      // Caption: Class;
	RawData        string                              `protobuf:"bytes,34,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
}

func (x *ProcessQuery) Reset() {
	*x = ProcessQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessQuery) ProtoMessage() {}

func (x *ProcessQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessQuery.ProtoReflect.Descriptor instead.
func (*ProcessQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{21}
}

func (x *ProcessQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProcessQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ProcessQuery) GetStatusId() enums.PROCESS_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PROCESS_QUERY_STATUS_ID(0)
}

func (x *ProcessQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ProcessQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ProcessQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *ProcessQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ProcessQuery) GetActivityId() enums.PROCESS_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PROCESS_QUERY_ACTIVITY_ID(0)
}

func (x *ProcessQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *ProcessQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProcessQuery) GetClassUid() enums.PROCESS_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PROCESS_QUERY_CLASS_UID(0)
}

func (x *ProcessQuery) GetCategoryUid() enums.PROCESS_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PROCESS_QUERY_CATEGORY_UID(0)
}

func (x *ProcessQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ProcessQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ProcessQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProcessQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProcessQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ProcessQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ProcessQuery) GetSeverityId() enums.PROCESS_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PROCESS_QUERY_SEVERITY_ID(0)
}

func (x *ProcessQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ProcessQuery) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ProcessQuery) GetQueryResultId() enums.PROCESS_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.PROCESS_QUERY_QUERY_RESULT_ID(0)
}

func (x *ProcessQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ProcessQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ProcessQuery) GetTypeUid() enums.PROCESS_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PROCESS_QUERY_TYPE_UID(0)
}

func (x *ProcessQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ProcessQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ProcessQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ProcessQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ProcessQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ProcessQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

// Event: discovery
// Event UID: 5
// URL: https://schema.ocsf.io/1.2.0/classes/registry_value_query
type RegistryValueQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryUid    enums.REGISTRY_VALUE_QUERY_CATEGORY_UID    `protobuf:"varint,1,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CATEGORY_UID" json:"category_uid,omitempty"`            // Caption: Category ID;
	Count          int32                                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                     // Caption: Count;
	StatusDetail   string                                     `protobuf:"bytes,3,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                    // Caption: Status Details;
	Cloud          *objects.Cloud                             `protobuf:"bytes,4,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                      // Caption: Cloud; Profile: cloud;
	Message        string                                     `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                  // Caption: Message;
	Duration       int32                                      `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                               // Caption: Duration;
	QueryResultId  enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID `protobuf:"varint,7,opt,name=query_result_id,json=queryResultId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID" json:"query_result_id,omitempty"` // Caption: Query Result ID;
	StatusId       enums.REGISTRY_VALUE_QUERY_STATUS_ID       `protobuf:"varint,8,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_STATUS_ID" json:"status_id,omitempty"`                        // Caption: Status ID;
	Observables    []*objects.Observable                      `protobuf:"bytes,9,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                          // Caption: Observables;
	TypeUid        enums.REGISTRY_VALUE_QUERY_TYPE_UID        `protobuf:"varint,10,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_TYPE_UID" json:"type_uid,omitempty"`                           // Caption: Type ID;
	Unmapped       *objects.Object                            `protobuf:"bytes,11,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                               // Caption: Unmapped Data;
	Api            *objects.Api                               `protobuf:"bytes,12,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                         // Caption: API Details; Profile: cloud;
	RegValue       *objects.RegValue                          `protobuf:"bytes,13,opt,name=reg_value,json=regValue,proto3" json:"reg_value,omitempty"`                                                                                               // Caption: Registry Value;
	Actor          *objects.Actor                             `protobuf:"bytes,14,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                     // Caption: Actor; Profile: host;
	Metadata       *objects.Metadata                          `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                               // Caption: Metadata;
	Severity       string                                     `protobuf:"bytes,16,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                               // Caption: Severity;
	TimezoneOffset int32                                      `protobuf:"varint,17,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                            // Caption: Timezone Offset;
	EndTime        int64                                      `protobuf:"varint,18,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                 // Caption: End Time;
	ActivityName   string                                     `protobuf:"bytes,19,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                   // Caption: Activity;
	Device         *objects.Device                            `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                   // Caption: Device; Profile: host;
	Enrichments    []*objects.Enrichment                      `protobuf:"bytes,21,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                         // Caption: Enrichments;
	ActivityId     enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID     `protobuf:"varint,22,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID" json:"activity_id,omitempty"`               // Caption: Activity ID;
	QueryResult    string                                     `protobuf:"bytes,23,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`                                                                                      // Caption: Query Result;
	ClassName      string                                     `protobuf:"bytes,24,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                            // Caption: Class;
	QueryInfo      *objects.QueryInfo                         `protobuf:"bytes,25,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`                                                                                            // Caption: Query Info;
	CategoryName   string                                     `protobuf:"bytes,26,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                   // Caption: Category;
	Time           int64                                      `protobuf:"varint,27,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                      // Caption: Event Time;
	StatusCode     string                                     `protobuf:"bytes,28,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                         // Caption: Status Code;
	Status         string                                     `protobuf:"bytes,29,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                   // Caption: Status;
	StartTime      int64                                      `protobuf:"varint,30,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                           // Caption: Start Time;
	ClassUid       enums.REGISTRY_VALUE_QUERY_CLASS_UID       `protobuf:"varint,31,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CLASS_UID" json:"class_uid,omitempty"`                       // Caption: Class ID;
	TypeName       string                                     `protobuf:"bytes,32,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                               // Caption: Type Name;
	SeverityId     enums.REGISTRY_VALUE_QUERY_SEVERITY_ID     `protobuf:"varint,33,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_SEVERITY_ID" json:"severity_id,omitempty"`               // Caption: Severity ID;
	RawData        string                                     `protobuf:"bytes,34,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                  // Caption: Raw Data;
}

func (x *RegistryValueQuery) Reset() {
	*x = RegistryValueQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryValueQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryValueQuery) ProtoMessage() {}

func (x *RegistryValueQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryValueQuery.ProtoReflect.Descriptor instead.
func (*RegistryValueQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP(), []int{22}
}

func (x *RegistryValueQuery) GetCategoryUid() enums.REGISTRY_VALUE_QUERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_VALUE_QUERY_CATEGORY_UID(0)
}

func (x *RegistryValueQuery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryValueQuery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryValueQuery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryValueQuery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryValueQuery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegistryValueQuery) GetQueryResultId() enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID {
	if x != nil {
		return x.QueryResultId
	}
	return enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID(0)
}

func (x *RegistryValueQuery) GetStatusId() enums.REGISTRY_VALUE_QUERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_VALUE_QUERY_STATUS_ID(0)
}

func (x *RegistryValueQuery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryValueQuery) GetTypeUid() enums.REGISTRY_VALUE_QUERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_VALUE_QUERY_TYPE_UID(0)
}

func (x *RegistryValueQuery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryValueQuery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryValueQuery) GetRegValue() *objects.RegValue {
	if x != nil {
		return x.RegValue
	}
	return nil
}

func (x *RegistryValueQuery) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryValueQuery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryValueQuery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryValueQuery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryValueQuery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryValueQuery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryValueQuery) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RegistryValueQuery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryValueQuery) GetActivityId() enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID(0)
}

func (x *RegistryValueQuery) GetQueryResult() string {
	if x != nil {
		return x.QueryResult
	}
	return ""
}

func (x *RegistryValueQuery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryValueQuery) GetQueryInfo() *objects.QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *RegistryValueQuery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryValueQuery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RegistryValueQuery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryValueQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryValueQuery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RegistryValueQuery) GetClassUid() enums.REGISTRY_VALUE_QUERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_VALUE_QUERY_CLASS_UID(0)
}

func (x *RegistryValueQuery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryValueQuery) GetSeverityId() enums.REGISTRY_VALUE_QUERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_VALUE_QUERY_SEVERITY_ID(0)
}

func (x *RegistryValueQuery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

var File_ocsf_v1_2_0_events_discovery_discovery_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbd, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x66, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22,
	0xb7, 0x10, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x48, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x65, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x54, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x7c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x50, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x0d, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x69, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x61,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0xa8, 0x0e, 0x0a, 0x0f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x62,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6d, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69,
	0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x62, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x65, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x55, 0x69, 0x64, 0x22, 0xd1, 0x0d, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x68, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x0e, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5d,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x66, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x5a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x46, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x82, 0x10, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x45, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x46, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x60, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x69,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x74, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x0b, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x83, 0x0e, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x62, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x0b, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x59, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0xad, 0x0c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x69, 0x73, 0x5f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x73, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12,
	0x63, 0x69, 0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x57,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x0e, 0x0a, 0x11, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a,
	0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12,
	0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x5b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xbd, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x0f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55,
	0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x0d, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x58,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x69, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x0e, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x54, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x62, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x6a, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a,
	0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x0a, 0x0a,
	0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9, 0x0e, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x45, 0x52, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x6b, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x73, 0x0a, 0x0f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52,
	0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xe1, 0x0b, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x0f, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0d, 0x6b, 0x62, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x0b, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x0d, 0x0a, 0x08, 0x4a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x8b,
	0x0e, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x0b, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x68, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x0d, 0x0a,
	0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x64, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x61, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xde, 0x0d,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x69, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x99,
	0x0e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x3a, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x65, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x83, 0x02, 0x0a, 0x20, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42,
	0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61,
	0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76,
	0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x44, 0xaa, 0x02, 0x1a,
	0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x32, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xca, 0x02, 0x1a, 0x4f, 0x63, 0x73,
	0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xe2, 0x02, 0x26, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x32, 0x30, 0x3a, 0x3a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescData = file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDesc
)

func file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDescData
}

var file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_ocsf_v1_2_0_events_discovery_discovery_proto_goTypes = []interface{}{
	(*UserQuery)(nil),                                            // 0: ocsf.v1_2_0.events.discovery.UserQuery
	(*DeviceConfigStateChange)(nil),                              // 1: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange
	(*SessionQuery)(nil),                                         // 2: ocsf.v1_2_0.events.discovery.SessionQuery
	(*AdminGroupQuery)(nil),                                      // 3: ocsf.v1_2_0.events.discovery.AdminGroupQuery
	(*FolderQuery)(nil),                                          // 4: ocsf.v1_2_0.events.discovery.FolderQuery
	(*RegistryKeyQuery)(nil),                                     // 5: ocsf.v1_2_0.events.discovery.RegistryKeyQuery
	(*NetworkConnectionQuery)(nil),                               // 6: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery
	(*PrefetchQuery)(nil),                                        // 7: ocsf.v1_2_0.events.discovery.PrefetchQuery
	(*UserInventory)(nil),                                        // 8: ocsf.v1_2_0.events.discovery.UserInventory
	(*ConfigState)(nil),                                          // 9: ocsf.v1_2_0.events.discovery.ConfigState
	(*KernelObjectQuery)(nil),                                    // 10: ocsf.v1_2_0.events.discovery.KernelObjectQuery
	(*FileQuery)(nil),                                            // 11: ocsf.v1_2_0.events.discovery.FileQuery
	(*ServiceQuery)(nil),                                         // 12: ocsf.v1_2_0.events.discovery.ServiceQuery
	(*NetworksQuery)(nil),                                        // 13: ocsf.v1_2_0.events.discovery.NetworksQuery
	(*Discovery)(nil),                                            // 14: ocsf.v1_2_0.events.discovery.Discovery
	(*PeripheralDeviceQuery)(nil),                                // 15: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery
	(*PatchState)(nil),                                           // 16: ocsf.v1_2_0.events.discovery.PatchState
	(*InventoryInfo)(nil),                                        // 17: ocsf.v1_2_0.events.discovery.InventoryInfo
	(*JobQuery)(nil),                                             // 18: ocsf.v1_2_0.events.discovery.JobQuery
	(*ModuleQuery)(nil),                                          // 19: ocsf.v1_2_0.events.discovery.ModuleQuery
	(*DiscoveryResult)(nil),                                      // 20: ocsf.v1_2_0.events.discovery.DiscoveryResult
	(*ProcessQuery)(nil),                                         // 21: ocsf.v1_2_0.events.discovery.ProcessQuery
	(*RegistryValueQuery)(nil),                                   // 22: ocsf.v1_2_0.events.discovery.RegistryValueQuery
	(enums.USER_QUERY_TYPE_UID)(0),                               // 23: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_TYPE_UID
	(*objects.Api)(nil),                                          // 24: ocsf.v1_2_0.objects.Api
	(enums.USER_QUERY_CLASS_UID)(0),                              // 25: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CLASS_UID
	(*objects.Metadata)(nil),                                     // 26: ocsf.v1_2_0.objects.Metadata
	(*objects.Actor)(nil),                                        // 27: ocsf.v1_2_0.objects.Actor
	(*objects.Device)(nil),                                       // 28: ocsf.v1_2_0.objects.Device
	(enums.USER_QUERY_STATUS_ID)(0),                              // 29: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_STATUS_ID
	(*objects.Observable)(nil),                                   // 30: ocsf.v1_2_0.objects.Observable
	(*objects.Object)(nil),                                       // 31: ocsf.v1_2_0.objects.Object
	(enums.USER_QUERY_CATEGORY_UID)(0),                           // 32: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CATEGORY_UID
	(enums.USER_QUERY_QUERY_RESULT_ID)(0),                        // 33: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_QUERY_RESULT_ID
	(enums.USER_QUERY_ACTIVITY_ID)(0),                            // 34: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_ACTIVITY_ID
	(*objects.Enrichment)(nil),                                   // 35: ocsf.v1_2_0.objects.Enrichment
	(*objects.QueryInfo)(nil),                                    // 36: ocsf.v1_2_0.objects.QueryInfo
	(enums.USER_QUERY_SEVERITY_ID)(0),                            // 37: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_SEVERITY_ID
	(*objects.User)(nil),                                         // 38: ocsf.v1_2_0.objects.User
	(*objects.Cloud)(nil),                                        // 39: ocsf.v1_2_0.objects.Cloud
	(enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)(0),            // 40: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)(0),              // 41: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	(*objects.SecurityState)(nil),                                // 42: ocsf.v1_2_0.objects.SecurityState
	(enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)(0),              // 43: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)(0), // 44: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)(0),               // 45: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)(0),           // 46: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	(enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)(0),      // 47: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	(enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)(0),            // 48: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	(enums.SESSION_QUERY_QUERY_RESULT_ID)(0),                     // 49: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_QUERY_RESULT_ID
	(enums.SESSION_QUERY_ACTIVITY_ID)(0),                         // 50: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_ACTIVITY_ID
	(enums.SESSION_QUERY_TYPE_UID)(0),                            // 51: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_TYPE_UID
	(enums.SESSION_QUERY_SEVERITY_ID)(0),                         // 52: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_SEVERITY_ID
	(*objects.Session)(nil),                                      // 53: ocsf.v1_2_0.objects.Session
	(enums.SESSION_QUERY_CLASS_UID)(0),                           // 54: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CLASS_UID
	(enums.SESSION_QUERY_STATUS_ID)(0),                           // 55: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_STATUS_ID
	(enums.SESSION_QUERY_CATEGORY_UID)(0),                        // 56: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CATEGORY_UID
	(enums.ADMIN_GROUP_QUERY_ACTIVITY_ID)(0),                     // 57: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_ACTIVITY_ID
	(enums.ADMIN_GROUP_QUERY_STATUS_ID)(0),                       // 58: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_STATUS_ID
	(*objects.Group)(nil),                                        // 59: ocsf.v1_2_0.objects.Group
	(enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID)(0),                 // 60: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID
	(enums.ADMIN_GROUP_QUERY_TYPE_UID)(0),                        // 61: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_TYPE_UID
	(enums.ADMIN_GROUP_QUERY_SEVERITY_ID)(0),                     // 62: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_SEVERITY_ID
	(enums.ADMIN_GROUP_QUERY_CATEGORY_UID)(0),                    // 63: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CATEGORY_UID
	(enums.ADMIN_GROUP_QUERY_CLASS_UID)(0),                       // 64: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CLASS_UID
	(enums.FOLDER_QUERY_CLASS_UID)(0),                            // 65: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CLASS_UID
	(enums.FOLDER_QUERY_ACTIVITY_ID)(0),                          // 66: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_ACTIVITY_ID
	(enums.FOLDER_QUERY_QUERY_RESULT_ID)(0),                      // 67: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_QUERY_RESULT_ID
	(enums.FOLDER_QUERY_SEVERITY_ID)(0),                          // 68: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_SEVERITY_ID
	(enums.FOLDER_QUERY_STATUS_ID)(0),                            // 69: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_STATUS_ID
	(enums.FOLDER_QUERY_TYPE_UID)(0),                             // 70: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_TYPE_UID
	(enums.FOLDER_QUERY_CATEGORY_UID)(0),                         // 71: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CATEGORY_UID
	(*objects.File)(nil),                                         // 72: ocsf.v1_2_0.objects.File
	(enums.REGISTRY_KEY_QUERY_CLASS_UID)(0),                      // 73: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CLASS_UID
	(enums.REGISTRY_KEY_QUERY_CATEGORY_UID)(0),                   // 74: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CATEGORY_UID
	(enums.REGISTRY_KEY_QUERY_TYPE_UID)(0),                       // 75: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_TYPE_UID
	(enums.REGISTRY_KEY_QUERY_STATUS_ID)(0),                      // 76: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_STATUS_ID
	(enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID)(0),                // 77: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID
	(enums.REGISTRY_KEY_QUERY_ACTIVITY_ID)(0),                    // 78: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_ACTIVITY_ID
	(*objects.RegKey)(nil),                                       // 79: ocsf.v1_2_0.objects.RegKey
	(enums.REGISTRY_KEY_QUERY_SEVERITY_ID)(0),                    // 80: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_SEVERITY_ID
	(enums.NETWORK_CONNECTION_QUERY_STATE_ID)(0),                 // 81: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATE_ID
	(enums.NETWORK_CONNECTION_QUERY_CLASS_UID)(0),                // 82: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CLASS_UID
	(enums.NETWORK_CONNECTION_QUERY_STATUS_ID)(0),                // 83: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATUS_ID
	(enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID)(0),             // 84: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID
	(enums.NETWORK_CONNECTION_QUERY_TYPE_UID)(0),                 // 85: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_TYPE_UID
	(enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID)(0),              // 86: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID
	(enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID)(0),          // 87: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID
	(enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID)(0),              // 88: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID
	(*objects.NetworkConnectionInfo)(nil),                        // 89: ocsf.v1_2_0.objects.NetworkConnectionInfo
	(*objects.Process)(nil),                                      // 90: ocsf.v1_2_0.objects.Process
	(enums.PREFETCH_QUERY_ACTIVITY_ID)(0),                        // 91: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_ACTIVITY_ID
	(enums.PREFETCH_QUERY_SEVERITY_ID)(0),                        // 92: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_SEVERITY_ID
	(enums.PREFETCH_QUERY_CLASS_UID)(0),                          // 93: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CLASS_UID
	(enums.PREFETCH_QUERY_CATEGORY_UID)(0),                       // 94: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CATEGORY_UID
	(enums.PREFETCH_QUERY_QUERY_RESULT_ID)(0),                    // 95: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_QUERY_RESULT_ID
	(enums.PREFETCH_QUERY_STATUS_ID)(0),                          // 96: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_STATUS_ID
	(enums.PREFETCH_QUERY_TYPE_UID)(0),                           // 97: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_TYPE_UID
	(enums.USER_INVENTORY_CLASS_UID)(0),                          // 98: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	(enums.USER_INVENTORY_CATEGORY_UID)(0),                       // 99: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	(enums.USER_INVENTORY_TYPE_UID)(0),                           // 100: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	(enums.USER_INVENTORY_SEVERITY_ID)(0),                        // 101: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	(enums.USER_INVENTORY_STATUS_ID)(0),                          // 102: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	(enums.USER_INVENTORY_ACTIVITY_ID)(0),                        // 103: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	(enums.CONFIG_STATE_STATUS_ID)(0),                            // 104: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	(enums.CONFIG_STATE_CATEGORY_UID)(0),                         // 105: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(enums.CONFIG_STATE_ACTIVITY_ID)(0),                          // 106: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	(enums.CONFIG_STATE_SEVERITY_ID)(0),                          // 107: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	(enums.CONFIG_STATE_TYPE_UID)(0),                             // 108: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(*objects.CisBenchmarkResult)(nil),                           // 109: ocsf.v1_2_0.objects.CisBenchmarkResult
	(enums.CONFIG_STATE_CLASS_UID)(0),                            // 110: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(enums.KERNEL_OBJECT_QUERY_SEVERITY_ID)(0),                   // 111: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_SEVERITY_ID
	(enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID)(0),                   // 112: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID
	(enums.KERNEL_OBJECT_QUERY_CLASS_UID)(0),                     // 113: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CLASS_UID
	(enums.KERNEL_OBJECT_QUERY_STATUS_ID)(0),                     // 114: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_STATUS_ID
	(enums.KERNEL_OBJECT_QUERY_CATEGORY_UID)(0),                  // 115: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CATEGORY_UID
	(enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID)(0),               // 116: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID
	(*objects.Kernel)(nil),                                       // 117: ocsf.v1_2_0.objects.Kernel
	(enums.KERNEL_OBJECT_QUERY_TYPE_UID)(0),                      // 118: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_TYPE_UID
	(enums.FILE_QUERY_STATUS_ID)(0),                              // 119: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_STATUS_ID
	(enums.FILE_QUERY_TYPE_UID)(0),                               // 120: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_TYPE_UID
	(enums.FILE_QUERY_QUERY_RESULT_ID)(0),                        // 121: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_QUERY_RESULT_ID
	(enums.FILE_QUERY_ACTIVITY_ID)(0),                            // 122: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_ACTIVITY_ID
	(enums.FILE_QUERY_CLASS_UID)(0),                              // 123: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CLASS_UID
	(enums.FILE_QUERY_CATEGORY_UID)(0),                           // 124: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CATEGORY_UID
	(enums.FILE_QUERY_SEVERITY_ID)(0),                            // 125: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_SEVERITY_ID
	(enums.SERVICE_QUERY_TYPE_UID)(0),                            // 126: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_TYPE_UID
	(enums.SERVICE_QUERY_CLASS_UID)(0),                           // 127: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CLASS_UID
	(enums.SERVICE_QUERY_STATUS_ID)(0),                           // 128: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_STATUS_ID
	(enums.SERVICE_QUERY_CATEGORY_UID)(0),                        // 129: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CATEGORY_UID
	(enums.SERVICE_QUERY_QUERY_RESULT_ID)(0),                     // 130: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_QUERY_RESULT_ID
	(enums.SERVICE_QUERY_ACTIVITY_ID)(0),                         // 131: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_ACTIVITY_ID
	(enums.SERVICE_QUERY_SEVERITY_ID)(0),                         // 132: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_SEVERITY_ID
	(*objects.Service)(nil),                                      // 133: ocsf.v1_2_0.objects.Service
	(enums.NETWORKS_QUERY_ACTIVITY_ID)(0),                        // 134: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_ACTIVITY_ID
	(*objects.NetworkInterface)(nil),                             // 135: ocsf.v1_2_0.objects.NetworkInterface
	(enums.NETWORKS_QUERY_CATEGORY_UID)(0),                       // 136: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CATEGORY_UID
	(enums.NETWORKS_QUERY_QUERY_RESULT_ID)(0),                    // 137: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_QUERY_RESULT_ID
	(enums.NETWORKS_QUERY_SEVERITY_ID)(0),                        // 138: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_SEVERITY_ID
	(enums.NETWORKS_QUERY_STATUS_ID)(0),                          // 139: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_STATUS_ID
	(enums.NETWORKS_QUERY_TYPE_UID)(0),                           // 140: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_TYPE_UID
	(enums.NETWORKS_QUERY_CLASS_UID)(0),                          // 141: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CLASS_UID
	(enums.DISCOVERY_STATUS_ID)(0),                               // 142: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(enums.DISCOVERY_TYPE_UID)(0),                                // 143: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(enums.DISCOVERY_ACTIVITY_ID)(0),                             // 144: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(enums.DISCOVERY_SEVERITY_ID)(0),                             // 145: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(enums.DISCOVERY_CLASS_UID)(0),                               // 146: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(enums.DISCOVERY_CATEGORY_UID)(0),                            // 147: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	(enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID)(0),                 // 148: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID
	(enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID)(0),                 // 149: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID
	(*objects.PeripheralDevice)(nil),                             // 150: ocsf.v1_2_0.objects.PeripheralDevice
	(enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID)(0),               // 151: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID
	(enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID)(0),              // 152: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID
	(enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID)(0),                  // 153: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID
	(enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID)(0),           // 154: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID
	(enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID)(0),               // 155: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID
	(*objects.KbArticle)(nil),                                    // 156: ocsf.v1_2_0.objects.KbArticle
	(enums.PATCH_STATE_TYPE_UID)(0),                              // 157: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	(enums.PATCH_STATE_SEVERITY_ID)(0),                           // 158: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	(enums.PATCH_STATE_STATUS_ID)(0),                             // 159: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	(enums.PATCH_STATE_CLASS_UID)(0),                             // 160: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	(enums.PATCH_STATE_CATEGORY_UID)(0),                          // 161: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	(enums.PATCH_STATE_ACTIVITY_ID)(0),                           // 162: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	(enums.INVENTORY_INFO_CLASS_UID)(0),                          // 163: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(enums.INVENTORY_INFO_CATEGORY_UID)(0),                       // 164: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(enums.INVENTORY_INFO_STATUS_ID)(0),                          // 165: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(enums.INVENTORY_INFO_TYPE_UID)(0),                           // 166: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(enums.INVENTORY_INFO_ACTIVITY_ID)(0),                        // 167: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(enums.INVENTORY_INFO_SEVERITY_ID)(0),                        // 168: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(enums.JOB_QUERY_TYPE_UID)(0),                                // 169: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_TYPE_UID
	(enums.JOB_QUERY_CATEGORY_UID)(0),                            // 170: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CATEGORY_UID
	(enums.JOB_QUERY_QUERY_RESULT_ID)(0),                         // 171: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_QUERY_RESULT_ID
	(enums.JOB_QUERY_STATUS_ID)(0),                               // 172: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_STATUS_ID
	(enums.JOB_QUERY_CLASS_UID)(0),                               // 173: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CLASS_UID
	(enums.JOB_QUERY_ACTIVITY_ID)(0),                             // 174: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_ACTIVITY_ID
	(*objects.Job)(nil),                                          // 175: ocsf.v1_2_0.objects.Job
	(enums.JOB_QUERY_SEVERITY_ID)(0),                             // 176: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_SEVERITY_ID
	(enums.MODULE_QUERY_SEVERITY_ID)(0),                          // 177: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_SEVERITY_ID
	(*objects.Module)(nil),                                       // 178: ocsf.v1_2_0.objects.Module
	(enums.MODULE_QUERY_CATEGORY_UID)(0),                         // 179: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CATEGORY_UID
	(enums.MODULE_QUERY_TYPE_UID)(0),                             // 180: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_TYPE_UID
	(enums.MODULE_QUERY_STATUS_ID)(0),                            // 181: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_STATUS_ID
	(enums.MODULE_QUERY_QUERY_RESULT_ID)(0),                      // 182: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_QUERY_RESULT_ID
	(enums.MODULE_QUERY_ACTIVITY_ID)(0),                          // 183: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_ACTIVITY_ID
	(enums.MODULE_QUERY_CLASS_UID)(0),                            // 184: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CLASS_UID
	(enums.DISCOVERY_RESULT_CLASS_UID)(0),                        // 185: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	(enums.DISCOVERY_RESULT_CATEGORY_UID)(0),                     // 186: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	(enums.DISCOVERY_RESULT_TYPE_UID)(0),                         // 187: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	(enums.DISCOVERY_RESULT_QUERY_RESULT_ID)(0),                  // 188: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_QUERY_RESULT_ID
	(enums.DISCOVERY_RESULT_ACTIVITY_ID)(0),                      // 189: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	(enums.DISCOVERY_RESULT_SEVERITY_ID)(0),                      // 190: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	(enums.DISCOVERY_RESULT_STATUS_ID)(0),                        // 191: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	(enums.PROCESS_QUERY_STATUS_ID)(0),                           // 192: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_STATUS_ID
	(enums.PROCESS_QUERY_ACTIVITY_ID)(0),                         // 193: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_ACTIVITY_ID
	(enums.PROCESS_QUERY_CLASS_UID)(0),                           // 194: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CLASS_UID
	(enums.PROCESS_QUERY_CATEGORY_UID)(0),                        // 195: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CATEGORY_UID
	(enums.PROCESS_QUERY_SEVERITY_ID)(0),                         // 196: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_SEVERITY_ID
	(enums.PROCESS_QUERY_QUERY_RESULT_ID)(0),                     // 197: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_QUERY_RESULT_ID
	(enums.PROCESS_QUERY_TYPE_UID)(0),                            // 198: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_TYPE_UID
	(enums.REGISTRY_VALUE_QUERY_CATEGORY_UID)(0),                 // 199: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CATEGORY_UID
	(enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID)(0),              // 200: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID
	(enums.REGISTRY_VALUE_QUERY_STATUS_ID)(0),                    // 201: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_STATUS_ID
	(enums.REGISTRY_VALUE_QUERY_TYPE_UID)(0),                     // 202: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_TYPE_UID
	(*objects.RegValue)(nil),                                     // 203: ocsf.v1_2_0.objects.RegValue
	(enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID)(0),                  // 204: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID
	(enums.REGISTRY_VALUE_QUERY_CLASS_UID)(0),                    // 205: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CLASS_UID
	(enums.REGISTRY_VALUE_QUERY_SEVERITY_ID)(0),                  // 206: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_SEVERITY_ID
}
var file_ocsf_v1_2_0_events_discovery_discovery_proto_depIdxs = []int32{
	23,  // 0: ocsf.v1_2_0.events.discovery.UserQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_TYPE_UID
	24,  // 1: ocsf.v1_2_0.events.discovery.UserQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	25,  // 2: ocsf.v1_2_0.events.discovery.UserQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CLASS_UID
	26,  // 3: ocsf.v1_2_0.events.discovery.UserQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	27,  // 4: ocsf.v1_2_0.events.discovery.UserQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	28,  // 5: ocsf.v1_2_0.events.discovery.UserQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	29,  // 6: ocsf.v1_2_0.events.discovery.UserQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_STATUS_ID
	30,  // 7: ocsf.v1_2_0.events.discovery.UserQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	31,  // 8: ocsf.v1_2_0.events.discovery.UserQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	32,  // 9: ocsf.v1_2_0.events.discovery.UserQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CATEGORY_UID
	33,  // 10: ocsf.v1_2_0.events.discovery.UserQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_QUERY_RESULT_ID
	34,  // 11: ocsf.v1_2_0.events.discovery.UserQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_ACTIVITY_ID
	35,  // 12: ocsf.v1_2_0.events.discovery.UserQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	36,  // 13: ocsf.v1_2_0.events.discovery.UserQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	37,  // 14: ocsf.v1_2_0.events.discovery.UserQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_QUERY_SEVERITY_ID
	38,  // 15: ocsf.v1_2_0.events.discovery.UserQuery.user:type_name -> ocsf.v1_2_0.objects.User
	39,  // 16: ocsf.v1_2_0.events.discovery.UserQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	28,  // 17: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.device:type_name -> ocsf.v1_2_0.objects.Device
	24,  // 18: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.api:type_name -> ocsf.v1_2_0.objects.Api
	40,  // 19: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	39,  // 20: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	27,  // 21: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.actor:type_name -> ocsf.v1_2_0.objects.Actor
	41,  // 22: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	42,  // 23: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.security_states:type_name -> ocsf.v1_2_0.objects.SecurityState
	31,  // 24: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	43,  // 25: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	44,  // 26: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.prev_security_level_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	42,  // 27: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.prev_security_states:type_name -> ocsf.v1_2_0.objects.SecurityState
	45,  // 28: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	26,  // 29: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	35,  // 30: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	46,  // 31: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	47,  // 32: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.security_level_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	30,  // 33: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.observables:type_name -> ocsf.v1_2_0.objects.Observable
	48,  // 34: ocsf.v1_2_0.events.discovery.DeviceConfigStateChange.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	49,  // 35: ocsf.v1_2_0.events.discovery.SessionQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_QUERY_RESULT_ID
	27,  // 36: ocsf.v1_2_0.events.discovery.SessionQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	50,  // 37: ocsf.v1_2_0.events.discovery.SessionQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_ACTIVITY_ID
	51,  // 38: ocsf.v1_2_0.events.discovery.SessionQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_TYPE_UID
	52,  // 39: ocsf.v1_2_0.events.discovery.SessionQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_SEVERITY_ID
	30,  // 40: ocsf.v1_2_0.events.discovery.SessionQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	53,  // 41: ocsf.v1_2_0.events.discovery.SessionQuery.session:type_name -> ocsf.v1_2_0.objects.Session
	54,  // 42: ocsf.v1_2_0.events.discovery.SessionQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CLASS_UID
	55,  // 43: ocsf.v1_2_0.events.discovery.SessionQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_STATUS_ID
	56,  // 44: ocsf.v1_2_0.events.discovery.SessionQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CATEGORY_UID
	31,  // 45: ocsf.v1_2_0.events.discovery.SessionQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	28,  // 46: ocsf.v1_2_0.events.discovery.SessionQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	36,  // 47: ocsf.v1_2_0.events.discovery.SessionQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	35,  // 48: ocsf.v1_2_0.events.discovery.SessionQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	39,  // 49: ocsf.v1_2_0.events.discovery.SessionQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	26,  // 50: ocsf.v1_2_0.events.discovery.SessionQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	24,  // 51: ocsf.v1_2_0.events.discovery.SessionQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	35,  // 52: ocsf.v1_2_0.events.discovery.AdminGroupQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	38,  // 53: ocsf.v1_2_0.events.discovery.AdminGroupQuery.users:type_name -> ocsf.v1_2_0.objects.User
	26,  // 54: ocsf.v1_2_0.events.discovery.AdminGroupQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	57,  // 55: ocsf.v1_2_0.events.discovery.AdminGroupQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_ACTIVITY_ID
	31,  // 56: ocsf.v1_2_0.events.discovery.AdminGroupQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	36,  // 57: ocsf.v1_2_0.events.discovery.AdminGroupQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	28,  // 58: ocsf.v1_2_0.events.discovery.AdminGroupQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	58,  // 59: ocsf.v1_2_0.events.discovery.AdminGroupQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_STATUS_ID
	59,  // 60: ocsf.v1_2_0.events.discovery.AdminGroupQuery.group:type_name -> ocsf.v1_2_0.objects.Group
	60,  // 61: ocsf.v1_2_0.events.discovery.AdminGroupQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID
	30,  // 62: ocsf.v1_2_0.events.discovery.AdminGroupQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	61,  // 63: ocsf.v1_2_0.events.discovery.AdminGroupQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_TYPE_UID
	24,  // 64: ocsf.v1_2_0.events.discovery.AdminGroupQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	62,  // 65: ocsf.v1_2_0.events.discovery.AdminGroupQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_SEVERITY_ID
	27,  // 66: ocsf.v1_2_0.events.discovery.AdminGroupQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	63,  // 67: ocsf.v1_2_0.events.discovery.AdminGroupQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CATEGORY_UID
	39,  // 68: ocsf.v1_2_0.events.discovery.AdminGroupQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	64,  // 69: ocsf.v1_2_0.events.discovery.AdminGroupQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CLASS_UID
	39,  // 70: ocsf.v1_2_0.events.discovery.FolderQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	65,  // 71: ocsf.v1_2_0.events.discovery.FolderQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CLASS_UID
	66,  // 72: ocsf.v1_2_0.events.discovery.FolderQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_ACTIVITY_ID
	67,  // 73: ocsf.v1_2_0.events.discovery.FolderQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_QUERY_RESULT_ID
	68,  // 74: ocsf.v1_2_0.events.discovery.FolderQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_SEVERITY_ID
	69,  // 75: ocsf.v1_2_0.events.discovery.FolderQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_STATUS_ID
	36,  // 76: ocsf.v1_2_0.events.discovery.FolderQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	26,  // 77: ocsf.v1_2_0.events.discovery.FolderQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	70,  // 78: ocsf.v1_2_0.events.discovery.FolderQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_TYPE_UID
	24,  // 79: ocsf.v1_2_0.events.discovery.FolderQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	28,  // 80: ocsf.v1_2_0.events.discovery.FolderQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	71,  // 81: ocsf.v1_2_0.events.discovery.FolderQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CATEGORY_UID
	27,  // 82: ocsf.v1_2_0.events.discovery.FolderQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	72,  // 83: ocsf.v1_2_0.events.discovery.FolderQuery.folder:type_name -> ocsf.v1_2_0.objects.File
	31,  // 84: ocsf.v1_2_0.events.discovery.FolderQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	35,  // 85: ocsf.v1_2_0.events.discovery.FolderQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	30,  // 86: ocsf.v1_2_0.events.discovery.FolderQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	73,  // 87: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CLASS_UID
	74,  // 88: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CATEGORY_UID
	35,  // 89: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	39,  // 90: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	75,  // 91: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_TYPE_UID
	76,  // 92: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_STATUS_ID
	24,  // 93: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	26,  // 94: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	36,  // 95: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	31,  // 96: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	77,  // 97: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID
	78,  // 98: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_ACTIVITY_ID
	79,  // 99: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.reg_key:type_name -> ocsf.v1_2_0.objects.RegKey
	30,  // 100: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	28,  // 101: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	80,  // 102: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_SEVERITY_ID
	27,  // 103: ocsf.v1_2_0.events.discovery.RegistryKeyQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	26,  // 104: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	81,  // 105: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.state_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATE_ID
	30,  // 106: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	35,  // 107: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	82,  // 108: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CLASS_UID
	83,  // 109: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATUS_ID
	84,  // 110: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID
	85,  // 111: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_TYPE_UID
	24,  // 112: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	86,  // 113: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID
	27,  // 114: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	39,  // 115: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	87,  // 116: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID
	36,  // 117: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	88,  // 118: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID
	89,  // 119: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.connection_info:type_name -> ocsf.v1_2_0.objects.NetworkConnectionInfo
	90,  // 120: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.process:type_name -> ocsf.v1_2_0.objects.Process
	31,  // 121: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	28,  // 122: ocsf.v1_2_0.events.discovery.NetworkConnectionQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	35,  // 123: ocsf.v1_2_0.events.discovery.PrefetchQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	27,  // 124: ocsf.v1_2_0.events.discovery.PrefetchQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	91,  // 125: ocsf.v1_2_0.events.discovery.PrefetchQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_ACTIVITY_ID
	92,  // 126: ocsf.v1_2_0.events.discovery.PrefetchQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_SEVERITY_ID
	93,  // 127: ocsf.v1_2_0.events.discovery.PrefetchQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CLASS_UID
	94,  // 128: ocsf.v1_2_0.events.discovery.PrefetchQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CATEGORY_UID
	36,  // 129: ocsf.v1_2_0.events.discovery.PrefetchQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	28,  // 130: ocsf.v1_2_0.events.discovery.PrefetchQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	95,  // 131: ocsf.v1_2_0.events.discovery.PrefetchQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_QUERY_RESULT_ID
	96,  // 132: ocsf.v1_2_0.events.discovery.PrefetchQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_STATUS_ID
	26,  // 133: ocsf.v1_2_0.events.discovery.PrefetchQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	30,  // 134: ocsf.v1_2_0.events.discovery.PrefetchQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	31,  // 135: ocsf.v1_2_0.events.discovery.PrefetchQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	24,  // 136: ocsf.v1_2_0.events.discovery.PrefetchQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	97,  // 137: ocsf.v1_2_0.events.discovery.PrefetchQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_TYPE_UID
	39,  // 138: ocsf.v1_2_0.events.discovery.PrefetchQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	30,  // 139: ocsf.v1_2_0.events.discovery.UserInventory.observables:type_name -> ocsf.v1_2_0.objects.Observable
	27,  // 140: ocsf.v1_2_0.events.discovery.UserInventory.actor:type_name -> ocsf.v1_2_0.objects.Actor
	98,  // 141: ocsf.v1_2_0.events.discovery.UserInventory.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	99,  // 142: ocsf.v1_2_0.events.discovery.UserInventory.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	100, // 143: ocsf.v1_2_0.events.discovery.UserInventory.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	101, // 144: ocsf.v1_2_0.events.discovery.UserInventory.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	26,  // 145: ocsf.v1_2_0.events.discovery.UserInventory.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	35,  // 146: ocsf.v1_2_0.events.discovery.UserInventory.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	102, // 147: ocsf.v1_2_0.events.discovery.UserInventory.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	38,  // 148: ocsf.v1_2_0.events.discovery.UserInventory.user:type_name -> ocsf.v1_2_0.objects.User
	39,  // 149: ocsf.v1_2_0.events.discovery.UserInventory.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	24,  // 150: ocsf.v1_2_0.events.discovery.UserInventory.api:type_name -> ocsf.v1_2_0.objects.Api
	103, // 151: ocsf.v1_2_0.events.discovery.UserInventory.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	31,  // 152: ocsf.v1_2_0.events.discovery.UserInventory.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	104, // 153: ocsf.v1_2_0.events.discovery.ConfigState.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	31,  // 154: ocsf.v1_2_0.events.discovery.ConfigState.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	35,  // 155: ocsf.v1_2_0.events.discovery.ConfigState.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	105, // 156: ocsf.v1_2_0.events.discovery.ConfigState.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	30,  // 157: ocsf.v1_2_0.events.discovery.ConfigState.observables:type_name -> ocsf.v1_2_0.objects.Observable
	26,  // 158: ocsf.v1_2_0.events.discovery.ConfigState.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	106, // 159: ocsf.v1_2_0.events.discovery.ConfigState.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	107, // 160: ocsf.v1_2_0.events.discovery.ConfigState.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	27,  // 161: ocsf.v1_2_0.events.discovery.ConfigState.actor:type_name -> ocsf.v1_2_0.objects.Actor
	39,  // 162: ocsf.v1_2_0.events.discovery.ConfigState.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	108, // 163: ocsf.v1_2_0.events.discovery.ConfigState.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	109, // 164: ocsf.v1_2_0.events.discovery.ConfigState.cis_benchmark_result:type_name -> ocsf.v1_2_0.objects.CisBenchmarkResult
	24,  // 165: ocsf.v1_2_0.events.discovery.ConfigState.api:type_name -> ocsf.v1_2_0.objects.Api
	110, // 166: ocsf.v1_2_0.events.discovery.ConfigState.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	28,  // 167: ocsf.v1_2_0.events.discovery.ConfigState.device:type_name -> ocsf.v1_2_0.objects.Device
	111, // 168: ocsf.v1_2_0.events.discovery.KernelObjectQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_SEVERITY_ID
	31,  // 169: ocsf.v1_2_0.events.discovery.KernelObjectQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	28,  // 170: ocsf.v1_2_0.events.discovery.KernelObjectQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	112, // 171: ocsf.v1_2_0.events.discovery.KernelObjectQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID
	35,  // 172: ocsf.v1_2_0.events.discovery.KernelObjectQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	113, // 173: ocsf.v1_2_0.events.discovery.KernelObjectQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CLASS_UID
	36,  // 174: ocsf.v1_2_0.events.discovery.KernelObjectQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	27,  // 175: ocsf.v1_2_0.events.discovery.KernelObjectQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	114, // 176: ocsf.v1_2_0.events.discovery.KernelObjectQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_STATUS_ID
	115, // 177: ocsf.v1_2_0.events.discovery.KernelObjectQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CATEGORY_UID
	26,  // 178: ocsf.v1_2_0.events.discovery.KernelObjectQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	116, // 179: ocsf.v1_2_0.events.discovery.KernelObjectQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID
	30,  // 180: ocsf.v1_2_0.events.discovery.KernelObjectQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	117, // 181: ocsf.v1_2_0.events.discovery.KernelObjectQuery.kernel:type_name -> ocsf.v1_2_0.objects.Kernel
	39,  // 182: ocsf.v1_2_0.events.discovery.KernelObjectQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	118, // 183: ocsf.v1_2_0.events.discovery.KernelObjectQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_TYPE_UID
	24,  // 184: ocsf.v1_2_0.events.discovery.KernelObjectQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	30,  // 185: ocsf.v1_2_0.events.discovery.FileQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	72,  // 186: ocsf.v1_2_0.events.discovery.FileQuery.file:type_name -> ocsf.v1_2_0.objects.File
	24,  // 187: ocsf.v1_2_0.events.discovery.FileQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	36,  // 188: ocsf.v1_2_0.events.discovery.FileQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	119, // 189: ocsf.v1_2_0.events.discovery.FileQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_STATUS_ID
	26,  // 190: ocsf.v1_2_0.events.discovery.FileQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	31,  // 191: ocsf.v1_2_0.events.discovery.FileQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	120, // 192: ocsf.v1_2_0.events.discovery.FileQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_TYPE_UID
	28,  // 193: ocsf.v1_2_0.events.discovery.FileQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	35,  // 194: ocsf.v1_2_0.events.discovery.FileQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	27,  // 195: ocsf.v1_2_0.events.discovery.FileQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	121, // 196: ocsf.v1_2_0.events.discovery.FileQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_QUERY_RESULT_ID
	122, // 197: ocsf.v1_2_0.events.discovery.FileQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_ACTIVITY_ID
	39,  // 198: ocsf.v1_2_0.events.discovery.FileQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	123, // 199: ocsf.v1_2_0.events.discovery.FileQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CLASS_UID
	124, // 200: ocsf.v1_2_0.events.discovery.FileQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CATEGORY_UID
	125, // 201: ocsf.v1_2_0.events.discovery.FileQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_SEVERITY_ID
	126, // 202: ocsf.v1_2_0.events.discovery.ServiceQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_TYPE_UID
	127, // 203: ocsf.v1_2_0.events.discovery.ServiceQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CLASS_UID
	128, // 204: ocsf.v1_2_0.events.discovery.ServiceQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_STATUS_ID
	30,  // 205: ocsf.v1_2_0.events.discovery.ServiceQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	36,  // 206: ocsf.v1_2_0.events.discovery.ServiceQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	39,  // 207: ocsf.v1_2_0.events.discovery.ServiceQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	129, // 208: ocsf.v1_2_0.events.discovery.ServiceQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CATEGORY_UID
	31,  // 209: ocsf.v1_2_0.events.discovery.ServiceQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	130, // 210: ocsf.v1_2_0.events.discovery.ServiceQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_QUERY_RESULT_ID
	28,  // 211: ocsf.v1_2_0.events.discovery.ServiceQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	131, // 212: ocsf.v1_2_0.events.discovery.ServiceQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_ACTIVITY_ID
	132, // 213: ocsf.v1_2_0.events.discovery.ServiceQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_SEVERITY_ID
	27,  // 214: ocsf.v1_2_0.events.discovery.ServiceQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	26,  // 215: ocsf.v1_2_0.events.discovery.ServiceQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	133, // 216: ocsf.v1_2_0.events.discovery.ServiceQuery.service:type_name -> ocsf.v1_2_0.objects.Service
	24,  // 217: ocsf.v1_2_0.events.discovery.ServiceQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	35,  // 218: ocsf.v1_2_0.events.discovery.ServiceQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	31,  // 219: ocsf.v1_2_0.events.discovery.NetworksQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	28,  // 220: ocsf.v1_2_0.events.discovery.NetworksQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	134, // 221: ocsf.v1_2_0.events.discovery.NetworksQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_ACTIVITY_ID
	27,  // 222: ocsf.v1_2_0.events.discovery.NetworksQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	135, // 223: ocsf.v1_2_0.events.discovery.NetworksQuery.network_interfaces:type_name -> ocsf.v1_2_0.objects.NetworkInterface
	26,  // 224: ocsf.v1_2_0.events.discovery.NetworksQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	24,  // 225: ocsf.v1_2_0.events.discovery.NetworksQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	36,  // 226: ocsf.v1_2_0.events.discovery.NetworksQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	35,  // 227: ocsf.v1_2_0.events.discovery.NetworksQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	39,  // 228: ocsf.v1_2_0.events.discovery.NetworksQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	136, // 229: ocsf.v1_2_0.events.discovery.NetworksQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CATEGORY_UID
	137, // 230: ocsf.v1_2_0.events.discovery.NetworksQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_QUERY_RESULT_ID
	138, // 231: ocsf.v1_2_0.events.discovery.NetworksQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_SEVERITY_ID
	139, // 232: ocsf.v1_2_0.events.discovery.NetworksQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_STATUS_ID
	140, // 233: ocsf.v1_2_0.events.discovery.NetworksQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_TYPE_UID
	141, // 234: ocsf.v1_2_0.events.discovery.NetworksQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CLASS_UID
	30,  // 235: ocsf.v1_2_0.events.discovery.NetworksQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	30,  // 236: ocsf.v1_2_0.events.discovery.Discovery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	142, // 237: ocsf.v1_2_0.events.discovery.Discovery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_STATUS_ID
	143, // 238: ocsf.v1_2_0.events.discovery.Discovery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_TYPE_UID
	144, // 239: ocsf.v1_2_0.events.discovery.Discovery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	31,  // 240: ocsf.v1_2_0.events.discovery.Discovery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	145, // 241: ocsf.v1_2_0.events.discovery.Discovery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	26,  // 242: ocsf.v1_2_0.events.discovery.Discovery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	146, // 243: ocsf.v1_2_0.events.discovery.Discovery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CLASS_UID
	35,  // 244: ocsf.v1_2_0.events.discovery.Discovery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	147, // 245: ocsf.v1_2_0.events.discovery.Discovery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	39,  // 246: ocsf.v1_2_0.events.discovery.Discovery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	24,  // 247: ocsf.v1_2_0.events.discovery.Discovery.api:type_name -> ocsf.v1_2_0.objects.Api
	30,  // 248: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	35,  // 249: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	26,  // 250: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	28,  // 251: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	39,  // 252: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	27,  // 253: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	148, // 254: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID
	149, // 255: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID
	150, // 256: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.peripheral_device:type_name -> ocsf.v1_2_0.objects.PeripheralDevice
	151, // 257: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID
	36,  // 258: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	152, // 259: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID
	153, // 260: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID
	24,  // 261: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	31,  // 262: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	154, // 263: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID
	155, // 264: ocsf.v1_2_0.events.discovery.PeripheralDeviceQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID
	39,  // 265: ocsf.v1_2_0.events.discovery.PatchState.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	28,  // 266: ocsf.v1_2_0.events.discovery.PatchState.device:type_name -> ocsf.v1_2_0.objects.Device
	156, // 267: ocsf.v1_2_0.events.discovery.PatchState.kb_article_list:type_name -> ocsf.v1_2_0.objects.KbArticle
	157, // 268: ocsf.v1_2_0.events.discovery.PatchState.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	31,  // 269: ocsf.v1_2_0.events.discovery.PatchState.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	158, // 270: ocsf.v1_2_0.events.discovery.PatchState.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	26,  // 271: ocsf.v1_2_0.events.discovery.PatchState.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	24,  // 272: ocsf.v1_2_0.events.discovery.PatchState.api:type_name -> ocsf.v1_2_0.objects.Api
	30,  // 273: ocsf.v1_2_0.events.discovery.PatchState.observables:type_name -> ocsf.v1_2_0.objects.Observable
	159, // 274: ocsf.v1_2_0.events.discovery.PatchState.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	160, // 275: ocsf.v1_2_0.events.discovery.PatchState.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	161, // 276: ocsf.v1_2_0.events.discovery.PatchState.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	162, // 277: ocsf.v1_2_0.events.discovery.PatchState.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	35,  // 278: ocsf.v1_2_0.events.discovery.PatchState.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	24,  // 279: ocsf.v1_2_0.events.discovery.InventoryInfo.api:type_name -> ocsf.v1_2_0.objects.Api
	31,  // 280: ocsf.v1_2_0.events.discovery.InventoryInfo.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	163, // 281: ocsf.v1_2_0.events.discovery.InventoryInfo.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	164, // 282: ocsf.v1_2_0.events.discovery.InventoryInfo.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	28,  // 283: ocsf.v1_2_0.events.discovery.InventoryInfo.device:type_name -> ocsf.v1_2_0.objects.Device
	165, // 284: ocsf.v1_2_0.events.discovery.InventoryInfo.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	166, // 285: ocsf.v1_2_0.events.discovery.InventoryInfo.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	26,  // 286: ocsf.v1_2_0.events.discovery.InventoryInfo.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	167, // 287: ocsf.v1_2_0.events.discovery.InventoryInfo.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	35,  // 288: ocsf.v1_2_0.events.discovery.InventoryInfo.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	39,  // 289: ocsf.v1_2_0.events.discovery.InventoryInfo.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	30,  // 290: ocsf.v1_2_0.events.discovery.InventoryInfo.observables:type_name -> ocsf.v1_2_0.objects.Observable
	168, // 291: ocsf.v1_2_0.events.discovery.InventoryInfo.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	27,  // 292: ocsf.v1_2_0.events.discovery.InventoryInfo.actor:type_name -> ocsf.v1_2_0.objects.Actor
	31,  // 293: ocsf.v1_2_0.events.discovery.JobQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	169, // 294: ocsf.v1_2_0.events.discovery.JobQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_TYPE_UID
	170, // 295: ocsf.v1_2_0.events.discovery.JobQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CATEGORY_UID
	171, // 296: ocsf.v1_2_0.events.discovery.JobQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_QUERY_RESULT_ID
	172, // 297: ocsf.v1_2_0.events.discovery.JobQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_STATUS_ID
	30,  // 298: ocsf.v1_2_0.events.discovery.JobQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	39,  // 299: ocsf.v1_2_0.events.discovery.JobQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	173, // 300: ocsf.v1_2_0.events.discovery.JobQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CLASS_UID
	26,  // 301: ocsf.v1_2_0.events.discovery.JobQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	36,  // 302: ocsf.v1_2_0.events.discovery.JobQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	174, // 303: ocsf.v1_2_0.events.discovery.JobQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_ACTIVITY_ID
	175, // 304: ocsf.v1_2_0.events.discovery.JobQuery.job:type_name -> ocsf.v1_2_0.objects.Job
	24,  // 305: ocsf.v1_2_0.events.discovery.JobQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	35,  // 306: ocsf.v1_2_0.events.discovery.JobQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	27,  // 307: ocsf.v1_2_0.events.discovery.JobQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	28,  // 308: ocsf.v1_2_0.events.discovery.JobQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	176, // 309: ocsf.v1_2_0.events.discovery.JobQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_SEVERITY_ID
	36,  // 310: ocsf.v1_2_0.events.discovery.ModuleQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	177, // 311: ocsf.v1_2_0.events.discovery.ModuleQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_SEVERITY_ID
	178, // 312: ocsf.v1_2_0.events.discovery.ModuleQuery.module:type_name -> ocsf.v1_2_0.objects.Module
	26,  // 313: ocsf.v1_2_0.events.discovery.ModuleQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	31,  // 314: ocsf.v1_2_0.events.discovery.ModuleQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	179, // 315: ocsf.v1_2_0.events.discovery.ModuleQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CATEGORY_UID
	30,  // 316: ocsf.v1_2_0.events.discovery.ModuleQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	35,  // 317: ocsf.v1_2_0.events.discovery.ModuleQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	27,  // 318: ocsf.v1_2_0.events.discovery.ModuleQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	90,  // 319: ocsf.v1_2_0.events.discovery.ModuleQuery.process:type_name -> ocsf.v1_2_0.objects.Process
	180, // 320: ocsf.v1_2_0.events.discovery.ModuleQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_TYPE_UID
	181, // 321: ocsf.v1_2_0.events.discovery.ModuleQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_STATUS_ID
	182, // 322: ocsf.v1_2_0.events.discovery.ModuleQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_QUERY_RESULT_ID
	28,  // 323: ocsf.v1_2_0.events.discovery.ModuleQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	183, // 324: ocsf.v1_2_0.events.discovery.ModuleQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_ACTIVITY_ID
	184, // 325: ocsf.v1_2_0.events.discovery.ModuleQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CLASS_UID
	24,  // 326: ocsf.v1_2_0.events.discovery.ModuleQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	39,  // 327: ocsf.v1_2_0.events.discovery.ModuleQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	185, // 328: ocsf.v1_2_0.events.discovery.DiscoveryResult.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	39,  // 329: ocsf.v1_2_0.events.discovery.DiscoveryResult.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	186, // 330: ocsf.v1_2_0.events.discovery.DiscoveryResult.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	30,  // 331: ocsf.v1_2_0.events.discovery.DiscoveryResult.observables:type_name -> ocsf.v1_2_0.objects.Observable
	187, // 332: ocsf.v1_2_0.events.discovery.DiscoveryResult.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	26,  // 333: ocsf.v1_2_0.events.discovery.DiscoveryResult.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	31,  // 334: ocsf.v1_2_0.events.discovery.DiscoveryResult.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	24,  // 335: ocsf.v1_2_0.events.discovery.DiscoveryResult.api:type_name -> ocsf.v1_2_0.objects.Api
	36,  // 336: ocsf.v1_2_0.events.discovery.DiscoveryResult.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	188, // 337: ocsf.v1_2_0.events.discovery.DiscoveryResult.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_QUERY_RESULT_ID
	28,  // 338: ocsf.v1_2_0.events.discovery.DiscoveryResult.device:type_name -> ocsf.v1_2_0.objects.Device
	35,  // 339: ocsf.v1_2_0.events.discovery.DiscoveryResult.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	189, // 340: ocsf.v1_2_0.events.discovery.DiscoveryResult.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	190, // 341: ocsf.v1_2_0.events.discovery.DiscoveryResult.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	191, // 342: ocsf.v1_2_0.events.discovery.DiscoveryResult.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	27,  // 343: ocsf.v1_2_0.events.discovery.DiscoveryResult.actor:type_name -> ocsf.v1_2_0.objects.Actor
	192, // 344: ocsf.v1_2_0.events.discovery.ProcessQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_STATUS_ID
	39,  // 345: ocsf.v1_2_0.events.discovery.ProcessQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	30,  // 346: ocsf.v1_2_0.events.discovery.ProcessQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	36,  // 347: ocsf.v1_2_0.events.discovery.ProcessQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	193, // 348: ocsf.v1_2_0.events.discovery.ProcessQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_ACTIVITY_ID
	194, // 349: ocsf.v1_2_0.events.discovery.ProcessQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CLASS_UID
	195, // 350: ocsf.v1_2_0.events.discovery.ProcessQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CATEGORY_UID
	31,  // 351: ocsf.v1_2_0.events.discovery.ProcessQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	27,  // 352: ocsf.v1_2_0.events.discovery.ProcessQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	24,  // 353: ocsf.v1_2_0.events.discovery.ProcessQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	28,  // 354: ocsf.v1_2_0.events.discovery.ProcessQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	196, // 355: ocsf.v1_2_0.events.discovery.ProcessQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_SEVERITY_ID
	35,  // 356: ocsf.v1_2_0.events.discovery.ProcessQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	90,  // 357: ocsf.v1_2_0.events.discovery.ProcessQuery.process:type_name -> ocsf.v1_2_0.objects.Process
	26,  // 358: ocsf.v1_2_0.events.discovery.ProcessQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	197, // 359: ocsf.v1_2_0.events.discovery.ProcessQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_QUERY_RESULT_ID
	198, // 360: ocsf.v1_2_0.events.discovery.ProcessQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_TYPE_UID
	199, // 361: ocsf.v1_2_0.events.discovery.RegistryValueQuery.category_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CATEGORY_UID
	39,  // 362: ocsf.v1_2_0.events.discovery.RegistryValueQuery.cloud:type_name -> ocsf.v1_2_0.objects.Cloud
	200, // 363: ocsf.v1_2_0.events.discovery.RegistryValueQuery.query_result_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID
	201, // 364: ocsf.v1_2_0.events.discovery.RegistryValueQuery.status_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_STATUS_ID
	30,  // 365: ocsf.v1_2_0.events.discovery.RegistryValueQuery.observables:type_name -> ocsf.v1_2_0.objects.Observable
	202, // 366: ocsf.v1_2_0.events.discovery.RegistryValueQuery.type_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_TYPE_UID
	31,  // 367: ocsf.v1_2_0.events.discovery.RegistryValueQuery.unmapped:type_name -> ocsf.v1_2_0.objects.Object
	24,  // 368: ocsf.v1_2_0.events.discovery.RegistryValueQuery.api:type_name -> ocsf.v1_2_0.objects.Api
	203, // 369: ocsf.v1_2_0.events.discovery.RegistryValueQuery.reg_value:type_name -> ocsf.v1_2_0.objects.RegValue
	27,  // 370: ocsf.v1_2_0.events.discovery.RegistryValueQuery.actor:type_name -> ocsf.v1_2_0.objects.Actor
	26,  // 371: ocsf.v1_2_0.events.discovery.RegistryValueQuery.metadata:type_name -> ocsf.v1_2_0.objects.Metadata
	28,  // 372: ocsf.v1_2_0.events.discovery.RegistryValueQuery.device:type_name -> ocsf.v1_2_0.objects.Device
	35,  // 373: ocsf.v1_2_0.events.discovery.RegistryValueQuery.enrichments:type_name -> ocsf.v1_2_0.objects.Enrichment
	204, // 374: ocsf.v1_2_0.events.discovery.RegistryValueQuery.activity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID
	36,  // 375: ocsf.v1_2_0.events.discovery.RegistryValueQuery.query_info:type_name -> ocsf.v1_2_0.objects.QueryInfo
	205, // 376: ocsf.v1_2_0.events.discovery.RegistryValueQuery.class_uid:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CLASS_UID
	206, // 377: ocsf.v1_2_0.events.discovery.RegistryValueQuery.severity_id:type_name -> ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_SEVERITY_ID
	378, // [378:378] is the sub-list for method output_type
	378, // [378:378] is the sub-list for method input_type
	378, // [378:378] is the sub-list for extension type_name
	378, // [378:378] is the sub-list for extension extendee
	0,   // [0:378] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_events_discovery_discovery_proto_init() }
func file_ocsf_v1_2_0_events_discovery_discovery_proto_init() {
	if File_ocsf_v1_2_0_events_discovery_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGroupQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConnectionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefetchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelObjectQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworksQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeripheralDeviceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryValueQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_events_discovery_discovery_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_events_discovery_discovery_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_2_0_events_discovery_discovery_proto_msgTypes,
	}.Build()
	File_ocsf_v1_2_0_events_discovery_discovery_proto = out.File
	file_ocsf_v1_2_0_events_discovery_discovery_proto_rawDesc = nil
	file_ocsf_v1_2_0_events_discovery_discovery_proto_goTypes = nil
	file_ocsf_v1_2_0_events_discovery_discovery_proto_depIdxs = nil
}
