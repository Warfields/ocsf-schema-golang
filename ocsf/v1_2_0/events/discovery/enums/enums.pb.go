// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ocsf/v1_2_0/events/discovery/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ADMIN_GROUP_QUERY_ACTIVITY_ID int32

const (
	ADMIN_GROUP_QUERY_ACTIVITY_ID_ADMIN_GROUP_QUERY_ACTIVITY_ID_UNKNOWN ADMIN_GROUP_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ADMIN_GROUP_QUERY_ACTIVITY_ID_ADMIN_GROUP_QUERY_ACTIVITY_ID_QUERY   ADMIN_GROUP_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ADMIN_GROUP_QUERY_ACTIVITY_ID_ADMIN_GROUP_QUERY_ACTIVITY_ID_OTHER   ADMIN_GROUP_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ADMIN_GROUP_QUERY_ACTIVITY_ID.
var (
	ADMIN_GROUP_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "ADMIN_GROUP_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "ADMIN_GROUP_QUERY_ACTIVITY_ID_QUERY",
		99: "ADMIN_GROUP_QUERY_ACTIVITY_ID_OTHER",
	}
	ADMIN_GROUP_QUERY_ACTIVITY_ID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"ADMIN_GROUP_QUERY_ACTIVITY_ID_QUERY":   1,
		"ADMIN_GROUP_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x ADMIN_GROUP_QUERY_ACTIVITY_ID) Enum() *ADMIN_GROUP_QUERY_ACTIVITY_ID {
	p := new(ADMIN_GROUP_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[0].Descriptor()
}

func (ADMIN_GROUP_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[0]
}

func (x ADMIN_GROUP_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_ACTIVITY_ID.Descriptor instead.
func (ADMIN_GROUP_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{0}
}

type ADMIN_GROUP_QUERY_CATEGORY_UID int32

const (
	ADMIN_GROUP_QUERY_CATEGORY_UID_ADMIN_GROUP_QUERY_CATEGORY_UID_UNSPECIFIED ADMIN_GROUP_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	ADMIN_GROUP_QUERY_CATEGORY_UID_ADMIN_GROUP_QUERY_CATEGORY_UID_DISCOVERY   ADMIN_GROUP_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for ADMIN_GROUP_QUERY_CATEGORY_UID.
var (
	ADMIN_GROUP_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "ADMIN_GROUP_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "ADMIN_GROUP_QUERY_CATEGORY_UID_DISCOVERY",
	}
	ADMIN_GROUP_QUERY_CATEGORY_UID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"ADMIN_GROUP_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x ADMIN_GROUP_QUERY_CATEGORY_UID) Enum() *ADMIN_GROUP_QUERY_CATEGORY_UID {
	p := new(ADMIN_GROUP_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[1].Descriptor()
}

func (ADMIN_GROUP_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[1]
}

func (x ADMIN_GROUP_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_CATEGORY_UID.Descriptor instead.
func (ADMIN_GROUP_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{1}
}

type ADMIN_GROUP_QUERY_CLASS_UID int32

const (
	ADMIN_GROUP_QUERY_CLASS_UID_ADMIN_GROUP_QUERY_CLASS_UID_UNSPECIFIED       ADMIN_GROUP_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	ADMIN_GROUP_QUERY_CLASS_UID_ADMIN_GROUP_QUERY_CLASS_UID_ADMIN_GROUP_QUERY ADMIN_GROUP_QUERY_CLASS_UID = 5009 // EnumValue: 5009; Type: OCSF_VALUE;
)

// Enum value maps for ADMIN_GROUP_QUERY_CLASS_UID.
var (
	ADMIN_GROUP_QUERY_CLASS_UID_name = map[int32]string{
		0:    "ADMIN_GROUP_QUERY_CLASS_UID_UNSPECIFIED",
		5009: "ADMIN_GROUP_QUERY_CLASS_UID_ADMIN_GROUP_QUERY",
	}
	ADMIN_GROUP_QUERY_CLASS_UID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_CLASS_UID_UNSPECIFIED":       0,
		"ADMIN_GROUP_QUERY_CLASS_UID_ADMIN_GROUP_QUERY": 5009,
	}
)

func (x ADMIN_GROUP_QUERY_CLASS_UID) Enum() *ADMIN_GROUP_QUERY_CLASS_UID {
	p := new(ADMIN_GROUP_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[2].Descriptor()
}

func (ADMIN_GROUP_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[2]
}

func (x ADMIN_GROUP_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_CLASS_UID.Descriptor instead.
func (ADMIN_GROUP_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{2}
}

type ADMIN_GROUP_QUERY_QUERY_RESULT_ID int32

const (
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNKNOWN        ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_EXISTS         ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_PARTIAL        ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ERROR          ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNSUPPORTED    ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ADMIN_GROUP_QUERY_QUERY_RESULT_ID_OTHER          ADMIN_GROUP_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ADMIN_GROUP_QUERY_QUERY_RESULT_ID.
var (
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "ADMIN_GROUP_QUERY_QUERY_RESULT_ID_OTHER",
	}
	ADMIN_GROUP_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"ADMIN_GROUP_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x ADMIN_GROUP_QUERY_QUERY_RESULT_ID) Enum() *ADMIN_GROUP_QUERY_QUERY_RESULT_ID {
	p := new(ADMIN_GROUP_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[3].Descriptor()
}

func (ADMIN_GROUP_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[3]
}

func (x ADMIN_GROUP_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (ADMIN_GROUP_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{3}
}

type ADMIN_GROUP_QUERY_SEVERITY_ID int32

const (
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_UNKNOWN       ADMIN_GROUP_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_INFORMATIONAL ADMIN_GROUP_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_LOW           ADMIN_GROUP_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_MEDIUM        ADMIN_GROUP_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_HIGH          ADMIN_GROUP_QUERY_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_CRITICAL      ADMIN_GROUP_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_FATAL         ADMIN_GROUP_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ADMIN_GROUP_QUERY_SEVERITY_ID_ADMIN_GROUP_QUERY_SEVERITY_ID_OTHER         ADMIN_GROUP_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ADMIN_GROUP_QUERY_SEVERITY_ID.
var (
	ADMIN_GROUP_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "ADMIN_GROUP_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "ADMIN_GROUP_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "ADMIN_GROUP_QUERY_SEVERITY_ID_LOW",
		3:  "ADMIN_GROUP_QUERY_SEVERITY_ID_MEDIUM",
		4:  "ADMIN_GROUP_QUERY_SEVERITY_ID_HIGH",
		5:  "ADMIN_GROUP_QUERY_SEVERITY_ID_CRITICAL",
		6:  "ADMIN_GROUP_QUERY_SEVERITY_ID_FATAL",
		99: "ADMIN_GROUP_QUERY_SEVERITY_ID_OTHER",
	}
	ADMIN_GROUP_QUERY_SEVERITY_ID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_LOW":           2,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_MEDIUM":        3,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_HIGH":          4,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_CRITICAL":      5,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_FATAL":         6,
		"ADMIN_GROUP_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x ADMIN_GROUP_QUERY_SEVERITY_ID) Enum() *ADMIN_GROUP_QUERY_SEVERITY_ID {
	p := new(ADMIN_GROUP_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[4].Descriptor()
}

func (ADMIN_GROUP_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[4]
}

func (x ADMIN_GROUP_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_SEVERITY_ID.Descriptor instead.
func (ADMIN_GROUP_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{4}
}

type ADMIN_GROUP_QUERY_STATUS_ID int32

const (
	ADMIN_GROUP_QUERY_STATUS_ID_ADMIN_GROUP_QUERY_STATUS_ID_UNKNOWN ADMIN_GROUP_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ADMIN_GROUP_QUERY_STATUS_ID_ADMIN_GROUP_QUERY_STATUS_ID_SUCCESS ADMIN_GROUP_QUERY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	ADMIN_GROUP_QUERY_STATUS_ID_ADMIN_GROUP_QUERY_STATUS_ID_FAILURE ADMIN_GROUP_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ADMIN_GROUP_QUERY_STATUS_ID_ADMIN_GROUP_QUERY_STATUS_ID_OTHER   ADMIN_GROUP_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ADMIN_GROUP_QUERY_STATUS_ID.
var (
	ADMIN_GROUP_QUERY_STATUS_ID_name = map[int32]string{
		0:  "ADMIN_GROUP_QUERY_STATUS_ID_UNKNOWN",
		1:  "ADMIN_GROUP_QUERY_STATUS_ID_SUCCESS",
		2:  "ADMIN_GROUP_QUERY_STATUS_ID_FAILURE",
		99: "ADMIN_GROUP_QUERY_STATUS_ID_OTHER",
	}
	ADMIN_GROUP_QUERY_STATUS_ID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_STATUS_ID_UNKNOWN": 0,
		"ADMIN_GROUP_QUERY_STATUS_ID_SUCCESS": 1,
		"ADMIN_GROUP_QUERY_STATUS_ID_FAILURE": 2,
		"ADMIN_GROUP_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x ADMIN_GROUP_QUERY_STATUS_ID) Enum() *ADMIN_GROUP_QUERY_STATUS_ID {
	p := new(ADMIN_GROUP_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[5].Descriptor()
}

func (ADMIN_GROUP_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[5]
}

func (x ADMIN_GROUP_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_STATUS_ID.Descriptor instead.
func (ADMIN_GROUP_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{5}
}

type ADMIN_GROUP_QUERY_TYPE_UID int32

const (
	ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_TYPE_UID_UNSPECIFIED               ADMIN_GROUP_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_UNKNOWN ADMIN_GROUP_QUERY_TYPE_UID = 500900 // Type: OCSF_VALUE; EnumValue: 500900;
	ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_QUERY   ADMIN_GROUP_QUERY_TYPE_UID = 500901 // Type: OCSF_VALUE; EnumValue: 500901;
	ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_OTHER   ADMIN_GROUP_QUERY_TYPE_UID = 500999 // Type: OCSF_VALUE; EnumValue: 500999;
)

// Enum value maps for ADMIN_GROUP_QUERY_TYPE_UID.
var (
	ADMIN_GROUP_QUERY_TYPE_UID_name = map[int32]string{
		0:      "ADMIN_GROUP_QUERY_TYPE_UID_UNSPECIFIED",
		500900: "ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_UNKNOWN",
		500901: "ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_QUERY",
		500999: "ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_OTHER",
	}
	ADMIN_GROUP_QUERY_TYPE_UID_value = map[string]int32{
		"ADMIN_GROUP_QUERY_TYPE_UID_UNSPECIFIED":               0,
		"ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_UNKNOWN": 500900,
		"ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_QUERY":   500901,
		"ADMIN_GROUP_QUERY_TYPE_UID_ADMIN_GROUP_QUERY_OTHER":   500999,
	}
)

func (x ADMIN_GROUP_QUERY_TYPE_UID) Enum() *ADMIN_GROUP_QUERY_TYPE_UID {
	p := new(ADMIN_GROUP_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x ADMIN_GROUP_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADMIN_GROUP_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[6].Descriptor()
}

func (ADMIN_GROUP_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[6]
}

func (x ADMIN_GROUP_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADMIN_GROUP_QUERY_TYPE_UID.Descriptor instead.
func (ADMIN_GROUP_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{6}
}

type CONFIG_STATE_ACTIVITY_ID int32

const (
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_UNKNOWN CONFIG_STATE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_LOG     CONFIG_STATE_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_COLLECT CONFIG_STATE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_OTHER   CONFIG_STATE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_ACTIVITY_ID.
var (
	CONFIG_STATE_ACTIVITY_ID_name = map[int32]string{
		0:  "CONFIG_STATE_ACTIVITY_ID_UNKNOWN",
		1:  "CONFIG_STATE_ACTIVITY_ID_LOG",
		2:  "CONFIG_STATE_ACTIVITY_ID_COLLECT",
		99: "CONFIG_STATE_ACTIVITY_ID_OTHER",
	}
	CONFIG_STATE_ACTIVITY_ID_value = map[string]int32{
		"CONFIG_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"CONFIG_STATE_ACTIVITY_ID_LOG":     1,
		"CONFIG_STATE_ACTIVITY_ID_COLLECT": 2,
		"CONFIG_STATE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x CONFIG_STATE_ACTIVITY_ID) Enum() *CONFIG_STATE_ACTIVITY_ID {
	p := new(CONFIG_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[7].Descriptor()
}

func (CONFIG_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[7]
}

func (x CONFIG_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_ACTIVITY_ID.Descriptor instead.
func (CONFIG_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{7}
}

type CONFIG_STATE_CATEGORY_UID int32

const (
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_UNSPECIFIED CONFIG_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_DISCOVERY   CONFIG_STATE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for CONFIG_STATE_CATEGORY_UID.
var (
	CONFIG_STATE_CATEGORY_UID_name = map[int32]string{
		0: "CONFIG_STATE_CATEGORY_UID_UNSPECIFIED",
		5: "CONFIG_STATE_CATEGORY_UID_DISCOVERY",
	}
	CONFIG_STATE_CATEGORY_UID_value = map[string]int32{
		"CONFIG_STATE_CATEGORY_UID_UNSPECIFIED": 0,
		"CONFIG_STATE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x CONFIG_STATE_CATEGORY_UID) Enum() *CONFIG_STATE_CATEGORY_UID {
	p := new(CONFIG_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[8].Descriptor()
}

func (CONFIG_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[8]
}

func (x CONFIG_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CATEGORY_UID.Descriptor instead.
func (CONFIG_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{8}
}

type CONFIG_STATE_CLASS_UID int32

const (
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_UNSPECIFIED         CONFIG_STATE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE CONFIG_STATE_CLASS_UID = 5002 // Type: OCSF_VALUE; EnumValue: 5002;
)

// Enum value maps for CONFIG_STATE_CLASS_UID.
var (
	CONFIG_STATE_CLASS_UID_name = map[int32]string{
		0:    "CONFIG_STATE_CLASS_UID_UNSPECIFIED",
		5002: "CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE",
	}
	CONFIG_STATE_CLASS_UID_value = map[string]int32{
		"CONFIG_STATE_CLASS_UID_UNSPECIFIED":         0,
		"CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE": 5002,
	}
)

func (x CONFIG_STATE_CLASS_UID) Enum() *CONFIG_STATE_CLASS_UID {
	p := new(CONFIG_STATE_CLASS_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[9].Descriptor()
}

func (CONFIG_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[9]
}

func (x CONFIG_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CLASS_UID.Descriptor instead.
func (CONFIG_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{9}
}

type CONFIG_STATE_SEVERITY_ID int32

const (
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_UNKNOWN       CONFIG_STATE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_INFORMATIONAL CONFIG_STATE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_LOW           CONFIG_STATE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_MEDIUM        CONFIG_STATE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_HIGH          CONFIG_STATE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_CRITICAL      CONFIG_STATE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_FATAL         CONFIG_STATE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_OTHER         CONFIG_STATE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_SEVERITY_ID.
var (
	CONFIG_STATE_SEVERITY_ID_name = map[int32]string{
		0:  "CONFIG_STATE_SEVERITY_ID_UNKNOWN",
		1:  "CONFIG_STATE_SEVERITY_ID_INFORMATIONAL",
		2:  "CONFIG_STATE_SEVERITY_ID_LOW",
		3:  "CONFIG_STATE_SEVERITY_ID_MEDIUM",
		4:  "CONFIG_STATE_SEVERITY_ID_HIGH",
		5:  "CONFIG_STATE_SEVERITY_ID_CRITICAL",
		6:  "CONFIG_STATE_SEVERITY_ID_FATAL",
		99: "CONFIG_STATE_SEVERITY_ID_OTHER",
	}
	CONFIG_STATE_SEVERITY_ID_value = map[string]int32{
		"CONFIG_STATE_SEVERITY_ID_UNKNOWN":       0,
		"CONFIG_STATE_SEVERITY_ID_INFORMATIONAL": 1,
		"CONFIG_STATE_SEVERITY_ID_LOW":           2,
		"CONFIG_STATE_SEVERITY_ID_MEDIUM":        3,
		"CONFIG_STATE_SEVERITY_ID_HIGH":          4,
		"CONFIG_STATE_SEVERITY_ID_CRITICAL":      5,
		"CONFIG_STATE_SEVERITY_ID_FATAL":         6,
		"CONFIG_STATE_SEVERITY_ID_OTHER":         99,
	}
)

func (x CONFIG_STATE_SEVERITY_ID) Enum() *CONFIG_STATE_SEVERITY_ID {
	p := new(CONFIG_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[10].Descriptor()
}

func (CONFIG_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[10]
}

func (x CONFIG_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_SEVERITY_ID.Descriptor instead.
func (CONFIG_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{10}
}

type CONFIG_STATE_STATUS_ID int32

const (
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_UNKNOWN CONFIG_STATE_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_SUCCESS CONFIG_STATE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_FAILURE CONFIG_STATE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_OTHER   CONFIG_STATE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_STATUS_ID.
var (
	CONFIG_STATE_STATUS_ID_name = map[int32]string{
		0:  "CONFIG_STATE_STATUS_ID_UNKNOWN",
		1:  "CONFIG_STATE_STATUS_ID_SUCCESS",
		2:  "CONFIG_STATE_STATUS_ID_FAILURE",
		99: "CONFIG_STATE_STATUS_ID_OTHER",
	}
	CONFIG_STATE_STATUS_ID_value = map[string]int32{
		"CONFIG_STATE_STATUS_ID_UNKNOWN": 0,
		"CONFIG_STATE_STATUS_ID_SUCCESS": 1,
		"CONFIG_STATE_STATUS_ID_FAILURE": 2,
		"CONFIG_STATE_STATUS_ID_OTHER":   99,
	}
)

func (x CONFIG_STATE_STATUS_ID) Enum() *CONFIG_STATE_STATUS_ID {
	p := new(CONFIG_STATE_STATUS_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[11].Descriptor()
}

func (CONFIG_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[11]
}

func (x CONFIG_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_STATUS_ID.Descriptor instead.
func (CONFIG_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{11}
}

type CONFIG_STATE_TYPE_UID int32

const (
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_UNSPECIFIED                 CONFIG_STATE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN CONFIG_STATE_TYPE_UID = 500200 // Type: OCSF_VALUE; EnumValue: 500200;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG     CONFIG_STATE_TYPE_UID = 500201 // Type: OCSF_VALUE; EnumValue: 500201;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT CONFIG_STATE_TYPE_UID = 500202 // Type: OCSF_VALUE; EnumValue: 500202;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER   CONFIG_STATE_TYPE_UID = 500299 // Type: OCSF_VALUE; EnumValue: 500299;
)

// Enum value maps for CONFIG_STATE_TYPE_UID.
var (
	CONFIG_STATE_TYPE_UID_name = map[int32]string{
		0:      "CONFIG_STATE_TYPE_UID_UNSPECIFIED",
		500200: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN",
		500201: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG",
		500202: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT",
		500299: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER",
	}
	CONFIG_STATE_TYPE_UID_value = map[string]int32{
		"CONFIG_STATE_TYPE_UID_UNSPECIFIED":                 0,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN": 500200,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG":     500201,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT": 500202,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER":   500299,
	}
)

func (x CONFIG_STATE_TYPE_UID) Enum() *CONFIG_STATE_TYPE_UID {
	p := new(CONFIG_STATE_TYPE_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[12].Descriptor()
}

func (CONFIG_STATE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[12]
}

func (x CONFIG_STATE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_TYPE_UID.Descriptor instead.
func (CONFIG_STATE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{12}
}

type DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG     DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER   DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG",
		2:  "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT",
		99: "DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_UNKNOWN": 0,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_LOG":     1,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_COLLECT": 2,
		"DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[13].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[13]
}

func (x DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{13}
}

type DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY   DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_name = map[int32]string{
		0: "DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED",
		5: "DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY",
	}
	DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_UNSPECIFIED": 0,
		"DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[14].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[14]
}

func (x DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{14}
}

type DEVICE_CONFIG_STATE_CHANGE_CLASS_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED                DEVICE_CONFIG_STATE_CHANGE_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE DEVICE_CONFIG_STATE_CHANGE_CLASS_UID = 50019 // Type: OCSF_VALUE; EnumValue: 50019;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_CLASS_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_name = map[int32]string{
		0:     "DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED",
		50019: "DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE",
	}
	DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_UNSPECIFIED":                0,
		"DEVICE_CONFIG_STATE_CHANGE_CLASS_UID_DEVICE_CONFIG_STATE_CHANGE": 50019,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_CLASS_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[15].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[15]
}

func (x DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_CLASS_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{15}
}

type DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN     DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE      DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK     DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER       DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE",
		2:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK",
		3:  "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED",
		99: "DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_UNKNOWN":     0,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_SECURE":      1,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_AT_RISK":     2,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_COMPROMISED": 3,
		"DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID_OTHER":       99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[16].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[16]
}

func (x DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{16}
}

type DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN     DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE      DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK     DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER       DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE",
		2:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK",
		3:  "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED",
		99: "DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_UNKNOWN":     0,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_SECURE":      1,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_AT_RISK":     2,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_COMPROMISED": 3,
		"DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID_OTHER":       99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[17].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[17]
}

func (x DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{17}
}

type DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN       DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW           DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM        DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH          DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL      DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL         DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER         DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL",
		2:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW",
		3:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM",
		4:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH",
		5:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL",
		6:  "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL",
		99: "DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_UNKNOWN":       0,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_INFORMATIONAL": 1,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_LOW":           2,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_MEDIUM":        3,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_HIGH":          4,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_CRITICAL":      5,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_FATAL":         6,
		"DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID_OTHER":         99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[18].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[18]
}

func (x DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{18}
}

type DEVICE_CONFIG_STATE_CHANGE_STATUS_ID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER   DEVICE_CONFIG_STATE_CHANGE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_STATUS_ID.
var (
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_name = map[int32]string{
		0:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN",
		1:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS",
		2:  "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE",
		99: "DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_UNKNOWN": 0,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_SUCCESS": 1,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_FAILURE": 2,
		"DEVICE_CONFIG_STATE_CHANGE_STATUS_ID_OTHER":   99,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Enum() *DEVICE_CONFIG_STATE_CHANGE_STATUS_ID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[19].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[19]
}

func (x DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_STATUS_ID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{19}
}

type DEVICE_CONFIG_STATE_CHANGE_TYPE_UID int32

const (
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED                        DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001900 // EnumValue: 5001900; Type: OCSF_VALUE;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG     DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001901 // Type: OCSF_VALUE; EnumValue: 5001901;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001902 // Type: OCSF_VALUE; EnumValue: 5001902;
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER   DEVICE_CONFIG_STATE_CHANGE_TYPE_UID = 5001999 // Type: OCSF_VALUE; EnumValue: 5001999;
)

// Enum value maps for DEVICE_CONFIG_STATE_CHANGE_TYPE_UID.
var (
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_name = map[int32]string{
		0:       "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED",
		5001900: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN",
		5001901: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG",
		5001902: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT",
		5001999: "DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER",
	}
	DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_value = map[string]int32{
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_UNSPECIFIED":                        0,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_UNKNOWN": 5001900,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_LOG":     5001901,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_COLLECT": 5001902,
		"DEVICE_CONFIG_STATE_CHANGE_TYPE_UID_DEVICE_CONFIG_STATE_CHANGE_OTHER":   5001999,
	}
)

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Enum() *DEVICE_CONFIG_STATE_CHANGE_TYPE_UID {
	p := new(DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)
	*p = x
	return p
}

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[20].Descriptor()
}

func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[20]
}

func (x DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONFIG_STATE_CHANGE_TYPE_UID.Descriptor instead.
func (DEVICE_CONFIG_STATE_CHANGE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{20}
}

type DISCOVERY_ACTIVITY_ID int32

const (
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_UNKNOWN DISCOVERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_LOG     DISCOVERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_COLLECT DISCOVERY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_OTHER   DISCOVERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_ACTIVITY_ID.
var (
	DISCOVERY_ACTIVITY_ID_name = map[int32]string{
		0:  "DISCOVERY_ACTIVITY_ID_UNKNOWN",
		1:  "DISCOVERY_ACTIVITY_ID_LOG",
		2:  "DISCOVERY_ACTIVITY_ID_COLLECT",
		99: "DISCOVERY_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_ACTIVITY_ID_UNKNOWN": 0,
		"DISCOVERY_ACTIVITY_ID_LOG":     1,
		"DISCOVERY_ACTIVITY_ID_COLLECT": 2,
		"DISCOVERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DISCOVERY_ACTIVITY_ID) Enum() *DISCOVERY_ACTIVITY_ID {
	p := new(DISCOVERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[21].Descriptor()
}

func (DISCOVERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[21]
}

func (x DISCOVERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{21}
}

type DISCOVERY_CATEGORY_UID int32

const (
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_UNSPECIFIED DISCOVERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_DISCOVERY   DISCOVERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DISCOVERY_CATEGORY_UID.
var (
	DISCOVERY_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_CATEGORY_UID_UNSPECIFIED",
		5: "DISCOVERY_CATEGORY_UID_DISCOVERY",
	}
	DISCOVERY_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_CATEGORY_UID_UNSPECIFIED": 0,
		"DISCOVERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DISCOVERY_CATEGORY_UID) Enum() *DISCOVERY_CATEGORY_UID {
	p := new(DISCOVERY_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[22].Descriptor()
}

func (DISCOVERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[22]
}

func (x DISCOVERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{22}
}

type DISCOVERY_CLASS_UID int32

const (
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_UNSPECIFIED DISCOVERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_DISCOVERY   DISCOVERY_CLASS_UID = 5000 // Type: OCSF_VALUE; EnumValue: 5000;
)

// Enum value maps for DISCOVERY_CLASS_UID.
var (
	DISCOVERY_CLASS_UID_name = map[int32]string{
		0:    "DISCOVERY_CLASS_UID_UNSPECIFIED",
		5000: "DISCOVERY_CLASS_UID_DISCOVERY",
	}
	DISCOVERY_CLASS_UID_value = map[string]int32{
		"DISCOVERY_CLASS_UID_UNSPECIFIED": 0,
		"DISCOVERY_CLASS_UID_DISCOVERY":   5000,
	}
)

func (x DISCOVERY_CLASS_UID) Enum() *DISCOVERY_CLASS_UID {
	p := new(DISCOVERY_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[23].Descriptor()
}

func (DISCOVERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[23]
}

func (x DISCOVERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CLASS_UID.Descriptor instead.
func (DISCOVERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{23}
}

type DISCOVERY_SEVERITY_ID int32

const (
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_UNKNOWN       DISCOVERY_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_INFORMATIONAL DISCOVERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_LOW           DISCOVERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_MEDIUM        DISCOVERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_HIGH          DISCOVERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_CRITICAL      DISCOVERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_FATAL         DISCOVERY_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_OTHER         DISCOVERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_SEVERITY_ID.
var (
	DISCOVERY_SEVERITY_ID_name = map[int32]string{
		0:  "DISCOVERY_SEVERITY_ID_UNKNOWN",
		1:  "DISCOVERY_SEVERITY_ID_INFORMATIONAL",
		2:  "DISCOVERY_SEVERITY_ID_LOW",
		3:  "DISCOVERY_SEVERITY_ID_MEDIUM",
		4:  "DISCOVERY_SEVERITY_ID_HIGH",
		5:  "DISCOVERY_SEVERITY_ID_CRITICAL",
		6:  "DISCOVERY_SEVERITY_ID_FATAL",
		99: "DISCOVERY_SEVERITY_ID_OTHER",
	}
	DISCOVERY_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_SEVERITY_ID_INFORMATIONAL": 1,
		"DISCOVERY_SEVERITY_ID_LOW":           2,
		"DISCOVERY_SEVERITY_ID_MEDIUM":        3,
		"DISCOVERY_SEVERITY_ID_HIGH":          4,
		"DISCOVERY_SEVERITY_ID_CRITICAL":      5,
		"DISCOVERY_SEVERITY_ID_FATAL":         6,
		"DISCOVERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x DISCOVERY_SEVERITY_ID) Enum() *DISCOVERY_SEVERITY_ID {
	p := new(DISCOVERY_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[24].Descriptor()
}

func (DISCOVERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[24]
}

func (x DISCOVERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{24}
}

type DISCOVERY_STATUS_ID int32

const (
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_UNKNOWN DISCOVERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_SUCCESS DISCOVERY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_FAILURE DISCOVERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_OTHER   DISCOVERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_STATUS_ID.
var (
	DISCOVERY_STATUS_ID_name = map[int32]string{
		0:  "DISCOVERY_STATUS_ID_UNKNOWN",
		1:  "DISCOVERY_STATUS_ID_SUCCESS",
		2:  "DISCOVERY_STATUS_ID_FAILURE",
		99: "DISCOVERY_STATUS_ID_OTHER",
	}
	DISCOVERY_STATUS_ID_value = map[string]int32{
		"DISCOVERY_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_STATUS_ID_SUCCESS": 1,
		"DISCOVERY_STATUS_ID_FAILURE": 2,
		"DISCOVERY_STATUS_ID_OTHER":   99,
	}
)

func (x DISCOVERY_STATUS_ID) Enum() *DISCOVERY_STATUS_ID {
	p := new(DISCOVERY_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[25].Descriptor()
}

func (DISCOVERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[25]
}

func (x DISCOVERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_STATUS_ID.Descriptor instead.
func (DISCOVERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{25}
}

type DISCOVERY_TYPE_UID int32

const (
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_UNSPECIFIED       DISCOVERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN DISCOVERY_TYPE_UID = 500000 // Type: OCSF_VALUE; EnumValue: 500000;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_LOG     DISCOVERY_TYPE_UID = 500001 // Type: OCSF_VALUE; EnumValue: 500001;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_COLLECT DISCOVERY_TYPE_UID = 500002 // Type: OCSF_VALUE; EnumValue: 500002;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_OTHER   DISCOVERY_TYPE_UID = 500099 // Type: OCSF_VALUE; EnumValue: 500099;
)

// Enum value maps for DISCOVERY_TYPE_UID.
var (
	DISCOVERY_TYPE_UID_name = map[int32]string{
		0:      "DISCOVERY_TYPE_UID_UNSPECIFIED",
		500000: "DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN",
		500001: "DISCOVERY_TYPE_UID_DISCOVERY_LOG",
		500002: "DISCOVERY_TYPE_UID_DISCOVERY_COLLECT",
		500099: "DISCOVERY_TYPE_UID_DISCOVERY_OTHER",
	}
	DISCOVERY_TYPE_UID_value = map[string]int32{
		"DISCOVERY_TYPE_UID_UNSPECIFIED":       0,
		"DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN": 500000,
		"DISCOVERY_TYPE_UID_DISCOVERY_LOG":     500001,
		"DISCOVERY_TYPE_UID_DISCOVERY_COLLECT": 500002,
		"DISCOVERY_TYPE_UID_DISCOVERY_OTHER":   500099,
	}
)

func (x DISCOVERY_TYPE_UID) Enum() *DISCOVERY_TYPE_UID {
	p := new(DISCOVERY_TYPE_UID)
	*p = x
	return p
}

func (x DISCOVERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[26].Descriptor()
}

func (DISCOVERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[26]
}

func (x DISCOVERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_TYPE_UID.Descriptor instead.
func (DISCOVERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{26}
}

type DISCOVERY_RESULT_ACTIVITY_ID int32

const (
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN DISCOVERY_RESULT_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_QUERY   DISCOVERY_RESULT_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_ACTIVITY_ID_DISCOVERY_RESULT_ACTIVITY_ID_OTHER   DISCOVERY_RESULT_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_ACTIVITY_ID.
var (
	DISCOVERY_RESULT_ACTIVITY_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_ACTIVITY_ID_QUERY",
		99: "DISCOVERY_RESULT_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_RESULT_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_RESULT_ACTIVITY_ID_UNKNOWN": 0,
		"DISCOVERY_RESULT_ACTIVITY_ID_QUERY":   1,
		"DISCOVERY_RESULT_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DISCOVERY_RESULT_ACTIVITY_ID) Enum() *DISCOVERY_RESULT_ACTIVITY_ID {
	p := new(DISCOVERY_RESULT_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[27].Descriptor()
}

func (DISCOVERY_RESULT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[27]
}

func (x DISCOVERY_RESULT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_RESULT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{27}
}

type DISCOVERY_RESULT_CATEGORY_UID int32

const (
	DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED DISCOVERY_RESULT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY   DISCOVERY_RESULT_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DISCOVERY_RESULT_CATEGORY_UID.
var (
	DISCOVERY_RESULT_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED",
		5: "DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY",
	}
	DISCOVERY_RESULT_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_RESULT_CATEGORY_UID_UNSPECIFIED": 0,
		"DISCOVERY_RESULT_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x DISCOVERY_RESULT_CATEGORY_UID) Enum() *DISCOVERY_RESULT_CATEGORY_UID {
	p := new(DISCOVERY_RESULT_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[28].Descriptor()
}

func (DISCOVERY_RESULT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[28]
}

func (x DISCOVERY_RESULT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_RESULT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{28}
}

type DISCOVERY_RESULT_CLASS_UID int32

const (
	DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED      DISCOVERY_RESULT_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT DISCOVERY_RESULT_CLASS_UID = 5000 // Type: OCSF_VALUE; EnumValue: 5000;
)

// Enum value maps for DISCOVERY_RESULT_CLASS_UID.
var (
	DISCOVERY_RESULT_CLASS_UID_name = map[int32]string{
		0:    "DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED",
		5000: "DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT",
	}
	DISCOVERY_RESULT_CLASS_UID_value = map[string]int32{
		"DISCOVERY_RESULT_CLASS_UID_UNSPECIFIED":      0,
		"DISCOVERY_RESULT_CLASS_UID_DISCOVERY_RESULT": 5000,
	}
)

func (x DISCOVERY_RESULT_CLASS_UID) Enum() *DISCOVERY_RESULT_CLASS_UID {
	p := new(DISCOVERY_RESULT_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[29].Descriptor()
}

func (DISCOVERY_RESULT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[29]
}

func (x DISCOVERY_RESULT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_CLASS_UID.Descriptor instead.
func (DISCOVERY_RESULT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{29}
}

type DISCOVERY_RESULT_QUERY_RESULT_ID int32

const (
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_UNKNOWN        DISCOVERY_RESULT_QUERY_RESULT_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_EXISTS         DISCOVERY_RESULT_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_PARTIAL        DISCOVERY_RESULT_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_DOES_NOT_EXIST DISCOVERY_RESULT_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_ERROR          DISCOVERY_RESULT_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_UNSUPPORTED    DISCOVERY_RESULT_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_RESULT_QUERY_RESULT_ID_DISCOVERY_RESULT_QUERY_RESULT_ID_OTHER          DISCOVERY_RESULT_QUERY_RESULT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_RESULT_QUERY_RESULT_ID.
var (
	DISCOVERY_RESULT_QUERY_RESULT_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_QUERY_RESULT_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_QUERY_RESULT_ID_EXISTS",
		2:  "DISCOVERY_RESULT_QUERY_RESULT_ID_PARTIAL",
		3:  "DISCOVERY_RESULT_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "DISCOVERY_RESULT_QUERY_RESULT_ID_ERROR",
		5:  "DISCOVERY_RESULT_QUERY_RESULT_ID_UNSUPPORTED",
		99: "DISCOVERY_RESULT_QUERY_RESULT_ID_OTHER",
	}
	DISCOVERY_RESULT_QUERY_RESULT_ID_value = map[string]int32{
		"DISCOVERY_RESULT_QUERY_RESULT_ID_UNKNOWN":        0,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_EXISTS":         1,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_PARTIAL":        2,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_ERROR":          4,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"DISCOVERY_RESULT_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x DISCOVERY_RESULT_QUERY_RESULT_ID) Enum() *DISCOVERY_RESULT_QUERY_RESULT_ID {
	p := new(DISCOVERY_RESULT_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[30].Descriptor()
}

func (DISCOVERY_RESULT_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[30]
}

func (x DISCOVERY_RESULT_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_QUERY_RESULT_ID.Descriptor instead.
func (DISCOVERY_RESULT_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{30}
}

type DISCOVERY_RESULT_SEVERITY_ID int32

const (
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN       DISCOVERY_RESULT_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL DISCOVERY_RESULT_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_LOW           DISCOVERY_RESULT_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_MEDIUM        DISCOVERY_RESULT_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_HIGH          DISCOVERY_RESULT_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_CRITICAL      DISCOVERY_RESULT_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_FATAL         DISCOVERY_RESULT_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DISCOVERY_RESULT_SEVERITY_ID_DISCOVERY_RESULT_SEVERITY_ID_OTHER         DISCOVERY_RESULT_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_SEVERITY_ID.
var (
	DISCOVERY_RESULT_SEVERITY_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL",
		2:  "DISCOVERY_RESULT_SEVERITY_ID_LOW",
		3:  "DISCOVERY_RESULT_SEVERITY_ID_MEDIUM",
		4:  "DISCOVERY_RESULT_SEVERITY_ID_HIGH",
		5:  "DISCOVERY_RESULT_SEVERITY_ID_CRITICAL",
		6:  "DISCOVERY_RESULT_SEVERITY_ID_FATAL",
		99: "DISCOVERY_RESULT_SEVERITY_ID_OTHER",
	}
	DISCOVERY_RESULT_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_RESULT_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_RESULT_SEVERITY_ID_INFORMATIONAL": 1,
		"DISCOVERY_RESULT_SEVERITY_ID_LOW":           2,
		"DISCOVERY_RESULT_SEVERITY_ID_MEDIUM":        3,
		"DISCOVERY_RESULT_SEVERITY_ID_HIGH":          4,
		"DISCOVERY_RESULT_SEVERITY_ID_CRITICAL":      5,
		"DISCOVERY_RESULT_SEVERITY_ID_FATAL":         6,
		"DISCOVERY_RESULT_SEVERITY_ID_OTHER":         99,
	}
)

func (x DISCOVERY_RESULT_SEVERITY_ID) Enum() *DISCOVERY_RESULT_SEVERITY_ID {
	p := new(DISCOVERY_RESULT_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[31].Descriptor()
}

func (DISCOVERY_RESULT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[31]
}

func (x DISCOVERY_RESULT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_RESULT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{31}
}

type DISCOVERY_RESULT_STATUS_ID int32

const (
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_UNKNOWN DISCOVERY_RESULT_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_SUCCESS DISCOVERY_RESULT_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_FAILURE DISCOVERY_RESULT_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_RESULT_STATUS_ID_DISCOVERY_RESULT_STATUS_ID_OTHER   DISCOVERY_RESULT_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_RESULT_STATUS_ID.
var (
	DISCOVERY_RESULT_STATUS_ID_name = map[int32]string{
		0:  "DISCOVERY_RESULT_STATUS_ID_UNKNOWN",
		1:  "DISCOVERY_RESULT_STATUS_ID_SUCCESS",
		2:  "DISCOVERY_RESULT_STATUS_ID_FAILURE",
		99: "DISCOVERY_RESULT_STATUS_ID_OTHER",
	}
	DISCOVERY_RESULT_STATUS_ID_value = map[string]int32{
		"DISCOVERY_RESULT_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_RESULT_STATUS_ID_SUCCESS": 1,
		"DISCOVERY_RESULT_STATUS_ID_FAILURE": 2,
		"DISCOVERY_RESULT_STATUS_ID_OTHER":   99,
	}
)

func (x DISCOVERY_RESULT_STATUS_ID) Enum() *DISCOVERY_RESULT_STATUS_ID {
	p := new(DISCOVERY_RESULT_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[32].Descriptor()
}

func (DISCOVERY_RESULT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[32]
}

func (x DISCOVERY_RESULT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_STATUS_ID.Descriptor instead.
func (DISCOVERY_RESULT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{32}
}

type DISCOVERY_RESULT_TYPE_UID int32

const (
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED              DISCOVERY_RESULT_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN DISCOVERY_RESULT_TYPE_UID = 500000 // Type: OCSF_VALUE; EnumValue: 500000;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_QUERY   DISCOVERY_RESULT_TYPE_UID = 500001 // EnumValue: 500001; Type: OCSF_VALUE;
	DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER   DISCOVERY_RESULT_TYPE_UID = 500099 // Type: OCSF_VALUE; EnumValue: 500099;
)

// Enum value maps for DISCOVERY_RESULT_TYPE_UID.
var (
	DISCOVERY_RESULT_TYPE_UID_name = map[int32]string{
		0:      "DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED",
		500000: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN",
		500001: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_QUERY",
		500099: "DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER",
	}
	DISCOVERY_RESULT_TYPE_UID_value = map[string]int32{
		"DISCOVERY_RESULT_TYPE_UID_UNSPECIFIED":              0,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_UNKNOWN": 500000,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_QUERY":   500001,
		"DISCOVERY_RESULT_TYPE_UID_DISCOVERY_RESULT_OTHER":   500099,
	}
)

func (x DISCOVERY_RESULT_TYPE_UID) Enum() *DISCOVERY_RESULT_TYPE_UID {
	p := new(DISCOVERY_RESULT_TYPE_UID)
	*p = x
	return p
}

func (x DISCOVERY_RESULT_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_RESULT_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[33].Descriptor()
}

func (DISCOVERY_RESULT_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[33]
}

func (x DISCOVERY_RESULT_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_RESULT_TYPE_UID.Descriptor instead.
func (DISCOVERY_RESULT_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{33}
}

type FILE_QUERY_ACTIVITY_ID int32

const (
	FILE_QUERY_ACTIVITY_ID_FILE_QUERY_ACTIVITY_ID_UNKNOWN FILE_QUERY_ACTIVITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FILE_QUERY_ACTIVITY_ID_FILE_QUERY_ACTIVITY_ID_QUERY   FILE_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_QUERY_ACTIVITY_ID_FILE_QUERY_ACTIVITY_ID_OTHER   FILE_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_QUERY_ACTIVITY_ID.
var (
	FILE_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "FILE_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "FILE_QUERY_ACTIVITY_ID_QUERY",
		99: "FILE_QUERY_ACTIVITY_ID_OTHER",
	}
	FILE_QUERY_ACTIVITY_ID_value = map[string]int32{
		"FILE_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"FILE_QUERY_ACTIVITY_ID_QUERY":   1,
		"FILE_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FILE_QUERY_ACTIVITY_ID) Enum() *FILE_QUERY_ACTIVITY_ID {
	p := new(FILE_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FILE_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[34].Descriptor()
}

func (FILE_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[34]
}

func (x FILE_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_ACTIVITY_ID.Descriptor instead.
func (FILE_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{34}
}

type FILE_QUERY_CATEGORY_UID int32

const (
	FILE_QUERY_CATEGORY_UID_FILE_QUERY_CATEGORY_UID_UNSPECIFIED FILE_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_QUERY_CATEGORY_UID_FILE_QUERY_CATEGORY_UID_DISCOVERY   FILE_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for FILE_QUERY_CATEGORY_UID.
var (
	FILE_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "FILE_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "FILE_QUERY_CATEGORY_UID_DISCOVERY",
	}
	FILE_QUERY_CATEGORY_UID_value = map[string]int32{
		"FILE_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"FILE_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x FILE_QUERY_CATEGORY_UID) Enum() *FILE_QUERY_CATEGORY_UID {
	p := new(FILE_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x FILE_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[35].Descriptor()
}

func (FILE_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[35]
}

func (x FILE_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_CATEGORY_UID.Descriptor instead.
func (FILE_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{35}
}

type FILE_QUERY_CLASS_UID int32

const (
	FILE_QUERY_CLASS_UID_FILE_QUERY_CLASS_UID_UNSPECIFIED FILE_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FILE_QUERY_CLASS_UID_FILE_QUERY_CLASS_UID_FILE_QUERY  FILE_QUERY_CLASS_UID = 5007 // Type: OCSF_VALUE; EnumValue: 5007;
)

// Enum value maps for FILE_QUERY_CLASS_UID.
var (
	FILE_QUERY_CLASS_UID_name = map[int32]string{
		0:    "FILE_QUERY_CLASS_UID_UNSPECIFIED",
		5007: "FILE_QUERY_CLASS_UID_FILE_QUERY",
	}
	FILE_QUERY_CLASS_UID_value = map[string]int32{
		"FILE_QUERY_CLASS_UID_UNSPECIFIED": 0,
		"FILE_QUERY_CLASS_UID_FILE_QUERY":  5007,
	}
)

func (x FILE_QUERY_CLASS_UID) Enum() *FILE_QUERY_CLASS_UID {
	p := new(FILE_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x FILE_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[36].Descriptor()
}

func (FILE_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[36]
}

func (x FILE_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_CLASS_UID.Descriptor instead.
func (FILE_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{36}
}

type FILE_QUERY_QUERY_RESULT_ID int32

const (
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_UNKNOWN        FILE_QUERY_QUERY_RESULT_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_EXISTS         FILE_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_PARTIAL        FILE_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST FILE_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_ERROR          FILE_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_UNSUPPORTED    FILE_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_QUERY_QUERY_RESULT_ID_FILE_QUERY_QUERY_RESULT_ID_OTHER          FILE_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_QUERY_QUERY_RESULT_ID.
var (
	FILE_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "FILE_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "FILE_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "FILE_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "FILE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "FILE_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "FILE_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "FILE_QUERY_QUERY_RESULT_ID_OTHER",
	}
	FILE_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"FILE_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"FILE_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"FILE_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"FILE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"FILE_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"FILE_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"FILE_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x FILE_QUERY_QUERY_RESULT_ID) Enum() *FILE_QUERY_QUERY_RESULT_ID {
	p := new(FILE_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x FILE_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[37].Descriptor()
}

func (FILE_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[37]
}

func (x FILE_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (FILE_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{37}
}

type FILE_QUERY_SEVERITY_ID int32

const (
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_UNKNOWN       FILE_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_INFORMATIONAL FILE_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_LOW           FILE_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_MEDIUM        FILE_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_HIGH          FILE_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_CRITICAL      FILE_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_FATAL         FILE_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_QUERY_SEVERITY_ID_FILE_QUERY_SEVERITY_ID_OTHER         FILE_QUERY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for FILE_QUERY_SEVERITY_ID.
var (
	FILE_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "FILE_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "FILE_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "FILE_QUERY_SEVERITY_ID_LOW",
		3:  "FILE_QUERY_SEVERITY_ID_MEDIUM",
		4:  "FILE_QUERY_SEVERITY_ID_HIGH",
		5:  "FILE_QUERY_SEVERITY_ID_CRITICAL",
		6:  "FILE_QUERY_SEVERITY_ID_FATAL",
		99: "FILE_QUERY_SEVERITY_ID_OTHER",
	}
	FILE_QUERY_SEVERITY_ID_value = map[string]int32{
		"FILE_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"FILE_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"FILE_QUERY_SEVERITY_ID_LOW":           2,
		"FILE_QUERY_SEVERITY_ID_MEDIUM":        3,
		"FILE_QUERY_SEVERITY_ID_HIGH":          4,
		"FILE_QUERY_SEVERITY_ID_CRITICAL":      5,
		"FILE_QUERY_SEVERITY_ID_FATAL":         6,
		"FILE_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x FILE_QUERY_SEVERITY_ID) Enum() *FILE_QUERY_SEVERITY_ID {
	p := new(FILE_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x FILE_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[38].Descriptor()
}

func (FILE_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[38]
}

func (x FILE_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_SEVERITY_ID.Descriptor instead.
func (FILE_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{38}
}

type FILE_QUERY_STATUS_ID int32

const (
	FILE_QUERY_STATUS_ID_FILE_QUERY_STATUS_ID_UNKNOWN FILE_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_QUERY_STATUS_ID_FILE_QUERY_STATUS_ID_SUCCESS FILE_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_QUERY_STATUS_ID_FILE_QUERY_STATUS_ID_FAILURE FILE_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_QUERY_STATUS_ID_FILE_QUERY_STATUS_ID_OTHER   FILE_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_QUERY_STATUS_ID.
var (
	FILE_QUERY_STATUS_ID_name = map[int32]string{
		0:  "FILE_QUERY_STATUS_ID_UNKNOWN",
		1:  "FILE_QUERY_STATUS_ID_SUCCESS",
		2:  "FILE_QUERY_STATUS_ID_FAILURE",
		99: "FILE_QUERY_STATUS_ID_OTHER",
	}
	FILE_QUERY_STATUS_ID_value = map[string]int32{
		"FILE_QUERY_STATUS_ID_UNKNOWN": 0,
		"FILE_QUERY_STATUS_ID_SUCCESS": 1,
		"FILE_QUERY_STATUS_ID_FAILURE": 2,
		"FILE_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x FILE_QUERY_STATUS_ID) Enum() *FILE_QUERY_STATUS_ID {
	p := new(FILE_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x FILE_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[39].Descriptor()
}

func (FILE_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[39]
}

func (x FILE_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_STATUS_ID.Descriptor instead.
func (FILE_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{39}
}

type FILE_QUERY_TYPE_UID int32

const (
	FILE_QUERY_TYPE_UID_FILE_QUERY_TYPE_UID_UNSPECIFIED        FILE_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FILE_QUERY_TYPE_UID_FILE_QUERY_TYPE_UID_FILE_QUERY_UNKNOWN FILE_QUERY_TYPE_UID = 500700 // Type: OCSF_VALUE; EnumValue: 500700;
	FILE_QUERY_TYPE_UID_FILE_QUERY_TYPE_UID_FILE_QUERY_QUERY   FILE_QUERY_TYPE_UID = 500701 // Type: OCSF_VALUE; EnumValue: 500701;
	FILE_QUERY_TYPE_UID_FILE_QUERY_TYPE_UID_FILE_QUERY_OTHER   FILE_QUERY_TYPE_UID = 500799 // Type: OCSF_VALUE; EnumValue: 500799;
)

// Enum value maps for FILE_QUERY_TYPE_UID.
var (
	FILE_QUERY_TYPE_UID_name = map[int32]string{
		0:      "FILE_QUERY_TYPE_UID_UNSPECIFIED",
		500700: "FILE_QUERY_TYPE_UID_FILE_QUERY_UNKNOWN",
		500701: "FILE_QUERY_TYPE_UID_FILE_QUERY_QUERY",
		500799: "FILE_QUERY_TYPE_UID_FILE_QUERY_OTHER",
	}
	FILE_QUERY_TYPE_UID_value = map[string]int32{
		"FILE_QUERY_TYPE_UID_UNSPECIFIED":        0,
		"FILE_QUERY_TYPE_UID_FILE_QUERY_UNKNOWN": 500700,
		"FILE_QUERY_TYPE_UID_FILE_QUERY_QUERY":   500701,
		"FILE_QUERY_TYPE_UID_FILE_QUERY_OTHER":   500799,
	}
)

func (x FILE_QUERY_TYPE_UID) Enum() *FILE_QUERY_TYPE_UID {
	p := new(FILE_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x FILE_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[40].Descriptor()
}

func (FILE_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[40]
}

func (x FILE_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_QUERY_TYPE_UID.Descriptor instead.
func (FILE_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{40}
}

type FOLDER_QUERY_ACTIVITY_ID int32

const (
	FOLDER_QUERY_ACTIVITY_ID_FOLDER_QUERY_ACTIVITY_ID_UNKNOWN FOLDER_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FOLDER_QUERY_ACTIVITY_ID_FOLDER_QUERY_ACTIVITY_ID_QUERY   FOLDER_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FOLDER_QUERY_ACTIVITY_ID_FOLDER_QUERY_ACTIVITY_ID_OTHER   FOLDER_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FOLDER_QUERY_ACTIVITY_ID.
var (
	FOLDER_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "FOLDER_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "FOLDER_QUERY_ACTIVITY_ID_QUERY",
		99: "FOLDER_QUERY_ACTIVITY_ID_OTHER",
	}
	FOLDER_QUERY_ACTIVITY_ID_value = map[string]int32{
		"FOLDER_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"FOLDER_QUERY_ACTIVITY_ID_QUERY":   1,
		"FOLDER_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FOLDER_QUERY_ACTIVITY_ID) Enum() *FOLDER_QUERY_ACTIVITY_ID {
	p := new(FOLDER_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FOLDER_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[41].Descriptor()
}

func (FOLDER_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[41]
}

func (x FOLDER_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_ACTIVITY_ID.Descriptor instead.
func (FOLDER_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{41}
}

type FOLDER_QUERY_CATEGORY_UID int32

const (
	FOLDER_QUERY_CATEGORY_UID_FOLDER_QUERY_CATEGORY_UID_UNSPECIFIED FOLDER_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FOLDER_QUERY_CATEGORY_UID_FOLDER_QUERY_CATEGORY_UID_DISCOVERY   FOLDER_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for FOLDER_QUERY_CATEGORY_UID.
var (
	FOLDER_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "FOLDER_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "FOLDER_QUERY_CATEGORY_UID_DISCOVERY",
	}
	FOLDER_QUERY_CATEGORY_UID_value = map[string]int32{
		"FOLDER_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"FOLDER_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x FOLDER_QUERY_CATEGORY_UID) Enum() *FOLDER_QUERY_CATEGORY_UID {
	p := new(FOLDER_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x FOLDER_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[42].Descriptor()
}

func (FOLDER_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[42]
}

func (x FOLDER_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_CATEGORY_UID.Descriptor instead.
func (FOLDER_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{42}
}

type FOLDER_QUERY_CLASS_UID int32

const (
	FOLDER_QUERY_CLASS_UID_FOLDER_QUERY_CLASS_UID_UNSPECIFIED  FOLDER_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FOLDER_QUERY_CLASS_UID_FOLDER_QUERY_CLASS_UID_FOLDER_QUERY FOLDER_QUERY_CLASS_UID = 5008 // Type: OCSF_VALUE; EnumValue: 5008;
)

// Enum value maps for FOLDER_QUERY_CLASS_UID.
var (
	FOLDER_QUERY_CLASS_UID_name = map[int32]string{
		0:    "FOLDER_QUERY_CLASS_UID_UNSPECIFIED",
		5008: "FOLDER_QUERY_CLASS_UID_FOLDER_QUERY",
	}
	FOLDER_QUERY_CLASS_UID_value = map[string]int32{
		"FOLDER_QUERY_CLASS_UID_UNSPECIFIED":  0,
		"FOLDER_QUERY_CLASS_UID_FOLDER_QUERY": 5008,
	}
)

func (x FOLDER_QUERY_CLASS_UID) Enum() *FOLDER_QUERY_CLASS_UID {
	p := new(FOLDER_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x FOLDER_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[43].Descriptor()
}

func (FOLDER_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[43]
}

func (x FOLDER_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_CLASS_UID.Descriptor instead.
func (FOLDER_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{43}
}

type FOLDER_QUERY_QUERY_RESULT_ID int32

const (
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_UNKNOWN        FOLDER_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_EXISTS         FOLDER_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_PARTIAL        FOLDER_QUERY_QUERY_RESULT_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST FOLDER_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_ERROR          FOLDER_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_UNSUPPORTED    FOLDER_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FOLDER_QUERY_QUERY_RESULT_ID_FOLDER_QUERY_QUERY_RESULT_ID_OTHER          FOLDER_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FOLDER_QUERY_QUERY_RESULT_ID.
var (
	FOLDER_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "FOLDER_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "FOLDER_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "FOLDER_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "FOLDER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "FOLDER_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "FOLDER_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "FOLDER_QUERY_QUERY_RESULT_ID_OTHER",
	}
	FOLDER_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"FOLDER_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"FOLDER_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"FOLDER_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"FOLDER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"FOLDER_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"FOLDER_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"FOLDER_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x FOLDER_QUERY_QUERY_RESULT_ID) Enum() *FOLDER_QUERY_QUERY_RESULT_ID {
	p := new(FOLDER_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x FOLDER_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[44].Descriptor()
}

func (FOLDER_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[44]
}

func (x FOLDER_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (FOLDER_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{44}
}

type FOLDER_QUERY_SEVERITY_ID int32

const (
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_UNKNOWN       FOLDER_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_INFORMATIONAL FOLDER_QUERY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_LOW           FOLDER_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_MEDIUM        FOLDER_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_HIGH          FOLDER_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_CRITICAL      FOLDER_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_FATAL         FOLDER_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FOLDER_QUERY_SEVERITY_ID_FOLDER_QUERY_SEVERITY_ID_OTHER         FOLDER_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FOLDER_QUERY_SEVERITY_ID.
var (
	FOLDER_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "FOLDER_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "FOLDER_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "FOLDER_QUERY_SEVERITY_ID_LOW",
		3:  "FOLDER_QUERY_SEVERITY_ID_MEDIUM",
		4:  "FOLDER_QUERY_SEVERITY_ID_HIGH",
		5:  "FOLDER_QUERY_SEVERITY_ID_CRITICAL",
		6:  "FOLDER_QUERY_SEVERITY_ID_FATAL",
		99: "FOLDER_QUERY_SEVERITY_ID_OTHER",
	}
	FOLDER_QUERY_SEVERITY_ID_value = map[string]int32{
		"FOLDER_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"FOLDER_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"FOLDER_QUERY_SEVERITY_ID_LOW":           2,
		"FOLDER_QUERY_SEVERITY_ID_MEDIUM":        3,
		"FOLDER_QUERY_SEVERITY_ID_HIGH":          4,
		"FOLDER_QUERY_SEVERITY_ID_CRITICAL":      5,
		"FOLDER_QUERY_SEVERITY_ID_FATAL":         6,
		"FOLDER_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x FOLDER_QUERY_SEVERITY_ID) Enum() *FOLDER_QUERY_SEVERITY_ID {
	p := new(FOLDER_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x FOLDER_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[45].Descriptor()
}

func (FOLDER_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[45]
}

func (x FOLDER_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_SEVERITY_ID.Descriptor instead.
func (FOLDER_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{45}
}

type FOLDER_QUERY_STATUS_ID int32

const (
	FOLDER_QUERY_STATUS_ID_FOLDER_QUERY_STATUS_ID_UNKNOWN FOLDER_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FOLDER_QUERY_STATUS_ID_FOLDER_QUERY_STATUS_ID_SUCCESS FOLDER_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FOLDER_QUERY_STATUS_ID_FOLDER_QUERY_STATUS_ID_FAILURE FOLDER_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FOLDER_QUERY_STATUS_ID_FOLDER_QUERY_STATUS_ID_OTHER   FOLDER_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FOLDER_QUERY_STATUS_ID.
var (
	FOLDER_QUERY_STATUS_ID_name = map[int32]string{
		0:  "FOLDER_QUERY_STATUS_ID_UNKNOWN",
		1:  "FOLDER_QUERY_STATUS_ID_SUCCESS",
		2:  "FOLDER_QUERY_STATUS_ID_FAILURE",
		99: "FOLDER_QUERY_STATUS_ID_OTHER",
	}
	FOLDER_QUERY_STATUS_ID_value = map[string]int32{
		"FOLDER_QUERY_STATUS_ID_UNKNOWN": 0,
		"FOLDER_QUERY_STATUS_ID_SUCCESS": 1,
		"FOLDER_QUERY_STATUS_ID_FAILURE": 2,
		"FOLDER_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x FOLDER_QUERY_STATUS_ID) Enum() *FOLDER_QUERY_STATUS_ID {
	p := new(FOLDER_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x FOLDER_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[46].Descriptor()
}

func (FOLDER_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[46]
}

func (x FOLDER_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_STATUS_ID.Descriptor instead.
func (FOLDER_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{46}
}

type FOLDER_QUERY_TYPE_UID int32

const (
	FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_TYPE_UID_UNSPECIFIED          FOLDER_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_UNKNOWN FOLDER_QUERY_TYPE_UID = 500800 // Type: OCSF_VALUE; EnumValue: 500800;
	FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_QUERY   FOLDER_QUERY_TYPE_UID = 500801 // Type: OCSF_VALUE; EnumValue: 500801;
	FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_OTHER   FOLDER_QUERY_TYPE_UID = 500899 // Type: OCSF_VALUE; EnumValue: 500899;
)

// Enum value maps for FOLDER_QUERY_TYPE_UID.
var (
	FOLDER_QUERY_TYPE_UID_name = map[int32]string{
		0:      "FOLDER_QUERY_TYPE_UID_UNSPECIFIED",
		500800: "FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_UNKNOWN",
		500801: "FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_QUERY",
		500899: "FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_OTHER",
	}
	FOLDER_QUERY_TYPE_UID_value = map[string]int32{
		"FOLDER_QUERY_TYPE_UID_UNSPECIFIED":          0,
		"FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_UNKNOWN": 500800,
		"FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_QUERY":   500801,
		"FOLDER_QUERY_TYPE_UID_FOLDER_QUERY_OTHER":   500899,
	}
)

func (x FOLDER_QUERY_TYPE_UID) Enum() *FOLDER_QUERY_TYPE_UID {
	p := new(FOLDER_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x FOLDER_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOLDER_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[47].Descriptor()
}

func (FOLDER_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[47]
}

func (x FOLDER_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FOLDER_QUERY_TYPE_UID.Descriptor instead.
func (FOLDER_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{47}
}

type INVENTORY_INFO_ACTIVITY_ID int32

const (
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_UNKNOWN INVENTORY_INFO_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_LOG     INVENTORY_INFO_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_COLLECT INVENTORY_INFO_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_OTHER   INVENTORY_INFO_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INVENTORY_INFO_ACTIVITY_ID.
var (
	INVENTORY_INFO_ACTIVITY_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_ACTIVITY_ID_UNKNOWN",
		1:  "INVENTORY_INFO_ACTIVITY_ID_LOG",
		2:  "INVENTORY_INFO_ACTIVITY_ID_COLLECT",
		99: "INVENTORY_INFO_ACTIVITY_ID_OTHER",
	}
	INVENTORY_INFO_ACTIVITY_ID_value = map[string]int32{
		"INVENTORY_INFO_ACTIVITY_ID_UNKNOWN": 0,
		"INVENTORY_INFO_ACTIVITY_ID_LOG":     1,
		"INVENTORY_INFO_ACTIVITY_ID_COLLECT": 2,
		"INVENTORY_INFO_ACTIVITY_ID_OTHER":   99,
	}
)

func (x INVENTORY_INFO_ACTIVITY_ID) Enum() *INVENTORY_INFO_ACTIVITY_ID {
	p := new(INVENTORY_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[48].Descriptor()
}

func (INVENTORY_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[48]
}

func (x INVENTORY_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_ACTIVITY_ID.Descriptor instead.
func (INVENTORY_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{48}
}

type INVENTORY_INFO_CATEGORY_UID int32

const (
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED INVENTORY_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_DISCOVERY   INVENTORY_INFO_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for INVENTORY_INFO_CATEGORY_UID.
var (
	INVENTORY_INFO_CATEGORY_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED",
		5: "INVENTORY_INFO_CATEGORY_UID_DISCOVERY",
	}
	INVENTORY_INFO_CATEGORY_UID_value = map[string]int32{
		"INVENTORY_INFO_CATEGORY_UID_UNSPECIFIED": 0,
		"INVENTORY_INFO_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x INVENTORY_INFO_CATEGORY_UID) Enum() *INVENTORY_INFO_CATEGORY_UID {
	p := new(INVENTORY_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[49].Descriptor()
}

func (INVENTORY_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[49]
}

func (x INVENTORY_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CATEGORY_UID.Descriptor instead.
func (INVENTORY_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{49}
}

type INVENTORY_INFO_CLASS_UID int32

const (
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_UNSPECIFIED           INVENTORY_INFO_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO INVENTORY_INFO_CLASS_UID = 5001 // Type: OCSF_VALUE; EnumValue: 5001;
)

// Enum value maps for INVENTORY_INFO_CLASS_UID.
var (
	INVENTORY_INFO_CLASS_UID_name = map[int32]string{
		0:    "INVENTORY_INFO_CLASS_UID_UNSPECIFIED",
		5001: "INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO",
	}
	INVENTORY_INFO_CLASS_UID_value = map[string]int32{
		"INVENTORY_INFO_CLASS_UID_UNSPECIFIED":           0,
		"INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO": 5001,
	}
)

func (x INVENTORY_INFO_CLASS_UID) Enum() *INVENTORY_INFO_CLASS_UID {
	p := new(INVENTORY_INFO_CLASS_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[50].Descriptor()
}

func (INVENTORY_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[50]
}

func (x INVENTORY_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CLASS_UID.Descriptor instead.
func (INVENTORY_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{50}
}

type INVENTORY_INFO_SEVERITY_ID int32

const (
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_UNKNOWN       INVENTORY_INFO_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL INVENTORY_INFO_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_LOW           INVENTORY_INFO_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_MEDIUM        INVENTORY_INFO_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_HIGH          INVENTORY_INFO_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_CRITICAL      INVENTORY_INFO_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_FATAL         INVENTORY_INFO_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_OTHER         INVENTORY_INFO_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_SEVERITY_ID.
var (
	INVENTORY_INFO_SEVERITY_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_SEVERITY_ID_UNKNOWN",
		1:  "INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL",
		2:  "INVENTORY_INFO_SEVERITY_ID_LOW",
		3:  "INVENTORY_INFO_SEVERITY_ID_MEDIUM",
		4:  "INVENTORY_INFO_SEVERITY_ID_HIGH",
		5:  "INVENTORY_INFO_SEVERITY_ID_CRITICAL",
		6:  "INVENTORY_INFO_SEVERITY_ID_FATAL",
		99: "INVENTORY_INFO_SEVERITY_ID_OTHER",
	}
	INVENTORY_INFO_SEVERITY_ID_value = map[string]int32{
		"INVENTORY_INFO_SEVERITY_ID_UNKNOWN":       0,
		"INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL": 1,
		"INVENTORY_INFO_SEVERITY_ID_LOW":           2,
		"INVENTORY_INFO_SEVERITY_ID_MEDIUM":        3,
		"INVENTORY_INFO_SEVERITY_ID_HIGH":          4,
		"INVENTORY_INFO_SEVERITY_ID_CRITICAL":      5,
		"INVENTORY_INFO_SEVERITY_ID_FATAL":         6,
		"INVENTORY_INFO_SEVERITY_ID_OTHER":         99,
	}
)

func (x INVENTORY_INFO_SEVERITY_ID) Enum() *INVENTORY_INFO_SEVERITY_ID {
	p := new(INVENTORY_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[51].Descriptor()
}

func (INVENTORY_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[51]
}

func (x INVENTORY_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_SEVERITY_ID.Descriptor instead.
func (INVENTORY_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{51}
}

type INVENTORY_INFO_STATUS_ID int32

const (
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_UNKNOWN INVENTORY_INFO_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_SUCCESS INVENTORY_INFO_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_FAILURE INVENTORY_INFO_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_OTHER   INVENTORY_INFO_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_STATUS_ID.
var (
	INVENTORY_INFO_STATUS_ID_name = map[int32]string{
		0:  "INVENTORY_INFO_STATUS_ID_UNKNOWN",
		1:  "INVENTORY_INFO_STATUS_ID_SUCCESS",
		2:  "INVENTORY_INFO_STATUS_ID_FAILURE",
		99: "INVENTORY_INFO_STATUS_ID_OTHER",
	}
	INVENTORY_INFO_STATUS_ID_value = map[string]int32{
		"INVENTORY_INFO_STATUS_ID_UNKNOWN": 0,
		"INVENTORY_INFO_STATUS_ID_SUCCESS": 1,
		"INVENTORY_INFO_STATUS_ID_FAILURE": 2,
		"INVENTORY_INFO_STATUS_ID_OTHER":   99,
	}
)

func (x INVENTORY_INFO_STATUS_ID) Enum() *INVENTORY_INFO_STATUS_ID {
	p := new(INVENTORY_INFO_STATUS_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[52].Descriptor()
}

func (INVENTORY_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[52]
}

func (x INVENTORY_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_STATUS_ID.Descriptor instead.
func (INVENTORY_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{52}
}

type INVENTORY_INFO_TYPE_UID int32

const (
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_UNSPECIFIED                   INVENTORY_INFO_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN INVENTORY_INFO_TYPE_UID = 500100 // Type: OCSF_VALUE; EnumValue: 500100;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG     INVENTORY_INFO_TYPE_UID = 500101 // Type: OCSF_VALUE; EnumValue: 500101;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT INVENTORY_INFO_TYPE_UID = 500102 // Type: OCSF_VALUE; EnumValue: 500102;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER   INVENTORY_INFO_TYPE_UID = 500199 // Type: OCSF_VALUE; EnumValue: 500199;
)

// Enum value maps for INVENTORY_INFO_TYPE_UID.
var (
	INVENTORY_INFO_TYPE_UID_name = map[int32]string{
		0:      "INVENTORY_INFO_TYPE_UID_UNSPECIFIED",
		500100: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN",
		500101: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG",
		500102: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT",
		500199: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER",
	}
	INVENTORY_INFO_TYPE_UID_value = map[string]int32{
		"INVENTORY_INFO_TYPE_UID_UNSPECIFIED":                   0,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN": 500100,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG":     500101,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT": 500102,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER":   500199,
	}
)

func (x INVENTORY_INFO_TYPE_UID) Enum() *INVENTORY_INFO_TYPE_UID {
	p := new(INVENTORY_INFO_TYPE_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[53].Descriptor()
}

func (INVENTORY_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[53]
}

func (x INVENTORY_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_TYPE_UID.Descriptor instead.
func (INVENTORY_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{53}
}

type JOB_QUERY_ACTIVITY_ID int32

const (
	JOB_QUERY_ACTIVITY_ID_JOB_QUERY_ACTIVITY_ID_UNKNOWN JOB_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	JOB_QUERY_ACTIVITY_ID_JOB_QUERY_ACTIVITY_ID_QUERY   JOB_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	JOB_QUERY_ACTIVITY_ID_JOB_QUERY_ACTIVITY_ID_OTHER   JOB_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for JOB_QUERY_ACTIVITY_ID.
var (
	JOB_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "JOB_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "JOB_QUERY_ACTIVITY_ID_QUERY",
		99: "JOB_QUERY_ACTIVITY_ID_OTHER",
	}
	JOB_QUERY_ACTIVITY_ID_value = map[string]int32{
		"JOB_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"JOB_QUERY_ACTIVITY_ID_QUERY":   1,
		"JOB_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x JOB_QUERY_ACTIVITY_ID) Enum() *JOB_QUERY_ACTIVITY_ID {
	p := new(JOB_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x JOB_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[54].Descriptor()
}

func (JOB_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[54]
}

func (x JOB_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_ACTIVITY_ID.Descriptor instead.
func (JOB_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{54}
}

type JOB_QUERY_CATEGORY_UID int32

const (
	JOB_QUERY_CATEGORY_UID_JOB_QUERY_CATEGORY_UID_UNSPECIFIED JOB_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	JOB_QUERY_CATEGORY_UID_JOB_QUERY_CATEGORY_UID_DISCOVERY   JOB_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for JOB_QUERY_CATEGORY_UID.
var (
	JOB_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "JOB_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "JOB_QUERY_CATEGORY_UID_DISCOVERY",
	}
	JOB_QUERY_CATEGORY_UID_value = map[string]int32{
		"JOB_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"JOB_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x JOB_QUERY_CATEGORY_UID) Enum() *JOB_QUERY_CATEGORY_UID {
	p := new(JOB_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x JOB_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[55].Descriptor()
}

func (JOB_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[55]
}

func (x JOB_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_CATEGORY_UID.Descriptor instead.
func (JOB_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{55}
}

type JOB_QUERY_CLASS_UID int32

const (
	JOB_QUERY_CLASS_UID_JOB_QUERY_CLASS_UID_UNSPECIFIED JOB_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	JOB_QUERY_CLASS_UID_JOB_QUERY_CLASS_UID_JOB_QUERY   JOB_QUERY_CLASS_UID = 50010 // Type: OCSF_VALUE; EnumValue: 50010;
)

// Enum value maps for JOB_QUERY_CLASS_UID.
var (
	JOB_QUERY_CLASS_UID_name = map[int32]string{
		0:     "JOB_QUERY_CLASS_UID_UNSPECIFIED",
		50010: "JOB_QUERY_CLASS_UID_JOB_QUERY",
	}
	JOB_QUERY_CLASS_UID_value = map[string]int32{
		"JOB_QUERY_CLASS_UID_UNSPECIFIED": 0,
		"JOB_QUERY_CLASS_UID_JOB_QUERY":   50010,
	}
)

func (x JOB_QUERY_CLASS_UID) Enum() *JOB_QUERY_CLASS_UID {
	p := new(JOB_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x JOB_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[56].Descriptor()
}

func (JOB_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[56]
}

func (x JOB_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_CLASS_UID.Descriptor instead.
func (JOB_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{56}
}

type JOB_QUERY_QUERY_RESULT_ID int32

const (
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_UNKNOWN        JOB_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_EXISTS         JOB_QUERY_QUERY_RESULT_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_PARTIAL        JOB_QUERY_QUERY_RESULT_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST JOB_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_ERROR          JOB_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_UNSUPPORTED    JOB_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	JOB_QUERY_QUERY_RESULT_ID_JOB_QUERY_QUERY_RESULT_ID_OTHER          JOB_QUERY_QUERY_RESULT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for JOB_QUERY_QUERY_RESULT_ID.
var (
	JOB_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "JOB_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "JOB_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "JOB_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "JOB_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "JOB_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "JOB_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "JOB_QUERY_QUERY_RESULT_ID_OTHER",
	}
	JOB_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"JOB_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"JOB_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"JOB_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"JOB_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"JOB_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"JOB_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"JOB_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x JOB_QUERY_QUERY_RESULT_ID) Enum() *JOB_QUERY_QUERY_RESULT_ID {
	p := new(JOB_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x JOB_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[57].Descriptor()
}

func (JOB_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[57]
}

func (x JOB_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (JOB_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{57}
}

type JOB_QUERY_SEVERITY_ID int32

const (
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_UNKNOWN       JOB_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_INFORMATIONAL JOB_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_LOW           JOB_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_MEDIUM        JOB_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_HIGH          JOB_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_CRITICAL      JOB_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_FATAL         JOB_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	JOB_QUERY_SEVERITY_ID_JOB_QUERY_SEVERITY_ID_OTHER         JOB_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for JOB_QUERY_SEVERITY_ID.
var (
	JOB_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "JOB_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "JOB_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "JOB_QUERY_SEVERITY_ID_LOW",
		3:  "JOB_QUERY_SEVERITY_ID_MEDIUM",
		4:  "JOB_QUERY_SEVERITY_ID_HIGH",
		5:  "JOB_QUERY_SEVERITY_ID_CRITICAL",
		6:  "JOB_QUERY_SEVERITY_ID_FATAL",
		99: "JOB_QUERY_SEVERITY_ID_OTHER",
	}
	JOB_QUERY_SEVERITY_ID_value = map[string]int32{
		"JOB_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"JOB_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"JOB_QUERY_SEVERITY_ID_LOW":           2,
		"JOB_QUERY_SEVERITY_ID_MEDIUM":        3,
		"JOB_QUERY_SEVERITY_ID_HIGH":          4,
		"JOB_QUERY_SEVERITY_ID_CRITICAL":      5,
		"JOB_QUERY_SEVERITY_ID_FATAL":         6,
		"JOB_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x JOB_QUERY_SEVERITY_ID) Enum() *JOB_QUERY_SEVERITY_ID {
	p := new(JOB_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x JOB_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[58].Descriptor()
}

func (JOB_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[58]
}

func (x JOB_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_SEVERITY_ID.Descriptor instead.
func (JOB_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{58}
}

type JOB_QUERY_STATUS_ID int32

const (
	JOB_QUERY_STATUS_ID_JOB_QUERY_STATUS_ID_UNKNOWN JOB_QUERY_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	JOB_QUERY_STATUS_ID_JOB_QUERY_STATUS_ID_SUCCESS JOB_QUERY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	JOB_QUERY_STATUS_ID_JOB_QUERY_STATUS_ID_FAILURE JOB_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	JOB_QUERY_STATUS_ID_JOB_QUERY_STATUS_ID_OTHER   JOB_QUERY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for JOB_QUERY_STATUS_ID.
var (
	JOB_QUERY_STATUS_ID_name = map[int32]string{
		0:  "JOB_QUERY_STATUS_ID_UNKNOWN",
		1:  "JOB_QUERY_STATUS_ID_SUCCESS",
		2:  "JOB_QUERY_STATUS_ID_FAILURE",
		99: "JOB_QUERY_STATUS_ID_OTHER",
	}
	JOB_QUERY_STATUS_ID_value = map[string]int32{
		"JOB_QUERY_STATUS_ID_UNKNOWN": 0,
		"JOB_QUERY_STATUS_ID_SUCCESS": 1,
		"JOB_QUERY_STATUS_ID_FAILURE": 2,
		"JOB_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x JOB_QUERY_STATUS_ID) Enum() *JOB_QUERY_STATUS_ID {
	p := new(JOB_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x JOB_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[59].Descriptor()
}

func (JOB_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[59]
}

func (x JOB_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_STATUS_ID.Descriptor instead.
func (JOB_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{59}
}

type JOB_QUERY_TYPE_UID int32

const (
	JOB_QUERY_TYPE_UID_JOB_QUERY_TYPE_UID_UNSPECIFIED       JOB_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	JOB_QUERY_TYPE_UID_JOB_QUERY_TYPE_UID_JOB_QUERY_UNKNOWN JOB_QUERY_TYPE_UID = 5001000 // Type: OCSF_VALUE; EnumValue: 5001000;
	JOB_QUERY_TYPE_UID_JOB_QUERY_TYPE_UID_JOB_QUERY_QUERY   JOB_QUERY_TYPE_UID = 5001001 // Type: OCSF_VALUE; EnumValue: 5001001;
	JOB_QUERY_TYPE_UID_JOB_QUERY_TYPE_UID_JOB_QUERY_OTHER   JOB_QUERY_TYPE_UID = 5001099 // Type: OCSF_VALUE; EnumValue: 5001099;
)

// Enum value maps for JOB_QUERY_TYPE_UID.
var (
	JOB_QUERY_TYPE_UID_name = map[int32]string{
		0:       "JOB_QUERY_TYPE_UID_UNSPECIFIED",
		5001000: "JOB_QUERY_TYPE_UID_JOB_QUERY_UNKNOWN",
		5001001: "JOB_QUERY_TYPE_UID_JOB_QUERY_QUERY",
		5001099: "JOB_QUERY_TYPE_UID_JOB_QUERY_OTHER",
	}
	JOB_QUERY_TYPE_UID_value = map[string]int32{
		"JOB_QUERY_TYPE_UID_UNSPECIFIED":       0,
		"JOB_QUERY_TYPE_UID_JOB_QUERY_UNKNOWN": 5001000,
		"JOB_QUERY_TYPE_UID_JOB_QUERY_QUERY":   5001001,
		"JOB_QUERY_TYPE_UID_JOB_QUERY_OTHER":   5001099,
	}
)

func (x JOB_QUERY_TYPE_UID) Enum() *JOB_QUERY_TYPE_UID {
	p := new(JOB_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x JOB_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[60].Descriptor()
}

func (JOB_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[60]
}

func (x JOB_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_QUERY_TYPE_UID.Descriptor instead.
func (JOB_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{60}
}

type KERNEL_OBJECT_QUERY_ACTIVITY_ID int32

const (
	KERNEL_OBJECT_QUERY_ACTIVITY_ID_KERNEL_OBJECT_QUERY_ACTIVITY_ID_UNKNOWN KERNEL_OBJECT_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_OBJECT_QUERY_ACTIVITY_ID_KERNEL_OBJECT_QUERY_ACTIVITY_ID_QUERY   KERNEL_OBJECT_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_OBJECT_QUERY_ACTIVITY_ID_KERNEL_OBJECT_QUERY_ACTIVITY_ID_OTHER   KERNEL_OBJECT_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_OBJECT_QUERY_ACTIVITY_ID.
var (
	KERNEL_OBJECT_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "KERNEL_OBJECT_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "KERNEL_OBJECT_QUERY_ACTIVITY_ID_QUERY",
		99: "KERNEL_OBJECT_QUERY_ACTIVITY_ID_OTHER",
	}
	KERNEL_OBJECT_QUERY_ACTIVITY_ID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"KERNEL_OBJECT_QUERY_ACTIVITY_ID_QUERY":   1,
		"KERNEL_OBJECT_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x KERNEL_OBJECT_QUERY_ACTIVITY_ID) Enum() *KERNEL_OBJECT_QUERY_ACTIVITY_ID {
	p := new(KERNEL_OBJECT_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[61].Descriptor()
}

func (KERNEL_OBJECT_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[61]
}

func (x KERNEL_OBJECT_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_ACTIVITY_ID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{61}
}

type KERNEL_OBJECT_QUERY_CATEGORY_UID int32

const (
	KERNEL_OBJECT_QUERY_CATEGORY_UID_KERNEL_OBJECT_QUERY_CATEGORY_UID_UNSPECIFIED KERNEL_OBJECT_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_OBJECT_QUERY_CATEGORY_UID_KERNEL_OBJECT_QUERY_CATEGORY_UID_DISCOVERY   KERNEL_OBJECT_QUERY_CATEGORY_UID = 5 // EnumValue: 5; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_OBJECT_QUERY_CATEGORY_UID.
var (
	KERNEL_OBJECT_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "KERNEL_OBJECT_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "KERNEL_OBJECT_QUERY_CATEGORY_UID_DISCOVERY",
	}
	KERNEL_OBJECT_QUERY_CATEGORY_UID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"KERNEL_OBJECT_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x KERNEL_OBJECT_QUERY_CATEGORY_UID) Enum() *KERNEL_OBJECT_QUERY_CATEGORY_UID {
	p := new(KERNEL_OBJECT_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[62].Descriptor()
}

func (KERNEL_OBJECT_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[62]
}

func (x KERNEL_OBJECT_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_CATEGORY_UID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{62}
}

type KERNEL_OBJECT_QUERY_CLASS_UID int32

const (
	KERNEL_OBJECT_QUERY_CLASS_UID_KERNEL_OBJECT_QUERY_CLASS_UID_UNSPECIFIED         KERNEL_OBJECT_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	KERNEL_OBJECT_QUERY_CLASS_UID_KERNEL_OBJECT_QUERY_CLASS_UID_KERNEL_OBJECT_QUERY KERNEL_OBJECT_QUERY_CLASS_UID = 5006 // EnumValue: 5006; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_OBJECT_QUERY_CLASS_UID.
var (
	KERNEL_OBJECT_QUERY_CLASS_UID_name = map[int32]string{
		0:    "KERNEL_OBJECT_QUERY_CLASS_UID_UNSPECIFIED",
		5006: "KERNEL_OBJECT_QUERY_CLASS_UID_KERNEL_OBJECT_QUERY",
	}
	KERNEL_OBJECT_QUERY_CLASS_UID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_CLASS_UID_UNSPECIFIED":         0,
		"KERNEL_OBJECT_QUERY_CLASS_UID_KERNEL_OBJECT_QUERY": 5006,
	}
)

func (x KERNEL_OBJECT_QUERY_CLASS_UID) Enum() *KERNEL_OBJECT_QUERY_CLASS_UID {
	p := new(KERNEL_OBJECT_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[63].Descriptor()
}

func (KERNEL_OBJECT_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[63]
}

func (x KERNEL_OBJECT_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_CLASS_UID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{63}
}

type KERNEL_OBJECT_QUERY_QUERY_RESULT_ID int32

const (
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNKNOWN        KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_EXISTS         KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_PARTIAL        KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_ERROR          KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNSUPPORTED    KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_OTHER          KERNEL_OBJECT_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_OBJECT_QUERY_QUERY_RESULT_ID.
var (
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_OTHER",
	}
	KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"KERNEL_OBJECT_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) Enum() *KERNEL_OBJECT_QUERY_QUERY_RESULT_ID {
	p := new(KERNEL_OBJECT_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[64].Descriptor()
}

func (KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[64]
}

func (x KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{64}
}

type KERNEL_OBJECT_QUERY_SEVERITY_ID int32

const (
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_UNKNOWN       KERNEL_OBJECT_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_INFORMATIONAL KERNEL_OBJECT_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_LOW           KERNEL_OBJECT_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_MEDIUM        KERNEL_OBJECT_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_HIGH          KERNEL_OBJECT_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_CRITICAL      KERNEL_OBJECT_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_FATAL         KERNEL_OBJECT_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	KERNEL_OBJECT_QUERY_SEVERITY_ID_KERNEL_OBJECT_QUERY_SEVERITY_ID_OTHER         KERNEL_OBJECT_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_OBJECT_QUERY_SEVERITY_ID.
var (
	KERNEL_OBJECT_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_LOW",
		3:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_MEDIUM",
		4:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_HIGH",
		5:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_CRITICAL",
		6:  "KERNEL_OBJECT_QUERY_SEVERITY_ID_FATAL",
		99: "KERNEL_OBJECT_QUERY_SEVERITY_ID_OTHER",
	}
	KERNEL_OBJECT_QUERY_SEVERITY_ID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_LOW":           2,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_MEDIUM":        3,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_HIGH":          4,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_CRITICAL":      5,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_FATAL":         6,
		"KERNEL_OBJECT_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x KERNEL_OBJECT_QUERY_SEVERITY_ID) Enum() *KERNEL_OBJECT_QUERY_SEVERITY_ID {
	p := new(KERNEL_OBJECT_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[65].Descriptor()
}

func (KERNEL_OBJECT_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[65]
}

func (x KERNEL_OBJECT_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_SEVERITY_ID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{65}
}

type KERNEL_OBJECT_QUERY_STATUS_ID int32

const (
	KERNEL_OBJECT_QUERY_STATUS_ID_KERNEL_OBJECT_QUERY_STATUS_ID_UNKNOWN KERNEL_OBJECT_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_OBJECT_QUERY_STATUS_ID_KERNEL_OBJECT_QUERY_STATUS_ID_SUCCESS KERNEL_OBJECT_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_OBJECT_QUERY_STATUS_ID_KERNEL_OBJECT_QUERY_STATUS_ID_FAILURE KERNEL_OBJECT_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_OBJECT_QUERY_STATUS_ID_KERNEL_OBJECT_QUERY_STATUS_ID_OTHER   KERNEL_OBJECT_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_OBJECT_QUERY_STATUS_ID.
var (
	KERNEL_OBJECT_QUERY_STATUS_ID_name = map[int32]string{
		0:  "KERNEL_OBJECT_QUERY_STATUS_ID_UNKNOWN",
		1:  "KERNEL_OBJECT_QUERY_STATUS_ID_SUCCESS",
		2:  "KERNEL_OBJECT_QUERY_STATUS_ID_FAILURE",
		99: "KERNEL_OBJECT_QUERY_STATUS_ID_OTHER",
	}
	KERNEL_OBJECT_QUERY_STATUS_ID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_STATUS_ID_UNKNOWN": 0,
		"KERNEL_OBJECT_QUERY_STATUS_ID_SUCCESS": 1,
		"KERNEL_OBJECT_QUERY_STATUS_ID_FAILURE": 2,
		"KERNEL_OBJECT_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x KERNEL_OBJECT_QUERY_STATUS_ID) Enum() *KERNEL_OBJECT_QUERY_STATUS_ID {
	p := new(KERNEL_OBJECT_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[66].Descriptor()
}

func (KERNEL_OBJECT_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[66]
}

func (x KERNEL_OBJECT_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_STATUS_ID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{66}
}

type KERNEL_OBJECT_QUERY_TYPE_UID int32

const (
	KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_TYPE_UID_UNSPECIFIED                 KERNEL_OBJECT_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_UNKNOWN KERNEL_OBJECT_QUERY_TYPE_UID = 500600 // Type: OCSF_VALUE; EnumValue: 500600;
	KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_QUERY   KERNEL_OBJECT_QUERY_TYPE_UID = 500601 // Type: OCSF_VALUE; EnumValue: 500601;
	KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_OTHER   KERNEL_OBJECT_QUERY_TYPE_UID = 500699 // EnumValue: 500699; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_OBJECT_QUERY_TYPE_UID.
var (
	KERNEL_OBJECT_QUERY_TYPE_UID_name = map[int32]string{
		0:      "KERNEL_OBJECT_QUERY_TYPE_UID_UNSPECIFIED",
		500600: "KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_UNKNOWN",
		500601: "KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_QUERY",
		500699: "KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_OTHER",
	}
	KERNEL_OBJECT_QUERY_TYPE_UID_value = map[string]int32{
		"KERNEL_OBJECT_QUERY_TYPE_UID_UNSPECIFIED":                 0,
		"KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_UNKNOWN": 500600,
		"KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_QUERY":   500601,
		"KERNEL_OBJECT_QUERY_TYPE_UID_KERNEL_OBJECT_QUERY_OTHER":   500699,
	}
)

func (x KERNEL_OBJECT_QUERY_TYPE_UID) Enum() *KERNEL_OBJECT_QUERY_TYPE_UID {
	p := new(KERNEL_OBJECT_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x KERNEL_OBJECT_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_OBJECT_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[67].Descriptor()
}

func (KERNEL_OBJECT_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[67]
}

func (x KERNEL_OBJECT_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_OBJECT_QUERY_TYPE_UID.Descriptor instead.
func (KERNEL_OBJECT_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{67}
}

type MODULE_QUERY_ACTIVITY_ID int32

const (
	MODULE_QUERY_ACTIVITY_ID_MODULE_QUERY_ACTIVITY_ID_UNKNOWN MODULE_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_QUERY_ACTIVITY_ID_MODULE_QUERY_ACTIVITY_ID_QUERY   MODULE_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_QUERY_ACTIVITY_ID_MODULE_QUERY_ACTIVITY_ID_OTHER   MODULE_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_QUERY_ACTIVITY_ID.
var (
	MODULE_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "MODULE_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "MODULE_QUERY_ACTIVITY_ID_QUERY",
		99: "MODULE_QUERY_ACTIVITY_ID_OTHER",
	}
	MODULE_QUERY_ACTIVITY_ID_value = map[string]int32{
		"MODULE_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"MODULE_QUERY_ACTIVITY_ID_QUERY":   1,
		"MODULE_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x MODULE_QUERY_ACTIVITY_ID) Enum() *MODULE_QUERY_ACTIVITY_ID {
	p := new(MODULE_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x MODULE_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[68].Descriptor()
}

func (MODULE_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[68]
}

func (x MODULE_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_ACTIVITY_ID.Descriptor instead.
func (MODULE_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{68}
}

type MODULE_QUERY_CATEGORY_UID int32

const (
	MODULE_QUERY_CATEGORY_UID_MODULE_QUERY_CATEGORY_UID_UNSPECIFIED MODULE_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	MODULE_QUERY_CATEGORY_UID_MODULE_QUERY_CATEGORY_UID_DISCOVERY   MODULE_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for MODULE_QUERY_CATEGORY_UID.
var (
	MODULE_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "MODULE_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "MODULE_QUERY_CATEGORY_UID_DISCOVERY",
	}
	MODULE_QUERY_CATEGORY_UID_value = map[string]int32{
		"MODULE_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"MODULE_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x MODULE_QUERY_CATEGORY_UID) Enum() *MODULE_QUERY_CATEGORY_UID {
	p := new(MODULE_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x MODULE_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[69].Descriptor()
}

func (MODULE_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[69]
}

func (x MODULE_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_CATEGORY_UID.Descriptor instead.
func (MODULE_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{69}
}

type MODULE_QUERY_CLASS_UID int32

const (
	MODULE_QUERY_CLASS_UID_MODULE_QUERY_CLASS_UID_UNSPECIFIED  MODULE_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	MODULE_QUERY_CLASS_UID_MODULE_QUERY_CLASS_UID_MODULE_QUERY MODULE_QUERY_CLASS_UID = 50011 // Type: OCSF_VALUE; EnumValue: 50011;
)

// Enum value maps for MODULE_QUERY_CLASS_UID.
var (
	MODULE_QUERY_CLASS_UID_name = map[int32]string{
		0:     "MODULE_QUERY_CLASS_UID_UNSPECIFIED",
		50011: "MODULE_QUERY_CLASS_UID_MODULE_QUERY",
	}
	MODULE_QUERY_CLASS_UID_value = map[string]int32{
		"MODULE_QUERY_CLASS_UID_UNSPECIFIED":  0,
		"MODULE_QUERY_CLASS_UID_MODULE_QUERY": 50011,
	}
)

func (x MODULE_QUERY_CLASS_UID) Enum() *MODULE_QUERY_CLASS_UID {
	p := new(MODULE_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x MODULE_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[70].Descriptor()
}

func (MODULE_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[70]
}

func (x MODULE_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_CLASS_UID.Descriptor instead.
func (MODULE_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{70}
}

type MODULE_QUERY_QUERY_RESULT_ID int32

const (
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_UNKNOWN        MODULE_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_EXISTS         MODULE_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_PARTIAL        MODULE_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST MODULE_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_ERROR          MODULE_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_UNSUPPORTED    MODULE_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	MODULE_QUERY_QUERY_RESULT_ID_MODULE_QUERY_QUERY_RESULT_ID_OTHER          MODULE_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_QUERY_QUERY_RESULT_ID.
var (
	MODULE_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "MODULE_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "MODULE_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "MODULE_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "MODULE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "MODULE_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "MODULE_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "MODULE_QUERY_QUERY_RESULT_ID_OTHER",
	}
	MODULE_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"MODULE_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"MODULE_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"MODULE_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"MODULE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"MODULE_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"MODULE_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"MODULE_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x MODULE_QUERY_QUERY_RESULT_ID) Enum() *MODULE_QUERY_QUERY_RESULT_ID {
	p := new(MODULE_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x MODULE_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[71].Descriptor()
}

func (MODULE_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[71]
}

func (x MODULE_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (MODULE_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{71}
}

type MODULE_QUERY_SEVERITY_ID int32

const (
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_UNKNOWN       MODULE_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_INFORMATIONAL MODULE_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_LOW           MODULE_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_MEDIUM        MODULE_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_HIGH          MODULE_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_CRITICAL      MODULE_QUERY_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_FATAL         MODULE_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	MODULE_QUERY_SEVERITY_ID_MODULE_QUERY_SEVERITY_ID_OTHER         MODULE_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_QUERY_SEVERITY_ID.
var (
	MODULE_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "MODULE_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "MODULE_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "MODULE_QUERY_SEVERITY_ID_LOW",
		3:  "MODULE_QUERY_SEVERITY_ID_MEDIUM",
		4:  "MODULE_QUERY_SEVERITY_ID_HIGH",
		5:  "MODULE_QUERY_SEVERITY_ID_CRITICAL",
		6:  "MODULE_QUERY_SEVERITY_ID_FATAL",
		99: "MODULE_QUERY_SEVERITY_ID_OTHER",
	}
	MODULE_QUERY_SEVERITY_ID_value = map[string]int32{
		"MODULE_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"MODULE_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"MODULE_QUERY_SEVERITY_ID_LOW":           2,
		"MODULE_QUERY_SEVERITY_ID_MEDIUM":        3,
		"MODULE_QUERY_SEVERITY_ID_HIGH":          4,
		"MODULE_QUERY_SEVERITY_ID_CRITICAL":      5,
		"MODULE_QUERY_SEVERITY_ID_FATAL":         6,
		"MODULE_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x MODULE_QUERY_SEVERITY_ID) Enum() *MODULE_QUERY_SEVERITY_ID {
	p := new(MODULE_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x MODULE_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[72].Descriptor()
}

func (MODULE_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[72]
}

func (x MODULE_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_SEVERITY_ID.Descriptor instead.
func (MODULE_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{72}
}

type MODULE_QUERY_STATUS_ID int32

const (
	MODULE_QUERY_STATUS_ID_MODULE_QUERY_STATUS_ID_UNKNOWN MODULE_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_QUERY_STATUS_ID_MODULE_QUERY_STATUS_ID_SUCCESS MODULE_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_QUERY_STATUS_ID_MODULE_QUERY_STATUS_ID_FAILURE MODULE_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_QUERY_STATUS_ID_MODULE_QUERY_STATUS_ID_OTHER   MODULE_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_QUERY_STATUS_ID.
var (
	MODULE_QUERY_STATUS_ID_name = map[int32]string{
		0:  "MODULE_QUERY_STATUS_ID_UNKNOWN",
		1:  "MODULE_QUERY_STATUS_ID_SUCCESS",
		2:  "MODULE_QUERY_STATUS_ID_FAILURE",
		99: "MODULE_QUERY_STATUS_ID_OTHER",
	}
	MODULE_QUERY_STATUS_ID_value = map[string]int32{
		"MODULE_QUERY_STATUS_ID_UNKNOWN": 0,
		"MODULE_QUERY_STATUS_ID_SUCCESS": 1,
		"MODULE_QUERY_STATUS_ID_FAILURE": 2,
		"MODULE_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x MODULE_QUERY_STATUS_ID) Enum() *MODULE_QUERY_STATUS_ID {
	p := new(MODULE_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x MODULE_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[73].Descriptor()
}

func (MODULE_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[73]
}

func (x MODULE_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_STATUS_ID.Descriptor instead.
func (MODULE_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{73}
}

type MODULE_QUERY_TYPE_UID int32

const (
	MODULE_QUERY_TYPE_UID_MODULE_QUERY_TYPE_UID_UNSPECIFIED          MODULE_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	MODULE_QUERY_TYPE_UID_MODULE_QUERY_TYPE_UID_MODULE_QUERY_UNKNOWN MODULE_QUERY_TYPE_UID = 5001100 // Type: OCSF_VALUE; EnumValue: 5001100;
	MODULE_QUERY_TYPE_UID_MODULE_QUERY_TYPE_UID_MODULE_QUERY_QUERY   MODULE_QUERY_TYPE_UID = 5001101 // Type: OCSF_VALUE; EnumValue: 5001101;
	MODULE_QUERY_TYPE_UID_MODULE_QUERY_TYPE_UID_MODULE_QUERY_OTHER   MODULE_QUERY_TYPE_UID = 5001199 // Type: OCSF_VALUE; EnumValue: 5001199;
)

// Enum value maps for MODULE_QUERY_TYPE_UID.
var (
	MODULE_QUERY_TYPE_UID_name = map[int32]string{
		0:       "MODULE_QUERY_TYPE_UID_UNSPECIFIED",
		5001100: "MODULE_QUERY_TYPE_UID_MODULE_QUERY_UNKNOWN",
		5001101: "MODULE_QUERY_TYPE_UID_MODULE_QUERY_QUERY",
		5001199: "MODULE_QUERY_TYPE_UID_MODULE_QUERY_OTHER",
	}
	MODULE_QUERY_TYPE_UID_value = map[string]int32{
		"MODULE_QUERY_TYPE_UID_UNSPECIFIED":          0,
		"MODULE_QUERY_TYPE_UID_MODULE_QUERY_UNKNOWN": 5001100,
		"MODULE_QUERY_TYPE_UID_MODULE_QUERY_QUERY":   5001101,
		"MODULE_QUERY_TYPE_UID_MODULE_QUERY_OTHER":   5001199,
	}
)

func (x MODULE_QUERY_TYPE_UID) Enum() *MODULE_QUERY_TYPE_UID {
	p := new(MODULE_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x MODULE_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[74].Descriptor()
}

func (MODULE_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[74]
}

func (x MODULE_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_QUERY_TYPE_UID.Descriptor instead.
func (MODULE_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{74}
}

type NETWORK_CONNECTION_QUERY_ACTIVITY_ID int32

const (
	NETWORK_CONNECTION_QUERY_ACTIVITY_ID_NETWORK_CONNECTION_QUERY_ACTIVITY_ID_UNKNOWN NETWORK_CONNECTION_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_QUERY_ACTIVITY_ID_NETWORK_CONNECTION_QUERY_ACTIVITY_ID_QUERY   NETWORK_CONNECTION_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_CONNECTION_QUERY_ACTIVITY_ID_NETWORK_CONNECTION_QUERY_ACTIVITY_ID_OTHER   NETWORK_CONNECTION_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_ACTIVITY_ID.
var (
	NETWORK_CONNECTION_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_QUERY_ACTIVITY_ID_QUERY",
		99: "NETWORK_CONNECTION_QUERY_ACTIVITY_ID_OTHER",
	}
	NETWORK_CONNECTION_QUERY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_CONNECTION_QUERY_ACTIVITY_ID_QUERY":   1,
		"NETWORK_CONNECTION_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x NETWORK_CONNECTION_QUERY_ACTIVITY_ID) Enum() *NETWORK_CONNECTION_QUERY_ACTIVITY_ID {
	p := new(NETWORK_CONNECTION_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[75].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[75]
}

func (x NETWORK_CONNECTION_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{75}
}

type NETWORK_CONNECTION_QUERY_CATEGORY_UID int32

const (
	NETWORK_CONNECTION_QUERY_CATEGORY_UID_NETWORK_CONNECTION_QUERY_CATEGORY_UID_UNSPECIFIED NETWORK_CONNECTION_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_CATEGORY_UID_NETWORK_CONNECTION_QUERY_CATEGORY_UID_DISCOVERY   NETWORK_CONNECTION_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_CATEGORY_UID.
var (
	NETWORK_CONNECTION_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_CONNECTION_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "NETWORK_CONNECTION_QUERY_CATEGORY_UID_DISCOVERY",
	}
	NETWORK_CONNECTION_QUERY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"NETWORK_CONNECTION_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x NETWORK_CONNECTION_QUERY_CATEGORY_UID) Enum() *NETWORK_CONNECTION_QUERY_CATEGORY_UID {
	p := new(NETWORK_CONNECTION_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[76].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[76]
}

func (x NETWORK_CONNECTION_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_CATEGORY_UID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{76}
}

type NETWORK_CONNECTION_QUERY_CLASS_UID int32

const (
	NETWORK_CONNECTION_QUERY_CLASS_UID_NETWORK_CONNECTION_QUERY_CLASS_UID_UNSPECIFIED              NETWORK_CONNECTION_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_CLASS_UID_NETWORK_CONNECTION_QUERY_CLASS_UID_NETWORK_CONNECTION_QUERY NETWORK_CONNECTION_QUERY_CLASS_UID = 50012 // Type: OCSF_VALUE; EnumValue: 50012;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_CLASS_UID.
var (
	NETWORK_CONNECTION_QUERY_CLASS_UID_name = map[int32]string{
		0:     "NETWORK_CONNECTION_QUERY_CLASS_UID_UNSPECIFIED",
		50012: "NETWORK_CONNECTION_QUERY_CLASS_UID_NETWORK_CONNECTION_QUERY",
	}
	NETWORK_CONNECTION_QUERY_CLASS_UID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_CLASS_UID_UNSPECIFIED":              0,
		"NETWORK_CONNECTION_QUERY_CLASS_UID_NETWORK_CONNECTION_QUERY": 50012,
	}
)

func (x NETWORK_CONNECTION_QUERY_CLASS_UID) Enum() *NETWORK_CONNECTION_QUERY_CLASS_UID {
	p := new(NETWORK_CONNECTION_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[77].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[77]
}

func (x NETWORK_CONNECTION_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_CLASS_UID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{77}
}

type NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID int32

const (
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNKNOWN        NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_EXISTS         NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_PARTIAL        NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_ERROR          NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNSUPPORTED    NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_OTHER          NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID.
var (
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_OTHER",
	}
	NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) Enum() *NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID {
	p := new(NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[78].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[78]
}

func (x NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{78}
}

type NETWORK_CONNECTION_QUERY_SEVERITY_ID int32

const (
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_UNKNOWN       NETWORK_CONNECTION_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_INFORMATIONAL NETWORK_CONNECTION_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_LOW           NETWORK_CONNECTION_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_MEDIUM        NETWORK_CONNECTION_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_HIGH          NETWORK_CONNECTION_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_CRITICAL      NETWORK_CONNECTION_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_FATAL         NETWORK_CONNECTION_QUERY_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_NETWORK_CONNECTION_QUERY_SEVERITY_ID_OTHER         NETWORK_CONNECTION_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_SEVERITY_ID.
var (
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_LOW",
		3:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_MEDIUM",
		4:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_HIGH",
		5:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_CRITICAL",
		6:  "NETWORK_CONNECTION_QUERY_SEVERITY_ID_FATAL",
		99: "NETWORK_CONNECTION_QUERY_SEVERITY_ID_OTHER",
	}
	NETWORK_CONNECTION_QUERY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_LOW":           2,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_MEDIUM":        3,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_HIGH":          4,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_CRITICAL":      5,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_FATAL":         6,
		"NETWORK_CONNECTION_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORK_CONNECTION_QUERY_SEVERITY_ID) Enum() *NETWORK_CONNECTION_QUERY_SEVERITY_ID {
	p := new(NETWORK_CONNECTION_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[79].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[79]
}

func (x NETWORK_CONNECTION_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_SEVERITY_ID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{79}
}

type NETWORK_CONNECTION_QUERY_STATE_ID int32

const (
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_UNKNOWN     NETWORK_CONNECTION_QUERY_STATE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_ESTABLISHED NETWORK_CONNECTION_QUERY_STATE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_SYN_SENT    NETWORK_CONNECTION_QUERY_STATE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_SYN_RECV    NETWORK_CONNECTION_QUERY_STATE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_1  NETWORK_CONNECTION_QUERY_STATE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_2  NETWORK_CONNECTION_QUERY_STATE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_TIME_WAIT   NETWORK_CONNECTION_QUERY_STATE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_CLOSED      NETWORK_CONNECTION_QUERY_STATE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_CLOSE_WAIT  NETWORK_CONNECTION_QUERY_STATE_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_LAST_ACK    NETWORK_CONNECTION_QUERY_STATE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_LISTEN      NETWORK_CONNECTION_QUERY_STATE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_CLOSING     NETWORK_CONNECTION_QUERY_STATE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_CONNECTION_QUERY_STATE_ID_NETWORK_CONNECTION_QUERY_STATE_ID_OTHER       NETWORK_CONNECTION_QUERY_STATE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_STATE_ID.
var (
	NETWORK_CONNECTION_QUERY_STATE_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_QUERY_STATE_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_QUERY_STATE_ID_ESTABLISHED",
		2:  "NETWORK_CONNECTION_QUERY_STATE_ID_SYN_SENT",
		3:  "NETWORK_CONNECTION_QUERY_STATE_ID_SYN_RECV",
		4:  "NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_1",
		5:  "NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_2",
		6:  "NETWORK_CONNECTION_QUERY_STATE_ID_TIME_WAIT",
		7:  "NETWORK_CONNECTION_QUERY_STATE_ID_CLOSED",
		8:  "NETWORK_CONNECTION_QUERY_STATE_ID_CLOSE_WAIT",
		9:  "NETWORK_CONNECTION_QUERY_STATE_ID_LAST_ACK",
		10: "NETWORK_CONNECTION_QUERY_STATE_ID_LISTEN",
		11: "NETWORK_CONNECTION_QUERY_STATE_ID_CLOSING",
		99: "NETWORK_CONNECTION_QUERY_STATE_ID_OTHER",
	}
	NETWORK_CONNECTION_QUERY_STATE_ID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_STATE_ID_UNKNOWN":     0,
		"NETWORK_CONNECTION_QUERY_STATE_ID_ESTABLISHED": 1,
		"NETWORK_CONNECTION_QUERY_STATE_ID_SYN_SENT":    2,
		"NETWORK_CONNECTION_QUERY_STATE_ID_SYN_RECV":    3,
		"NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_1":  4,
		"NETWORK_CONNECTION_QUERY_STATE_ID_FIN_WAIT_2":  5,
		"NETWORK_CONNECTION_QUERY_STATE_ID_TIME_WAIT":   6,
		"NETWORK_CONNECTION_QUERY_STATE_ID_CLOSED":      7,
		"NETWORK_CONNECTION_QUERY_STATE_ID_CLOSE_WAIT":  8,
		"NETWORK_CONNECTION_QUERY_STATE_ID_LAST_ACK":    9,
		"NETWORK_CONNECTION_QUERY_STATE_ID_LISTEN":      10,
		"NETWORK_CONNECTION_QUERY_STATE_ID_CLOSING":     11,
		"NETWORK_CONNECTION_QUERY_STATE_ID_OTHER":       99,
	}
)

func (x NETWORK_CONNECTION_QUERY_STATE_ID) Enum() *NETWORK_CONNECTION_QUERY_STATE_ID {
	p := new(NETWORK_CONNECTION_QUERY_STATE_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[80].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[80]
}

func (x NETWORK_CONNECTION_QUERY_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_STATE_ID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{80}
}

type NETWORK_CONNECTION_QUERY_STATUS_ID int32

const (
	NETWORK_CONNECTION_QUERY_STATUS_ID_NETWORK_CONNECTION_QUERY_STATUS_ID_UNKNOWN NETWORK_CONNECTION_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_QUERY_STATUS_ID_NETWORK_CONNECTION_QUERY_STATUS_ID_SUCCESS NETWORK_CONNECTION_QUERY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_STATUS_ID_NETWORK_CONNECTION_QUERY_STATUS_ID_FAILURE NETWORK_CONNECTION_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_CONNECTION_QUERY_STATUS_ID_NETWORK_CONNECTION_QUERY_STATUS_ID_OTHER   NETWORK_CONNECTION_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_STATUS_ID.
var (
	NETWORK_CONNECTION_QUERY_STATUS_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_QUERY_STATUS_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_QUERY_STATUS_ID_SUCCESS",
		2:  "NETWORK_CONNECTION_QUERY_STATUS_ID_FAILURE",
		99: "NETWORK_CONNECTION_QUERY_STATUS_ID_OTHER",
	}
	NETWORK_CONNECTION_QUERY_STATUS_ID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_STATUS_ID_UNKNOWN": 0,
		"NETWORK_CONNECTION_QUERY_STATUS_ID_SUCCESS": 1,
		"NETWORK_CONNECTION_QUERY_STATUS_ID_FAILURE": 2,
		"NETWORK_CONNECTION_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x NETWORK_CONNECTION_QUERY_STATUS_ID) Enum() *NETWORK_CONNECTION_QUERY_STATUS_ID {
	p := new(NETWORK_CONNECTION_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[81].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[81]
}

func (x NETWORK_CONNECTION_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_STATUS_ID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{81}
}

type NETWORK_CONNECTION_QUERY_TYPE_UID int32

const (
	NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_TYPE_UID_UNSPECIFIED                      NETWORK_CONNECTION_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_UNKNOWN NETWORK_CONNECTION_QUERY_TYPE_UID = 5001200 // Type: OCSF_VALUE; EnumValue: 5001200;
	NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_QUERY   NETWORK_CONNECTION_QUERY_TYPE_UID = 5001201 // Type: OCSF_VALUE; EnumValue: 5001201;
	NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_OTHER   NETWORK_CONNECTION_QUERY_TYPE_UID = 5001299 // Type: OCSF_VALUE; EnumValue: 5001299;
)

// Enum value maps for NETWORK_CONNECTION_QUERY_TYPE_UID.
var (
	NETWORK_CONNECTION_QUERY_TYPE_UID_name = map[int32]string{
		0:       "NETWORK_CONNECTION_QUERY_TYPE_UID_UNSPECIFIED",
		5001200: "NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_UNKNOWN",
		5001201: "NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_QUERY",
		5001299: "NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_OTHER",
	}
	NETWORK_CONNECTION_QUERY_TYPE_UID_value = map[string]int32{
		"NETWORK_CONNECTION_QUERY_TYPE_UID_UNSPECIFIED":                      0,
		"NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_UNKNOWN": 5001200,
		"NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_QUERY":   5001201,
		"NETWORK_CONNECTION_QUERY_TYPE_UID_NETWORK_CONNECTION_QUERY_OTHER":   5001299,
	}
)

func (x NETWORK_CONNECTION_QUERY_TYPE_UID) Enum() *NETWORK_CONNECTION_QUERY_TYPE_UID {
	p := new(NETWORK_CONNECTION_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[82].Descriptor()
}

func (NETWORK_CONNECTION_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[82]
}

func (x NETWORK_CONNECTION_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_QUERY_TYPE_UID.Descriptor instead.
func (NETWORK_CONNECTION_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{82}
}

type NETWORKS_QUERY_ACTIVITY_ID int32

const (
	NETWORKS_QUERY_ACTIVITY_ID_NETWORKS_QUERY_ACTIVITY_ID_UNKNOWN NETWORKS_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORKS_QUERY_ACTIVITY_ID_NETWORKS_QUERY_ACTIVITY_ID_QUERY   NETWORKS_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORKS_QUERY_ACTIVITY_ID_NETWORKS_QUERY_ACTIVITY_ID_OTHER   NETWORKS_QUERY_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for NETWORKS_QUERY_ACTIVITY_ID.
var (
	NETWORKS_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "NETWORKS_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "NETWORKS_QUERY_ACTIVITY_ID_QUERY",
		99: "NETWORKS_QUERY_ACTIVITY_ID_OTHER",
	}
	NETWORKS_QUERY_ACTIVITY_ID_value = map[string]int32{
		"NETWORKS_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORKS_QUERY_ACTIVITY_ID_QUERY":   1,
		"NETWORKS_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x NETWORKS_QUERY_ACTIVITY_ID) Enum() *NETWORKS_QUERY_ACTIVITY_ID {
	p := new(NETWORKS_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[83].Descriptor()
}

func (NETWORKS_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[83]
}

func (x NETWORKS_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_ACTIVITY_ID.Descriptor instead.
func (NETWORKS_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{83}
}

type NETWORKS_QUERY_CATEGORY_UID int32

const (
	NETWORKS_QUERY_CATEGORY_UID_NETWORKS_QUERY_CATEGORY_UID_UNSPECIFIED NETWORKS_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORKS_QUERY_CATEGORY_UID_NETWORKS_QUERY_CATEGORY_UID_DISCOVERY   NETWORKS_QUERY_CATEGORY_UID = 5 // EnumValue: 5; Type: OCSF_VALUE;
)

// Enum value maps for NETWORKS_QUERY_CATEGORY_UID.
var (
	NETWORKS_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORKS_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "NETWORKS_QUERY_CATEGORY_UID_DISCOVERY",
	}
	NETWORKS_QUERY_CATEGORY_UID_value = map[string]int32{
		"NETWORKS_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"NETWORKS_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x NETWORKS_QUERY_CATEGORY_UID) Enum() *NETWORKS_QUERY_CATEGORY_UID {
	p := new(NETWORKS_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[84].Descriptor()
}

func (NETWORKS_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[84]
}

func (x NETWORKS_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_CATEGORY_UID.Descriptor instead.
func (NETWORKS_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{84}
}

type NETWORKS_QUERY_CLASS_UID int32

const (
	NETWORKS_QUERY_CLASS_UID_NETWORKS_QUERY_CLASS_UID_UNSPECIFIED    NETWORKS_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	NETWORKS_QUERY_CLASS_UID_NETWORKS_QUERY_CLASS_UID_NETWORKS_QUERY NETWORKS_QUERY_CLASS_UID = 50013 // Type: OCSF_VALUE; EnumValue: 50013;
)

// Enum value maps for NETWORKS_QUERY_CLASS_UID.
var (
	NETWORKS_QUERY_CLASS_UID_name = map[int32]string{
		0:     "NETWORKS_QUERY_CLASS_UID_UNSPECIFIED",
		50013: "NETWORKS_QUERY_CLASS_UID_NETWORKS_QUERY",
	}
	NETWORKS_QUERY_CLASS_UID_value = map[string]int32{
		"NETWORKS_QUERY_CLASS_UID_UNSPECIFIED":    0,
		"NETWORKS_QUERY_CLASS_UID_NETWORKS_QUERY": 50013,
	}
)

func (x NETWORKS_QUERY_CLASS_UID) Enum() *NETWORKS_QUERY_CLASS_UID {
	p := new(NETWORKS_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[85].Descriptor()
}

func (NETWORKS_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[85]
}

func (x NETWORKS_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_CLASS_UID.Descriptor instead.
func (NETWORKS_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{85}
}

type NETWORKS_QUERY_QUERY_RESULT_ID int32

const (
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_UNKNOWN        NETWORKS_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_EXISTS         NETWORKS_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_PARTIAL        NETWORKS_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST NETWORKS_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_ERROR          NETWORKS_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_UNSUPPORTED    NETWORKS_QUERY_QUERY_RESULT_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	NETWORKS_QUERY_QUERY_RESULT_ID_NETWORKS_QUERY_QUERY_RESULT_ID_OTHER          NETWORKS_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORKS_QUERY_QUERY_RESULT_ID.
var (
	NETWORKS_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "NETWORKS_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "NETWORKS_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "NETWORKS_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "NETWORKS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "NETWORKS_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "NETWORKS_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "NETWORKS_QUERY_QUERY_RESULT_ID_OTHER",
	}
	NETWORKS_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"NETWORKS_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"NETWORKS_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"NETWORKS_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"NETWORKS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"NETWORKS_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"NETWORKS_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"NETWORKS_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x NETWORKS_QUERY_QUERY_RESULT_ID) Enum() *NETWORKS_QUERY_QUERY_RESULT_ID {
	p := new(NETWORKS_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[86].Descriptor()
}

func (NETWORKS_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[86]
}

func (x NETWORKS_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (NETWORKS_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{86}
}

type NETWORKS_QUERY_SEVERITY_ID int32

const (
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_UNKNOWN       NETWORKS_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_INFORMATIONAL NETWORKS_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_LOW           NETWORKS_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_MEDIUM        NETWORKS_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_HIGH          NETWORKS_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_CRITICAL      NETWORKS_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_FATAL         NETWORKS_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORKS_QUERY_SEVERITY_ID_NETWORKS_QUERY_SEVERITY_ID_OTHER         NETWORKS_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORKS_QUERY_SEVERITY_ID.
var (
	NETWORKS_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "NETWORKS_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "NETWORKS_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "NETWORKS_QUERY_SEVERITY_ID_LOW",
		3:  "NETWORKS_QUERY_SEVERITY_ID_MEDIUM",
		4:  "NETWORKS_QUERY_SEVERITY_ID_HIGH",
		5:  "NETWORKS_QUERY_SEVERITY_ID_CRITICAL",
		6:  "NETWORKS_QUERY_SEVERITY_ID_FATAL",
		99: "NETWORKS_QUERY_SEVERITY_ID_OTHER",
	}
	NETWORKS_QUERY_SEVERITY_ID_value = map[string]int32{
		"NETWORKS_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORKS_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"NETWORKS_QUERY_SEVERITY_ID_LOW":           2,
		"NETWORKS_QUERY_SEVERITY_ID_MEDIUM":        3,
		"NETWORKS_QUERY_SEVERITY_ID_HIGH":          4,
		"NETWORKS_QUERY_SEVERITY_ID_CRITICAL":      5,
		"NETWORKS_QUERY_SEVERITY_ID_FATAL":         6,
		"NETWORKS_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x NETWORKS_QUERY_SEVERITY_ID) Enum() *NETWORKS_QUERY_SEVERITY_ID {
	p := new(NETWORKS_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[87].Descriptor()
}

func (NETWORKS_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[87]
}

func (x NETWORKS_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_SEVERITY_ID.Descriptor instead.
func (NETWORKS_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{87}
}

type NETWORKS_QUERY_STATUS_ID int32

const (
	NETWORKS_QUERY_STATUS_ID_NETWORKS_QUERY_STATUS_ID_UNKNOWN NETWORKS_QUERY_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORKS_QUERY_STATUS_ID_NETWORKS_QUERY_STATUS_ID_SUCCESS NETWORKS_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORKS_QUERY_STATUS_ID_NETWORKS_QUERY_STATUS_ID_FAILURE NETWORKS_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORKS_QUERY_STATUS_ID_NETWORKS_QUERY_STATUS_ID_OTHER   NETWORKS_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORKS_QUERY_STATUS_ID.
var (
	NETWORKS_QUERY_STATUS_ID_name = map[int32]string{
		0:  "NETWORKS_QUERY_STATUS_ID_UNKNOWN",
		1:  "NETWORKS_QUERY_STATUS_ID_SUCCESS",
		2:  "NETWORKS_QUERY_STATUS_ID_FAILURE",
		99: "NETWORKS_QUERY_STATUS_ID_OTHER",
	}
	NETWORKS_QUERY_STATUS_ID_value = map[string]int32{
		"NETWORKS_QUERY_STATUS_ID_UNKNOWN": 0,
		"NETWORKS_QUERY_STATUS_ID_SUCCESS": 1,
		"NETWORKS_QUERY_STATUS_ID_FAILURE": 2,
		"NETWORKS_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x NETWORKS_QUERY_STATUS_ID) Enum() *NETWORKS_QUERY_STATUS_ID {
	p := new(NETWORKS_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[88].Descriptor()
}

func (NETWORKS_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[88]
}

func (x NETWORKS_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_STATUS_ID.Descriptor instead.
func (NETWORKS_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{88}
}

type NETWORKS_QUERY_TYPE_UID int32

const (
	NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_TYPE_UID_UNSPECIFIED            NETWORKS_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_UNKNOWN NETWORKS_QUERY_TYPE_UID = 5001300 // Type: OCSF_VALUE; EnumValue: 5001300;
	NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_QUERY   NETWORKS_QUERY_TYPE_UID = 5001301 // Type: OCSF_VALUE; EnumValue: 5001301;
	NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_OTHER   NETWORKS_QUERY_TYPE_UID = 5001399 // EnumValue: 5001399; Type: OCSF_VALUE;
)

// Enum value maps for NETWORKS_QUERY_TYPE_UID.
var (
	NETWORKS_QUERY_TYPE_UID_name = map[int32]string{
		0:       "NETWORKS_QUERY_TYPE_UID_UNSPECIFIED",
		5001300: "NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_UNKNOWN",
		5001301: "NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_QUERY",
		5001399: "NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_OTHER",
	}
	NETWORKS_QUERY_TYPE_UID_value = map[string]int32{
		"NETWORKS_QUERY_TYPE_UID_UNSPECIFIED":            0,
		"NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_UNKNOWN": 5001300,
		"NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_QUERY":   5001301,
		"NETWORKS_QUERY_TYPE_UID_NETWORKS_QUERY_OTHER":   5001399,
	}
)

func (x NETWORKS_QUERY_TYPE_UID) Enum() *NETWORKS_QUERY_TYPE_UID {
	p := new(NETWORKS_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x NETWORKS_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORKS_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[89].Descriptor()
}

func (NETWORKS_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[89]
}

func (x NETWORKS_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORKS_QUERY_TYPE_UID.Descriptor instead.
func (NETWORKS_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{89}
}

type PATCH_STATE_ACTIVITY_ID int32

const (
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_UNKNOWN PATCH_STATE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_LOG     PATCH_STATE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_COLLECT PATCH_STATE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PATCH_STATE_ACTIVITY_ID_PATCH_STATE_ACTIVITY_ID_OTHER   PATCH_STATE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_ACTIVITY_ID.
var (
	PATCH_STATE_ACTIVITY_ID_name = map[int32]string{
		0:  "PATCH_STATE_ACTIVITY_ID_UNKNOWN",
		1:  "PATCH_STATE_ACTIVITY_ID_LOG",
		2:  "PATCH_STATE_ACTIVITY_ID_COLLECT",
		99: "PATCH_STATE_ACTIVITY_ID_OTHER",
	}
	PATCH_STATE_ACTIVITY_ID_value = map[string]int32{
		"PATCH_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"PATCH_STATE_ACTIVITY_ID_LOG":     1,
		"PATCH_STATE_ACTIVITY_ID_COLLECT": 2,
		"PATCH_STATE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PATCH_STATE_ACTIVITY_ID) Enum() *PATCH_STATE_ACTIVITY_ID {
	p := new(PATCH_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x PATCH_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[90].Descriptor()
}

func (PATCH_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[90]
}

func (x PATCH_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_ACTIVITY_ID.Descriptor instead.
func (PATCH_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{90}
}

type PATCH_STATE_CATEGORY_UID int32

const (
	PATCH_STATE_CATEGORY_UID_PATCH_STATE_CATEGORY_UID_UNSPECIFIED PATCH_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PATCH_STATE_CATEGORY_UID_PATCH_STATE_CATEGORY_UID_DISCOVERY   PATCH_STATE_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PATCH_STATE_CATEGORY_UID.
var (
	PATCH_STATE_CATEGORY_UID_name = map[int32]string{
		0: "PATCH_STATE_CATEGORY_UID_UNSPECIFIED",
		5: "PATCH_STATE_CATEGORY_UID_DISCOVERY",
	}
	PATCH_STATE_CATEGORY_UID_value = map[string]int32{
		"PATCH_STATE_CATEGORY_UID_UNSPECIFIED": 0,
		"PATCH_STATE_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PATCH_STATE_CATEGORY_UID) Enum() *PATCH_STATE_CATEGORY_UID {
	p := new(PATCH_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x PATCH_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[91].Descriptor()
}

func (PATCH_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[91]
}

func (x PATCH_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_CATEGORY_UID.Descriptor instead.
func (PATCH_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{91}
}

type PATCH_STATE_CLASS_UID int32

const (
	PATCH_STATE_CLASS_UID_PATCH_STATE_CLASS_UID_UNSPECIFIED                  PATCH_STATE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	PATCH_STATE_CLASS_UID_PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE PATCH_STATE_CLASS_UID = 5004 // Type: OCSF_VALUE; EnumValue: 5004;
)

// Enum value maps for PATCH_STATE_CLASS_UID.
var (
	PATCH_STATE_CLASS_UID_name = map[int32]string{
		0:    "PATCH_STATE_CLASS_UID_UNSPECIFIED",
		5004: "PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE",
	}
	PATCH_STATE_CLASS_UID_value = map[string]int32{
		"PATCH_STATE_CLASS_UID_UNSPECIFIED":                  0,
		"PATCH_STATE_CLASS_UID_OPERATING_SYSTEM_PATCH_STATE": 5004,
	}
)

func (x PATCH_STATE_CLASS_UID) Enum() *PATCH_STATE_CLASS_UID {
	p := new(PATCH_STATE_CLASS_UID)
	*p = x
	return p
}

func (x PATCH_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[92].Descriptor()
}

func (PATCH_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[92]
}

func (x PATCH_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_CLASS_UID.Descriptor instead.
func (PATCH_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{92}
}

type PATCH_STATE_SEVERITY_ID int32

const (
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_UNKNOWN       PATCH_STATE_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_INFORMATIONAL PATCH_STATE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_LOW           PATCH_STATE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_MEDIUM        PATCH_STATE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_HIGH          PATCH_STATE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_CRITICAL      PATCH_STATE_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_FATAL         PATCH_STATE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PATCH_STATE_SEVERITY_ID_PATCH_STATE_SEVERITY_ID_OTHER         PATCH_STATE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_SEVERITY_ID.
var (
	PATCH_STATE_SEVERITY_ID_name = map[int32]string{
		0:  "PATCH_STATE_SEVERITY_ID_UNKNOWN",
		1:  "PATCH_STATE_SEVERITY_ID_INFORMATIONAL",
		2:  "PATCH_STATE_SEVERITY_ID_LOW",
		3:  "PATCH_STATE_SEVERITY_ID_MEDIUM",
		4:  "PATCH_STATE_SEVERITY_ID_HIGH",
		5:  "PATCH_STATE_SEVERITY_ID_CRITICAL",
		6:  "PATCH_STATE_SEVERITY_ID_FATAL",
		99: "PATCH_STATE_SEVERITY_ID_OTHER",
	}
	PATCH_STATE_SEVERITY_ID_value = map[string]int32{
		"PATCH_STATE_SEVERITY_ID_UNKNOWN":       0,
		"PATCH_STATE_SEVERITY_ID_INFORMATIONAL": 1,
		"PATCH_STATE_SEVERITY_ID_LOW":           2,
		"PATCH_STATE_SEVERITY_ID_MEDIUM":        3,
		"PATCH_STATE_SEVERITY_ID_HIGH":          4,
		"PATCH_STATE_SEVERITY_ID_CRITICAL":      5,
		"PATCH_STATE_SEVERITY_ID_FATAL":         6,
		"PATCH_STATE_SEVERITY_ID_OTHER":         99,
	}
)

func (x PATCH_STATE_SEVERITY_ID) Enum() *PATCH_STATE_SEVERITY_ID {
	p := new(PATCH_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x PATCH_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[93].Descriptor()
}

func (PATCH_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[93]
}

func (x PATCH_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_SEVERITY_ID.Descriptor instead.
func (PATCH_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{93}
}

type PATCH_STATE_STATUS_ID int32

const (
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_UNKNOWN PATCH_STATE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_SUCCESS PATCH_STATE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_FAILURE PATCH_STATE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PATCH_STATE_STATUS_ID_PATCH_STATE_STATUS_ID_OTHER   PATCH_STATE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PATCH_STATE_STATUS_ID.
var (
	PATCH_STATE_STATUS_ID_name = map[int32]string{
		0:  "PATCH_STATE_STATUS_ID_UNKNOWN",
		1:  "PATCH_STATE_STATUS_ID_SUCCESS",
		2:  "PATCH_STATE_STATUS_ID_FAILURE",
		99: "PATCH_STATE_STATUS_ID_OTHER",
	}
	PATCH_STATE_STATUS_ID_value = map[string]int32{
		"PATCH_STATE_STATUS_ID_UNKNOWN": 0,
		"PATCH_STATE_STATUS_ID_SUCCESS": 1,
		"PATCH_STATE_STATUS_ID_FAILURE": 2,
		"PATCH_STATE_STATUS_ID_OTHER":   99,
	}
)

func (x PATCH_STATE_STATUS_ID) Enum() *PATCH_STATE_STATUS_ID {
	p := new(PATCH_STATE_STATUS_ID)
	*p = x
	return p
}

func (x PATCH_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[94].Descriptor()
}

func (PATCH_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[94]
}

func (x PATCH_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_STATUS_ID.Descriptor instead.
func (PATCH_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{94}
}

type PATCH_STATE_TYPE_UID int32

const (
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_UNSPECIFIED                          PATCH_STATE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN PATCH_STATE_TYPE_UID = 500400 // Type: OCSF_VALUE; EnumValue: 500400;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG     PATCH_STATE_TYPE_UID = 500401 // Type: OCSF_VALUE; EnumValue: 500401;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT PATCH_STATE_TYPE_UID = 500402 // Type: OCSF_VALUE; EnumValue: 500402;
	PATCH_STATE_TYPE_UID_PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER   PATCH_STATE_TYPE_UID = 500499 // Type: OCSF_VALUE; EnumValue: 500499;
)

// Enum value maps for PATCH_STATE_TYPE_UID.
var (
	PATCH_STATE_TYPE_UID_name = map[int32]string{
		0:      "PATCH_STATE_TYPE_UID_UNSPECIFIED",
		500400: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN",
		500401: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG",
		500402: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT",
		500499: "PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER",
	}
	PATCH_STATE_TYPE_UID_value = map[string]int32{
		"PATCH_STATE_TYPE_UID_UNSPECIFIED":                          0,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_UNKNOWN": 500400,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_LOG":     500401,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_COLLECT": 500402,
		"PATCH_STATE_TYPE_UID_OPERATING_SYSTEM_PATCH_STATE_OTHER":   500499,
	}
)

func (x PATCH_STATE_TYPE_UID) Enum() *PATCH_STATE_TYPE_UID {
	p := new(PATCH_STATE_TYPE_UID)
	*p = x
	return p
}

func (x PATCH_STATE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PATCH_STATE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[95].Descriptor()
}

func (PATCH_STATE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[95]
}

func (x PATCH_STATE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PATCH_STATE_TYPE_UID.Descriptor instead.
func (PATCH_STATE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{95}
}

type PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID int32

const (
	PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_UNKNOWN PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_QUERY   PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_OTHER   PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID.
var (
	PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_QUERY",
		99: "PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_OTHER",
	}
	PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_QUERY":   1,
		"PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) Enum() *PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID {
	p := new(PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[96].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[96]
}

func (x PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{96}
}

type PERIPHERAL_DEVICE_QUERY_CATEGORY_UID int32

const (
	PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_UNSPECIFIED PERIPHERAL_DEVICE_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_DISCOVERY   PERIPHERAL_DEVICE_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_CATEGORY_UID.
var (
	PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_DISCOVERY",
	}
	PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"PERIPHERAL_DEVICE_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) Enum() *PERIPHERAL_DEVICE_QUERY_CATEGORY_UID {
	p := new(PERIPHERAL_DEVICE_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[97].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[97]
}

func (x PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_CATEGORY_UID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{97}
}

type PERIPHERAL_DEVICE_QUERY_CLASS_UID int32

const (
	PERIPHERAL_DEVICE_QUERY_CLASS_UID_PERIPHERAL_DEVICE_QUERY_CLASS_UID_UNSPECIFIED             PERIPHERAL_DEVICE_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	PERIPHERAL_DEVICE_QUERY_CLASS_UID_PERIPHERAL_DEVICE_QUERY_CLASS_UID_PERIPHERAL_DEVICE_QUERY PERIPHERAL_DEVICE_QUERY_CLASS_UID = 50014 // Type: OCSF_VALUE; EnumValue: 50014;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_CLASS_UID.
var (
	PERIPHERAL_DEVICE_QUERY_CLASS_UID_name = map[int32]string{
		0:     "PERIPHERAL_DEVICE_QUERY_CLASS_UID_UNSPECIFIED",
		50014: "PERIPHERAL_DEVICE_QUERY_CLASS_UID_PERIPHERAL_DEVICE_QUERY",
	}
	PERIPHERAL_DEVICE_QUERY_CLASS_UID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_CLASS_UID_UNSPECIFIED":             0,
		"PERIPHERAL_DEVICE_QUERY_CLASS_UID_PERIPHERAL_DEVICE_QUERY": 50014,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_CLASS_UID) Enum() *PERIPHERAL_DEVICE_QUERY_CLASS_UID {
	p := new(PERIPHERAL_DEVICE_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[98].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[98]
}

func (x PERIPHERAL_DEVICE_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_CLASS_UID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{98}
}

type PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID int32

const (
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNKNOWN        PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_EXISTS         PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PARTIAL        PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_ERROR          PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED    PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_OTHER          PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID.
var (
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_OTHER",
	}
	PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) Enum() *PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID {
	p := new(PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[99].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[99]
}

func (x PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{99}
}

type PERIPHERAL_DEVICE_QUERY_SEVERITY_ID int32

const (
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_UNKNOWN       PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_INFORMATIONAL PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_LOW           PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_MEDIUM        PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_HIGH          PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_CRITICAL      PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_FATAL         PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_OTHER         PERIPHERAL_DEVICE_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_SEVERITY_ID.
var (
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_LOW",
		3:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_MEDIUM",
		4:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_HIGH",
		5:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_CRITICAL",
		6:  "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_FATAL",
		99: "PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_OTHER",
	}
	PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_LOW":           2,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_MEDIUM":        3,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_HIGH":          4,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_CRITICAL":      5,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_FATAL":         6,
		"PERIPHERAL_DEVICE_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) Enum() *PERIPHERAL_DEVICE_QUERY_SEVERITY_ID {
	p := new(PERIPHERAL_DEVICE_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[100].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[100]
}

func (x PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_SEVERITY_ID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{100}
}

type PERIPHERAL_DEVICE_QUERY_STATUS_ID int32

const (
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_PERIPHERAL_DEVICE_QUERY_STATUS_ID_UNKNOWN PERIPHERAL_DEVICE_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_PERIPHERAL_DEVICE_QUERY_STATUS_ID_SUCCESS PERIPHERAL_DEVICE_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_PERIPHERAL_DEVICE_QUERY_STATUS_ID_FAILURE PERIPHERAL_DEVICE_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_PERIPHERAL_DEVICE_QUERY_STATUS_ID_OTHER   PERIPHERAL_DEVICE_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_STATUS_ID.
var (
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_name = map[int32]string{
		0:  "PERIPHERAL_DEVICE_QUERY_STATUS_ID_UNKNOWN",
		1:  "PERIPHERAL_DEVICE_QUERY_STATUS_ID_SUCCESS",
		2:  "PERIPHERAL_DEVICE_QUERY_STATUS_ID_FAILURE",
		99: "PERIPHERAL_DEVICE_QUERY_STATUS_ID_OTHER",
	}
	PERIPHERAL_DEVICE_QUERY_STATUS_ID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_STATUS_ID_UNKNOWN": 0,
		"PERIPHERAL_DEVICE_QUERY_STATUS_ID_SUCCESS": 1,
		"PERIPHERAL_DEVICE_QUERY_STATUS_ID_FAILURE": 2,
		"PERIPHERAL_DEVICE_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_STATUS_ID) Enum() *PERIPHERAL_DEVICE_QUERY_STATUS_ID {
	p := new(PERIPHERAL_DEVICE_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[101].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[101]
}

func (x PERIPHERAL_DEVICE_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_STATUS_ID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{101}
}

type PERIPHERAL_DEVICE_QUERY_TYPE_UID int32

const (
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_TYPE_UID_UNSPECIFIED                     PERIPHERAL_DEVICE_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_UNKNOWN PERIPHERAL_DEVICE_QUERY_TYPE_UID = 5001400 // Type: OCSF_VALUE; EnumValue: 5001400;
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_QUERY   PERIPHERAL_DEVICE_QUERY_TYPE_UID = 5001401 // Type: OCSF_VALUE; EnumValue: 5001401;
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_OTHER   PERIPHERAL_DEVICE_QUERY_TYPE_UID = 5001499 // Type: OCSF_VALUE; EnumValue: 5001499;
)

// Enum value maps for PERIPHERAL_DEVICE_QUERY_TYPE_UID.
var (
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_name = map[int32]string{
		0:       "PERIPHERAL_DEVICE_QUERY_TYPE_UID_UNSPECIFIED",
		5001400: "PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_UNKNOWN",
		5001401: "PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_QUERY",
		5001499: "PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_OTHER",
	}
	PERIPHERAL_DEVICE_QUERY_TYPE_UID_value = map[string]int32{
		"PERIPHERAL_DEVICE_QUERY_TYPE_UID_UNSPECIFIED":                     0,
		"PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_UNKNOWN": 5001400,
		"PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_QUERY":   5001401,
		"PERIPHERAL_DEVICE_QUERY_TYPE_UID_PERIPHERAL_DEVICE_QUERY_OTHER":   5001499,
	}
)

func (x PERIPHERAL_DEVICE_QUERY_TYPE_UID) Enum() *PERIPHERAL_DEVICE_QUERY_TYPE_UID {
	p := new(PERIPHERAL_DEVICE_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x PERIPHERAL_DEVICE_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PERIPHERAL_DEVICE_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[102].Descriptor()
}

func (PERIPHERAL_DEVICE_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[102]
}

func (x PERIPHERAL_DEVICE_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PERIPHERAL_DEVICE_QUERY_TYPE_UID.Descriptor instead.
func (PERIPHERAL_DEVICE_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{102}
}

type PREFETCH_QUERY_ACTIVITY_ID int32

const (
	PREFETCH_QUERY_ACTIVITY_ID_PREFETCH_QUERY_ACTIVITY_ID_UNKNOWN PREFETCH_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_QUERY_ACTIVITY_ID_PREFETCH_QUERY_ACTIVITY_ID_QUERY   PREFETCH_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PREFETCH_QUERY_ACTIVITY_ID_PREFETCH_QUERY_ACTIVITY_ID_OTHER   PREFETCH_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PREFETCH_QUERY_ACTIVITY_ID.
var (
	PREFETCH_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "PREFETCH_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "PREFETCH_QUERY_ACTIVITY_ID_QUERY",
		99: "PREFETCH_QUERY_ACTIVITY_ID_OTHER",
	}
	PREFETCH_QUERY_ACTIVITY_ID_value = map[string]int32{
		"PREFETCH_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"PREFETCH_QUERY_ACTIVITY_ID_QUERY":   1,
		"PREFETCH_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PREFETCH_QUERY_ACTIVITY_ID) Enum() *PREFETCH_QUERY_ACTIVITY_ID {
	p := new(PREFETCH_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[103].Descriptor()
}

func (PREFETCH_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[103]
}

func (x PREFETCH_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_ACTIVITY_ID.Descriptor instead.
func (PREFETCH_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{103}
}

type PREFETCH_QUERY_CATEGORY_UID int32

const (
	PREFETCH_QUERY_CATEGORY_UID_PREFETCH_QUERY_CATEGORY_UID_UNSPECIFIED PREFETCH_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PREFETCH_QUERY_CATEGORY_UID_PREFETCH_QUERY_CATEGORY_UID_DISCOVERY   PREFETCH_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PREFETCH_QUERY_CATEGORY_UID.
var (
	PREFETCH_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "PREFETCH_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "PREFETCH_QUERY_CATEGORY_UID_DISCOVERY",
	}
	PREFETCH_QUERY_CATEGORY_UID_value = map[string]int32{
		"PREFETCH_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"PREFETCH_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PREFETCH_QUERY_CATEGORY_UID) Enum() *PREFETCH_QUERY_CATEGORY_UID {
	p := new(PREFETCH_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[104].Descriptor()
}

func (PREFETCH_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[104]
}

func (x PREFETCH_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_CATEGORY_UID.Descriptor instead.
func (PREFETCH_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{104}
}

type PREFETCH_QUERY_CLASS_UID int32

const (
	PREFETCH_QUERY_CLASS_UID_PREFETCH_QUERY_CLASS_UID_UNSPECIFIED    PREFETCH_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	PREFETCH_QUERY_CLASS_UID_PREFETCH_QUERY_CLASS_UID_PREFETCH_QUERY PREFETCH_QUERY_CLASS_UID = 50019 // Type: OCSF_VALUE; EnumValue: 50019;
)

// Enum value maps for PREFETCH_QUERY_CLASS_UID.
var (
	PREFETCH_QUERY_CLASS_UID_name = map[int32]string{
		0:     "PREFETCH_QUERY_CLASS_UID_UNSPECIFIED",
		50019: "PREFETCH_QUERY_CLASS_UID_PREFETCH_QUERY",
	}
	PREFETCH_QUERY_CLASS_UID_value = map[string]int32{
		"PREFETCH_QUERY_CLASS_UID_UNSPECIFIED":    0,
		"PREFETCH_QUERY_CLASS_UID_PREFETCH_QUERY": 50019,
	}
)

func (x PREFETCH_QUERY_CLASS_UID) Enum() *PREFETCH_QUERY_CLASS_UID {
	p := new(PREFETCH_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[105].Descriptor()
}

func (PREFETCH_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[105]
}

func (x PREFETCH_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_CLASS_UID.Descriptor instead.
func (PREFETCH_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{105}
}

type PREFETCH_QUERY_QUERY_RESULT_ID int32

const (
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_UNKNOWN        PREFETCH_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_EXISTS         PREFETCH_QUERY_QUERY_RESULT_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_PARTIAL        PREFETCH_QUERY_QUERY_RESULT_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST PREFETCH_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_ERROR          PREFETCH_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_UNSUPPORTED    PREFETCH_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PREFETCH_QUERY_QUERY_RESULT_ID_PREFETCH_QUERY_QUERY_RESULT_ID_OTHER          PREFETCH_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PREFETCH_QUERY_QUERY_RESULT_ID.
var (
	PREFETCH_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "PREFETCH_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "PREFETCH_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "PREFETCH_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "PREFETCH_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "PREFETCH_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "PREFETCH_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "PREFETCH_QUERY_QUERY_RESULT_ID_OTHER",
	}
	PREFETCH_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"PREFETCH_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"PREFETCH_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"PREFETCH_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"PREFETCH_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"PREFETCH_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"PREFETCH_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"PREFETCH_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x PREFETCH_QUERY_QUERY_RESULT_ID) Enum() *PREFETCH_QUERY_QUERY_RESULT_ID {
	p := new(PREFETCH_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[106].Descriptor()
}

func (PREFETCH_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[106]
}

func (x PREFETCH_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (PREFETCH_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{106}
}

type PREFETCH_QUERY_SEVERITY_ID int32

const (
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_UNKNOWN       PREFETCH_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_INFORMATIONAL PREFETCH_QUERY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_LOW           PREFETCH_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_MEDIUM        PREFETCH_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_HIGH          PREFETCH_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_CRITICAL      PREFETCH_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_FATAL         PREFETCH_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PREFETCH_QUERY_SEVERITY_ID_PREFETCH_QUERY_SEVERITY_ID_OTHER         PREFETCH_QUERY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for PREFETCH_QUERY_SEVERITY_ID.
var (
	PREFETCH_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "PREFETCH_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "PREFETCH_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "PREFETCH_QUERY_SEVERITY_ID_LOW",
		3:  "PREFETCH_QUERY_SEVERITY_ID_MEDIUM",
		4:  "PREFETCH_QUERY_SEVERITY_ID_HIGH",
		5:  "PREFETCH_QUERY_SEVERITY_ID_CRITICAL",
		6:  "PREFETCH_QUERY_SEVERITY_ID_FATAL",
		99: "PREFETCH_QUERY_SEVERITY_ID_OTHER",
	}
	PREFETCH_QUERY_SEVERITY_ID_value = map[string]int32{
		"PREFETCH_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"PREFETCH_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"PREFETCH_QUERY_SEVERITY_ID_LOW":           2,
		"PREFETCH_QUERY_SEVERITY_ID_MEDIUM":        3,
		"PREFETCH_QUERY_SEVERITY_ID_HIGH":          4,
		"PREFETCH_QUERY_SEVERITY_ID_CRITICAL":      5,
		"PREFETCH_QUERY_SEVERITY_ID_FATAL":         6,
		"PREFETCH_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x PREFETCH_QUERY_SEVERITY_ID) Enum() *PREFETCH_QUERY_SEVERITY_ID {
	p := new(PREFETCH_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[107].Descriptor()
}

func (PREFETCH_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[107]
}

func (x PREFETCH_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_SEVERITY_ID.Descriptor instead.
func (PREFETCH_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{107}
}

type PREFETCH_QUERY_STATUS_ID int32

const (
	PREFETCH_QUERY_STATUS_ID_PREFETCH_QUERY_STATUS_ID_UNKNOWN PREFETCH_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PREFETCH_QUERY_STATUS_ID_PREFETCH_QUERY_STATUS_ID_SUCCESS PREFETCH_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PREFETCH_QUERY_STATUS_ID_PREFETCH_QUERY_STATUS_ID_FAILURE PREFETCH_QUERY_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PREFETCH_QUERY_STATUS_ID_PREFETCH_QUERY_STATUS_ID_OTHER   PREFETCH_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PREFETCH_QUERY_STATUS_ID.
var (
	PREFETCH_QUERY_STATUS_ID_name = map[int32]string{
		0:  "PREFETCH_QUERY_STATUS_ID_UNKNOWN",
		1:  "PREFETCH_QUERY_STATUS_ID_SUCCESS",
		2:  "PREFETCH_QUERY_STATUS_ID_FAILURE",
		99: "PREFETCH_QUERY_STATUS_ID_OTHER",
	}
	PREFETCH_QUERY_STATUS_ID_value = map[string]int32{
		"PREFETCH_QUERY_STATUS_ID_UNKNOWN": 0,
		"PREFETCH_QUERY_STATUS_ID_SUCCESS": 1,
		"PREFETCH_QUERY_STATUS_ID_FAILURE": 2,
		"PREFETCH_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x PREFETCH_QUERY_STATUS_ID) Enum() *PREFETCH_QUERY_STATUS_ID {
	p := new(PREFETCH_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[108].Descriptor()
}

func (PREFETCH_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[108]
}

func (x PREFETCH_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_STATUS_ID.Descriptor instead.
func (PREFETCH_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{108}
}

type PREFETCH_QUERY_TYPE_UID int32

const (
	PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_TYPE_UID_UNSPECIFIED            PREFETCH_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_UNKNOWN PREFETCH_QUERY_TYPE_UID = 5001900 // EnumValue: 5001900; Type: OCSF_VALUE;
	PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_QUERY   PREFETCH_QUERY_TYPE_UID = 5001901 // Type: OCSF_VALUE; EnumValue: 5001901;
	PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_OTHER   PREFETCH_QUERY_TYPE_UID = 5001999 // Type: OCSF_VALUE; EnumValue: 5001999;
)

// Enum value maps for PREFETCH_QUERY_TYPE_UID.
var (
	PREFETCH_QUERY_TYPE_UID_name = map[int32]string{
		0:       "PREFETCH_QUERY_TYPE_UID_UNSPECIFIED",
		5001900: "PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_UNKNOWN",
		5001901: "PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_QUERY",
		5001999: "PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_OTHER",
	}
	PREFETCH_QUERY_TYPE_UID_value = map[string]int32{
		"PREFETCH_QUERY_TYPE_UID_UNSPECIFIED":            0,
		"PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_UNKNOWN": 5001900,
		"PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_QUERY":   5001901,
		"PREFETCH_QUERY_TYPE_UID_PREFETCH_QUERY_OTHER":   5001999,
	}
)

func (x PREFETCH_QUERY_TYPE_UID) Enum() *PREFETCH_QUERY_TYPE_UID {
	p := new(PREFETCH_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x PREFETCH_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PREFETCH_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[109].Descriptor()
}

func (PREFETCH_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[109]
}

func (x PREFETCH_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PREFETCH_QUERY_TYPE_UID.Descriptor instead.
func (PREFETCH_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{109}
}

type PROCESS_QUERY_ACTIVITY_ID int32

const (
	PROCESS_QUERY_ACTIVITY_ID_PROCESS_QUERY_ACTIVITY_ID_UNKNOWN PROCESS_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_QUERY_ACTIVITY_ID_PROCESS_QUERY_ACTIVITY_ID_QUERY   PROCESS_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_QUERY_ACTIVITY_ID_PROCESS_QUERY_ACTIVITY_ID_OTHER   PROCESS_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_QUERY_ACTIVITY_ID.
var (
	PROCESS_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "PROCESS_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "PROCESS_QUERY_ACTIVITY_ID_QUERY",
		99: "PROCESS_QUERY_ACTIVITY_ID_OTHER",
	}
	PROCESS_QUERY_ACTIVITY_ID_value = map[string]int32{
		"PROCESS_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"PROCESS_QUERY_ACTIVITY_ID_QUERY":   1,
		"PROCESS_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x PROCESS_QUERY_ACTIVITY_ID) Enum() *PROCESS_QUERY_ACTIVITY_ID {
	p := new(PROCESS_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PROCESS_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[110].Descriptor()
}

func (PROCESS_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[110]
}

func (x PROCESS_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_ACTIVITY_ID.Descriptor instead.
func (PROCESS_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{110}
}

type PROCESS_QUERY_CATEGORY_UID int32

const (
	PROCESS_QUERY_CATEGORY_UID_PROCESS_QUERY_CATEGORY_UID_UNSPECIFIED PROCESS_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_QUERY_CATEGORY_UID_PROCESS_QUERY_CATEGORY_UID_DISCOVERY   PROCESS_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for PROCESS_QUERY_CATEGORY_UID.
var (
	PROCESS_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "PROCESS_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "PROCESS_QUERY_CATEGORY_UID_DISCOVERY",
	}
	PROCESS_QUERY_CATEGORY_UID_value = map[string]int32{
		"PROCESS_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"PROCESS_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x PROCESS_QUERY_CATEGORY_UID) Enum() *PROCESS_QUERY_CATEGORY_UID {
	p := new(PROCESS_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x PROCESS_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[111].Descriptor()
}

func (PROCESS_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[111]
}

func (x PROCESS_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_CATEGORY_UID.Descriptor instead.
func (PROCESS_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{111}
}

type PROCESS_QUERY_CLASS_UID int32

const (
	PROCESS_QUERY_CLASS_UID_PROCESS_QUERY_CLASS_UID_UNSPECIFIED   PROCESS_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	PROCESS_QUERY_CLASS_UID_PROCESS_QUERY_CLASS_UID_PROCESS_QUERY PROCESS_QUERY_CLASS_UID = 50015 // Type: OCSF_VALUE; EnumValue: 50015;
)

// Enum value maps for PROCESS_QUERY_CLASS_UID.
var (
	PROCESS_QUERY_CLASS_UID_name = map[int32]string{
		0:     "PROCESS_QUERY_CLASS_UID_UNSPECIFIED",
		50015: "PROCESS_QUERY_CLASS_UID_PROCESS_QUERY",
	}
	PROCESS_QUERY_CLASS_UID_value = map[string]int32{
		"PROCESS_QUERY_CLASS_UID_UNSPECIFIED":   0,
		"PROCESS_QUERY_CLASS_UID_PROCESS_QUERY": 50015,
	}
)

func (x PROCESS_QUERY_CLASS_UID) Enum() *PROCESS_QUERY_CLASS_UID {
	p := new(PROCESS_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x PROCESS_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[112].Descriptor()
}

func (PROCESS_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[112]
}

func (x PROCESS_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_CLASS_UID.Descriptor instead.
func (PROCESS_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{112}
}

type PROCESS_QUERY_QUERY_RESULT_ID int32

const (
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_UNKNOWN        PROCESS_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_EXISTS         PROCESS_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_PARTIAL        PROCESS_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST PROCESS_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_ERROR          PROCESS_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_UNSUPPORTED    PROCESS_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_QUERY_QUERY_RESULT_ID_PROCESS_QUERY_QUERY_RESULT_ID_OTHER          PROCESS_QUERY_QUERY_RESULT_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_QUERY_QUERY_RESULT_ID.
var (
	PROCESS_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "PROCESS_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "PROCESS_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "PROCESS_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "PROCESS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "PROCESS_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "PROCESS_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "PROCESS_QUERY_QUERY_RESULT_ID_OTHER",
	}
	PROCESS_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"PROCESS_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"PROCESS_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"PROCESS_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"PROCESS_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"PROCESS_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"PROCESS_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"PROCESS_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x PROCESS_QUERY_QUERY_RESULT_ID) Enum() *PROCESS_QUERY_QUERY_RESULT_ID {
	p := new(PROCESS_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x PROCESS_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[113].Descriptor()
}

func (PROCESS_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[113]
}

func (x PROCESS_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (PROCESS_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{113}
}

type PROCESS_QUERY_SEVERITY_ID int32

const (
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_UNKNOWN       PROCESS_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_INFORMATIONAL PROCESS_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_LOW           PROCESS_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_MEDIUM        PROCESS_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_HIGH          PROCESS_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_CRITICAL      PROCESS_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_FATAL         PROCESS_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PROCESS_QUERY_SEVERITY_ID_PROCESS_QUERY_SEVERITY_ID_OTHER         PROCESS_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_QUERY_SEVERITY_ID.
var (
	PROCESS_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "PROCESS_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "PROCESS_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "PROCESS_QUERY_SEVERITY_ID_LOW",
		3:  "PROCESS_QUERY_SEVERITY_ID_MEDIUM",
		4:  "PROCESS_QUERY_SEVERITY_ID_HIGH",
		5:  "PROCESS_QUERY_SEVERITY_ID_CRITICAL",
		6:  "PROCESS_QUERY_SEVERITY_ID_FATAL",
		99: "PROCESS_QUERY_SEVERITY_ID_OTHER",
	}
	PROCESS_QUERY_SEVERITY_ID_value = map[string]int32{
		"PROCESS_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"PROCESS_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"PROCESS_QUERY_SEVERITY_ID_LOW":           2,
		"PROCESS_QUERY_SEVERITY_ID_MEDIUM":        3,
		"PROCESS_QUERY_SEVERITY_ID_HIGH":          4,
		"PROCESS_QUERY_SEVERITY_ID_CRITICAL":      5,
		"PROCESS_QUERY_SEVERITY_ID_FATAL":         6,
		"PROCESS_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x PROCESS_QUERY_SEVERITY_ID) Enum() *PROCESS_QUERY_SEVERITY_ID {
	p := new(PROCESS_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x PROCESS_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[114].Descriptor()
}

func (PROCESS_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[114]
}

func (x PROCESS_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_SEVERITY_ID.Descriptor instead.
func (PROCESS_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{114}
}

type PROCESS_QUERY_STATUS_ID int32

const (
	PROCESS_QUERY_STATUS_ID_PROCESS_QUERY_STATUS_ID_UNKNOWN PROCESS_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_QUERY_STATUS_ID_PROCESS_QUERY_STATUS_ID_SUCCESS PROCESS_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_QUERY_STATUS_ID_PROCESS_QUERY_STATUS_ID_FAILURE PROCESS_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_QUERY_STATUS_ID_PROCESS_QUERY_STATUS_ID_OTHER   PROCESS_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_QUERY_STATUS_ID.
var (
	PROCESS_QUERY_STATUS_ID_name = map[int32]string{
		0:  "PROCESS_QUERY_STATUS_ID_UNKNOWN",
		1:  "PROCESS_QUERY_STATUS_ID_SUCCESS",
		2:  "PROCESS_QUERY_STATUS_ID_FAILURE",
		99: "PROCESS_QUERY_STATUS_ID_OTHER",
	}
	PROCESS_QUERY_STATUS_ID_value = map[string]int32{
		"PROCESS_QUERY_STATUS_ID_UNKNOWN": 0,
		"PROCESS_QUERY_STATUS_ID_SUCCESS": 1,
		"PROCESS_QUERY_STATUS_ID_FAILURE": 2,
		"PROCESS_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x PROCESS_QUERY_STATUS_ID) Enum() *PROCESS_QUERY_STATUS_ID {
	p := new(PROCESS_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x PROCESS_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[115].Descriptor()
}

func (PROCESS_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[115]
}

func (x PROCESS_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_STATUS_ID.Descriptor instead.
func (PROCESS_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{115}
}

type PROCESS_QUERY_TYPE_UID int32

const (
	PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_TYPE_UID_UNSPECIFIED           PROCESS_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_UNKNOWN PROCESS_QUERY_TYPE_UID = 5001500 // Type: OCSF_VALUE; EnumValue: 5001500;
	PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_QUERY   PROCESS_QUERY_TYPE_UID = 5001501 // Type: OCSF_VALUE; EnumValue: 5001501;
	PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_OTHER   PROCESS_QUERY_TYPE_UID = 5001599 // Type: OCSF_VALUE; EnumValue: 5001599;
)

// Enum value maps for PROCESS_QUERY_TYPE_UID.
var (
	PROCESS_QUERY_TYPE_UID_name = map[int32]string{
		0:       "PROCESS_QUERY_TYPE_UID_UNSPECIFIED",
		5001500: "PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_UNKNOWN",
		5001501: "PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_QUERY",
		5001599: "PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_OTHER",
	}
	PROCESS_QUERY_TYPE_UID_value = map[string]int32{
		"PROCESS_QUERY_TYPE_UID_UNSPECIFIED":           0,
		"PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_UNKNOWN": 5001500,
		"PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_QUERY":   5001501,
		"PROCESS_QUERY_TYPE_UID_PROCESS_QUERY_OTHER":   5001599,
	}
)

func (x PROCESS_QUERY_TYPE_UID) Enum() *PROCESS_QUERY_TYPE_UID {
	p := new(PROCESS_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x PROCESS_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[116].Descriptor()
}

func (PROCESS_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[116]
}

func (x PROCESS_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_QUERY_TYPE_UID.Descriptor instead.
func (PROCESS_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{116}
}

type REGISTRY_KEY_QUERY_ACTIVITY_ID int32

const (
	REGISTRY_KEY_QUERY_ACTIVITY_ID_REGISTRY_KEY_QUERY_ACTIVITY_ID_UNKNOWN REGISTRY_KEY_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_QUERY_ACTIVITY_ID_REGISTRY_KEY_QUERY_ACTIVITY_ID_QUERY   REGISTRY_KEY_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_QUERY_ACTIVITY_ID_REGISTRY_KEY_QUERY_ACTIVITY_ID_OTHER   REGISTRY_KEY_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_KEY_QUERY_ACTIVITY_ID.
var (
	REGISTRY_KEY_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "REGISTRY_KEY_QUERY_ACTIVITY_ID_QUERY",
		99: "REGISTRY_KEY_QUERY_ACTIVITY_ID_OTHER",
	}
	REGISTRY_KEY_QUERY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"REGISTRY_KEY_QUERY_ACTIVITY_ID_QUERY":   1,
		"REGISTRY_KEY_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x REGISTRY_KEY_QUERY_ACTIVITY_ID) Enum() *REGISTRY_KEY_QUERY_ACTIVITY_ID {
	p := new(REGISTRY_KEY_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[117].Descriptor()
}

func (REGISTRY_KEY_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[117]
}

func (x REGISTRY_KEY_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_KEY_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{117}
}

type REGISTRY_KEY_QUERY_CATEGORY_UID int32

const (
	REGISTRY_KEY_QUERY_CATEGORY_UID_REGISTRY_KEY_QUERY_CATEGORY_UID_UNSPECIFIED REGISTRY_KEY_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_QUERY_CATEGORY_UID_REGISTRY_KEY_QUERY_CATEGORY_UID_DISCOVERY   REGISTRY_KEY_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for REGISTRY_KEY_QUERY_CATEGORY_UID.
var (
	REGISTRY_KEY_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_KEY_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "REGISTRY_KEY_QUERY_CATEGORY_UID_DISCOVERY",
	}
	REGISTRY_KEY_QUERY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"REGISTRY_KEY_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x REGISTRY_KEY_QUERY_CATEGORY_UID) Enum() *REGISTRY_KEY_QUERY_CATEGORY_UID {
	p := new(REGISTRY_KEY_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[118].Descriptor()
}

func (REGISTRY_KEY_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[118]
}

func (x REGISTRY_KEY_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_KEY_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{118}
}

type REGISTRY_KEY_QUERY_CLASS_UID int32

const (
	REGISTRY_KEY_QUERY_CLASS_UID_REGISTRY_KEY_QUERY_CLASS_UID_UNSPECIFIED        REGISTRY_KEY_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_QUERY_CLASS_UID_REGISTRY_KEY_QUERY_CLASS_UID_REGISTRY_KEY_QUERY REGISTRY_KEY_QUERY_CLASS_UID = 5004 // EnumValue: 5004; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_QUERY_CLASS_UID.
var (
	REGISTRY_KEY_QUERY_CLASS_UID_name = map[int32]string{
		0:    "REGISTRY_KEY_QUERY_CLASS_UID_UNSPECIFIED",
		5004: "REGISTRY_KEY_QUERY_CLASS_UID_REGISTRY_KEY_QUERY",
	}
	REGISTRY_KEY_QUERY_CLASS_UID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_CLASS_UID_UNSPECIFIED":        0,
		"REGISTRY_KEY_QUERY_CLASS_UID_REGISTRY_KEY_QUERY": 5004,
	}
)

func (x REGISTRY_KEY_QUERY_CLASS_UID) Enum() *REGISTRY_KEY_QUERY_CLASS_UID {
	p := new(REGISTRY_KEY_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[119].Descriptor()
}

func (REGISTRY_KEY_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[119]
}

func (x REGISTRY_KEY_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_CLASS_UID.Descriptor instead.
func (REGISTRY_KEY_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{119}
}

type REGISTRY_KEY_QUERY_QUERY_RESULT_ID int32

const (
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNKNOWN        REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_EXISTS         REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_PARTIAL        REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_ERROR          REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNSUPPORTED    REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_REGISTRY_KEY_QUERY_QUERY_RESULT_ID_OTHER          REGISTRY_KEY_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_KEY_QUERY_QUERY_RESULT_ID.
var (
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "REGISTRY_KEY_QUERY_QUERY_RESULT_ID_OTHER",
	}
	REGISTRY_KEY_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"REGISTRY_KEY_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x REGISTRY_KEY_QUERY_QUERY_RESULT_ID) Enum() *REGISTRY_KEY_QUERY_QUERY_RESULT_ID {
	p := new(REGISTRY_KEY_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[120].Descriptor()
}

func (REGISTRY_KEY_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[120]
}

func (x REGISTRY_KEY_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (REGISTRY_KEY_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{120}
}

type REGISTRY_KEY_QUERY_SEVERITY_ID int32

const (
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_UNKNOWN       REGISTRY_KEY_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_INFORMATIONAL REGISTRY_KEY_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_LOW           REGISTRY_KEY_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_MEDIUM        REGISTRY_KEY_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_HIGH          REGISTRY_KEY_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_CRITICAL      REGISTRY_KEY_QUERY_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_FATAL         REGISTRY_KEY_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_KEY_QUERY_SEVERITY_ID_REGISTRY_KEY_QUERY_SEVERITY_ID_OTHER         REGISTRY_KEY_QUERY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_QUERY_SEVERITY_ID.
var (
	REGISTRY_KEY_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "REGISTRY_KEY_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "REGISTRY_KEY_QUERY_SEVERITY_ID_LOW",
		3:  "REGISTRY_KEY_QUERY_SEVERITY_ID_MEDIUM",
		4:  "REGISTRY_KEY_QUERY_SEVERITY_ID_HIGH",
		5:  "REGISTRY_KEY_QUERY_SEVERITY_ID_CRITICAL",
		6:  "REGISTRY_KEY_QUERY_SEVERITY_ID_FATAL",
		99: "REGISTRY_KEY_QUERY_SEVERITY_ID_OTHER",
	}
	REGISTRY_KEY_QUERY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_LOW":           2,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_MEDIUM":        3,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_HIGH":          4,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_CRITICAL":      5,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_FATAL":         6,
		"REGISTRY_KEY_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x REGISTRY_KEY_QUERY_SEVERITY_ID) Enum() *REGISTRY_KEY_QUERY_SEVERITY_ID {
	p := new(REGISTRY_KEY_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[121].Descriptor()
}

func (REGISTRY_KEY_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[121]
}

func (x REGISTRY_KEY_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_KEY_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{121}
}

type REGISTRY_KEY_QUERY_STATUS_ID int32

const (
	REGISTRY_KEY_QUERY_STATUS_ID_REGISTRY_KEY_QUERY_STATUS_ID_UNKNOWN REGISTRY_KEY_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_QUERY_STATUS_ID_REGISTRY_KEY_QUERY_STATUS_ID_SUCCESS REGISTRY_KEY_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_QUERY_STATUS_ID_REGISTRY_KEY_QUERY_STATUS_ID_FAILURE REGISTRY_KEY_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_QUERY_STATUS_ID_REGISTRY_KEY_QUERY_STATUS_ID_OTHER   REGISTRY_KEY_QUERY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_QUERY_STATUS_ID.
var (
	REGISTRY_KEY_QUERY_STATUS_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_QUERY_STATUS_ID_UNKNOWN",
		1:  "REGISTRY_KEY_QUERY_STATUS_ID_SUCCESS",
		2:  "REGISTRY_KEY_QUERY_STATUS_ID_FAILURE",
		99: "REGISTRY_KEY_QUERY_STATUS_ID_OTHER",
	}
	REGISTRY_KEY_QUERY_STATUS_ID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_KEY_QUERY_STATUS_ID_SUCCESS": 1,
		"REGISTRY_KEY_QUERY_STATUS_ID_FAILURE": 2,
		"REGISTRY_KEY_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x REGISTRY_KEY_QUERY_STATUS_ID) Enum() *REGISTRY_KEY_QUERY_STATUS_ID {
	p := new(REGISTRY_KEY_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[122].Descriptor()
}

func (REGISTRY_KEY_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[122]
}

func (x REGISTRY_KEY_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_STATUS_ID.Descriptor instead.
func (REGISTRY_KEY_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{122}
}

type REGISTRY_KEY_QUERY_TYPE_UID int32

const (
	REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_TYPE_UID_UNSPECIFIED                REGISTRY_KEY_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_UNKNOWN REGISTRY_KEY_QUERY_TYPE_UID = 500400 // Type: OCSF_VALUE; EnumValue: 500400;
	REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_QUERY   REGISTRY_KEY_QUERY_TYPE_UID = 500401 // Type: OCSF_VALUE; EnumValue: 500401;
	REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_OTHER   REGISTRY_KEY_QUERY_TYPE_UID = 500499 // EnumValue: 500499; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_QUERY_TYPE_UID.
var (
	REGISTRY_KEY_QUERY_TYPE_UID_name = map[int32]string{
		0:      "REGISTRY_KEY_QUERY_TYPE_UID_UNSPECIFIED",
		500400: "REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_UNKNOWN",
		500401: "REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_QUERY",
		500499: "REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_OTHER",
	}
	REGISTRY_KEY_QUERY_TYPE_UID_value = map[string]int32{
		"REGISTRY_KEY_QUERY_TYPE_UID_UNSPECIFIED":                0,
		"REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_UNKNOWN": 500400,
		"REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_QUERY":   500401,
		"REGISTRY_KEY_QUERY_TYPE_UID_REGISTRY_KEY_QUERY_OTHER":   500499,
	}
)

func (x REGISTRY_KEY_QUERY_TYPE_UID) Enum() *REGISTRY_KEY_QUERY_TYPE_UID {
	p := new(REGISTRY_KEY_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[123].Descriptor()
}

func (REGISTRY_KEY_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[123]
}

func (x REGISTRY_KEY_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_QUERY_TYPE_UID.Descriptor instead.
func (REGISTRY_KEY_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{123}
}

type REGISTRY_VALUE_QUERY_ACTIVITY_ID int32

const (
	REGISTRY_VALUE_QUERY_ACTIVITY_ID_REGISTRY_VALUE_QUERY_ACTIVITY_ID_UNKNOWN REGISTRY_VALUE_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_QUERY_ACTIVITY_ID_REGISTRY_VALUE_QUERY_ACTIVITY_ID_QUERY   REGISTRY_VALUE_QUERY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REGISTRY_VALUE_QUERY_ACTIVITY_ID_REGISTRY_VALUE_QUERY_ACTIVITY_ID_OTHER   REGISTRY_VALUE_QUERY_ACTIVITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_QUERY_ACTIVITY_ID.
var (
	REGISTRY_VALUE_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_QUERY_ACTIVITY_ID_QUERY",
		99: "REGISTRY_VALUE_QUERY_ACTIVITY_ID_OTHER",
	}
	REGISTRY_VALUE_QUERY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_QUERY_ACTIVITY_ID_QUERY":   1,
		"REGISTRY_VALUE_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x REGISTRY_VALUE_QUERY_ACTIVITY_ID) Enum() *REGISTRY_VALUE_QUERY_ACTIVITY_ID {
	p := new(REGISTRY_VALUE_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[124].Descriptor()
}

func (REGISTRY_VALUE_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[124]
}

func (x REGISTRY_VALUE_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{124}
}

type REGISTRY_VALUE_QUERY_CATEGORY_UID int32

const (
	REGISTRY_VALUE_QUERY_CATEGORY_UID_REGISTRY_VALUE_QUERY_CATEGORY_UID_UNSPECIFIED REGISTRY_VALUE_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_QUERY_CATEGORY_UID_REGISTRY_VALUE_QUERY_CATEGORY_UID_DISCOVERY   REGISTRY_VALUE_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for REGISTRY_VALUE_QUERY_CATEGORY_UID.
var (
	REGISTRY_VALUE_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "REGISTRY_VALUE_QUERY_CATEGORY_UID_DISCOVERY",
	}
	REGISTRY_VALUE_QUERY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"REGISTRY_VALUE_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x REGISTRY_VALUE_QUERY_CATEGORY_UID) Enum() *REGISTRY_VALUE_QUERY_CATEGORY_UID {
	p := new(REGISTRY_VALUE_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[125].Descriptor()
}

func (REGISTRY_VALUE_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[125]
}

func (x REGISTRY_VALUE_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{125}
}

type REGISTRY_VALUE_QUERY_CLASS_UID int32

const (
	REGISTRY_VALUE_QUERY_CLASS_UID_REGISTRY_VALUE_QUERY_CLASS_UID_UNSPECIFIED          REGISTRY_VALUE_QUERY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_QUERY_CLASS_UID_REGISTRY_VALUE_QUERY_CLASS_UID_REGISTRY_VALUE_QUERY REGISTRY_VALUE_QUERY_CLASS_UID = 5005 // Type: OCSF_VALUE; EnumValue: 5005;
)

// Enum value maps for REGISTRY_VALUE_QUERY_CLASS_UID.
var (
	REGISTRY_VALUE_QUERY_CLASS_UID_name = map[int32]string{
		0:    "REGISTRY_VALUE_QUERY_CLASS_UID_UNSPECIFIED",
		5005: "REGISTRY_VALUE_QUERY_CLASS_UID_REGISTRY_VALUE_QUERY",
	}
	REGISTRY_VALUE_QUERY_CLASS_UID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_CLASS_UID_UNSPECIFIED":          0,
		"REGISTRY_VALUE_QUERY_CLASS_UID_REGISTRY_VALUE_QUERY": 5005,
	}
)

func (x REGISTRY_VALUE_QUERY_CLASS_UID) Enum() *REGISTRY_VALUE_QUERY_CLASS_UID {
	p := new(REGISTRY_VALUE_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[126].Descriptor()
}

func (REGISTRY_VALUE_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[126]
}

func (x REGISTRY_VALUE_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_CLASS_UID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{126}
}

type REGISTRY_VALUE_QUERY_QUERY_RESULT_ID int32

const (
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNKNOWN        REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_EXISTS         REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_PARTIAL        REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_ERROR          REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNSUPPORTED    REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_OTHER          REGISTRY_VALUE_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_QUERY_QUERY_RESULT_ID.
var (
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_OTHER",
	}
	REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"REGISTRY_VALUE_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) Enum() *REGISTRY_VALUE_QUERY_QUERY_RESULT_ID {
	p := new(REGISTRY_VALUE_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[127].Descriptor()
}

func (REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[127]
}

func (x REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{127}
}

type REGISTRY_VALUE_QUERY_SEVERITY_ID int32

const (
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_UNKNOWN       REGISTRY_VALUE_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_INFORMATIONAL REGISTRY_VALUE_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_LOW           REGISTRY_VALUE_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_MEDIUM        REGISTRY_VALUE_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_HIGH          REGISTRY_VALUE_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_CRITICAL      REGISTRY_VALUE_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_FATAL         REGISTRY_VALUE_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_VALUE_QUERY_SEVERITY_ID_REGISTRY_VALUE_QUERY_SEVERITY_ID_OTHER         REGISTRY_VALUE_QUERY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_QUERY_SEVERITY_ID.
var (
	REGISTRY_VALUE_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_LOW",
		3:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_MEDIUM",
		4:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_HIGH",
		5:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_CRITICAL",
		6:  "REGISTRY_VALUE_QUERY_SEVERITY_ID_FATAL",
		99: "REGISTRY_VALUE_QUERY_SEVERITY_ID_OTHER",
	}
	REGISTRY_VALUE_QUERY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_LOW":           2,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_MEDIUM":        3,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_HIGH":          4,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_CRITICAL":      5,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_FATAL":         6,
		"REGISTRY_VALUE_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x REGISTRY_VALUE_QUERY_SEVERITY_ID) Enum() *REGISTRY_VALUE_QUERY_SEVERITY_ID {
	p := new(REGISTRY_VALUE_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[128].Descriptor()
}

func (REGISTRY_VALUE_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[128]
}

func (x REGISTRY_VALUE_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{128}
}

type REGISTRY_VALUE_QUERY_STATUS_ID int32

const (
	REGISTRY_VALUE_QUERY_STATUS_ID_REGISTRY_VALUE_QUERY_STATUS_ID_UNKNOWN REGISTRY_VALUE_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_QUERY_STATUS_ID_REGISTRY_VALUE_QUERY_STATUS_ID_SUCCESS REGISTRY_VALUE_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_QUERY_STATUS_ID_REGISTRY_VALUE_QUERY_STATUS_ID_FAILURE REGISTRY_VALUE_QUERY_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	REGISTRY_VALUE_QUERY_STATUS_ID_REGISTRY_VALUE_QUERY_STATUS_ID_OTHER   REGISTRY_VALUE_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_QUERY_STATUS_ID.
var (
	REGISTRY_VALUE_QUERY_STATUS_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_QUERY_STATUS_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_QUERY_STATUS_ID_SUCCESS",
		2:  "REGISTRY_VALUE_QUERY_STATUS_ID_FAILURE",
		99: "REGISTRY_VALUE_QUERY_STATUS_ID_OTHER",
	}
	REGISTRY_VALUE_QUERY_STATUS_ID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_QUERY_STATUS_ID_SUCCESS": 1,
		"REGISTRY_VALUE_QUERY_STATUS_ID_FAILURE": 2,
		"REGISTRY_VALUE_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x REGISTRY_VALUE_QUERY_STATUS_ID) Enum() *REGISTRY_VALUE_QUERY_STATUS_ID {
	p := new(REGISTRY_VALUE_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[129].Descriptor()
}

func (REGISTRY_VALUE_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[129]
}

func (x REGISTRY_VALUE_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_STATUS_ID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{129}
}

type REGISTRY_VALUE_QUERY_TYPE_UID int32

const (
	REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_TYPE_UID_UNSPECIFIED                  REGISTRY_VALUE_QUERY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_UNKNOWN REGISTRY_VALUE_QUERY_TYPE_UID = 500500 // Type: OCSF_VALUE; EnumValue: 500500;
	REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_QUERY   REGISTRY_VALUE_QUERY_TYPE_UID = 500501 // Type: OCSF_VALUE; EnumValue: 500501;
	REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_OTHER   REGISTRY_VALUE_QUERY_TYPE_UID = 500599 // Type: OCSF_VALUE; EnumValue: 500599;
)

// Enum value maps for REGISTRY_VALUE_QUERY_TYPE_UID.
var (
	REGISTRY_VALUE_QUERY_TYPE_UID_name = map[int32]string{
		0:      "REGISTRY_VALUE_QUERY_TYPE_UID_UNSPECIFIED",
		500500: "REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_UNKNOWN",
		500501: "REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_QUERY",
		500599: "REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_OTHER",
	}
	REGISTRY_VALUE_QUERY_TYPE_UID_value = map[string]int32{
		"REGISTRY_VALUE_QUERY_TYPE_UID_UNSPECIFIED":                  0,
		"REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_UNKNOWN": 500500,
		"REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_QUERY":   500501,
		"REGISTRY_VALUE_QUERY_TYPE_UID_REGISTRY_VALUE_QUERY_OTHER":   500599,
	}
)

func (x REGISTRY_VALUE_QUERY_TYPE_UID) Enum() *REGISTRY_VALUE_QUERY_TYPE_UID {
	p := new(REGISTRY_VALUE_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[130].Descriptor()
}

func (REGISTRY_VALUE_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[130]
}

func (x REGISTRY_VALUE_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_QUERY_TYPE_UID.Descriptor instead.
func (REGISTRY_VALUE_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{130}
}

type SERVICE_QUERY_ACTIVITY_ID int32

const (
	SERVICE_QUERY_ACTIVITY_ID_SERVICE_QUERY_ACTIVITY_ID_UNKNOWN SERVICE_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SERVICE_QUERY_ACTIVITY_ID_SERVICE_QUERY_ACTIVITY_ID_QUERY   SERVICE_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SERVICE_QUERY_ACTIVITY_ID_SERVICE_QUERY_ACTIVITY_ID_OTHER   SERVICE_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SERVICE_QUERY_ACTIVITY_ID.
var (
	SERVICE_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "SERVICE_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "SERVICE_QUERY_ACTIVITY_ID_QUERY",
		99: "SERVICE_QUERY_ACTIVITY_ID_OTHER",
	}
	SERVICE_QUERY_ACTIVITY_ID_value = map[string]int32{
		"SERVICE_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"SERVICE_QUERY_ACTIVITY_ID_QUERY":   1,
		"SERVICE_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x SERVICE_QUERY_ACTIVITY_ID) Enum() *SERVICE_QUERY_ACTIVITY_ID {
	p := new(SERVICE_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SERVICE_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[131].Descriptor()
}

func (SERVICE_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[131]
}

func (x SERVICE_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_ACTIVITY_ID.Descriptor instead.
func (SERVICE_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{131}
}

type SERVICE_QUERY_CATEGORY_UID int32

const (
	SERVICE_QUERY_CATEGORY_UID_SERVICE_QUERY_CATEGORY_UID_UNSPECIFIED SERVICE_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SERVICE_QUERY_CATEGORY_UID_SERVICE_QUERY_CATEGORY_UID_DISCOVERY   SERVICE_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for SERVICE_QUERY_CATEGORY_UID.
var (
	SERVICE_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "SERVICE_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "SERVICE_QUERY_CATEGORY_UID_DISCOVERY",
	}
	SERVICE_QUERY_CATEGORY_UID_value = map[string]int32{
		"SERVICE_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"SERVICE_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x SERVICE_QUERY_CATEGORY_UID) Enum() *SERVICE_QUERY_CATEGORY_UID {
	p := new(SERVICE_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x SERVICE_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[132].Descriptor()
}

func (SERVICE_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[132]
}

func (x SERVICE_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_CATEGORY_UID.Descriptor instead.
func (SERVICE_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{132}
}

type SERVICE_QUERY_CLASS_UID int32

const (
	SERVICE_QUERY_CLASS_UID_SERVICE_QUERY_CLASS_UID_UNSPECIFIED   SERVICE_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	SERVICE_QUERY_CLASS_UID_SERVICE_QUERY_CLASS_UID_SERVICE_QUERY SERVICE_QUERY_CLASS_UID = 50016 // Type: OCSF_VALUE; EnumValue: 50016;
)

// Enum value maps for SERVICE_QUERY_CLASS_UID.
var (
	SERVICE_QUERY_CLASS_UID_name = map[int32]string{
		0:     "SERVICE_QUERY_CLASS_UID_UNSPECIFIED",
		50016: "SERVICE_QUERY_CLASS_UID_SERVICE_QUERY",
	}
	SERVICE_QUERY_CLASS_UID_value = map[string]int32{
		"SERVICE_QUERY_CLASS_UID_UNSPECIFIED":   0,
		"SERVICE_QUERY_CLASS_UID_SERVICE_QUERY": 50016,
	}
)

func (x SERVICE_QUERY_CLASS_UID) Enum() *SERVICE_QUERY_CLASS_UID {
	p := new(SERVICE_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x SERVICE_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[133].Descriptor()
}

func (SERVICE_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[133]
}

func (x SERVICE_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_CLASS_UID.Descriptor instead.
func (SERVICE_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{133}
}

type SERVICE_QUERY_QUERY_RESULT_ID int32

const (
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_UNKNOWN        SERVICE_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_EXISTS         SERVICE_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_PARTIAL        SERVICE_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST SERVICE_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_ERROR          SERVICE_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED    SERVICE_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SERVICE_QUERY_QUERY_RESULT_ID_SERVICE_QUERY_QUERY_RESULT_ID_OTHER          SERVICE_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SERVICE_QUERY_QUERY_RESULT_ID.
var (
	SERVICE_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "SERVICE_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "SERVICE_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "SERVICE_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "SERVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "SERVICE_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "SERVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "SERVICE_QUERY_QUERY_RESULT_ID_OTHER",
	}
	SERVICE_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"SERVICE_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"SERVICE_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"SERVICE_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"SERVICE_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"SERVICE_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"SERVICE_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"SERVICE_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x SERVICE_QUERY_QUERY_RESULT_ID) Enum() *SERVICE_QUERY_QUERY_RESULT_ID {
	p := new(SERVICE_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x SERVICE_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[134].Descriptor()
}

func (SERVICE_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[134]
}

func (x SERVICE_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (SERVICE_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{134}
}

type SERVICE_QUERY_SEVERITY_ID int32

const (
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_UNKNOWN       SERVICE_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_INFORMATIONAL SERVICE_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_LOW           SERVICE_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_MEDIUM        SERVICE_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_HIGH          SERVICE_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_CRITICAL      SERVICE_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_FATAL         SERVICE_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SERVICE_QUERY_SEVERITY_ID_SERVICE_QUERY_SEVERITY_ID_OTHER         SERVICE_QUERY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SERVICE_QUERY_SEVERITY_ID.
var (
	SERVICE_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "SERVICE_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "SERVICE_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "SERVICE_QUERY_SEVERITY_ID_LOW",
		3:  "SERVICE_QUERY_SEVERITY_ID_MEDIUM",
		4:  "SERVICE_QUERY_SEVERITY_ID_HIGH",
		5:  "SERVICE_QUERY_SEVERITY_ID_CRITICAL",
		6:  "SERVICE_QUERY_SEVERITY_ID_FATAL",
		99: "SERVICE_QUERY_SEVERITY_ID_OTHER",
	}
	SERVICE_QUERY_SEVERITY_ID_value = map[string]int32{
		"SERVICE_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"SERVICE_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"SERVICE_QUERY_SEVERITY_ID_LOW":           2,
		"SERVICE_QUERY_SEVERITY_ID_MEDIUM":        3,
		"SERVICE_QUERY_SEVERITY_ID_HIGH":          4,
		"SERVICE_QUERY_SEVERITY_ID_CRITICAL":      5,
		"SERVICE_QUERY_SEVERITY_ID_FATAL":         6,
		"SERVICE_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x SERVICE_QUERY_SEVERITY_ID) Enum() *SERVICE_QUERY_SEVERITY_ID {
	p := new(SERVICE_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x SERVICE_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[135].Descriptor()
}

func (SERVICE_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[135]
}

func (x SERVICE_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_SEVERITY_ID.Descriptor instead.
func (SERVICE_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{135}
}

type SERVICE_QUERY_STATUS_ID int32

const (
	SERVICE_QUERY_STATUS_ID_SERVICE_QUERY_STATUS_ID_UNKNOWN SERVICE_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SERVICE_QUERY_STATUS_ID_SERVICE_QUERY_STATUS_ID_SUCCESS SERVICE_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SERVICE_QUERY_STATUS_ID_SERVICE_QUERY_STATUS_ID_FAILURE SERVICE_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SERVICE_QUERY_STATUS_ID_SERVICE_QUERY_STATUS_ID_OTHER   SERVICE_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SERVICE_QUERY_STATUS_ID.
var (
	SERVICE_QUERY_STATUS_ID_name = map[int32]string{
		0:  "SERVICE_QUERY_STATUS_ID_UNKNOWN",
		1:  "SERVICE_QUERY_STATUS_ID_SUCCESS",
		2:  "SERVICE_QUERY_STATUS_ID_FAILURE",
		99: "SERVICE_QUERY_STATUS_ID_OTHER",
	}
	SERVICE_QUERY_STATUS_ID_value = map[string]int32{
		"SERVICE_QUERY_STATUS_ID_UNKNOWN": 0,
		"SERVICE_QUERY_STATUS_ID_SUCCESS": 1,
		"SERVICE_QUERY_STATUS_ID_FAILURE": 2,
		"SERVICE_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x SERVICE_QUERY_STATUS_ID) Enum() *SERVICE_QUERY_STATUS_ID {
	p := new(SERVICE_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x SERVICE_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[136].Descriptor()
}

func (SERVICE_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[136]
}

func (x SERVICE_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_STATUS_ID.Descriptor instead.
func (SERVICE_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{136}
}

type SERVICE_QUERY_TYPE_UID int32

const (
	SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_TYPE_UID_UNSPECIFIED           SERVICE_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_UNKNOWN SERVICE_QUERY_TYPE_UID = 5001600 // Type: OCSF_VALUE; EnumValue: 5001600;
	SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_QUERY   SERVICE_QUERY_TYPE_UID = 5001601 // EnumValue: 5001601; Type: OCSF_VALUE;
	SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_OTHER   SERVICE_QUERY_TYPE_UID = 5001699 // Type: OCSF_VALUE; EnumValue: 5001699;
)

// Enum value maps for SERVICE_QUERY_TYPE_UID.
var (
	SERVICE_QUERY_TYPE_UID_name = map[int32]string{
		0:       "SERVICE_QUERY_TYPE_UID_UNSPECIFIED",
		5001600: "SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_UNKNOWN",
		5001601: "SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_QUERY",
		5001699: "SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_OTHER",
	}
	SERVICE_QUERY_TYPE_UID_value = map[string]int32{
		"SERVICE_QUERY_TYPE_UID_UNSPECIFIED":           0,
		"SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_UNKNOWN": 5001600,
		"SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_QUERY":   5001601,
		"SERVICE_QUERY_TYPE_UID_SERVICE_QUERY_OTHER":   5001699,
	}
)

func (x SERVICE_QUERY_TYPE_UID) Enum() *SERVICE_QUERY_TYPE_UID {
	p := new(SERVICE_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x SERVICE_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[137].Descriptor()
}

func (SERVICE_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[137]
}

func (x SERVICE_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE_QUERY_TYPE_UID.Descriptor instead.
func (SERVICE_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{137}
}

type SESSION_QUERY_ACTIVITY_ID int32

const (
	SESSION_QUERY_ACTIVITY_ID_SESSION_QUERY_ACTIVITY_ID_UNKNOWN SESSION_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SESSION_QUERY_ACTIVITY_ID_SESSION_QUERY_ACTIVITY_ID_QUERY   SESSION_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SESSION_QUERY_ACTIVITY_ID_SESSION_QUERY_ACTIVITY_ID_OTHER   SESSION_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SESSION_QUERY_ACTIVITY_ID.
var (
	SESSION_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "SESSION_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "SESSION_QUERY_ACTIVITY_ID_QUERY",
		99: "SESSION_QUERY_ACTIVITY_ID_OTHER",
	}
	SESSION_QUERY_ACTIVITY_ID_value = map[string]int32{
		"SESSION_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"SESSION_QUERY_ACTIVITY_ID_QUERY":   1,
		"SESSION_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x SESSION_QUERY_ACTIVITY_ID) Enum() *SESSION_QUERY_ACTIVITY_ID {
	p := new(SESSION_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SESSION_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[138].Descriptor()
}

func (SESSION_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[138]
}

func (x SESSION_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_ACTIVITY_ID.Descriptor instead.
func (SESSION_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{138}
}

type SESSION_QUERY_CATEGORY_UID int32

const (
	SESSION_QUERY_CATEGORY_UID_SESSION_QUERY_CATEGORY_UID_UNSPECIFIED SESSION_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SESSION_QUERY_CATEGORY_UID_SESSION_QUERY_CATEGORY_UID_DISCOVERY   SESSION_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for SESSION_QUERY_CATEGORY_UID.
var (
	SESSION_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "SESSION_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "SESSION_QUERY_CATEGORY_UID_DISCOVERY",
	}
	SESSION_QUERY_CATEGORY_UID_value = map[string]int32{
		"SESSION_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"SESSION_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x SESSION_QUERY_CATEGORY_UID) Enum() *SESSION_QUERY_CATEGORY_UID {
	p := new(SESSION_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x SESSION_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[139].Descriptor()
}

func (SESSION_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[139]
}

func (x SESSION_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_CATEGORY_UID.Descriptor instead.
func (SESSION_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{139}
}

type SESSION_QUERY_CLASS_UID int32

const (
	SESSION_QUERY_CLASS_UID_SESSION_QUERY_CLASS_UID_UNSPECIFIED        SESSION_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	SESSION_QUERY_CLASS_UID_SESSION_QUERY_CLASS_UID_USER_SESSION_QUERY SESSION_QUERY_CLASS_UID = 50017 // Type: OCSF_VALUE; EnumValue: 50017;
)

// Enum value maps for SESSION_QUERY_CLASS_UID.
var (
	SESSION_QUERY_CLASS_UID_name = map[int32]string{
		0:     "SESSION_QUERY_CLASS_UID_UNSPECIFIED",
		50017: "SESSION_QUERY_CLASS_UID_USER_SESSION_QUERY",
	}
	SESSION_QUERY_CLASS_UID_value = map[string]int32{
		"SESSION_QUERY_CLASS_UID_UNSPECIFIED":        0,
		"SESSION_QUERY_CLASS_UID_USER_SESSION_QUERY": 50017,
	}
)

func (x SESSION_QUERY_CLASS_UID) Enum() *SESSION_QUERY_CLASS_UID {
	p := new(SESSION_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x SESSION_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[140].Descriptor()
}

func (SESSION_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[140]
}

func (x SESSION_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_CLASS_UID.Descriptor instead.
func (SESSION_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{140}
}

type SESSION_QUERY_QUERY_RESULT_ID int32

const (
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_UNKNOWN        SESSION_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_EXISTS         SESSION_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_PARTIAL        SESSION_QUERY_QUERY_RESULT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST SESSION_QUERY_QUERY_RESULT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_ERROR          SESSION_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_UNSUPPORTED    SESSION_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SESSION_QUERY_QUERY_RESULT_ID_SESSION_QUERY_QUERY_RESULT_ID_OTHER          SESSION_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SESSION_QUERY_QUERY_RESULT_ID.
var (
	SESSION_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "SESSION_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "SESSION_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "SESSION_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "SESSION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "SESSION_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "SESSION_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "SESSION_QUERY_QUERY_RESULT_ID_OTHER",
	}
	SESSION_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"SESSION_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"SESSION_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"SESSION_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"SESSION_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"SESSION_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"SESSION_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"SESSION_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x SESSION_QUERY_QUERY_RESULT_ID) Enum() *SESSION_QUERY_QUERY_RESULT_ID {
	p := new(SESSION_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x SESSION_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[141].Descriptor()
}

func (SESSION_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[141]
}

func (x SESSION_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (SESSION_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{141}
}

type SESSION_QUERY_SEVERITY_ID int32

const (
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_UNKNOWN       SESSION_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_INFORMATIONAL SESSION_QUERY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_LOW           SESSION_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_MEDIUM        SESSION_QUERY_SEVERITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_HIGH          SESSION_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_CRITICAL      SESSION_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_FATAL         SESSION_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SESSION_QUERY_SEVERITY_ID_SESSION_QUERY_SEVERITY_ID_OTHER         SESSION_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SESSION_QUERY_SEVERITY_ID.
var (
	SESSION_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "SESSION_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "SESSION_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "SESSION_QUERY_SEVERITY_ID_LOW",
		3:  "SESSION_QUERY_SEVERITY_ID_MEDIUM",
		4:  "SESSION_QUERY_SEVERITY_ID_HIGH",
		5:  "SESSION_QUERY_SEVERITY_ID_CRITICAL",
		6:  "SESSION_QUERY_SEVERITY_ID_FATAL",
		99: "SESSION_QUERY_SEVERITY_ID_OTHER",
	}
	SESSION_QUERY_SEVERITY_ID_value = map[string]int32{
		"SESSION_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"SESSION_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"SESSION_QUERY_SEVERITY_ID_LOW":           2,
		"SESSION_QUERY_SEVERITY_ID_MEDIUM":        3,
		"SESSION_QUERY_SEVERITY_ID_HIGH":          4,
		"SESSION_QUERY_SEVERITY_ID_CRITICAL":      5,
		"SESSION_QUERY_SEVERITY_ID_FATAL":         6,
		"SESSION_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x SESSION_QUERY_SEVERITY_ID) Enum() *SESSION_QUERY_SEVERITY_ID {
	p := new(SESSION_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x SESSION_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[142].Descriptor()
}

func (SESSION_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[142]
}

func (x SESSION_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_SEVERITY_ID.Descriptor instead.
func (SESSION_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{142}
}

type SESSION_QUERY_STATUS_ID int32

const (
	SESSION_QUERY_STATUS_ID_SESSION_QUERY_STATUS_ID_UNKNOWN SESSION_QUERY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SESSION_QUERY_STATUS_ID_SESSION_QUERY_STATUS_ID_SUCCESS SESSION_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SESSION_QUERY_STATUS_ID_SESSION_QUERY_STATUS_ID_FAILURE SESSION_QUERY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SESSION_QUERY_STATUS_ID_SESSION_QUERY_STATUS_ID_OTHER   SESSION_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SESSION_QUERY_STATUS_ID.
var (
	SESSION_QUERY_STATUS_ID_name = map[int32]string{
		0:  "SESSION_QUERY_STATUS_ID_UNKNOWN",
		1:  "SESSION_QUERY_STATUS_ID_SUCCESS",
		2:  "SESSION_QUERY_STATUS_ID_FAILURE",
		99: "SESSION_QUERY_STATUS_ID_OTHER",
	}
	SESSION_QUERY_STATUS_ID_value = map[string]int32{
		"SESSION_QUERY_STATUS_ID_UNKNOWN": 0,
		"SESSION_QUERY_STATUS_ID_SUCCESS": 1,
		"SESSION_QUERY_STATUS_ID_FAILURE": 2,
		"SESSION_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x SESSION_QUERY_STATUS_ID) Enum() *SESSION_QUERY_STATUS_ID {
	p := new(SESSION_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x SESSION_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[143].Descriptor()
}

func (SESSION_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[143]
}

func (x SESSION_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_STATUS_ID.Descriptor instead.
func (SESSION_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{143}
}

type SESSION_QUERY_TYPE_UID int32

const (
	SESSION_QUERY_TYPE_UID_SESSION_QUERY_TYPE_UID_UNSPECIFIED                SESSION_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	SESSION_QUERY_TYPE_UID_SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_UNKNOWN SESSION_QUERY_TYPE_UID = 5001700 // EnumValue: 5001700; Type: OCSF_VALUE;
	SESSION_QUERY_TYPE_UID_SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_QUERY   SESSION_QUERY_TYPE_UID = 5001701 // Type: OCSF_VALUE; EnumValue: 5001701;
	SESSION_QUERY_TYPE_UID_SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_OTHER   SESSION_QUERY_TYPE_UID = 5001799 // Type: OCSF_VALUE; EnumValue: 5001799;
)

// Enum value maps for SESSION_QUERY_TYPE_UID.
var (
	SESSION_QUERY_TYPE_UID_name = map[int32]string{
		0:       "SESSION_QUERY_TYPE_UID_UNSPECIFIED",
		5001700: "SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_UNKNOWN",
		5001701: "SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_QUERY",
		5001799: "SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_OTHER",
	}
	SESSION_QUERY_TYPE_UID_value = map[string]int32{
		"SESSION_QUERY_TYPE_UID_UNSPECIFIED":                0,
		"SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_UNKNOWN": 5001700,
		"SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_QUERY":   5001701,
		"SESSION_QUERY_TYPE_UID_USER_SESSION_QUERY_OTHER":   5001799,
	}
)

func (x SESSION_QUERY_TYPE_UID) Enum() *SESSION_QUERY_TYPE_UID {
	p := new(SESSION_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x SESSION_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SESSION_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[144].Descriptor()
}

func (SESSION_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[144]
}

func (x SESSION_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SESSION_QUERY_TYPE_UID.Descriptor instead.
func (SESSION_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{144}
}

type USER_INVENTORY_ACTIVITY_ID int32

const (
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_UNKNOWN USER_INVENTORY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_LOG     USER_INVENTORY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_COLLECT USER_INVENTORY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_ACTIVITY_ID_USER_INVENTORY_ACTIVITY_ID_OTHER   USER_INVENTORY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_ACTIVITY_ID.
var (
	USER_INVENTORY_ACTIVITY_ID_name = map[int32]string{
		0:  "USER_INVENTORY_ACTIVITY_ID_UNKNOWN",
		1:  "USER_INVENTORY_ACTIVITY_ID_LOG",
		2:  "USER_INVENTORY_ACTIVITY_ID_COLLECT",
		99: "USER_INVENTORY_ACTIVITY_ID_OTHER",
	}
	USER_INVENTORY_ACTIVITY_ID_value = map[string]int32{
		"USER_INVENTORY_ACTIVITY_ID_UNKNOWN": 0,
		"USER_INVENTORY_ACTIVITY_ID_LOG":     1,
		"USER_INVENTORY_ACTIVITY_ID_COLLECT": 2,
		"USER_INVENTORY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x USER_INVENTORY_ACTIVITY_ID) Enum() *USER_INVENTORY_ACTIVITY_ID {
	p := new(USER_INVENTORY_ACTIVITY_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[145].Descriptor()
}

func (USER_INVENTORY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[145]
}

func (x USER_INVENTORY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_ACTIVITY_ID.Descriptor instead.
func (USER_INVENTORY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{145}
}

type USER_INVENTORY_CATEGORY_UID int32

const (
	USER_INVENTORY_CATEGORY_UID_USER_INVENTORY_CATEGORY_UID_UNSPECIFIED USER_INVENTORY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	USER_INVENTORY_CATEGORY_UID_USER_INVENTORY_CATEGORY_UID_DISCOVERY   USER_INVENTORY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for USER_INVENTORY_CATEGORY_UID.
var (
	USER_INVENTORY_CATEGORY_UID_name = map[int32]string{
		0: "USER_INVENTORY_CATEGORY_UID_UNSPECIFIED",
		5: "USER_INVENTORY_CATEGORY_UID_DISCOVERY",
	}
	USER_INVENTORY_CATEGORY_UID_value = map[string]int32{
		"USER_INVENTORY_CATEGORY_UID_UNSPECIFIED": 0,
		"USER_INVENTORY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x USER_INVENTORY_CATEGORY_UID) Enum() *USER_INVENTORY_CATEGORY_UID {
	p := new(USER_INVENTORY_CATEGORY_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[146].Descriptor()
}

func (USER_INVENTORY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[146]
}

func (x USER_INVENTORY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_CATEGORY_UID.Descriptor instead.
func (USER_INVENTORY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{146}
}

type USER_INVENTORY_CLASS_UID int32

const (
	USER_INVENTORY_CLASS_UID_USER_INVENTORY_CLASS_UID_UNSPECIFIED         USER_INVENTORY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	USER_INVENTORY_CLASS_UID_USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO USER_INVENTORY_CLASS_UID = 5003 // Type: OCSF_VALUE; EnumValue: 5003;
)

// Enum value maps for USER_INVENTORY_CLASS_UID.
var (
	USER_INVENTORY_CLASS_UID_name = map[int32]string{
		0:    "USER_INVENTORY_CLASS_UID_UNSPECIFIED",
		5003: "USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO",
	}
	USER_INVENTORY_CLASS_UID_value = map[string]int32{
		"USER_INVENTORY_CLASS_UID_UNSPECIFIED":         0,
		"USER_INVENTORY_CLASS_UID_USER_INVENTORY_INFO": 5003,
	}
)

func (x USER_INVENTORY_CLASS_UID) Enum() *USER_INVENTORY_CLASS_UID {
	p := new(USER_INVENTORY_CLASS_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[147].Descriptor()
}

func (USER_INVENTORY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[147]
}

func (x USER_INVENTORY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_CLASS_UID.Descriptor instead.
func (USER_INVENTORY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{147}
}

type USER_INVENTORY_SEVERITY_ID int32

const (
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_UNKNOWN       USER_INVENTORY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_INFORMATIONAL USER_INVENTORY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_LOW           USER_INVENTORY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_MEDIUM        USER_INVENTORY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_HIGH          USER_INVENTORY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_CRITICAL      USER_INVENTORY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_FATAL         USER_INVENTORY_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	USER_INVENTORY_SEVERITY_ID_USER_INVENTORY_SEVERITY_ID_OTHER         USER_INVENTORY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_SEVERITY_ID.
var (
	USER_INVENTORY_SEVERITY_ID_name = map[int32]string{
		0:  "USER_INVENTORY_SEVERITY_ID_UNKNOWN",
		1:  "USER_INVENTORY_SEVERITY_ID_INFORMATIONAL",
		2:  "USER_INVENTORY_SEVERITY_ID_LOW",
		3:  "USER_INVENTORY_SEVERITY_ID_MEDIUM",
		4:  "USER_INVENTORY_SEVERITY_ID_HIGH",
		5:  "USER_INVENTORY_SEVERITY_ID_CRITICAL",
		6:  "USER_INVENTORY_SEVERITY_ID_FATAL",
		99: "USER_INVENTORY_SEVERITY_ID_OTHER",
	}
	USER_INVENTORY_SEVERITY_ID_value = map[string]int32{
		"USER_INVENTORY_SEVERITY_ID_UNKNOWN":       0,
		"USER_INVENTORY_SEVERITY_ID_INFORMATIONAL": 1,
		"USER_INVENTORY_SEVERITY_ID_LOW":           2,
		"USER_INVENTORY_SEVERITY_ID_MEDIUM":        3,
		"USER_INVENTORY_SEVERITY_ID_HIGH":          4,
		"USER_INVENTORY_SEVERITY_ID_CRITICAL":      5,
		"USER_INVENTORY_SEVERITY_ID_FATAL":         6,
		"USER_INVENTORY_SEVERITY_ID_OTHER":         99,
	}
)

func (x USER_INVENTORY_SEVERITY_ID) Enum() *USER_INVENTORY_SEVERITY_ID {
	p := new(USER_INVENTORY_SEVERITY_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[148].Descriptor()
}

func (USER_INVENTORY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[148]
}

func (x USER_INVENTORY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_SEVERITY_ID.Descriptor instead.
func (USER_INVENTORY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{148}
}

type USER_INVENTORY_STATUS_ID int32

const (
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_UNKNOWN USER_INVENTORY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_SUCCESS USER_INVENTORY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_FAILURE USER_INVENTORY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_INVENTORY_STATUS_ID_USER_INVENTORY_STATUS_ID_OTHER   USER_INVENTORY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_INVENTORY_STATUS_ID.
var (
	USER_INVENTORY_STATUS_ID_name = map[int32]string{
		0:  "USER_INVENTORY_STATUS_ID_UNKNOWN",
		1:  "USER_INVENTORY_STATUS_ID_SUCCESS",
		2:  "USER_INVENTORY_STATUS_ID_FAILURE",
		99: "USER_INVENTORY_STATUS_ID_OTHER",
	}
	USER_INVENTORY_STATUS_ID_value = map[string]int32{
		"USER_INVENTORY_STATUS_ID_UNKNOWN": 0,
		"USER_INVENTORY_STATUS_ID_SUCCESS": 1,
		"USER_INVENTORY_STATUS_ID_FAILURE": 2,
		"USER_INVENTORY_STATUS_ID_OTHER":   99,
	}
)

func (x USER_INVENTORY_STATUS_ID) Enum() *USER_INVENTORY_STATUS_ID {
	p := new(USER_INVENTORY_STATUS_ID)
	*p = x
	return p
}

func (x USER_INVENTORY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[149].Descriptor()
}

func (USER_INVENTORY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[149]
}

func (x USER_INVENTORY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_STATUS_ID.Descriptor instead.
func (USER_INVENTORY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{149}
}

type USER_INVENTORY_TYPE_UID int32

const (
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_UNSPECIFIED                 USER_INVENTORY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN USER_INVENTORY_TYPE_UID = 500300 // Type: OCSF_VALUE; EnumValue: 500300;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG     USER_INVENTORY_TYPE_UID = 500301 // Type: OCSF_VALUE; EnumValue: 500301;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT USER_INVENTORY_TYPE_UID = 500302 // Type: OCSF_VALUE; EnumValue: 500302;
	USER_INVENTORY_TYPE_UID_USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER   USER_INVENTORY_TYPE_UID = 500399 // Type: OCSF_VALUE; EnumValue: 500399;
)

// Enum value maps for USER_INVENTORY_TYPE_UID.
var (
	USER_INVENTORY_TYPE_UID_name = map[int32]string{
		0:      "USER_INVENTORY_TYPE_UID_UNSPECIFIED",
		500300: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN",
		500301: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG",
		500302: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT",
		500399: "USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER",
	}
	USER_INVENTORY_TYPE_UID_value = map[string]int32{
		"USER_INVENTORY_TYPE_UID_UNSPECIFIED":                 0,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_UNKNOWN": 500300,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_LOG":     500301,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_COLLECT": 500302,
		"USER_INVENTORY_TYPE_UID_USER_INVENTORY_INFO_OTHER":   500399,
	}
)

func (x USER_INVENTORY_TYPE_UID) Enum() *USER_INVENTORY_TYPE_UID {
	p := new(USER_INVENTORY_TYPE_UID)
	*p = x
	return p
}

func (x USER_INVENTORY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_INVENTORY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[150].Descriptor()
}

func (USER_INVENTORY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[150]
}

func (x USER_INVENTORY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_INVENTORY_TYPE_UID.Descriptor instead.
func (USER_INVENTORY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{150}
}

type USER_QUERY_ACTIVITY_ID int32

const (
	USER_QUERY_ACTIVITY_ID_USER_QUERY_ACTIVITY_ID_UNKNOWN USER_QUERY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_QUERY_ACTIVITY_ID_USER_QUERY_ACTIVITY_ID_QUERY   USER_QUERY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_QUERY_ACTIVITY_ID_USER_QUERY_ACTIVITY_ID_OTHER   USER_QUERY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_QUERY_ACTIVITY_ID.
var (
	USER_QUERY_ACTIVITY_ID_name = map[int32]string{
		0:  "USER_QUERY_ACTIVITY_ID_UNKNOWN",
		1:  "USER_QUERY_ACTIVITY_ID_QUERY",
		99: "USER_QUERY_ACTIVITY_ID_OTHER",
	}
	USER_QUERY_ACTIVITY_ID_value = map[string]int32{
		"USER_QUERY_ACTIVITY_ID_UNKNOWN": 0,
		"USER_QUERY_ACTIVITY_ID_QUERY":   1,
		"USER_QUERY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x USER_QUERY_ACTIVITY_ID) Enum() *USER_QUERY_ACTIVITY_ID {
	p := new(USER_QUERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x USER_QUERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[151].Descriptor()
}

func (USER_QUERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[151]
}

func (x USER_QUERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_ACTIVITY_ID.Descriptor instead.
func (USER_QUERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{151}
}

type USER_QUERY_CATEGORY_UID int32

const (
	USER_QUERY_CATEGORY_UID_USER_QUERY_CATEGORY_UID_UNSPECIFIED USER_QUERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	USER_QUERY_CATEGORY_UID_USER_QUERY_CATEGORY_UID_DISCOVERY   USER_QUERY_CATEGORY_UID = 5 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for USER_QUERY_CATEGORY_UID.
var (
	USER_QUERY_CATEGORY_UID_name = map[int32]string{
		0: "USER_QUERY_CATEGORY_UID_UNSPECIFIED",
		5: "USER_QUERY_CATEGORY_UID_DISCOVERY",
	}
	USER_QUERY_CATEGORY_UID_value = map[string]int32{
		"USER_QUERY_CATEGORY_UID_UNSPECIFIED": 0,
		"USER_QUERY_CATEGORY_UID_DISCOVERY":   5,
	}
)

func (x USER_QUERY_CATEGORY_UID) Enum() *USER_QUERY_CATEGORY_UID {
	p := new(USER_QUERY_CATEGORY_UID)
	*p = x
	return p
}

func (x USER_QUERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[152].Descriptor()
}

func (USER_QUERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[152]
}

func (x USER_QUERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_CATEGORY_UID.Descriptor instead.
func (USER_QUERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{152}
}

type USER_QUERY_CLASS_UID int32

const (
	USER_QUERY_CLASS_UID_USER_QUERY_CLASS_UID_UNSPECIFIED USER_QUERY_CLASS_UID = 0     // Type: NON_OCSF_VALUE;
	USER_QUERY_CLASS_UID_USER_QUERY_CLASS_UID_USER_QUERY  USER_QUERY_CLASS_UID = 50018 // Type: OCSF_VALUE; EnumValue: 50018;
)

// Enum value maps for USER_QUERY_CLASS_UID.
var (
	USER_QUERY_CLASS_UID_name = map[int32]string{
		0:     "USER_QUERY_CLASS_UID_UNSPECIFIED",
		50018: "USER_QUERY_CLASS_UID_USER_QUERY",
	}
	USER_QUERY_CLASS_UID_value = map[string]int32{
		"USER_QUERY_CLASS_UID_UNSPECIFIED": 0,
		"USER_QUERY_CLASS_UID_USER_QUERY":  50018,
	}
)

func (x USER_QUERY_CLASS_UID) Enum() *USER_QUERY_CLASS_UID {
	p := new(USER_QUERY_CLASS_UID)
	*p = x
	return p
}

func (x USER_QUERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[153].Descriptor()
}

func (USER_QUERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[153]
}

func (x USER_QUERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_CLASS_UID.Descriptor instead.
func (USER_QUERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{153}
}

type USER_QUERY_QUERY_RESULT_ID int32

const (
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_UNKNOWN        USER_QUERY_QUERY_RESULT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_EXISTS         USER_QUERY_QUERY_RESULT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_PARTIAL        USER_QUERY_QUERY_RESULT_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST USER_QUERY_QUERY_RESULT_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_ERROR          USER_QUERY_QUERY_RESULT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_UNSUPPORTED    USER_QUERY_QUERY_RESULT_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	USER_QUERY_QUERY_RESULT_ID_USER_QUERY_QUERY_RESULT_ID_OTHER          USER_QUERY_QUERY_RESULT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_QUERY_QUERY_RESULT_ID.
var (
	USER_QUERY_QUERY_RESULT_ID_name = map[int32]string{
		0:  "USER_QUERY_QUERY_RESULT_ID_UNKNOWN",
		1:  "USER_QUERY_QUERY_RESULT_ID_EXISTS",
		2:  "USER_QUERY_QUERY_RESULT_ID_PARTIAL",
		3:  "USER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST",
		4:  "USER_QUERY_QUERY_RESULT_ID_ERROR",
		5:  "USER_QUERY_QUERY_RESULT_ID_UNSUPPORTED",
		99: "USER_QUERY_QUERY_RESULT_ID_OTHER",
	}
	USER_QUERY_QUERY_RESULT_ID_value = map[string]int32{
		"USER_QUERY_QUERY_RESULT_ID_UNKNOWN":        0,
		"USER_QUERY_QUERY_RESULT_ID_EXISTS":         1,
		"USER_QUERY_QUERY_RESULT_ID_PARTIAL":        2,
		"USER_QUERY_QUERY_RESULT_ID_DOES_NOT_EXIST": 3,
		"USER_QUERY_QUERY_RESULT_ID_ERROR":          4,
		"USER_QUERY_QUERY_RESULT_ID_UNSUPPORTED":    5,
		"USER_QUERY_QUERY_RESULT_ID_OTHER":          99,
	}
)

func (x USER_QUERY_QUERY_RESULT_ID) Enum() *USER_QUERY_QUERY_RESULT_ID {
	p := new(USER_QUERY_QUERY_RESULT_ID)
	*p = x
	return p
}

func (x USER_QUERY_QUERY_RESULT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_QUERY_RESULT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[154].Descriptor()
}

func (USER_QUERY_QUERY_RESULT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[154]
}

func (x USER_QUERY_QUERY_RESULT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_QUERY_RESULT_ID.Descriptor instead.
func (USER_QUERY_QUERY_RESULT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{154}
}

type USER_QUERY_SEVERITY_ID int32

const (
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_UNKNOWN       USER_QUERY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_INFORMATIONAL USER_QUERY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_LOW           USER_QUERY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_MEDIUM        USER_QUERY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_HIGH          USER_QUERY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_CRITICAL      USER_QUERY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_FATAL         USER_QUERY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	USER_QUERY_SEVERITY_ID_USER_QUERY_SEVERITY_ID_OTHER         USER_QUERY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_QUERY_SEVERITY_ID.
var (
	USER_QUERY_SEVERITY_ID_name = map[int32]string{
		0:  "USER_QUERY_SEVERITY_ID_UNKNOWN",
		1:  "USER_QUERY_SEVERITY_ID_INFORMATIONAL",
		2:  "USER_QUERY_SEVERITY_ID_LOW",
		3:  "USER_QUERY_SEVERITY_ID_MEDIUM",
		4:  "USER_QUERY_SEVERITY_ID_HIGH",
		5:  "USER_QUERY_SEVERITY_ID_CRITICAL",
		6:  "USER_QUERY_SEVERITY_ID_FATAL",
		99: "USER_QUERY_SEVERITY_ID_OTHER",
	}
	USER_QUERY_SEVERITY_ID_value = map[string]int32{
		"USER_QUERY_SEVERITY_ID_UNKNOWN":       0,
		"USER_QUERY_SEVERITY_ID_INFORMATIONAL": 1,
		"USER_QUERY_SEVERITY_ID_LOW":           2,
		"USER_QUERY_SEVERITY_ID_MEDIUM":        3,
		"USER_QUERY_SEVERITY_ID_HIGH":          4,
		"USER_QUERY_SEVERITY_ID_CRITICAL":      5,
		"USER_QUERY_SEVERITY_ID_FATAL":         6,
		"USER_QUERY_SEVERITY_ID_OTHER":         99,
	}
)

func (x USER_QUERY_SEVERITY_ID) Enum() *USER_QUERY_SEVERITY_ID {
	p := new(USER_QUERY_SEVERITY_ID)
	*p = x
	return p
}

func (x USER_QUERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[155].Descriptor()
}

func (USER_QUERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[155]
}

func (x USER_QUERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_SEVERITY_ID.Descriptor instead.
func (USER_QUERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{155}
}

type USER_QUERY_STATUS_ID int32

const (
	USER_QUERY_STATUS_ID_USER_QUERY_STATUS_ID_UNKNOWN USER_QUERY_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	USER_QUERY_STATUS_ID_USER_QUERY_STATUS_ID_SUCCESS USER_QUERY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_QUERY_STATUS_ID_USER_QUERY_STATUS_ID_FAILURE USER_QUERY_STATUS_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	USER_QUERY_STATUS_ID_USER_QUERY_STATUS_ID_OTHER   USER_QUERY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_QUERY_STATUS_ID.
var (
	USER_QUERY_STATUS_ID_name = map[int32]string{
		0:  "USER_QUERY_STATUS_ID_UNKNOWN",
		1:  "USER_QUERY_STATUS_ID_SUCCESS",
		2:  "USER_QUERY_STATUS_ID_FAILURE",
		99: "USER_QUERY_STATUS_ID_OTHER",
	}
	USER_QUERY_STATUS_ID_value = map[string]int32{
		"USER_QUERY_STATUS_ID_UNKNOWN": 0,
		"USER_QUERY_STATUS_ID_SUCCESS": 1,
		"USER_QUERY_STATUS_ID_FAILURE": 2,
		"USER_QUERY_STATUS_ID_OTHER":   99,
	}
)

func (x USER_QUERY_STATUS_ID) Enum() *USER_QUERY_STATUS_ID {
	p := new(USER_QUERY_STATUS_ID)
	*p = x
	return p
}

func (x USER_QUERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[156].Descriptor()
}

func (USER_QUERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[156]
}

func (x USER_QUERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_STATUS_ID.Descriptor instead.
func (USER_QUERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{156}
}

type USER_QUERY_TYPE_UID int32

const (
	USER_QUERY_TYPE_UID_USER_QUERY_TYPE_UID_UNSPECIFIED        USER_QUERY_TYPE_UID = 0       // Type: NON_OCSF_VALUE;
	USER_QUERY_TYPE_UID_USER_QUERY_TYPE_UID_USER_QUERY_UNKNOWN USER_QUERY_TYPE_UID = 5001800 // Type: OCSF_VALUE; EnumValue: 5001800;
	USER_QUERY_TYPE_UID_USER_QUERY_TYPE_UID_USER_QUERY_QUERY   USER_QUERY_TYPE_UID = 5001801 // Type: OCSF_VALUE; EnumValue: 5001801;
	USER_QUERY_TYPE_UID_USER_QUERY_TYPE_UID_USER_QUERY_OTHER   USER_QUERY_TYPE_UID = 5001899 // Type: OCSF_VALUE; EnumValue: 5001899;
)

// Enum value maps for USER_QUERY_TYPE_UID.
var (
	USER_QUERY_TYPE_UID_name = map[int32]string{
		0:       "USER_QUERY_TYPE_UID_UNSPECIFIED",
		5001800: "USER_QUERY_TYPE_UID_USER_QUERY_UNKNOWN",
		5001801: "USER_QUERY_TYPE_UID_USER_QUERY_QUERY",
		5001899: "USER_QUERY_TYPE_UID_USER_QUERY_OTHER",
	}
	USER_QUERY_TYPE_UID_value = map[string]int32{
		"USER_QUERY_TYPE_UID_UNSPECIFIED":        0,
		"USER_QUERY_TYPE_UID_USER_QUERY_UNKNOWN": 5001800,
		"USER_QUERY_TYPE_UID_USER_QUERY_QUERY":   5001801,
		"USER_QUERY_TYPE_UID_USER_QUERY_OTHER":   5001899,
	}
)

func (x USER_QUERY_TYPE_UID) Enum() *USER_QUERY_TYPE_UID {
	p := new(USER_QUERY_TYPE_UID)
	*p = x
	return p
}

func (x USER_QUERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_QUERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[157].Descriptor()
}

func (USER_QUERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes[157]
}

func (x USER_QUERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_QUERY_TYPE_UID.Descriptor instead.
func (USER_QUERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{157}
}

var File_ocsf_v1_2_0_events_discovery_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x9c, 0x01, 0x0a, 0x1d, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x7e, 0x0a, 0x1e, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x10, 0x05, 0x2a, 0x7e, 0x0a, 0x1b, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x32, 0x0a, 0x2d, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x91, 0x27, 0x2a, 0xf2, 0x02, 0x0a, 0x21, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf2, 0x02, 0x0a, 0x1d, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x2a, 0x0a, 0x26, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xbf, 0x01,
	0x0a, 0x1b, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xf8, 0x01, 0x0a, 0x1a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x26, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x34, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xa4, 0xc9, 0x1e, 0x12, 0x38, 0x0a, 0x32, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xa5, 0xc9, 0x1e,
	0x12, 0x38, 0x0a, 0x32, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x87, 0xca, 0x1e, 0x2a, 0xac, 0x01, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6f, 0x0a, 0x19, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x71, 0x0a, 0x16, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2a,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x27, 0x2a, 0xc5, 0x02,
	0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9c,
	0x02, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x37, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe8, 0xc3, 0x1e, 0x12, 0x33, 0x0a, 0x2d, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xe9, 0xc3, 0x1e, 0x12, 0x37, 0x0a,
	0x31, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0xea, 0xc3, 0x1e, 0x12, 0x35, 0x0a, 0x2f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xcb, 0xc4, 0x1e, 0x2a, 0xf2, 0x01,
	0x0a, 0x26, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x99, 0x01, 0x0a, 0x27, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x37,
	0x0a, 0x33, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0xa3,
	0x01, 0x0a, 0x24, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x45, 0x0a,
	0x3f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0xe3, 0x86, 0x03, 0x2a, 0xef, 0x02, 0x0a, 0x31, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x39, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x41, 0x0a, 0x3d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x3b, 0x0a, 0x37, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd1, 0x02, 0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x10, 0x02, 0x12, 0x3c, 0x0a, 0x38, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc3, 0x03, 0x0a, 0x26, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x30,
	0x0a, 0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xec, 0x01, 0x0a, 0x24, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x30, 0x0a,
	0x2c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x90, 0x03, 0x0a, 0x23, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4d, 0x0a, 0x46,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xac, 0xa5, 0xb1, 0x02, 0x12, 0x49, 0x0a, 0x42, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x10, 0xad, 0xa5, 0xb1, 0x02, 0x12, 0x4d, 0x0a, 0x46, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0xae, 0xa5, 0xb1, 0x02, 0x12, 0x4b, 0x0a, 0x44, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8f, 0xa6,
	0xb1, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x66, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x13, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x88, 0x27, 0x2a, 0xaa, 0x02, 0x0a, 0x15, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x97, 0x01, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xe2, 0x01, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x24,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa0, 0xc2, 0x1e, 0x12, 0x26, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xa1, 0xc2, 0x1e,
	0x12, 0x2a, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xa2, 0xc2, 0x1e, 0x12, 0x28, 0x0a, 0x22,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x83, 0xc3, 0x1e, 0x2a, 0x98, 0x01, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x7b, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x7a,
	0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2b, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x88, 0x27, 0x2a, 0xea, 0x02, 0x0a, 0x20, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a,
	0x27, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xf0, 0x01, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x32, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xa0, 0xc2, 0x1e, 0x12, 0x36, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xa1, 0xc2, 0x1e, 0x12, 0x36, 0x0a, 0x30, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x83, 0xc3, 0x1e, 0x2a, 0x80, 0x01, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x69, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10,
	0x05, 0x2a, 0x62, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x8f, 0x27, 0x2a, 0xba, 0x02, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb3, 0x02, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9c, 0x01, 0x0a, 0x14, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc0, 0x01, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xdc,
	0xc7, 0x1e, 0x12, 0x2a, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xdd, 0xc7, 0x1e, 0x12, 0x2a,
	0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xbf, 0xc8, 0x1e, 0x2a, 0x88, 0x01, 0x0a, 0x18, 0x46,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x6f, 0x0a, 0x19, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x6a, 0x0a, 0x16, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x46, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x90, 0x27, 0x2a, 0xca, 0x02, 0x0a, 0x1c, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xc5, 0x02, 0x0a, 0x18, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x46, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f,
	0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xd0, 0x01, 0x0a, 0x15, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x4f,
	0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x30, 0x0a, 0x2a, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xc0, 0xc8, 0x1e, 0x12, 0x2e, 0x0a, 0x28, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0xc1, 0xc8, 0x1e, 0x12, 0x2e, 0x0a, 0x28, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xa3, 0xc9, 0x1e, 0x2a, 0xb6, 0x01, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x26,
	0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x75, 0x0a, 0x1b,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x10, 0x05, 0x2a, 0x79, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2e, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x89, 0x27, 0x2a, 0xd7,
	0x02, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x02, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x3b, 0x0a, 0x35, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x84, 0xc3, 0x1e, 0x12, 0x37, 0x0a,
	0x31, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x85, 0xc3, 0x1e, 0x12, 0x3b, 0x0a, 0x35, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x86, 0xc3, 0x1e, 0x12, 0x39, 0x0a, 0x33, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xe7, 0xc3, 0x1e, 0x2a, 0x7c,
	0x0a, 0x15, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f,
	0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x66, 0x0a, 0x16,
	0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x10, 0x05, 0x2a, 0x5f, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1d, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0xda, 0x86, 0x03, 0x2a, 0xb2, 0x02, 0x0a, 0x19, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4a, 0x4f,
	0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4a, 0x4f,
	0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xaa, 0x02, 0x0a, 0x15, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x97, 0x01, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xbb, 0x01, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x4a, 0x4f, 0x42, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x24,
	0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa8, 0x9e, 0xb1, 0x02, 0x12, 0x29, 0x0a, 0x22, 0x4a, 0x4f, 0x42,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0xa9, 0x9e, 0xb1, 0x02, 0x12, 0x29, 0x0a, 0x22, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x8b, 0x9f, 0xb1, 0x02, 0x2a,
	0xa4, 0x01, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x84, 0x01, 0x0a, 0x20, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a,
	0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x86, 0x01,
	0x0a, 0x1d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x31, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x8e, 0x27, 0x2a, 0x82, 0x03, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12,
	0x2f, 0x0a, 0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x36, 0x0a, 0x32, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x84, 0x03, 0x0a, 0x1f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2c,
	0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xc9, 0x01, 0x0a, 0x1d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x88,
	0x02, 0x0a, 0x1c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a,
	0x38, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xf8, 0xc6, 0x1e, 0x12, 0x3c, 0x0a,
	0x36, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xf9, 0xc6, 0x1e, 0x12, 0x3c, 0x0a, 0x36, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xdb, 0xc7, 0x1e, 0x2a, 0x88, 0x01, 0x0a, 0x18, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x6f, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x6b, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xdb,
	0x86, 0x03, 0x2a, 0xca, 0x02, 0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xc5, 0x02, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xd3, 0x01, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x31, 0x0a, 0x2a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x8c, 0x9f, 0xb1, 0x02, 0x12, 0x2f, 0x0a, 0x28, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x8d, 0x9f, 0xb1, 0x02, 0x12, 0x2f, 0x0a, 0x28, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0xef, 0x9f, 0xb1, 0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x93, 0x01, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x31, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x9b, 0x01, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x41, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0xdc, 0x86, 0x03, 0x2a, 0xaa, 0x03, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x34, 0x0a,
	0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x3b, 0x0a, 0x37, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x32,
	0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb1, 0x03, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x36, 0x0a,
	0x32, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x94, 0x05, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x10, 0x03, 0x12, 0x30,
	0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x31, 0x10, 0x04,
	0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x32,
	0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x43,
	0x4b, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10,
	0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0b,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe2, 0x01,
	0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb3, 0x02, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x42, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xf0, 0x9f, 0xb1, 0x02, 0x12, 0x47, 0x0a, 0x40, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xf1, 0x9f, 0xb1, 0x02, 0x12,
	0x47, 0x0a, 0x40, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0xd3, 0xa0, 0xb1, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x75, 0x0a, 0x1b, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x05, 0x2a, 0x73, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0xdd, 0x86, 0x03, 0x2a, 0xda, 0x02, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0,
	0x01, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xe3, 0x01, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x23, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xd4, 0xa0, 0xb1, 0x02, 0x12, 0x33, 0x0a,
	0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xd5, 0xa0,
	0xb1, 0x02, 0x12, 0x33, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0xb7, 0xa1, 0xb1, 0x02, 0x2a, 0xa7, 0x01, 0x0a, 0x17, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0x6c, 0x0a, 0x18, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a,
	0x77, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x37, 0x0a, 0x32, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8c, 0x27, 0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1, 0x01, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x02, 0x0a, 0x14,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x39, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb0, 0xc5, 0x1e, 0x12, 0x3b, 0x0a, 0x35, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xb1, 0xc5, 0x1e, 0x12, 0x3f, 0x0a, 0x39, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xb2, 0xc5, 0x1e, 0x12, 0x3d, 0x0a, 0x37, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x93, 0xc6, 0x1e, 0x2a, 0xb4, 0x01, 0x0a, 0x23, 0x50, 0x45, 0x52,
	0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x90, 0x01, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x45, 0x52, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x05, 0x2a, 0x97, 0x01, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x45, 0x52, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x39, 0x50,
	0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xde, 0x86, 0x03, 0x2a, 0xa2, 0x03, 0x0a,
	0x27, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x45, 0x52, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a,
	0x2e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x3a, 0x0a, 0x36, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48,
	0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45,
	0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x31,
	0x0a, 0x2d, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xa8, 0x03, 0x0a, 0x23, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x45, 0x52,
	0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x45,
	0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2e,
	0x0a, 0x2a, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c,
	0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2d,
	0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2d, 0x0a,
	0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xdd, 0x01, 0x0a,
	0x21, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x2b, 0x0a, 0x27, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xab, 0x02, 0x0a,
	0x20, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x47, 0x0a, 0x40, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb8, 0xa1, 0xb1, 0x02, 0x12, 0x45, 0x0a, 0x3e,
	0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xb9,
	0xa1, 0xb1, 0x02, 0x12, 0x45, 0x0a, 0x3e, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x9b, 0xa2, 0xb1, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x75, 0x0a,
	0x1b, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x10, 0x05, 0x2a, 0x73, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x27, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xe3, 0x86, 0x03, 0x2a, 0xda, 0x02, 0x0a, 0x1e, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a,
	0x28, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x20, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xe3, 0x01, 0x0a, 0x17, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x23, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x2e, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xac, 0xa5, 0xb1, 0x02, 0x12,
	0x33, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0xad, 0xa5, 0xb1, 0x02, 0x12, 0x33, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x8f, 0xa6, 0xb1, 0x02, 0x2a, 0x8c, 0x01, 0x0a, 0x19, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x72, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2b, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xdf, 0x86, 0x03, 0x2a, 0xd2, 0x02,
	0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x30, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xdb, 0x01, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x9c, 0xa2, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x9d, 0xa2, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff, 0xa2, 0xb1, 0x02, 0x2a,
	0xa0, 0x01, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x81, 0x01, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x82, 0x01, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x8c, 0x27, 0x2a, 0xfa, 0x02, 0x0a, 0x22,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xfb, 0x02, 0x0a, 0x1e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc4, 0x01, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x80, 0x02,
	0x0a, 0x1b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x36, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb0, 0xc5, 0x1e, 0x12, 0x3a, 0x0a, 0x34, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0xb1, 0xc5, 0x1e, 0x12, 0x3a, 0x0a, 0x34, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x93, 0xc6, 0x1e,
	0x2a, 0xa8, 0x01, 0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x87, 0x01, 0x0a, 0x21,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x8a, 0x01, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x33, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x8d, 0x27, 0x2a, 0x8a, 0x03, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a,
	0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x30,
	0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x37, 0x0a, 0x33, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x8d, 0x03, 0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xce, 0x01, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x90, 0x02, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x40, 0x0a, 0x3a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x94, 0xc6, 0x1e, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x95, 0xc6, 0x1e, 0x12, 0x3e, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xf7, 0xc6, 0x1e, 0x2a, 0x8c, 0x01, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x72, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x25, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0xe0, 0x86, 0x03, 0x2a, 0xd2, 0x02, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xce, 0x02, 0x0a,
	0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xab, 0x01,
	0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xdb, 0x01, 0x0a, 0x16,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33,
	0x0a, 0x2c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x80,
	0xa3, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x81, 0xa3, 0xb1, 0x02, 0x12, 0x31, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0xe3, 0xa3, 0xb1, 0x02, 0x2a, 0x8c, 0x01, 0x0a, 0x19, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x72, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x2a, 0x74, 0x0a, 0x17,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xe1,
	0x86, 0x03, 0x2a, 0xd2, 0x02, 0x0a, 0x1d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x28, 0x0a, 0x24, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12,
	0x2d, 0x0a, 0x29, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x31, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe4,
	0xa3, 0xb1, 0x02, 0x12, 0x36, 0x0a, 0x2f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xe5, 0xa3, 0xb1, 0x02, 0x12, 0x36, 0x0a, 0x2f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xc7,
	0xa4, 0xb1, 0x02, 0x2a, 0xb6, 0x01, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x26,
	0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x75, 0x0a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x10, 0x05, 0x2a, 0x77, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2c, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8b, 0x27, 0x2a, 0xd7, 0x02, 0x0a,
	0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa8, 0x02, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x39,
	0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xcc, 0xc4, 0x1e, 0x12, 0x35, 0x0a, 0x2f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xcd, 0xc4, 0x1e,
	0x12, 0x39, 0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xce, 0xc4, 0x1e, 0x12, 0x37, 0x0a, 0x31, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0xaf, 0xc5, 0x1e, 0x2a, 0x80, 0x01, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x69, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x05, 0x2a, 0x63, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0xe2, 0x86, 0x03, 0x2a, 0xba, 0x02, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xb3, 0x02, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9c, 0x01, 0x0a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc3, 0x01, 0x0a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xc8, 0xa4, 0xb1, 0x02, 0x12, 0x2b, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xc9, 0xa4,
	0xb1, 0x02, 0x12, 0x2b, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xab, 0xa5, 0xb1, 0x02, 0x42,
	0xa5, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x32, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x44, 0x45, 0xaa, 0x02, 0x20, 0x4f, 0x63,
	0x73, 0x66, 0x2e, 0x56, 0x31, 0x32, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02,
	0x20, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0xe2, 0x02, 0x2c, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x24, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x32, 0x30, 0x3a, 0x3a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescData = file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDesc
)

func file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDescData
}

var file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 158)
var file_ocsf_v1_2_0_events_discovery_enums_enums_proto_goTypes = []any{
	(ADMIN_GROUP_QUERY_ACTIVITY_ID)(0),                     // 0: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_ACTIVITY_ID
	(ADMIN_GROUP_QUERY_CATEGORY_UID)(0),                    // 1: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CATEGORY_UID
	(ADMIN_GROUP_QUERY_CLASS_UID)(0),                       // 2: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_CLASS_UID
	(ADMIN_GROUP_QUERY_QUERY_RESULT_ID)(0),                 // 3: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_QUERY_RESULT_ID
	(ADMIN_GROUP_QUERY_SEVERITY_ID)(0),                     // 4: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_SEVERITY_ID
	(ADMIN_GROUP_QUERY_STATUS_ID)(0),                       // 5: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_STATUS_ID
	(ADMIN_GROUP_QUERY_TYPE_UID)(0),                        // 6: ocsf.v1_2_0.events.discovery.enums.ADMIN_GROUP_QUERY_TYPE_UID
	(CONFIG_STATE_ACTIVITY_ID)(0),                          // 7: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	(CONFIG_STATE_CATEGORY_UID)(0),                         // 8: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(CONFIG_STATE_CLASS_UID)(0),                            // 9: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(CONFIG_STATE_SEVERITY_ID)(0),                          // 10: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	(CONFIG_STATE_STATUS_ID)(0),                            // 11: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	(CONFIG_STATE_TYPE_UID)(0),                             // 12: ocsf.v1_2_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID)(0),            // 13: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_ACTIVITY_ID
	(DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID)(0),           // 14: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CATEGORY_UID
	(DEVICE_CONFIG_STATE_CHANGE_CLASS_UID)(0),              // 15: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_CLASS_UID
	(DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID)(0), // 16: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_PREV_SECURITY_LEVEL_ID
	(DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID)(0),      // 17: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SECURITY_LEVEL_ID
	(DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID)(0),            // 18: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_SEVERITY_ID
	(DEVICE_CONFIG_STATE_CHANGE_STATUS_ID)(0),              // 19: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_STATUS_ID
	(DEVICE_CONFIG_STATE_CHANGE_TYPE_UID)(0),               // 20: ocsf.v1_2_0.events.discovery.enums.DEVICE_CONFIG_STATE_CHANGE_TYPE_UID
	(DISCOVERY_ACTIVITY_ID)(0),                             // 21: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(DISCOVERY_CATEGORY_UID)(0),                            // 22: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	(DISCOVERY_CLASS_UID)(0),                               // 23: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(DISCOVERY_SEVERITY_ID)(0),                             // 24: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(DISCOVERY_STATUS_ID)(0),                               // 25: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(DISCOVERY_TYPE_UID)(0),                                // 26: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(DISCOVERY_RESULT_ACTIVITY_ID)(0),                      // 27: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_ACTIVITY_ID
	(DISCOVERY_RESULT_CATEGORY_UID)(0),                     // 28: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CATEGORY_UID
	(DISCOVERY_RESULT_CLASS_UID)(0),                        // 29: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_CLASS_UID
	(DISCOVERY_RESULT_QUERY_RESULT_ID)(0),                  // 30: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_QUERY_RESULT_ID
	(DISCOVERY_RESULT_SEVERITY_ID)(0),                      // 31: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_SEVERITY_ID
	(DISCOVERY_RESULT_STATUS_ID)(0),                        // 32: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_STATUS_ID
	(DISCOVERY_RESULT_TYPE_UID)(0),                         // 33: ocsf.v1_2_0.events.discovery.enums.DISCOVERY_RESULT_TYPE_UID
	(FILE_QUERY_ACTIVITY_ID)(0),                            // 34: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_ACTIVITY_ID
	(FILE_QUERY_CATEGORY_UID)(0),                           // 35: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CATEGORY_UID
	(FILE_QUERY_CLASS_UID)(0),                              // 36: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_CLASS_UID
	(FILE_QUERY_QUERY_RESULT_ID)(0),                        // 37: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_QUERY_RESULT_ID
	(FILE_QUERY_SEVERITY_ID)(0),                            // 38: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_SEVERITY_ID
	(FILE_QUERY_STATUS_ID)(0),                              // 39: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_STATUS_ID
	(FILE_QUERY_TYPE_UID)(0),                               // 40: ocsf.v1_2_0.events.discovery.enums.FILE_QUERY_TYPE_UID
	(FOLDER_QUERY_ACTIVITY_ID)(0),                          // 41: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_ACTIVITY_ID
	(FOLDER_QUERY_CATEGORY_UID)(0),                         // 42: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CATEGORY_UID
	(FOLDER_QUERY_CLASS_UID)(0),                            // 43: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_CLASS_UID
	(FOLDER_QUERY_QUERY_RESULT_ID)(0),                      // 44: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_QUERY_RESULT_ID
	(FOLDER_QUERY_SEVERITY_ID)(0),                          // 45: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_SEVERITY_ID
	(FOLDER_QUERY_STATUS_ID)(0),                            // 46: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_STATUS_ID
	(FOLDER_QUERY_TYPE_UID)(0),                             // 47: ocsf.v1_2_0.events.discovery.enums.FOLDER_QUERY_TYPE_UID
	(INVENTORY_INFO_ACTIVITY_ID)(0),                        // 48: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(INVENTORY_INFO_CATEGORY_UID)(0),                       // 49: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(INVENTORY_INFO_CLASS_UID)(0),                          // 50: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(INVENTORY_INFO_SEVERITY_ID)(0),                        // 51: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(INVENTORY_INFO_STATUS_ID)(0),                          // 52: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(INVENTORY_INFO_TYPE_UID)(0),                           // 53: ocsf.v1_2_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(JOB_QUERY_ACTIVITY_ID)(0),                             // 54: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_ACTIVITY_ID
	(JOB_QUERY_CATEGORY_UID)(0),                            // 55: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CATEGORY_UID
	(JOB_QUERY_CLASS_UID)(0),                               // 56: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_CLASS_UID
	(JOB_QUERY_QUERY_RESULT_ID)(0),                         // 57: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_QUERY_RESULT_ID
	(JOB_QUERY_SEVERITY_ID)(0),                             // 58: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_SEVERITY_ID
	(JOB_QUERY_STATUS_ID)(0),                               // 59: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_STATUS_ID
	(JOB_QUERY_TYPE_UID)(0),                                // 60: ocsf.v1_2_0.events.discovery.enums.JOB_QUERY_TYPE_UID
	(KERNEL_OBJECT_QUERY_ACTIVITY_ID)(0),                   // 61: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_ACTIVITY_ID
	(KERNEL_OBJECT_QUERY_CATEGORY_UID)(0),                  // 62: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CATEGORY_UID
	(KERNEL_OBJECT_QUERY_CLASS_UID)(0),                     // 63: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_CLASS_UID
	(KERNEL_OBJECT_QUERY_QUERY_RESULT_ID)(0),               // 64: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_QUERY_RESULT_ID
	(KERNEL_OBJECT_QUERY_SEVERITY_ID)(0),                   // 65: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_SEVERITY_ID
	(KERNEL_OBJECT_QUERY_STATUS_ID)(0),                     // 66: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_STATUS_ID
	(KERNEL_OBJECT_QUERY_TYPE_UID)(0),                      // 67: ocsf.v1_2_0.events.discovery.enums.KERNEL_OBJECT_QUERY_TYPE_UID
	(MODULE_QUERY_ACTIVITY_ID)(0),                          // 68: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_ACTIVITY_ID
	(MODULE_QUERY_CATEGORY_UID)(0),                         // 69: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CATEGORY_UID
	(MODULE_QUERY_CLASS_UID)(0),                            // 70: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_CLASS_UID
	(MODULE_QUERY_QUERY_RESULT_ID)(0),                      // 71: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_QUERY_RESULT_ID
	(MODULE_QUERY_SEVERITY_ID)(0),                          // 72: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_SEVERITY_ID
	(MODULE_QUERY_STATUS_ID)(0),                            // 73: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_STATUS_ID
	(MODULE_QUERY_TYPE_UID)(0),                             // 74: ocsf.v1_2_0.events.discovery.enums.MODULE_QUERY_TYPE_UID
	(NETWORK_CONNECTION_QUERY_ACTIVITY_ID)(0),              // 75: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_ACTIVITY_ID
	(NETWORK_CONNECTION_QUERY_CATEGORY_UID)(0),             // 76: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CATEGORY_UID
	(NETWORK_CONNECTION_QUERY_CLASS_UID)(0),                // 77: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_CLASS_UID
	(NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID)(0),          // 78: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_QUERY_RESULT_ID
	(NETWORK_CONNECTION_QUERY_SEVERITY_ID)(0),              // 79: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_SEVERITY_ID
	(NETWORK_CONNECTION_QUERY_STATE_ID)(0),                 // 80: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATE_ID
	(NETWORK_CONNECTION_QUERY_STATUS_ID)(0),                // 81: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_STATUS_ID
	(NETWORK_CONNECTION_QUERY_TYPE_UID)(0),                 // 82: ocsf.v1_2_0.events.discovery.enums.NETWORK_CONNECTION_QUERY_TYPE_UID
	(NETWORKS_QUERY_ACTIVITY_ID)(0),                        // 83: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_ACTIVITY_ID
	(NETWORKS_QUERY_CATEGORY_UID)(0),                       // 84: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CATEGORY_UID
	(NETWORKS_QUERY_CLASS_UID)(0),                          // 85: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_CLASS_UID
	(NETWORKS_QUERY_QUERY_RESULT_ID)(0),                    // 86: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_QUERY_RESULT_ID
	(NETWORKS_QUERY_SEVERITY_ID)(0),                        // 87: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_SEVERITY_ID
	(NETWORKS_QUERY_STATUS_ID)(0),                          // 88: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_STATUS_ID
	(NETWORKS_QUERY_TYPE_UID)(0),                           // 89: ocsf.v1_2_0.events.discovery.enums.NETWORKS_QUERY_TYPE_UID
	(PATCH_STATE_ACTIVITY_ID)(0),                           // 90: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_ACTIVITY_ID
	(PATCH_STATE_CATEGORY_UID)(0),                          // 91: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CATEGORY_UID
	(PATCH_STATE_CLASS_UID)(0),                             // 92: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_CLASS_UID
	(PATCH_STATE_SEVERITY_ID)(0),                           // 93: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_SEVERITY_ID
	(PATCH_STATE_STATUS_ID)(0),                             // 94: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_STATUS_ID
	(PATCH_STATE_TYPE_UID)(0),                              // 95: ocsf.v1_2_0.events.discovery.enums.PATCH_STATE_TYPE_UID
	(PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID)(0),               // 96: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_ACTIVITY_ID
	(PERIPHERAL_DEVICE_QUERY_CATEGORY_UID)(0),              // 97: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CATEGORY_UID
	(PERIPHERAL_DEVICE_QUERY_CLASS_UID)(0),                 // 98: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_CLASS_UID
	(PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID)(0),           // 99: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_QUERY_RESULT_ID
	(PERIPHERAL_DEVICE_QUERY_SEVERITY_ID)(0),               // 100: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_SEVERITY_ID
	(PERIPHERAL_DEVICE_QUERY_STATUS_ID)(0),                 // 101: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_STATUS_ID
	(PERIPHERAL_DEVICE_QUERY_TYPE_UID)(0),                  // 102: ocsf.v1_2_0.events.discovery.enums.PERIPHERAL_DEVICE_QUERY_TYPE_UID
	(PREFETCH_QUERY_ACTIVITY_ID)(0),                        // 103: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_ACTIVITY_ID
	(PREFETCH_QUERY_CATEGORY_UID)(0),                       // 104: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CATEGORY_UID
	(PREFETCH_QUERY_CLASS_UID)(0),                          // 105: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_CLASS_UID
	(PREFETCH_QUERY_QUERY_RESULT_ID)(0),                    // 106: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_QUERY_RESULT_ID
	(PREFETCH_QUERY_SEVERITY_ID)(0),                        // 107: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_SEVERITY_ID
	(PREFETCH_QUERY_STATUS_ID)(0),                          // 108: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_STATUS_ID
	(PREFETCH_QUERY_TYPE_UID)(0),                           // 109: ocsf.v1_2_0.events.discovery.enums.PREFETCH_QUERY_TYPE_UID
	(PROCESS_QUERY_ACTIVITY_ID)(0),                         // 110: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_ACTIVITY_ID
	(PROCESS_QUERY_CATEGORY_UID)(0),                        // 111: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CATEGORY_UID
	(PROCESS_QUERY_CLASS_UID)(0),                           // 112: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_CLASS_UID
	(PROCESS_QUERY_QUERY_RESULT_ID)(0),                     // 113: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_QUERY_RESULT_ID
	(PROCESS_QUERY_SEVERITY_ID)(0),                         // 114: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_SEVERITY_ID
	(PROCESS_QUERY_STATUS_ID)(0),                           // 115: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_STATUS_ID
	(PROCESS_QUERY_TYPE_UID)(0),                            // 116: ocsf.v1_2_0.events.discovery.enums.PROCESS_QUERY_TYPE_UID
	(REGISTRY_KEY_QUERY_ACTIVITY_ID)(0),                    // 117: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_ACTIVITY_ID
	(REGISTRY_KEY_QUERY_CATEGORY_UID)(0),                   // 118: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CATEGORY_UID
	(REGISTRY_KEY_QUERY_CLASS_UID)(0),                      // 119: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_CLASS_UID
	(REGISTRY_KEY_QUERY_QUERY_RESULT_ID)(0),                // 120: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_QUERY_RESULT_ID
	(REGISTRY_KEY_QUERY_SEVERITY_ID)(0),                    // 121: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_SEVERITY_ID
	(REGISTRY_KEY_QUERY_STATUS_ID)(0),                      // 122: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_STATUS_ID
	(REGISTRY_KEY_QUERY_TYPE_UID)(0),                       // 123: ocsf.v1_2_0.events.discovery.enums.REGISTRY_KEY_QUERY_TYPE_UID
	(REGISTRY_VALUE_QUERY_ACTIVITY_ID)(0),                  // 124: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_ACTIVITY_ID
	(REGISTRY_VALUE_QUERY_CATEGORY_UID)(0),                 // 125: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CATEGORY_UID
	(REGISTRY_VALUE_QUERY_CLASS_UID)(0),                    // 126: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_CLASS_UID
	(REGISTRY_VALUE_QUERY_QUERY_RESULT_ID)(0),              // 127: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_QUERY_RESULT_ID
	(REGISTRY_VALUE_QUERY_SEVERITY_ID)(0),                  // 128: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_SEVERITY_ID
	(REGISTRY_VALUE_QUERY_STATUS_ID)(0),                    // 129: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_STATUS_ID
	(REGISTRY_VALUE_QUERY_TYPE_UID)(0),                     // 130: ocsf.v1_2_0.events.discovery.enums.REGISTRY_VALUE_QUERY_TYPE_UID
	(SERVICE_QUERY_ACTIVITY_ID)(0),                         // 131: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_ACTIVITY_ID
	(SERVICE_QUERY_CATEGORY_UID)(0),                        // 132: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CATEGORY_UID
	(SERVICE_QUERY_CLASS_UID)(0),                           // 133: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_CLASS_UID
	(SERVICE_QUERY_QUERY_RESULT_ID)(0),                     // 134: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_QUERY_RESULT_ID
	(SERVICE_QUERY_SEVERITY_ID)(0),                         // 135: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_SEVERITY_ID
	(SERVICE_QUERY_STATUS_ID)(0),                           // 136: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_STATUS_ID
	(SERVICE_QUERY_TYPE_UID)(0),                            // 137: ocsf.v1_2_0.events.discovery.enums.SERVICE_QUERY_TYPE_UID
	(SESSION_QUERY_ACTIVITY_ID)(0),                         // 138: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_ACTIVITY_ID
	(SESSION_QUERY_CATEGORY_UID)(0),                        // 139: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CATEGORY_UID
	(SESSION_QUERY_CLASS_UID)(0),                           // 140: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_CLASS_UID
	(SESSION_QUERY_QUERY_RESULT_ID)(0),                     // 141: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_QUERY_RESULT_ID
	(SESSION_QUERY_SEVERITY_ID)(0),                         // 142: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_SEVERITY_ID
	(SESSION_QUERY_STATUS_ID)(0),                           // 143: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_STATUS_ID
	(SESSION_QUERY_TYPE_UID)(0),                            // 144: ocsf.v1_2_0.events.discovery.enums.SESSION_QUERY_TYPE_UID
	(USER_INVENTORY_ACTIVITY_ID)(0),                        // 145: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_ACTIVITY_ID
	(USER_INVENTORY_CATEGORY_UID)(0),                       // 146: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CATEGORY_UID
	(USER_INVENTORY_CLASS_UID)(0),                          // 147: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_CLASS_UID
	(USER_INVENTORY_SEVERITY_ID)(0),                        // 148: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_SEVERITY_ID
	(USER_INVENTORY_STATUS_ID)(0),                          // 149: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_STATUS_ID
	(USER_INVENTORY_TYPE_UID)(0),                           // 150: ocsf.v1_2_0.events.discovery.enums.USER_INVENTORY_TYPE_UID
	(USER_QUERY_ACTIVITY_ID)(0),                            // 151: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_ACTIVITY_ID
	(USER_QUERY_CATEGORY_UID)(0),                           // 152: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CATEGORY_UID
	(USER_QUERY_CLASS_UID)(0),                              // 153: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_CLASS_UID
	(USER_QUERY_QUERY_RESULT_ID)(0),                        // 154: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_QUERY_RESULT_ID
	(USER_QUERY_SEVERITY_ID)(0),                            // 155: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_SEVERITY_ID
	(USER_QUERY_STATUS_ID)(0),                              // 156: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_STATUS_ID
	(USER_QUERY_TYPE_UID)(0),                               // 157: ocsf.v1_2_0.events.discovery.enums.USER_QUERY_TYPE_UID
}
var file_ocsf_v1_2_0_events_discovery_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_events_discovery_enums_enums_proto_init() }
func file_ocsf_v1_2_0_events_discovery_enums_enums_proto_init() {
	if File_ocsf_v1_2_0_events_discovery_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDesc,
			NumEnums:      158,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_events_discovery_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_events_discovery_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_2_0_events_discovery_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_2_0_events_discovery_enums_enums_proto = out.File
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_goTypes = nil
	file_ocsf_v1_2_0_events_discovery_enums_enums_proto_depIdxs = nil
}
