// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/findings/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FINDINGS_ACTIVITY_ID int32

const (
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_UNKNOWN FINDINGS_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_CREATE  FINDINGS_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_UPDATE  FINDINGS_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_OTHER   FINDINGS_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDINGS_ACTIVITY_ID.
var (
	FINDINGS_ACTIVITY_ID_name = map[int32]string{
		0:  "FINDINGS_ACTIVITY_ID_UNKNOWN",
		1:  "FINDINGS_ACTIVITY_ID_CREATE",
		2:  "FINDINGS_ACTIVITY_ID_UPDATE",
		99: "FINDINGS_ACTIVITY_ID_OTHER",
	}
	FINDINGS_ACTIVITY_ID_value = map[string]int32{
		"FINDINGS_ACTIVITY_ID_UNKNOWN": 0,
		"FINDINGS_ACTIVITY_ID_CREATE":  1,
		"FINDINGS_ACTIVITY_ID_UPDATE":  2,
		"FINDINGS_ACTIVITY_ID_OTHER":   99,
	}
)

func (x FINDINGS_ACTIVITY_ID) Enum() *FINDINGS_ACTIVITY_ID {
	p := new(FINDINGS_ACTIVITY_ID)
	*p = x
	return p
}

func (x FINDINGS_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[0].Descriptor()
}

func (FINDINGS_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[0]
}

func (x FINDINGS_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_ACTIVITY_ID.Descriptor instead.
func (FINDINGS_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{0}
}

type FINDINGS_CATEGORY_UID int32

const (
	FINDINGS_CATEGORY_UID_FINDINGS_CATEGORY_UID_UNSPECIFIED FINDINGS_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FINDINGS_CATEGORY_UID_FINDINGS_CATEGORY_UID_FINDINGS    FINDINGS_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for FINDINGS_CATEGORY_UID.
var (
	FINDINGS_CATEGORY_UID_name = map[int32]string{
		0: "FINDINGS_CATEGORY_UID_UNSPECIFIED",
		2: "FINDINGS_CATEGORY_UID_FINDINGS",
	}
	FINDINGS_CATEGORY_UID_value = map[string]int32{
		"FINDINGS_CATEGORY_UID_UNSPECIFIED": 0,
		"FINDINGS_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x FINDINGS_CATEGORY_UID) Enum() *FINDINGS_CATEGORY_UID {
	p := new(FINDINGS_CATEGORY_UID)
	*p = x
	return p
}

func (x FINDINGS_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[1].Descriptor()
}

func (FINDINGS_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[1]
}

func (x FINDINGS_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_CATEGORY_UID.Descriptor instead.
func (FINDINGS_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{1}
}

type FINDINGS_CLASS_UID int32

const (
	FINDINGS_CLASS_UID_FINDINGS_CLASS_UID_UNSPECIFIED FINDINGS_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FINDINGS_CLASS_UID_FINDINGS_CLASS_UID_FINDINGS    FINDINGS_CLASS_UID = 2000 // Type: OCSF_VALUE; EnumValue: 2000;
)

// Enum value maps for FINDINGS_CLASS_UID.
var (
	FINDINGS_CLASS_UID_name = map[int32]string{
		0:    "FINDINGS_CLASS_UID_UNSPECIFIED",
		2000: "FINDINGS_CLASS_UID_FINDINGS",
	}
	FINDINGS_CLASS_UID_value = map[string]int32{
		"FINDINGS_CLASS_UID_UNSPECIFIED": 0,
		"FINDINGS_CLASS_UID_FINDINGS":    2000,
	}
)

func (x FINDINGS_CLASS_UID) Enum() *FINDINGS_CLASS_UID {
	p := new(FINDINGS_CLASS_UID)
	*p = x
	return p
}

func (x FINDINGS_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[2].Descriptor()
}

func (FINDINGS_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[2]
}

func (x FINDINGS_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_CLASS_UID.Descriptor instead.
func (FINDINGS_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{2}
}

type FINDINGS_SEVERITY_ID int32

const (
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_UNKNOWN       FINDINGS_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_INFORMATIONAL FINDINGS_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_LOW           FINDINGS_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_MEDIUM        FINDINGS_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_HIGH          FINDINGS_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_CRITICAL      FINDINGS_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_FATAL         FINDINGS_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_OTHER         FINDINGS_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDINGS_SEVERITY_ID.
var (
	FINDINGS_SEVERITY_ID_name = map[int32]string{
		0:  "FINDINGS_SEVERITY_ID_UNKNOWN",
		1:  "FINDINGS_SEVERITY_ID_INFORMATIONAL",
		2:  "FINDINGS_SEVERITY_ID_LOW",
		3:  "FINDINGS_SEVERITY_ID_MEDIUM",
		4:  "FINDINGS_SEVERITY_ID_HIGH",
		5:  "FINDINGS_SEVERITY_ID_CRITICAL",
		6:  "FINDINGS_SEVERITY_ID_FATAL",
		99: "FINDINGS_SEVERITY_ID_OTHER",
	}
	FINDINGS_SEVERITY_ID_value = map[string]int32{
		"FINDINGS_SEVERITY_ID_UNKNOWN":       0,
		"FINDINGS_SEVERITY_ID_INFORMATIONAL": 1,
		"FINDINGS_SEVERITY_ID_LOW":           2,
		"FINDINGS_SEVERITY_ID_MEDIUM":        3,
		"FINDINGS_SEVERITY_ID_HIGH":          4,
		"FINDINGS_SEVERITY_ID_CRITICAL":      5,
		"FINDINGS_SEVERITY_ID_FATAL":         6,
		"FINDINGS_SEVERITY_ID_OTHER":         99,
	}
)

func (x FINDINGS_SEVERITY_ID) Enum() *FINDINGS_SEVERITY_ID {
	p := new(FINDINGS_SEVERITY_ID)
	*p = x
	return p
}

func (x FINDINGS_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[3].Descriptor()
}

func (FINDINGS_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[3]
}

func (x FINDINGS_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_SEVERITY_ID.Descriptor instead.
func (FINDINGS_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{3}
}

type FINDINGS_STATUS_ID int32

const (
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_UNKNOWN FINDINGS_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_SUCCESS FINDINGS_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_FAILURE FINDINGS_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_OTHER   FINDINGS_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINDINGS_STATUS_ID.
var (
	FINDINGS_STATUS_ID_name = map[int32]string{
		0:  "FINDINGS_STATUS_ID_UNKNOWN",
		1:  "FINDINGS_STATUS_ID_SUCCESS",
		2:  "FINDINGS_STATUS_ID_FAILURE",
		99: "FINDINGS_STATUS_ID_OTHER",
	}
	FINDINGS_STATUS_ID_value = map[string]int32{
		"FINDINGS_STATUS_ID_UNKNOWN": 0,
		"FINDINGS_STATUS_ID_SUCCESS": 1,
		"FINDINGS_STATUS_ID_FAILURE": 2,
		"FINDINGS_STATUS_ID_OTHER":   99,
	}
)

func (x FINDINGS_STATUS_ID) Enum() *FINDINGS_STATUS_ID {
	p := new(FINDINGS_STATUS_ID)
	*p = x
	return p
}

func (x FINDINGS_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[4].Descriptor()
}

func (FINDINGS_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[4]
}

func (x FINDINGS_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_STATUS_ID.Descriptor instead.
func (FINDINGS_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{4}
}

type FINDINGS_TYPE_UID int32

const (
	FINDINGS_TYPE_UID_FINDINGS_TYPE_UID_UNSPECIFIED      FINDINGS_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FINDINGS_TYPE_UID_FINDINGS_TYPE_UID_FINDINGS_UNKNOWN FINDINGS_TYPE_UID = 200000 // Type: OCSF_VALUE; EnumValue: 200000;
	FINDINGS_TYPE_UID_FINDINGS_TYPE_UID_FINDINGS_CREATE  FINDINGS_TYPE_UID = 200001 // Type: OCSF_VALUE; EnumValue: 200001;
	FINDINGS_TYPE_UID_FINDINGS_TYPE_UID_FINDINGS_UPDATE  FINDINGS_TYPE_UID = 200002 // Type: OCSF_VALUE; EnumValue: 200002;
	FINDINGS_TYPE_UID_FINDINGS_TYPE_UID_FINDINGS_OTHER   FINDINGS_TYPE_UID = 200099 // Type: OCSF_VALUE; EnumValue: 200099;
)

// Enum value maps for FINDINGS_TYPE_UID.
var (
	FINDINGS_TYPE_UID_name = map[int32]string{
		0:      "FINDINGS_TYPE_UID_UNSPECIFIED",
		200000: "FINDINGS_TYPE_UID_FINDINGS_UNKNOWN",
		200001: "FINDINGS_TYPE_UID_FINDINGS_CREATE",
		200002: "FINDINGS_TYPE_UID_FINDINGS_UPDATE",
		200099: "FINDINGS_TYPE_UID_FINDINGS_OTHER",
	}
	FINDINGS_TYPE_UID_value = map[string]int32{
		"FINDINGS_TYPE_UID_UNSPECIFIED":      0,
		"FINDINGS_TYPE_UID_FINDINGS_UNKNOWN": 200000,
		"FINDINGS_TYPE_UID_FINDINGS_CREATE":  200001,
		"FINDINGS_TYPE_UID_FINDINGS_UPDATE":  200002,
		"FINDINGS_TYPE_UID_FINDINGS_OTHER":   200099,
	}
)

func (x FINDINGS_TYPE_UID) Enum() *FINDINGS_TYPE_UID {
	p := new(FINDINGS_TYPE_UID)
	*p = x
	return p
}

func (x FINDINGS_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[5].Descriptor()
}

func (FINDINGS_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[5]
}

func (x FINDINGS_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_TYPE_UID.Descriptor instead.
func (FINDINGS_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{5}
}

type SECURITY_FINDING_ACTIVITY_ID int32

const (
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN SECURITY_FINDING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_CREATE  SECURITY_FINDING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_UPDATE  SECURITY_FINDING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_OTHER   SECURITY_FINDING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_ACTIVITY_ID.
var (
	SECURITY_FINDING_ACTIVITY_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_ACTIVITY_ID_UNKNOWN",
		1:  "SECURITY_FINDING_ACTIVITY_ID_CREATE",
		2:  "SECURITY_FINDING_ACTIVITY_ID_UPDATE",
		99: "SECURITY_FINDING_ACTIVITY_ID_OTHER",
	}
	SECURITY_FINDING_ACTIVITY_ID_value = map[string]int32{
		"SECURITY_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"SECURITY_FINDING_ACTIVITY_ID_CREATE":  1,
		"SECURITY_FINDING_ACTIVITY_ID_UPDATE":  2,
		"SECURITY_FINDING_ACTIVITY_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_ACTIVITY_ID) Enum() *SECURITY_FINDING_ACTIVITY_ID {
	p := new(SECURITY_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[6].Descriptor()
}

func (SECURITY_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[6]
}

func (x SECURITY_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_ACTIVITY_ID.Descriptor instead.
func (SECURITY_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{6}
}

type SECURITY_FINDING_CATEGORY_UID int32

const (
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED SECURITY_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_FINDINGS    SECURITY_FINDING_CATEGORY_UID = 2 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for SECURITY_FINDING_CATEGORY_UID.
var (
	SECURITY_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED",
		2: "SECURITY_FINDING_CATEGORY_UID_FINDINGS",
	}
	SECURITY_FINDING_CATEGORY_UID_value = map[string]int32{
		"SECURITY_FINDING_CATEGORY_UID_UNSPECIFIED": 0,
		"SECURITY_FINDING_CATEGORY_UID_FINDINGS":    2,
	}
)

func (x SECURITY_FINDING_CATEGORY_UID) Enum() *SECURITY_FINDING_CATEGORY_UID {
	p := new(SECURITY_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[7].Descriptor()
}

func (SECURITY_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[7]
}

func (x SECURITY_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CATEGORY_UID.Descriptor instead.
func (SECURITY_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{7}
}

type SECURITY_FINDING_CLASS_UID int32

const (
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_UNSPECIFIED      SECURITY_FINDING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_SECURITY_FINDING SECURITY_FINDING_CLASS_UID = 2001 // Type: OCSF_VALUE; EnumValue: 2001;
)

// Enum value maps for SECURITY_FINDING_CLASS_UID.
var (
	SECURITY_FINDING_CLASS_UID_name = map[int32]string{
		0:    "SECURITY_FINDING_CLASS_UID_UNSPECIFIED",
		2001: "SECURITY_FINDING_CLASS_UID_SECURITY_FINDING",
	}
	SECURITY_FINDING_CLASS_UID_value = map[string]int32{
		"SECURITY_FINDING_CLASS_UID_UNSPECIFIED":      0,
		"SECURITY_FINDING_CLASS_UID_SECURITY_FINDING": 2001,
	}
)

func (x SECURITY_FINDING_CLASS_UID) Enum() *SECURITY_FINDING_CLASS_UID {
	p := new(SECURITY_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[8].Descriptor()
}

func (SECURITY_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[8]
}

func (x SECURITY_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CLASS_UID.Descriptor instead.
func (SECURITY_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{8}
}

type SECURITY_FINDING_CONFIDENCE_ID int32

const (
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN SECURITY_FINDING_CONFIDENCE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_LOW     SECURITY_FINDING_CONFIDENCE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM  SECURITY_FINDING_CONFIDENCE_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_HIGH    SECURITY_FINDING_CONFIDENCE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_OTHER   SECURITY_FINDING_CONFIDENCE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_CONFIDENCE_ID.
var (
	SECURITY_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN",
		1:  "SECURITY_FINDING_CONFIDENCE_ID_LOW",
		2:  "SECURITY_FINDING_CONFIDENCE_ID_MEDIUM",
		3:  "SECURITY_FINDING_CONFIDENCE_ID_HIGH",
		99: "SECURITY_FINDING_CONFIDENCE_ID_OTHER",
	}
	SECURITY_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"SECURITY_FINDING_CONFIDENCE_ID_LOW":     1,
		"SECURITY_FINDING_CONFIDENCE_ID_MEDIUM":  2,
		"SECURITY_FINDING_CONFIDENCE_ID_HIGH":    3,
		"SECURITY_FINDING_CONFIDENCE_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_CONFIDENCE_ID) Enum() *SECURITY_FINDING_CONFIDENCE_ID {
	p := new(SECURITY_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[9].Descriptor()
}

func (SECURITY_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[9]
}

func (x SECURITY_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CONFIDENCE_ID.Descriptor instead.
func (SECURITY_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{9}
}

type SECURITY_FINDING_IMPACT_ID int32

const (
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_UNKNOWN  SECURITY_FINDING_IMPACT_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_LOW      SECURITY_FINDING_IMPACT_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_MEDIUM   SECURITY_FINDING_IMPACT_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_HIGH     SECURITY_FINDING_IMPACT_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_CRITICAL SECURITY_FINDING_IMPACT_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_OTHER    SECURITY_FINDING_IMPACT_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_IMPACT_ID.
var (
	SECURITY_FINDING_IMPACT_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_IMPACT_ID_UNKNOWN",
		1:  "SECURITY_FINDING_IMPACT_ID_LOW",
		2:  "SECURITY_FINDING_IMPACT_ID_MEDIUM",
		3:  "SECURITY_FINDING_IMPACT_ID_HIGH",
		4:  "SECURITY_FINDING_IMPACT_ID_CRITICAL",
		99: "SECURITY_FINDING_IMPACT_ID_OTHER",
	}
	SECURITY_FINDING_IMPACT_ID_value = map[string]int32{
		"SECURITY_FINDING_IMPACT_ID_UNKNOWN":  0,
		"SECURITY_FINDING_IMPACT_ID_LOW":      1,
		"SECURITY_FINDING_IMPACT_ID_MEDIUM":   2,
		"SECURITY_FINDING_IMPACT_ID_HIGH":     3,
		"SECURITY_FINDING_IMPACT_ID_CRITICAL": 4,
		"SECURITY_FINDING_IMPACT_ID_OTHER":    99,
	}
)

func (x SECURITY_FINDING_IMPACT_ID) Enum() *SECURITY_FINDING_IMPACT_ID {
	p := new(SECURITY_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[10].Descriptor()
}

func (SECURITY_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[10]
}

func (x SECURITY_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_IMPACT_ID.Descriptor instead.
func (SECURITY_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{10}
}

type SECURITY_FINDING_RISK_LEVEL_ID int32

const (
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_INFO     SECURITY_FINDING_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_LOW      SECURITY_FINDING_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM   SECURITY_FINDING_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_HIGH     SECURITY_FINDING_RISK_LEVEL_ID = 3 // EnumValue: 3; Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL SECURITY_FINDING_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for SECURITY_FINDING_RISK_LEVEL_ID.
var (
	SECURITY_FINDING_RISK_LEVEL_ID_name = map[int32]string{
		0: "SECURITY_FINDING_RISK_LEVEL_ID_INFO",
		1: "SECURITY_FINDING_RISK_LEVEL_ID_LOW",
		2: "SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM",
		3: "SECURITY_FINDING_RISK_LEVEL_ID_HIGH",
		4: "SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL",
	}
	SECURITY_FINDING_RISK_LEVEL_ID_value = map[string]int32{
		"SECURITY_FINDING_RISK_LEVEL_ID_INFO":     0,
		"SECURITY_FINDING_RISK_LEVEL_ID_LOW":      1,
		"SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM":   2,
		"SECURITY_FINDING_RISK_LEVEL_ID_HIGH":     3,
		"SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x SECURITY_FINDING_RISK_LEVEL_ID) Enum() *SECURITY_FINDING_RISK_LEVEL_ID {
	p := new(SECURITY_FINDING_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[11].Descriptor()
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[11]
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_RISK_LEVEL_ID.Descriptor instead.
func (SECURITY_FINDING_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{11}
}

type SECURITY_FINDING_SEVERITY_ID int32

const (
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_UNKNOWN       SECURITY_FINDING_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL SECURITY_FINDING_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_LOW           SECURITY_FINDING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_MEDIUM        SECURITY_FINDING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_HIGH          SECURITY_FINDING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_CRITICAL      SECURITY_FINDING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_FATAL         SECURITY_FINDING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_OTHER         SECURITY_FINDING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_SEVERITY_ID.
var (
	SECURITY_FINDING_SEVERITY_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_SEVERITY_ID_UNKNOWN",
		1:  "SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL",
		2:  "SECURITY_FINDING_SEVERITY_ID_LOW",
		3:  "SECURITY_FINDING_SEVERITY_ID_MEDIUM",
		4:  "SECURITY_FINDING_SEVERITY_ID_HIGH",
		5:  "SECURITY_FINDING_SEVERITY_ID_CRITICAL",
		6:  "SECURITY_FINDING_SEVERITY_ID_FATAL",
		99: "SECURITY_FINDING_SEVERITY_ID_OTHER",
	}
	SECURITY_FINDING_SEVERITY_ID_value = map[string]int32{
		"SECURITY_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL": 1,
		"SECURITY_FINDING_SEVERITY_ID_LOW":           2,
		"SECURITY_FINDING_SEVERITY_ID_MEDIUM":        3,
		"SECURITY_FINDING_SEVERITY_ID_HIGH":          4,
		"SECURITY_FINDING_SEVERITY_ID_CRITICAL":      5,
		"SECURITY_FINDING_SEVERITY_ID_FATAL":         6,
		"SECURITY_FINDING_SEVERITY_ID_OTHER":         99,
	}
)

func (x SECURITY_FINDING_SEVERITY_ID) Enum() *SECURITY_FINDING_SEVERITY_ID {
	p := new(SECURITY_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[12].Descriptor()
}

func (SECURITY_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[12]
}

func (x SECURITY_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_SEVERITY_ID.Descriptor instead.
func (SECURITY_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{12}
}

type SECURITY_FINDING_STATE_ID int32

const (
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_UNKNOWN     SECURITY_FINDING_STATE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_NEW         SECURITY_FINDING_STATE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_IN_PROGRESS SECURITY_FINDING_STATE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_SUPPRESSED  SECURITY_FINDING_STATE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_RESOLVED    SECURITY_FINDING_STATE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_OTHER       SECURITY_FINDING_STATE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_STATE_ID.
var (
	SECURITY_FINDING_STATE_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_STATE_ID_UNKNOWN",
		1:  "SECURITY_FINDING_STATE_ID_NEW",
		2:  "SECURITY_FINDING_STATE_ID_IN_PROGRESS",
		3:  "SECURITY_FINDING_STATE_ID_SUPPRESSED",
		4:  "SECURITY_FINDING_STATE_ID_RESOLVED",
		99: "SECURITY_FINDING_STATE_ID_OTHER",
	}
	SECURITY_FINDING_STATE_ID_value = map[string]int32{
		"SECURITY_FINDING_STATE_ID_UNKNOWN":     0,
		"SECURITY_FINDING_STATE_ID_NEW":         1,
		"SECURITY_FINDING_STATE_ID_IN_PROGRESS": 2,
		"SECURITY_FINDING_STATE_ID_SUPPRESSED":  3,
		"SECURITY_FINDING_STATE_ID_RESOLVED":    4,
		"SECURITY_FINDING_STATE_ID_OTHER":       99,
	}
)

func (x SECURITY_FINDING_STATE_ID) Enum() *SECURITY_FINDING_STATE_ID {
	p := new(SECURITY_FINDING_STATE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[13].Descriptor()
}

func (SECURITY_FINDING_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[13]
}

func (x SECURITY_FINDING_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATE_ID.Descriptor instead.
func (SECURITY_FINDING_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{13}
}

type SECURITY_FINDING_STATUS_ID int32

const (
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_UNKNOWN SECURITY_FINDING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_SUCCESS SECURITY_FINDING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_FAILURE SECURITY_FINDING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_OTHER   SECURITY_FINDING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_FINDING_STATUS_ID.
var (
	SECURITY_FINDING_STATUS_ID_name = map[int32]string{
		0:  "SECURITY_FINDING_STATUS_ID_UNKNOWN",
		1:  "SECURITY_FINDING_STATUS_ID_SUCCESS",
		2:  "SECURITY_FINDING_STATUS_ID_FAILURE",
		99: "SECURITY_FINDING_STATUS_ID_OTHER",
	}
	SECURITY_FINDING_STATUS_ID_value = map[string]int32{
		"SECURITY_FINDING_STATUS_ID_UNKNOWN": 0,
		"SECURITY_FINDING_STATUS_ID_SUCCESS": 1,
		"SECURITY_FINDING_STATUS_ID_FAILURE": 2,
		"SECURITY_FINDING_STATUS_ID_OTHER":   99,
	}
)

func (x SECURITY_FINDING_STATUS_ID) Enum() *SECURITY_FINDING_STATUS_ID {
	p := new(SECURITY_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[14].Descriptor()
}

func (SECURITY_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[14]
}

func (x SECURITY_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATUS_ID.Descriptor instead.
func (SECURITY_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{14}
}

type SECURITY_FINDING_TYPE_UID int32

const (
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_UNSPECIFIED              SECURITY_FINDING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN SECURITY_FINDING_TYPE_UID = 200100 // Type: OCSF_VALUE; EnumValue: 200100;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE  SECURITY_FINDING_TYPE_UID = 200101 // Type: OCSF_VALUE; EnumValue: 200101;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE  SECURITY_FINDING_TYPE_UID = 200102 // Type: OCSF_VALUE; EnumValue: 200102;
	SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER   SECURITY_FINDING_TYPE_UID = 200199 // Type: OCSF_VALUE; EnumValue: 200199;
)

// Enum value maps for SECURITY_FINDING_TYPE_UID.
var (
	SECURITY_FINDING_TYPE_UID_name = map[int32]string{
		0:      "SECURITY_FINDING_TYPE_UID_UNSPECIFIED",
		200100: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN",
		200101: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE",
		200102: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE",
		200199: "SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER",
	}
	SECURITY_FINDING_TYPE_UID_value = map[string]int32{
		"SECURITY_FINDING_TYPE_UID_UNSPECIFIED":              0,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UNKNOWN": 200100,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_CREATE":  200101,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_UPDATE":  200102,
		"SECURITY_FINDING_TYPE_UID_SECURITY_FINDING_OTHER":   200199,
	}
)

func (x SECURITY_FINDING_TYPE_UID) Enum() *SECURITY_FINDING_TYPE_UID {
	p := new(SECURITY_FINDING_TYPE_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[15].Descriptor()
}

func (SECURITY_FINDING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes[15]
}

func (x SECURITY_FINDING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_TYPE_UID.Descriptor instead.
func (SECURITY_FINDING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP(), []int{15}
}

var File_ocsf_v1_0_0_events_findings_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2a, 0x9a, 0x01, 0x0a, 0x14, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x62, 0x0a, 0x15, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1b, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xd0, 0x0f, 0x2a,
	0xa1, 0x02, 0x0a, 0x14, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x92, 0x01, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xda, 0x01, 0x0a, 0x11, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x22, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xc0, 0x9a, 0x0c, 0x12, 0x27, 0x0a, 0x21, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0xc1, 0x9a, 0x0c, 0x12, 0x27, 0x0a, 0x21, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xc2, 0x9a, 0x0c, 0x12, 0x26, 0x0a,
	0x20, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0xa3, 0x9b, 0x0c, 0x2a, 0xc2, 0x01, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x7a, 0x0a, 0x1d, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0xd1, 0x0f, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x83, 0x02, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d,
	0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf2, 0x01,
	0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x04, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x87,
	0x02, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xaa, 0x02, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38,
	0x0a, 0x32, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xa4, 0x9b, 0x0c, 0x12, 0x37, 0x0a, 0x31, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xa5, 0x9b,
	0x0c, 0x12, 0x37, 0x0a, 0x31, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xa6, 0x9b, 0x0c, 0x12, 0x36, 0x0a, 0x30, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x87,
	0x9c, 0x0c, 0x42, 0x9f, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f,
	0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x46, 0x45, 0xaa, 0x02, 0x1f, 0x4f,
	0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02,
	0x1f, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0xe2, 0x02, 0x2b, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5c, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x23, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescData = file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDesc
)

func file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDescData
}

var file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_ocsf_v1_0_0_events_findings_enums_enums_proto_goTypes = []any{
	(FINDINGS_ACTIVITY_ID)(0),           // 0: ocsf.v1_0_0.events.findings.enums.FINDINGS_ACTIVITY_ID
	(FINDINGS_CATEGORY_UID)(0),          // 1: ocsf.v1_0_0.events.findings.enums.FINDINGS_CATEGORY_UID
	(FINDINGS_CLASS_UID)(0),             // 2: ocsf.v1_0_0.events.findings.enums.FINDINGS_CLASS_UID
	(FINDINGS_SEVERITY_ID)(0),           // 3: ocsf.v1_0_0.events.findings.enums.FINDINGS_SEVERITY_ID
	(FINDINGS_STATUS_ID)(0),             // 4: ocsf.v1_0_0.events.findings.enums.FINDINGS_STATUS_ID
	(FINDINGS_TYPE_UID)(0),              // 5: ocsf.v1_0_0.events.findings.enums.FINDINGS_TYPE_UID
	(SECURITY_FINDING_ACTIVITY_ID)(0),   // 6: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	(SECURITY_FINDING_CATEGORY_UID)(0),  // 7: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	(SECURITY_FINDING_CLASS_UID)(0),     // 8: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	(SECURITY_FINDING_CONFIDENCE_ID)(0), // 9: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	(SECURITY_FINDING_IMPACT_ID)(0),     // 10: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	(SECURITY_FINDING_RISK_LEVEL_ID)(0), // 11: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	(SECURITY_FINDING_SEVERITY_ID)(0),   // 12: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	(SECURITY_FINDING_STATE_ID)(0),      // 13: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	(SECURITY_FINDING_STATUS_ID)(0),     // 14: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	(SECURITY_FINDING_TYPE_UID)(0),      // 15: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_TYPE_UID
}
var file_ocsf_v1_0_0_events_findings_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_findings_enums_enums_proto_init() }
func file_ocsf_v1_0_0_events_findings_enums_enums_proto_init() {
	if File_ocsf_v1_0_0_events_findings_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_findings_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_findings_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_0_0_events_findings_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_0_0_events_findings_enums_enums_proto = out.File
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_goTypes = nil
	file_ocsf_v1_0_0_events_findings_enums_enums_proto_depIdxs = nil
}
