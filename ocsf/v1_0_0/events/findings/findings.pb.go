// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/findings/findings.proto

package findings

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/events/findings/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: findings
// Event UID: 1
// URL: https://schema.ocsf.io/1.0.0/classes/security_finding
type SecurityFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSources     []string                             `protobuf:"bytes,1,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`                                                                            // Caption: Data Sources;
	RiskLevelId     enums.SECURITY_FINDING_RISK_LEVEL_ID `protobuf:"varint,2,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID" json:"risk_level_id,omitempty"`   // Caption: Risk Level ID;
	Malware         []*objects.Malware                   `protobuf:"bytes,3,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                       // Caption: Malware;
	ActivityName    string                               `protobuf:"bytes,4,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                         // Caption: Activity;
	ImpactScore     int32                                `protobuf:"varint,5,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`                                                                           // Caption: Impact;
	Message         string                               `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`                                                                                                       // Caption: Message;
	TypeName        string                               `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	Process         *objects.Process                     `protobuf:"bytes,8,opt,name=process,proto3" json:"process,omitempty"`                                                                                                       // Caption: Process;
	Enrichments     []*objects.Enrichment                `protobuf:"bytes,9,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                               // Caption: Enrichments;
	ClassName       string                               `protobuf:"bytes,10,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Impact          string                               `protobuf:"bytes,11,opt,name=impact,proto3" json:"impact,omitempty"`                                                                                                        // Caption: Impact;
	Confidence      string                               `protobuf:"bytes,12,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                                                // Caption: Confidence;
	StateId         enums.SECURITY_FINDING_STATE_ID      `protobuf:"varint,13,opt,name=state_id,json=stateId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATE_ID" json:"state_id,omitempty"`                     // Caption: State ID;
	StartTime       int64                                `protobuf:"varint,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                // Caption: Start Time;
	Unmapped        *objects.Object                      `protobuf:"bytes,15,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	Nist            []string                             `protobuf:"bytes,16,rep,name=nist,proto3" json:"nist,omitempty"`                                                                                                            // Caption: NIST List;
	Vulnerabilities []*objects.Vulnerability             `protobuf:"bytes,17,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                                                                                      // Caption: Vulnerabilities;
	ActivityId      enums.SECURITY_FINDING_ACTIVITY_ID   `protobuf:"varint,18,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID" json:"activity_id,omitempty"`         // Caption: Activity ID;
	CategoryName    string                               `protobuf:"bytes,19,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	Finding         *objects.Finding                     `protobuf:"bytes,20,opt,name=finding,proto3" json:"finding,omitempty"`                                                                                                      // Caption: Finding;
	Compliance      *objects.Compliance                  `protobuf:"bytes,21,opt,name=compliance,proto3" json:"compliance,omitempty"`                                                                                                // Caption: Compliance;
	Count           int32                                `protobuf:"varint,22,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	Cloud           *objects.Cloud                       `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	ImpactId        enums.SECURITY_FINDING_IMPACT_ID     `protobuf:"varint,24,opt,name=impact_id,json=impactId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID" json:"impact_id,omitempty"`                 // Caption: Impact ID;
	Analytic        *objects.Analytic                    `protobuf:"bytes,25,opt,name=analytic,proto3" json:"analytic,omitempty"`                                                                                                    // Caption: Analytic;
	Evidence        string                               `protobuf:"bytes,26,opt,name=evidence,proto3" json:"evidence,omitempty"`                                                                                                    // Caption: Evidence;
	KillChain       []*objects.KillChain                 `protobuf:"bytes,27,rep,name=kill_chain,json=killChain,proto3" json:"kill_chain,omitempty"`                                                                                 // Caption: Kill Chain;
	CategoryUid     enums.SECURITY_FINDING_CATEGORY_UID  `protobuf:"varint,28,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID" json:"category_uid,omitempty"`     // Caption: Category ID;
	TimezoneOffset  int32                                `protobuf:"varint,29,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	Severity        string                               `protobuf:"bytes,30,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	RawData         string                               `protobuf:"bytes,31,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	StatusId        enums.SECURITY_FINDING_STATUS_ID     `protobuf:"varint,32,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATUS_ID" json:"status_id,omitempty"`                 // Caption: Status ID;
	StatusDetail    string                               `protobuf:"bytes,33,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	Observables     []*objects.Observable                `protobuf:"bytes,34,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	Resources       []*objects.ResourceDetails           `protobuf:"bytes,35,rep,name=resources,proto3" json:"resources,omitempty"`                                                                                                  // Caption: Resources Array;
	StatusCode      string                               `protobuf:"bytes,36,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	EndTime         int64                                `protobuf:"varint,37,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	Status          string                               `protobuf:"bytes,38,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Api             *objects.Api                         `protobuf:"bytes,39,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	Time            int64                                `protobuf:"varint,40,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	SeverityId      enums.SECURITY_FINDING_SEVERITY_ID   `protobuf:"varint,41,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID" json:"severity_id,omitempty"`         // Caption: Severity ID;
	CisCsc          []*objects.CisControl                `protobuf:"bytes,42,rep,name=cis_csc,json=cisCsc,proto3" json:"cis_csc,omitempty"`                                                                                          // Caption: CIS CSC;
	RiskScore       int32                                `protobuf:"varint,43,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                                                // Caption: Risk Score;
	State           string                               `protobuf:"bytes,44,opt,name=state,proto3" json:"state,omitempty"`                                                                                                          // Caption: State;
	RiskLevel       string                               `protobuf:"bytes,45,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                                                 // Caption: Risk Level;
	Attacks         []*objects.Attack                    `protobuf:"bytes,46,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: Attacks;
	ClassUid        enums.SECURITY_FINDING_CLASS_UID     `protobuf:"varint,47,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CLASS_UID" json:"class_uid,omitempty"`                 // Caption: Class ID;
	TypeUid         int32                                `protobuf:"varint,48,opt,name=type_uid,json=typeUid,proto3" json:"type_uid,omitempty"`                                                                                      // Caption: Type ID;
	Duration        int32                                `protobuf:"varint,49,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Metadata        *objects.Metadata                    `protobuf:"bytes,50,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	ConfidenceId    enums.SECURITY_FINDING_CONFIDENCE_ID `protobuf:"varint,51,opt,name=confidence_id,json=confidenceId,proto3,enum=ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID" json:"confidence_id,omitempty"` // Caption: Confidence Id;
	ConfidenceScore int32                                `protobuf:"varint,52,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`                                                              // Caption: Confidence Score;
}

func (x *SecurityFinding) Reset() {
	*x = SecurityFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityFinding) ProtoMessage() {}

func (x *SecurityFinding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityFinding.ProtoReflect.Descriptor instead.
func (*SecurityFinding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_findings_proto_rawDescGZIP(), []int{0}
}

func (x *SecurityFinding) GetDataSources() []string {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *SecurityFinding) GetRiskLevelId() enums.SECURITY_FINDING_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.SECURITY_FINDING_RISK_LEVEL_ID(0)
}

func (x *SecurityFinding) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *SecurityFinding) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *SecurityFinding) GetImpactScore() int32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

func (x *SecurityFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SecurityFinding) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SecurityFinding) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *SecurityFinding) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *SecurityFinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SecurityFinding) GetImpact() string {
	if x != nil {
		return x.Impact
	}
	return ""
}

func (x *SecurityFinding) GetConfidence() string {
	if x != nil {
		return x.Confidence
	}
	return ""
}

func (x *SecurityFinding) GetStateId() enums.SECURITY_FINDING_STATE_ID {
	if x != nil {
		return x.StateId
	}
	return enums.SECURITY_FINDING_STATE_ID(0)
}

func (x *SecurityFinding) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SecurityFinding) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *SecurityFinding) GetNist() []string {
	if x != nil {
		return x.Nist
	}
	return nil
}

func (x *SecurityFinding) GetVulnerabilities() []*objects.Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *SecurityFinding) GetActivityId() enums.SECURITY_FINDING_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SECURITY_FINDING_ACTIVITY_ID(0)
}

func (x *SecurityFinding) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SecurityFinding) GetFinding() *objects.Finding {
	if x != nil {
		return x.Finding
	}
	return nil
}

func (x *SecurityFinding) GetCompliance() *objects.Compliance {
	if x != nil {
		return x.Compliance
	}
	return nil
}

func (x *SecurityFinding) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SecurityFinding) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *SecurityFinding) GetImpactId() enums.SECURITY_FINDING_IMPACT_ID {
	if x != nil {
		return x.ImpactId
	}
	return enums.SECURITY_FINDING_IMPACT_ID(0)
}

func (x *SecurityFinding) GetAnalytic() *objects.Analytic {
	if x != nil {
		return x.Analytic
	}
	return nil
}

func (x *SecurityFinding) GetEvidence() string {
	if x != nil {
		return x.Evidence
	}
	return ""
}

func (x *SecurityFinding) GetKillChain() []*objects.KillChain {
	if x != nil {
		return x.KillChain
	}
	return nil
}

func (x *SecurityFinding) GetCategoryUid() enums.SECURITY_FINDING_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SECURITY_FINDING_CATEGORY_UID(0)
}

func (x *SecurityFinding) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *SecurityFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SecurityFinding) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SecurityFinding) GetStatusId() enums.SECURITY_FINDING_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SECURITY_FINDING_STATUS_ID(0)
}

func (x *SecurityFinding) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *SecurityFinding) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *SecurityFinding) GetResources() []*objects.ResourceDetails {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SecurityFinding) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SecurityFinding) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SecurityFinding) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SecurityFinding) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *SecurityFinding) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SecurityFinding) GetSeverityId() enums.SECURITY_FINDING_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SECURITY_FINDING_SEVERITY_ID(0)
}

func (x *SecurityFinding) GetCisCsc() []*objects.CisControl {
	if x != nil {
		return x.CisCsc
	}
	return nil
}

func (x *SecurityFinding) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *SecurityFinding) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SecurityFinding) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *SecurityFinding) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *SecurityFinding) GetClassUid() enums.SECURITY_FINDING_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SECURITY_FINDING_CLASS_UID(0)
}

func (x *SecurityFinding) GetTypeUid() int32 {
	if x != nil {
		return x.TypeUid
	}
	return 0
}

func (x *SecurityFinding) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SecurityFinding) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SecurityFinding) GetConfidenceId() enums.SECURITY_FINDING_CONFIDENCE_ID {
	if x != nil {
		return x.ConfidenceId
	}
	return enums.SECURITY_FINDING_CONFIDENCE_ID(0)
}

func (x *SecurityFinding) GetConfidenceScore() int32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

// Event: findings
// Event UID: 0
// URL: https://schema.ocsf.io/1.0.0/classes/findings
type Findings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *objects.Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                         // Caption: Metadata;
	StatusCode     string                      `protobuf:"bytes,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                   // Caption: Status Code;
	Observables    []*objects.Observable       `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                   // Caption: Observables;
	ClassName      string                      `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                      // Caption: Class;
	Cloud          *objects.Cloud              `protobuf:"bytes,5,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                               // Caption: Cloud; Profile: cloud;
	EndTime        int64                       `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                           // Caption: End Time;
	TimezoneOffset int32                       `protobuf:"varint,7,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                      // Caption: Timezone Offset;
	Time           int64                       `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`                                                                                                // Caption: Event Time;
	Status         string                      `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`                                                                                             // Caption: Status;
	Api            *objects.Api                `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                  // Caption: API Details; Profile: cloud;
	Enrichments    []*objects.Enrichment       `protobuf:"bytes,11,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                  // Caption: Enrichments;
	Severity       string                      `protobuf:"bytes,12,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                        // Caption: Severity;
	TypeName       string                      `protobuf:"bytes,13,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                        // Caption: Type Name;
	RawData        string                      `protobuf:"bytes,14,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                           // Caption: Raw Data;
	ActivityId     enums.FINDINGS_ACTIVITY_ID  `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.findings.enums.FINDINGS_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	SeverityId     enums.FINDINGS_SEVERITY_ID  `protobuf:"varint,16,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.findings.enums.FINDINGS_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Unmapped       *objects.Object             `protobuf:"bytes,17,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                        // Caption: Unmapped Data;
	TypeUid        int32                       `protobuf:"varint,18,opt,name=type_uid,json=typeUid,proto3" json:"type_uid,omitempty"`                                                                          // Caption: Type ID;
	CategoryUid    enums.FINDINGS_CATEGORY_UID `protobuf:"varint,19,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.findings.enums.FINDINGS_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	CategoryName   string                      `protobuf:"bytes,20,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                            // Caption: Category;
	ActivityName   string                      `protobuf:"bytes,21,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                            // Caption: Activity;
	Duration       int32                       `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                       // Caption: Duration;
	StatusDetail   string                      `protobuf:"bytes,23,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                            // Caption: Status Details;
	Message        string                      `protobuf:"bytes,24,opt,name=message,proto3" json:"message,omitempty"`                                                                                          // Caption: Message;
	StatusId       enums.FINDINGS_STATUS_ID    `protobuf:"varint,25,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.findings.enums.FINDINGS_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Count          int32                       `protobuf:"varint,26,opt,name=count,proto3" json:"count,omitempty"`                                                                                             // Caption: Count;
	StartTime      int64                       `protobuf:"varint,27,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                    // Caption: Start Time;
	ClassUid       enums.FINDINGS_CLASS_UID    `protobuf:"varint,28,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.findings.enums.FINDINGS_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
}

func (x *Findings) Reset() {
	*x = Findings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Findings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Findings) ProtoMessage() {}

func (x *Findings) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Findings.ProtoReflect.Descriptor instead.
func (*Findings) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_findings_findings_proto_rawDescGZIP(), []int{1}
}

func (x *Findings) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Findings) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Findings) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Findings) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Findings) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Findings) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Findings) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Findings) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Findings) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Findings) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Findings) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Findings) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Findings) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Findings) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Findings) GetActivityId() enums.FINDINGS_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FINDINGS_ACTIVITY_ID(0)
}

func (x *Findings) GetSeverityId() enums.FINDINGS_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FINDINGS_SEVERITY_ID(0)
}

func (x *Findings) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Findings) GetTypeUid() int32 {
	if x != nil {
		return x.TypeUid
	}
	return 0
}

func (x *Findings) GetCategoryUid() enums.FINDINGS_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FINDINGS_CATEGORY_UID(0)
}

func (x *Findings) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Findings) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Findings) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Findings) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Findings) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Findings) GetStatusId() enums.FINDINGS_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FINDINGS_STATUS_ID(0)
}

func (x *Findings) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Findings) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Findings) GetClassUid() enums.FINDINGS_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FINDINGS_CLASS_UID(0)
}

var File_ocsf_v1_0_0_events_findings_findings_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_findings_findings_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x14, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x5a, 0x0a,
	0x09, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x63, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x60, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x69, 0x73, 0x5f, 0x63, 0x73, 0x63, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x06, 0x63, 0x69, 0x73, 0x43, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x94, 0x0a, 0x0a, 0x08, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x5b, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x42,
	0xfc, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73,
	0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x46, 0xaa,
	0x02, 0x19, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xca, 0x02, 0x19, 0x4f, 0x63,
	0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0xe2, 0x02, 0x25, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1c, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_findings_findings_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_findings_findings_proto_rawDescData = file_ocsf_v1_0_0_events_findings_findings_proto_rawDesc
)

func file_ocsf_v1_0_0_events_findings_findings_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_findings_findings_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_findings_findings_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_findings_findings_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_findings_findings_proto_rawDescData
}

var file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ocsf_v1_0_0_events_findings_findings_proto_goTypes = []interface{}{
	(*SecurityFinding)(nil),                   // 0: ocsf.v1_0_0.events.findings.SecurityFinding
	(*Findings)(nil),                          // 1: ocsf.v1_0_0.events.findings.Findings
	(enums.SECURITY_FINDING_RISK_LEVEL_ID)(0), // 2: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	(*objects.Malware)(nil),                   // 3: ocsf.v1_0_0.objects.Malware
	(*objects.Process)(nil),                   // 4: ocsf.v1_0_0.objects.Process
	(*objects.Enrichment)(nil),                // 5: ocsf.v1_0_0.objects.Enrichment
	(enums.SECURITY_FINDING_STATE_ID)(0),      // 6: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	(*objects.Object)(nil),                    // 7: ocsf.v1_0_0.objects.Object
	(*objects.Vulnerability)(nil),             // 8: ocsf.v1_0_0.objects.Vulnerability
	(enums.SECURITY_FINDING_ACTIVITY_ID)(0),   // 9: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	(*objects.Finding)(nil),                   // 10: ocsf.v1_0_0.objects.Finding
	(*objects.Compliance)(nil),                // 11: ocsf.v1_0_0.objects.Compliance
	(*objects.Cloud)(nil),                     // 12: ocsf.v1_0_0.objects.Cloud
	(enums.SECURITY_FINDING_IMPACT_ID)(0),     // 13: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	(*objects.Analytic)(nil),                  // 14: ocsf.v1_0_0.objects.Analytic
	(*objects.KillChain)(nil),                 // 15: ocsf.v1_0_0.objects.KillChain
	(enums.SECURITY_FINDING_CATEGORY_UID)(0),  // 16: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	(enums.SECURITY_FINDING_STATUS_ID)(0),     // 17: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	(*objects.Observable)(nil),                // 18: ocsf.v1_0_0.objects.Observable
	(*objects.ResourceDetails)(nil),           // 19: ocsf.v1_0_0.objects.ResourceDetails
	(*objects.Api)(nil),                       // 20: ocsf.v1_0_0.objects.Api
	(enums.SECURITY_FINDING_SEVERITY_ID)(0),   // 21: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	(*objects.CisControl)(nil),                // 22: ocsf.v1_0_0.objects.CisControl
	(*objects.Attack)(nil),                    // 23: ocsf.v1_0_0.objects.Attack
	(enums.SECURITY_FINDING_CLASS_UID)(0),     // 24: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	(*objects.Metadata)(nil),                  // 25: ocsf.v1_0_0.objects.Metadata
	(enums.SECURITY_FINDING_CONFIDENCE_ID)(0), // 26: ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	(enums.FINDINGS_ACTIVITY_ID)(0),           // 27: ocsf.v1_0_0.events.findings.enums.FINDINGS_ACTIVITY_ID
	(enums.FINDINGS_SEVERITY_ID)(0),           // 28: ocsf.v1_0_0.events.findings.enums.FINDINGS_SEVERITY_ID
	(enums.FINDINGS_CATEGORY_UID)(0),          // 29: ocsf.v1_0_0.events.findings.enums.FINDINGS_CATEGORY_UID
	(enums.FINDINGS_STATUS_ID)(0),             // 30: ocsf.v1_0_0.events.findings.enums.FINDINGS_STATUS_ID
	(enums.FINDINGS_CLASS_UID)(0),             // 31: ocsf.v1_0_0.events.findings.enums.FINDINGS_CLASS_UID
}
var file_ocsf_v1_0_0_events_findings_findings_proto_depIdxs = []int32{
	2,  // 0: ocsf.v1_0_0.events.findings.SecurityFinding.risk_level_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_RISK_LEVEL_ID
	3,  // 1: ocsf.v1_0_0.events.findings.SecurityFinding.malware:type_name -> ocsf.v1_0_0.objects.Malware
	4,  // 2: ocsf.v1_0_0.events.findings.SecurityFinding.process:type_name -> ocsf.v1_0_0.objects.Process
	5,  // 3: ocsf.v1_0_0.events.findings.SecurityFinding.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	6,  // 4: ocsf.v1_0_0.events.findings.SecurityFinding.state_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATE_ID
	7,  // 5: ocsf.v1_0_0.events.findings.SecurityFinding.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	8,  // 6: ocsf.v1_0_0.events.findings.SecurityFinding.vulnerabilities:type_name -> ocsf.v1_0_0.objects.Vulnerability
	9,  // 7: ocsf.v1_0_0.events.findings.SecurityFinding.activity_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_ACTIVITY_ID
	10, // 8: ocsf.v1_0_0.events.findings.SecurityFinding.finding:type_name -> ocsf.v1_0_0.objects.Finding
	11, // 9: ocsf.v1_0_0.events.findings.SecurityFinding.compliance:type_name -> ocsf.v1_0_0.objects.Compliance
	12, // 10: ocsf.v1_0_0.events.findings.SecurityFinding.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	13, // 11: ocsf.v1_0_0.events.findings.SecurityFinding.impact_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_IMPACT_ID
	14, // 12: ocsf.v1_0_0.events.findings.SecurityFinding.analytic:type_name -> ocsf.v1_0_0.objects.Analytic
	15, // 13: ocsf.v1_0_0.events.findings.SecurityFinding.kill_chain:type_name -> ocsf.v1_0_0.objects.KillChain
	16, // 14: ocsf.v1_0_0.events.findings.SecurityFinding.category_uid:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CATEGORY_UID
	17, // 15: ocsf.v1_0_0.events.findings.SecurityFinding.status_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_STATUS_ID
	18, // 16: ocsf.v1_0_0.events.findings.SecurityFinding.observables:type_name -> ocsf.v1_0_0.objects.Observable
	19, // 17: ocsf.v1_0_0.events.findings.SecurityFinding.resources:type_name -> ocsf.v1_0_0.objects.ResourceDetails
	20, // 18: ocsf.v1_0_0.events.findings.SecurityFinding.api:type_name -> ocsf.v1_0_0.objects.Api
	21, // 19: ocsf.v1_0_0.events.findings.SecurityFinding.severity_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_SEVERITY_ID
	22, // 20: ocsf.v1_0_0.events.findings.SecurityFinding.cis_csc:type_name -> ocsf.v1_0_0.objects.CisControl
	23, // 21: ocsf.v1_0_0.events.findings.SecurityFinding.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	24, // 22: ocsf.v1_0_0.events.findings.SecurityFinding.class_uid:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CLASS_UID
	25, // 23: ocsf.v1_0_0.events.findings.SecurityFinding.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	26, // 24: ocsf.v1_0_0.events.findings.SecurityFinding.confidence_id:type_name -> ocsf.v1_0_0.events.findings.enums.SECURITY_FINDING_CONFIDENCE_ID
	25, // 25: ocsf.v1_0_0.events.findings.Findings.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	18, // 26: ocsf.v1_0_0.events.findings.Findings.observables:type_name -> ocsf.v1_0_0.objects.Observable
	12, // 27: ocsf.v1_0_0.events.findings.Findings.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	20, // 28: ocsf.v1_0_0.events.findings.Findings.api:type_name -> ocsf.v1_0_0.objects.Api
	5,  // 29: ocsf.v1_0_0.events.findings.Findings.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	27, // 30: ocsf.v1_0_0.events.findings.Findings.activity_id:type_name -> ocsf.v1_0_0.events.findings.enums.FINDINGS_ACTIVITY_ID
	28, // 31: ocsf.v1_0_0.events.findings.Findings.severity_id:type_name -> ocsf.v1_0_0.events.findings.enums.FINDINGS_SEVERITY_ID
	7,  // 32: ocsf.v1_0_0.events.findings.Findings.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	29, // 33: ocsf.v1_0_0.events.findings.Findings.category_uid:type_name -> ocsf.v1_0_0.events.findings.enums.FINDINGS_CATEGORY_UID
	30, // 34: ocsf.v1_0_0.events.findings.Findings.status_id:type_name -> ocsf.v1_0_0.events.findings.enums.FINDINGS_STATUS_ID
	31, // 35: ocsf.v1_0_0.events.findings.Findings.class_uid:type_name -> ocsf.v1_0_0.events.findings.enums.FINDINGS_CLASS_UID
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_findings_findings_proto_init() }
func file_ocsf_v1_0_0_events_findings_findings_proto_init() {
	if File_ocsf_v1_0_0_events_findings_findings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Findings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_findings_findings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_findings_findings_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_findings_findings_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_0_0_events_findings_findings_proto_msgTypes,
	}.Build()
	File_ocsf_v1_0_0_events_findings_findings_proto = out.File
	file_ocsf_v1_0_0_events_findings_findings_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_findings_findings_proto_goTypes = nil
	file_ocsf_v1_0_0_events_findings_findings_proto_depIdxs = nil
}
