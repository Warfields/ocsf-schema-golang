// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/other/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AUTHORIZE_SESSION_ACTIVITY_ID int32

const (
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN AUTHORIZE_SESSION_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_ACTIVITY_ID_AUTHORIZE_SESSION_ACTIVITY_ID_OTHER   AUTHORIZE_SESSION_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_ACTIVITY_ID.
var (
	AUTHORIZE_SESSION_ACTIVITY_ID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN",
		1: "AUTHORIZE_SESSION_ACTIVITY_ID_OTHER",
	}
	AUTHORIZE_SESSION_ACTIVITY_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_ACTIVITY_ID_UNKNOWN": 0,
		"AUTHORIZE_SESSION_ACTIVITY_ID_OTHER":   1,
	}
)

func (x AUTHORIZE_SESSION_ACTIVITY_ID) Enum() *AUTHORIZE_SESSION_ACTIVITY_ID {
	p := new(AUTHORIZE_SESSION_ACTIVITY_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[0].Descriptor()
}

func (AUTHORIZE_SESSION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[0]
}

func (x AUTHORIZE_SESSION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_ACTIVITY_ID.Descriptor instead.
func (AUTHORIZE_SESSION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{0}
}

type RDP_ACTIVITY_ACTIVITY_ID int32

const (
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN RDP_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	RDP_ACTIVITY_ACTIVITY_ID_RDP_ACTIVITY_ACTIVITY_ID_OTHER   RDP_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_ACTIVITY_ID.
var (
	RDP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "RDP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	RDP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"RDP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"RDP_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x RDP_ACTIVITY_ACTIVITY_ID) Enum() *RDP_ACTIVITY_ACTIVITY_ID {
	p := new(RDP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[1].Descriptor()
}

func (RDP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[1]
}

func (x RDP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (RDP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{1}
}

type DNS_ANSWER_FLAG_IDS int32

const (
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_UNKNOWN              DNS_ANSWER_FLAG_IDS = 0 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA       DNS_ANSWER_FLAG_IDS = 1 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER DNS_ANSWER_FLAG_IDS = 2 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED    DNS_ANSWER_FLAG_IDS = 3 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_OTHER                DNS_ANSWER_FLAG_IDS = 4 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE  DNS_ANSWER_FLAG_IDS = 5 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED    DNS_ANSWER_FLAG_IDS = 6 // Type: OCSF_VALUE;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE   DNS_ANSWER_FLAG_IDS = 7 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ANSWER_FLAG_IDS.
var (
	DNS_ANSWER_FLAG_IDS_name = map[int32]string{
		0: "DNS_ANSWER_FLAG_IDS_UNKNOWN",
		1: "DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA",
		2: "DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER",
		3: "DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED",
		4: "DNS_ANSWER_FLAG_IDS_OTHER",
		5: "DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE",
		6: "DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED",
		7: "DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE",
	}
	DNS_ANSWER_FLAG_IDS_value = map[string]int32{
		"DNS_ANSWER_FLAG_IDS_UNKNOWN":              0,
		"DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA":       1,
		"DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER": 2,
		"DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED":    3,
		"DNS_ANSWER_FLAG_IDS_OTHER":                4,
		"DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE":  5,
		"DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED":    6,
		"DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE":   7,
	}
)

func (x DNS_ANSWER_FLAG_IDS) Enum() *DNS_ANSWER_FLAG_IDS {
	p := new(DNS_ANSWER_FLAG_IDS)
	*p = x
	return p
}

func (x DNS_ANSWER_FLAG_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ANSWER_FLAG_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[2].Descriptor()
}

func (DNS_ANSWER_FLAG_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[2]
}

func (x DNS_ANSWER_FLAG_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ANSWER_FLAG_IDS.Descriptor instead.
func (DNS_ANSWER_FLAG_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{2}
}

type MODULE_ACTIVITY_STATUS_ID int32

const (
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_UNKNOWN MODULE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_FAILURE MODULE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_OTHER   MODULE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_SUCCESS MODULE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_STATUS_ID.
var (
	MODULE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_STATUS_ID_FAILURE",
		2: "MODULE_ACTIVITY_STATUS_ID_OTHER",
		3: "MODULE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	MODULE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"MODULE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"MODULE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"MODULE_ACTIVITY_STATUS_ID_OTHER":   2,
		"MODULE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x MODULE_ACTIVITY_STATUS_ID) Enum() *MODULE_ACTIVITY_STATUS_ID {
	p := new(MODULE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[3].Descriptor()
}

func (MODULE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[3]
}

func (x MODULE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_STATUS_ID.Descriptor instead.
func (MODULE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{3}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN       WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL      WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL         WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH          WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW           WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM        WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER         WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL",
		3: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH",
		4: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW",
		6: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW":           5,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[4].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[4]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{4}
}

type ACCOUNT_CHANGE_ACTIVITY_ID int32

const (
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN ACCOUNT_CHANGE_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_ACTIVITY_ID_ACCOUNT_CHANGE_ACTIVITY_ID_OTHER   ACCOUNT_CHANGE_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_ACTIVITY_ID.
var (
	ACCOUNT_CHANGE_ACTIVITY_ID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN",
		1: "ACCOUNT_CHANGE_ACTIVITY_ID_OTHER",
	}
	ACCOUNT_CHANGE_ACTIVITY_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_ACTIVITY_ID_UNKNOWN": 0,
		"ACCOUNT_CHANGE_ACTIVITY_ID_OTHER":   1,
	}
)

func (x ACCOUNT_CHANGE_ACTIVITY_ID) Enum() *ACCOUNT_CHANGE_ACTIVITY_ID {
	p := new(ACCOUNT_CHANGE_ACTIVITY_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[5].Descriptor()
}

func (ACCOUNT_CHANGE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[5]
}

func (x ACCOUNT_CHANGE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_ACTIVITY_ID.Descriptor instead.
func (ACCOUNT_CHANGE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{5}
}

type EMAIL_FILE_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN       EMAIL_FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED EMAIL_FILE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	EMAIL_FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"EMAIL_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_FILE_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[6].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[6]
}

func (x EMAIL_FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{6}
}

type NETWORK_ACTIVITY_STATUS_ID int32

const (
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_UNKNOWN NETWORK_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_FAILURE NETWORK_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_OTHER   NETWORK_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_STATUS_ID_NETWORK_ACTIVITY_STATUS_ID_SUCCESS NETWORK_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_STATUS_ID.
var (
	NETWORK_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "NETWORK_ACTIVITY_STATUS_ID_FAILURE",
		2: "NETWORK_ACTIVITY_STATUS_ID_OTHER",
		3: "NETWORK_ACTIVITY_STATUS_ID_SUCCESS",
	}
	NETWORK_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_STATUS_ID_FAILURE": 1,
		"NETWORK_ACTIVITY_STATUS_ID_OTHER":   2,
		"NETWORK_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x NETWORK_ACTIVITY_STATUS_ID) Enum() *NETWORK_ACTIVITY_STATUS_ID {
	p := new(NETWORK_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[7].Descriptor()
}

func (NETWORK_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[7]
}

func (x NETWORK_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_STATUS_ID.Descriptor instead.
func (NETWORK_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{7}
}

type REGISTRY_KEY_ACTIVITY_CLASS_UID int32

const (
	REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN    REGISTRY_KEY_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY_CLASS_UID_BASE_EVENT REGISTRY_KEY_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_CLASS_UID.
var (
	REGISTRY_KEY_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	REGISTRY_KEY_ACTIVITY_CLASS_UID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"REGISTRY_KEY_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) Enum() *REGISTRY_KEY_ACTIVITY_CLASS_UID {
	p := new(REGISTRY_KEY_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[8].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[8]
}

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_CLASS_UID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{8}
}

type KERNEL_EXTENSION_SEVERITY_ID int32

const (
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN       KERNEL_EXTENSION_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_CRITICAL      KERNEL_EXTENSION_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_FATAL         KERNEL_EXTENSION_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_HIGH          KERNEL_EXTENSION_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL KERNEL_EXTENSION_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_LOW           KERNEL_EXTENSION_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_MEDIUM        KERNEL_EXTENSION_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_OTHER         KERNEL_EXTENSION_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_SEVERITY_ID.
var (
	KERNEL_EXTENSION_SEVERITY_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_SEVERITY_ID_CRITICAL",
		2: "KERNEL_EXTENSION_SEVERITY_ID_FATAL",
		3: "KERNEL_EXTENSION_SEVERITY_ID_HIGH",
		4: "KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL",
		5: "KERNEL_EXTENSION_SEVERITY_ID_LOW",
		6: "KERNEL_EXTENSION_SEVERITY_ID_MEDIUM",
		7: "KERNEL_EXTENSION_SEVERITY_ID_OTHER",
	}
	KERNEL_EXTENSION_SEVERITY_ID_value = map[string]int32{
		"KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN":       0,
		"KERNEL_EXTENSION_SEVERITY_ID_CRITICAL":      1,
		"KERNEL_EXTENSION_SEVERITY_ID_FATAL":         2,
		"KERNEL_EXTENSION_SEVERITY_ID_HIGH":          3,
		"KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL": 4,
		"KERNEL_EXTENSION_SEVERITY_ID_LOW":           5,
		"KERNEL_EXTENSION_SEVERITY_ID_MEDIUM":        6,
		"KERNEL_EXTENSION_SEVERITY_ID_OTHER":         7,
	}
)

func (x KERNEL_EXTENSION_SEVERITY_ID) Enum() *KERNEL_EXTENSION_SEVERITY_ID {
	p := new(KERNEL_EXTENSION_SEVERITY_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[9].Descriptor()
}

func (KERNEL_EXTENSION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[9]
}

func (x KERNEL_EXTENSION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_SEVERITY_ID.Descriptor instead.
func (KERNEL_EXTENSION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{9}
}

type PROCESS_ACTIVITY_CATEGORY_UID int32

const (
	PROCESS_ACTIVITY_CATEGORY_UID_PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN       PROCESS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_ACTIVITY_CATEGORY_UID_PROCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED PROCESS_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_CATEGORY_UID.
var (
	PROCESS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "PROCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	PROCESS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"PROCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x PROCESS_ACTIVITY_CATEGORY_UID) Enum() *PROCESS_ACTIVITY_CATEGORY_UID {
	p := new(PROCESS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[10].Descriptor()
}

func (PROCESS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[10]
}

func (x PROCESS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (PROCESS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{10}
}

type SYSTEM_STATUS_ID int32

const (
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_UNKNOWN SYSTEM_STATUS_ID = 0 // Type: OCSF_VALUE;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_FAILURE SYSTEM_STATUS_ID = 1 // Type: OCSF_VALUE;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_OTHER   SYSTEM_STATUS_ID = 2 // Type: OCSF_VALUE;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_SUCCESS SYSTEM_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_STATUS_ID.
var (
	SYSTEM_STATUS_ID_name = map[int32]string{
		0: "SYSTEM_STATUS_ID_UNKNOWN",
		1: "SYSTEM_STATUS_ID_FAILURE",
		2: "SYSTEM_STATUS_ID_OTHER",
		3: "SYSTEM_STATUS_ID_SUCCESS",
	}
	SYSTEM_STATUS_ID_value = map[string]int32{
		"SYSTEM_STATUS_ID_UNKNOWN": 0,
		"SYSTEM_STATUS_ID_FAILURE": 1,
		"SYSTEM_STATUS_ID_OTHER":   2,
		"SYSTEM_STATUS_ID_SUCCESS": 3,
	}
)

func (x SYSTEM_STATUS_ID) Enum() *SYSTEM_STATUS_ID {
	p := new(SYSTEM_STATUS_ID)
	*p = x
	return p
}

func (x SYSTEM_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[11].Descriptor()
}

func (SYSTEM_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[11]
}

func (x SYSTEM_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_STATUS_ID.Descriptor instead.
func (SYSTEM_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{11}
}

type APPLICATION_SEVERITY_ID int32

const (
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_UNKNOWN       APPLICATION_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_CRITICAL      APPLICATION_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_FATAL         APPLICATION_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_HIGH          APPLICATION_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_INFORMATIONAL APPLICATION_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_LOW           APPLICATION_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_MEDIUM        APPLICATION_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_OTHER         APPLICATION_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_SEVERITY_ID.
var (
	APPLICATION_SEVERITY_ID_name = map[int32]string{
		0: "APPLICATION_SEVERITY_ID_UNKNOWN",
		1: "APPLICATION_SEVERITY_ID_CRITICAL",
		2: "APPLICATION_SEVERITY_ID_FATAL",
		3: "APPLICATION_SEVERITY_ID_HIGH",
		4: "APPLICATION_SEVERITY_ID_INFORMATIONAL",
		5: "APPLICATION_SEVERITY_ID_LOW",
		6: "APPLICATION_SEVERITY_ID_MEDIUM",
		7: "APPLICATION_SEVERITY_ID_OTHER",
	}
	APPLICATION_SEVERITY_ID_value = map[string]int32{
		"APPLICATION_SEVERITY_ID_UNKNOWN":       0,
		"APPLICATION_SEVERITY_ID_CRITICAL":      1,
		"APPLICATION_SEVERITY_ID_FATAL":         2,
		"APPLICATION_SEVERITY_ID_HIGH":          3,
		"APPLICATION_SEVERITY_ID_INFORMATIONAL": 4,
		"APPLICATION_SEVERITY_ID_LOW":           5,
		"APPLICATION_SEVERITY_ID_MEDIUM":        6,
		"APPLICATION_SEVERITY_ID_OTHER":         7,
	}
)

func (x APPLICATION_SEVERITY_ID) Enum() *APPLICATION_SEVERITY_ID {
	p := new(APPLICATION_SEVERITY_ID)
	*p = x
	return p
}

func (x APPLICATION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[12].Descriptor()
}

func (APPLICATION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[12]
}

func (x APPLICATION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_SEVERITY_ID.Descriptor instead.
func (APPLICATION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{12}
}

type APPLICATION_LIFECYCLE_CLASS_UID int32

const (
	APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE_CLASS_UID_UNKNOWN    APPLICATION_LIFECYCLE_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE_CLASS_UID_BASE_EVENT APPLICATION_LIFECYCLE_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_CLASS_UID.
var (
	APPLICATION_LIFECYCLE_CLASS_UID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_CLASS_UID_UNKNOWN",
		1: "APPLICATION_LIFECYCLE_CLASS_UID_BASE_EVENT",
	}
	APPLICATION_LIFECYCLE_CLASS_UID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_CLASS_UID_UNKNOWN":    0,
		"APPLICATION_LIFECYCLE_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x APPLICATION_LIFECYCLE_CLASS_UID) Enum() *APPLICATION_LIFECYCLE_CLASS_UID {
	p := new(APPLICATION_LIFECYCLE_CLASS_UID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[13].Descriptor()
}

func (APPLICATION_LIFECYCLE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[13]
}

func (x APPLICATION_LIFECYCLE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_CLASS_UID.Descriptor instead.
func (APPLICATION_LIFECYCLE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{13}
}

type USER_ACCESS_CATEGORY_UID int32

const (
	USER_ACCESS_CATEGORY_UID_USER_ACCESS_CATEGORY_UID_UNKNOWN       USER_ACCESS_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	USER_ACCESS_CATEGORY_UID_USER_ACCESS_CATEGORY_UID_UNCATEGORIZED USER_ACCESS_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_CATEGORY_UID.
var (
	USER_ACCESS_CATEGORY_UID_name = map[int32]string{
		0: "USER_ACCESS_CATEGORY_UID_UNKNOWN",
		1: "USER_ACCESS_CATEGORY_UID_UNCATEGORIZED",
	}
	USER_ACCESS_CATEGORY_UID_value = map[string]int32{
		"USER_ACCESS_CATEGORY_UID_UNKNOWN":       0,
		"USER_ACCESS_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x USER_ACCESS_CATEGORY_UID) Enum() *USER_ACCESS_CATEGORY_UID {
	p := new(USER_ACCESS_CATEGORY_UID)
	*p = x
	return p
}

func (x USER_ACCESS_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[14].Descriptor()
}

func (USER_ACCESS_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[14]
}

func (x USER_ACCESS_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_CATEGORY_UID.Descriptor instead.
func (USER_ACCESS_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{14}
}

type EMAIL_FILE_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_FILE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_FILE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_FILE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_FILE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_FILE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW           EMAIL_FILE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_FILE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_FILE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW",
		6: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"EMAIL_FILE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_FILE_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[15].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[15]
}

func (x EMAIL_FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{15}
}

type DNS_QUERY_OPCODE_ID int32

const (
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_UNKNOWN       DNS_QUERY_OPCODE_ID = 0 // Type: NON_OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_DSO_MESSAGE   DNS_QUERY_OPCODE_ID = 1 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_INVERSE_QUERY DNS_QUERY_OPCODE_ID = 2 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_NOTIFY        DNS_QUERY_OPCODE_ID = 3 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_QUERY         DNS_QUERY_OPCODE_ID = 4 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_RESERVED      DNS_QUERY_OPCODE_ID = 5 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_STATUS        DNS_QUERY_OPCODE_ID = 6 // Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_UPDATE        DNS_QUERY_OPCODE_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_QUERY_OPCODE_ID.
var (
	DNS_QUERY_OPCODE_ID_name = map[int32]string{
		0: "DNS_QUERY_OPCODE_ID_UNKNOWN",
		1: "DNS_QUERY_OPCODE_ID_DSO_MESSAGE",
		2: "DNS_QUERY_OPCODE_ID_INVERSE_QUERY",
		3: "DNS_QUERY_OPCODE_ID_NOTIFY",
		4: "DNS_QUERY_OPCODE_ID_QUERY",
		5: "DNS_QUERY_OPCODE_ID_RESERVED",
		6: "DNS_QUERY_OPCODE_ID_STATUS",
		7: "DNS_QUERY_OPCODE_ID_UPDATE",
	}
	DNS_QUERY_OPCODE_ID_value = map[string]int32{
		"DNS_QUERY_OPCODE_ID_UNKNOWN":       0,
		"DNS_QUERY_OPCODE_ID_DSO_MESSAGE":   1,
		"DNS_QUERY_OPCODE_ID_INVERSE_QUERY": 2,
		"DNS_QUERY_OPCODE_ID_NOTIFY":        3,
		"DNS_QUERY_OPCODE_ID_QUERY":         4,
		"DNS_QUERY_OPCODE_ID_RESERVED":      5,
		"DNS_QUERY_OPCODE_ID_STATUS":        6,
		"DNS_QUERY_OPCODE_ID_UPDATE":        7,
	}
)

func (x DNS_QUERY_OPCODE_ID) Enum() *DNS_QUERY_OPCODE_ID {
	p := new(DNS_QUERY_OPCODE_ID)
	*p = x
	return p
}

func (x DNS_QUERY_OPCODE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_QUERY_OPCODE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[16].Descriptor()
}

func (DNS_QUERY_OPCODE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[16]
}

func (x DNS_QUERY_OPCODE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_QUERY_OPCODE_ID.Descriptor instead.
func (DNS_QUERY_OPCODE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{16}
}

type DNS_ACTIVITY_STATUS_ID int32

const (
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_UNKNOWN DNS_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_FAILURE DNS_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_OTHER   DNS_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	DNS_ACTIVITY_STATUS_ID_DNS_ACTIVITY_STATUS_ID_SUCCESS DNS_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_STATUS_ID.
var (
	DNS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "DNS_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "DNS_ACTIVITY_STATUS_ID_FAILURE",
		2: "DNS_ACTIVITY_STATUS_ID_OTHER",
		3: "DNS_ACTIVITY_STATUS_ID_SUCCESS",
	}
	DNS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"DNS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"DNS_ACTIVITY_STATUS_ID_FAILURE": 1,
		"DNS_ACTIVITY_STATUS_ID_OTHER":   2,
		"DNS_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x DNS_ACTIVITY_STATUS_ID) Enum() *DNS_ACTIVITY_STATUS_ID {
	p := new(DNS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[17].Descriptor()
}

func (DNS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[17]
}

func (x DNS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_STATUS_ID.Descriptor instead.
func (DNS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{17}
}

type API_ACTIVITY_SEVERITY_ID int32

const (
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_UNKNOWN       API_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_CRITICAL      API_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_FATAL         API_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_HIGH          API_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_INFORMATIONAL API_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_LOW           API_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_MEDIUM        API_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_OTHER         API_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_SEVERITY_ID.
var (
	API_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "API_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "API_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "API_ACTIVITY_SEVERITY_ID_FATAL",
		3: "API_ACTIVITY_SEVERITY_ID_HIGH",
		4: "API_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "API_ACTIVITY_SEVERITY_ID_LOW",
		6: "API_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "API_ACTIVITY_SEVERITY_ID_OTHER",
	}
	API_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"API_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"API_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"API_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"API_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"API_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"API_ACTIVITY_SEVERITY_ID_LOW":           5,
		"API_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"API_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x API_ACTIVITY_SEVERITY_ID) Enum() *API_ACTIVITY_SEVERITY_ID {
	p := new(API_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[18].Descriptor()
}

func (API_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[18]
}

func (x API_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (API_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{18}
}

type TLS_EXTENSION_TYPE_ID int32

const (
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_UNKNOWN                                TLS_EXTENSION_TYPE_ID = 0  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_OTHER                                  TLS_EXTENSION_TYPE_ID = 1  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION TLS_EXTENSION_TYPE_ID = 2  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES                TLS_EXTENSION_TYPE_ID = 3  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE                TLS_EXTENSION_TYPE_ID = 4  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_COOKIE                                 TLS_EXTENSION_TYPE_ID = 5  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_EARLY_DATA                             TLS_EXTENSION_TYPE_ID = 6  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_HEARTBEAT                              TLS_EXTENSION_TYPE_ID = 7  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_KEY_SHARE                              TLS_EXTENSION_TYPE_ID = 8  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH                TLS_EXTENSION_TYPE_ID = 9  // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_OID_FILTERS                            TLS_EXTENSION_TYPE_ID = 10 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PADDING                                TLS_EXTENSION_TYPE_ID = 11 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH                    TLS_EXTENSION_TYPE_ID = 12 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY                         TLS_EXTENSION_TYPE_ID = 13 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES                 TLS_EXTENSION_TYPE_ID = 14 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE                TLS_EXTENSION_TYPE_ID = 15 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS                   TLS_EXTENSION_TYPE_ID = 16 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT              TLS_EXTENSION_TYPE_ID = 17 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP           TLS_EXTENSION_TYPE_ID = 18 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_STATUS_REQUEST                         TLS_EXTENSION_TYPE_ID = 19 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS                       TLS_EXTENSION_TYPE_ID = 20 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS                     TLS_EXTENSION_TYPE_ID = 21 // Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_USE_SRTP                               TLS_EXTENSION_TYPE_ID = 22 // Type: OCSF_VALUE;
)

// Enum value maps for TLS_EXTENSION_TYPE_ID.
var (
	TLS_EXTENSION_TYPE_ID_name = map[int32]string{
		0:  "TLS_EXTENSION_TYPE_ID_UNKNOWN",
		1:  "TLS_EXTENSION_TYPE_ID_OTHER",
		2:  "TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION",
		3:  "TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES",
		4:  "TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE",
		5:  "TLS_EXTENSION_TYPE_ID_COOKIE",
		6:  "TLS_EXTENSION_TYPE_ID_EARLY_DATA",
		7:  "TLS_EXTENSION_TYPE_ID_HEARTBEAT",
		8:  "TLS_EXTENSION_TYPE_ID_KEY_SHARE",
		9:  "TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH",
		10: "TLS_EXTENSION_TYPE_ID_OID_FILTERS",
		11: "TLS_EXTENSION_TYPE_ID_PADDING",
		12: "TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH",
		13: "TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY",
		14: "TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES",
		15: "TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE",
		16: "TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS",
		17: "TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT",
		18: "TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP",
		19: "TLS_EXTENSION_TYPE_ID_STATUS_REQUEST",
		20: "TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS",
		21: "TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS",
		22: "TLS_EXTENSION_TYPE_ID_USE_SRTP",
	}
	TLS_EXTENSION_TYPE_ID_value = map[string]int32{
		"TLS_EXTENSION_TYPE_ID_UNKNOWN":                                0,
		"TLS_EXTENSION_TYPE_ID_OTHER":                                  1,
		"TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION": 2,
		"TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES":                3,
		"TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE":                4,
		"TLS_EXTENSION_TYPE_ID_COOKIE":                                 5,
		"TLS_EXTENSION_TYPE_ID_EARLY_DATA":                             6,
		"TLS_EXTENSION_TYPE_ID_HEARTBEAT":                              7,
		"TLS_EXTENSION_TYPE_ID_KEY_SHARE":                              8,
		"TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH":                9,
		"TLS_EXTENSION_TYPE_ID_OID_FILTERS":                            10,
		"TLS_EXTENSION_TYPE_ID_PADDING":                                11,
		"TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH":                    12,
		"TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY":                         13,
		"TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES":                 14,
		"TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE":                15,
		"TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS":                   16,
		"TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT":              17,
		"TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP":           18,
		"TLS_EXTENSION_TYPE_ID_STATUS_REQUEST":                         19,
		"TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS":                       20,
		"TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS":                     21,
		"TLS_EXTENSION_TYPE_ID_USE_SRTP":                               22,
	}
)

func (x TLS_EXTENSION_TYPE_ID) Enum() *TLS_EXTENSION_TYPE_ID {
	p := new(TLS_EXTENSION_TYPE_ID)
	*p = x
	return p
}

func (x TLS_EXTENSION_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLS_EXTENSION_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[19].Descriptor()
}

func (TLS_EXTENSION_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[19]
}

func (x TLS_EXTENSION_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLS_EXTENSION_TYPE_ID.Descriptor instead.
func (TLS_EXTENSION_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{19}
}

type EMAIL_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DISPOSITION_ID_EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "EMAIL_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "EMAIL_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	EMAIL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"EMAIL_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"EMAIL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"EMAIL_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"EMAIL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"EMAIL_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"EMAIL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"EMAIL_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"EMAIL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"EMAIL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"EMAIL_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"EMAIL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x EMAIL_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[20].Descriptor()
}

func (EMAIL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[20]
}

func (x EMAIL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{20}
}

type SMB_ACTIVITY_SHARE_TYPE_ID int32

const (
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN SMB_ACTIVITY_SHARE_TYPE_ID = 0 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_FILE    SMB_ACTIVITY_SHARE_TYPE_ID = 1 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_OTHER   SMB_ACTIVITY_SHARE_TYPE_ID = 2 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_PIPE    SMB_ACTIVITY_SHARE_TYPE_ID = 3 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SHARE_TYPE_ID_SMB_ACTIVITY_SHARE_TYPE_ID_PRINT   SMB_ACTIVITY_SHARE_TYPE_ID = 4 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_SHARE_TYPE_ID.
var (
	SMB_ACTIVITY_SHARE_TYPE_ID_name = map[int32]string{
		0: "SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN",
		1: "SMB_ACTIVITY_SHARE_TYPE_ID_FILE",
		2: "SMB_ACTIVITY_SHARE_TYPE_ID_OTHER",
		3: "SMB_ACTIVITY_SHARE_TYPE_ID_PIPE",
		4: "SMB_ACTIVITY_SHARE_TYPE_ID_PRINT",
	}
	SMB_ACTIVITY_SHARE_TYPE_ID_value = map[string]int32{
		"SMB_ACTIVITY_SHARE_TYPE_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_SHARE_TYPE_ID_FILE":    1,
		"SMB_ACTIVITY_SHARE_TYPE_ID_OTHER":   2,
		"SMB_ACTIVITY_SHARE_TYPE_ID_PIPE":    3,
		"SMB_ACTIVITY_SHARE_TYPE_ID_PRINT":   4,
	}
)

func (x SMB_ACTIVITY_SHARE_TYPE_ID) Enum() *SMB_ACTIVITY_SHARE_TYPE_ID {
	p := new(SMB_ACTIVITY_SHARE_TYPE_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_SHARE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_SHARE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[21].Descriptor()
}

func (SMB_ACTIVITY_SHARE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[21]
}

func (x SMB_ACTIVITY_SHARE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_SHARE_TYPE_ID.Descriptor instead.
func (SMB_ACTIVITY_SHARE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{21}
}

type PROCESS_ACTIVITY_INJECTION_TYPE_ID int32

const (
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN       PROCESS_ACTIVITY_INJECTION_TYPE_ID = 0 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY  PROCESS_ACTIVITY_INJECTION_TYPE_ID = 1 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER         PROCESS_ACTIVITY_INJECTION_TYPE_ID = 2 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD PROCESS_ACTIVITY_INJECTION_TYPE_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_INJECTION_TYPE_ID.
var (
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY",
		2: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER",
		3: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD",
	}
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN":       0,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY":  1,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER":         2,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD": 3,
	}
)

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) Enum() *PROCESS_ACTIVITY_INJECTION_TYPE_ID {
	p := new(PROCESS_ACTIVITY_INJECTION_TYPE_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[22].Descriptor()
}

func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[22]
}

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_INJECTION_TYPE_ID.Descriptor instead.
func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{22}
}

type MEMORY_ACTIVITY_CATEGORY_UID int32

const (
	MEMORY_ACTIVITY_CATEGORY_UID_MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN       MEMORY_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	MEMORY_ACTIVITY_CATEGORY_UID_MEMORY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED MEMORY_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_CATEGORY_UID.
var (
	MEMORY_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "MEMORY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	MEMORY_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"MEMORY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x MEMORY_ACTIVITY_CATEGORY_UID) Enum() *MEMORY_ACTIVITY_CATEGORY_UID {
	p := new(MEMORY_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[23].Descriptor()
}

func (MEMORY_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[23]
}

func (x MEMORY_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (MEMORY_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{23}
}

type WEB_RESOURCES_ACTIVITY_CLASS_UID int32

const (
	WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY_CLASS_UID_UNKNOWN    WEB_RESOURCES_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY_CLASS_UID_BASE_EVENT WEB_RESOURCES_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_CLASS_UID.
var (
	WEB_RESOURCES_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "WEB_RESOURCES_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	WEB_RESOURCES_ACTIVITY_CLASS_UID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"WEB_RESOURCES_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) Enum() *WEB_RESOURCES_ACTIVITY_CLASS_UID {
	p := new(WEB_RESOURCES_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[24].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[24]
}

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_CLASS_UID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{24}
}

type KILL_CHAIN_PHASE_ID int32

const (
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_UNKNOWN               KILL_CHAIN_PHASE_ID = 0 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_ACTIONS_ON_OBJECTIVES KILL_CHAIN_PHASE_ID = 1 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_COMMAND_CONTROL       KILL_CHAIN_PHASE_ID = 2 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_DELIVERY              KILL_CHAIN_PHASE_ID = 3 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_EXPLOITATION          KILL_CHAIN_PHASE_ID = 4 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_INSTALLATION          KILL_CHAIN_PHASE_ID = 5 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_OTHER                 KILL_CHAIN_PHASE_ID = 6 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_RECONNAISSANCE        KILL_CHAIN_PHASE_ID = 7 // Type: OCSF_VALUE;
	KILL_CHAIN_PHASE_ID_KILL_CHAIN_PHASE_ID_WEAPONIZATION         KILL_CHAIN_PHASE_ID = 8 // Type: OCSF_VALUE;
)

// Enum value maps for KILL_CHAIN_PHASE_ID.
var (
	KILL_CHAIN_PHASE_ID_name = map[int32]string{
		0: "KILL_CHAIN_PHASE_ID_UNKNOWN",
		1: "KILL_CHAIN_PHASE_ID_ACTIONS_ON_OBJECTIVES",
		2: "KILL_CHAIN_PHASE_ID_COMMAND_CONTROL",
		3: "KILL_CHAIN_PHASE_ID_DELIVERY",
		4: "KILL_CHAIN_PHASE_ID_EXPLOITATION",
		5: "KILL_CHAIN_PHASE_ID_INSTALLATION",
		6: "KILL_CHAIN_PHASE_ID_OTHER",
		7: "KILL_CHAIN_PHASE_ID_RECONNAISSANCE",
		8: "KILL_CHAIN_PHASE_ID_WEAPONIZATION",
	}
	KILL_CHAIN_PHASE_ID_value = map[string]int32{
		"KILL_CHAIN_PHASE_ID_UNKNOWN":               0,
		"KILL_CHAIN_PHASE_ID_ACTIONS_ON_OBJECTIVES": 1,
		"KILL_CHAIN_PHASE_ID_COMMAND_CONTROL":       2,
		"KILL_CHAIN_PHASE_ID_DELIVERY":              3,
		"KILL_CHAIN_PHASE_ID_EXPLOITATION":          4,
		"KILL_CHAIN_PHASE_ID_INSTALLATION":          5,
		"KILL_CHAIN_PHASE_ID_OTHER":                 6,
		"KILL_CHAIN_PHASE_ID_RECONNAISSANCE":        7,
		"KILL_CHAIN_PHASE_ID_WEAPONIZATION":         8,
	}
)

func (x KILL_CHAIN_PHASE_ID) Enum() *KILL_CHAIN_PHASE_ID {
	p := new(KILL_CHAIN_PHASE_ID)
	*p = x
	return p
}

func (x KILL_CHAIN_PHASE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KILL_CHAIN_PHASE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[25].Descriptor()
}

func (KILL_CHAIN_PHASE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[25]
}

func (x KILL_CHAIN_PHASE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KILL_CHAIN_PHASE_ID.Descriptor instead.
func (KILL_CHAIN_PHASE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{25}
}

type AUTHORIZE_SESSION_STATUS_ID int32

const (
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_UNKNOWN AUTHORIZE_SESSION_STATUS_ID = 0 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_FAILURE AUTHORIZE_SESSION_STATUS_ID = 1 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_OTHER   AUTHORIZE_SESSION_STATUS_ID = 2 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_STATUS_ID_AUTHORIZE_SESSION_STATUS_ID_SUCCESS AUTHORIZE_SESSION_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_STATUS_ID.
var (
	AUTHORIZE_SESSION_STATUS_ID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_STATUS_ID_UNKNOWN",
		1: "AUTHORIZE_SESSION_STATUS_ID_FAILURE",
		2: "AUTHORIZE_SESSION_STATUS_ID_OTHER",
		3: "AUTHORIZE_SESSION_STATUS_ID_SUCCESS",
	}
	AUTHORIZE_SESSION_STATUS_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_STATUS_ID_UNKNOWN": 0,
		"AUTHORIZE_SESSION_STATUS_ID_FAILURE": 1,
		"AUTHORIZE_SESSION_STATUS_ID_OTHER":   2,
		"AUTHORIZE_SESSION_STATUS_ID_SUCCESS": 3,
	}
)

func (x AUTHORIZE_SESSION_STATUS_ID) Enum() *AUTHORIZE_SESSION_STATUS_ID {
	p := new(AUTHORIZE_SESSION_STATUS_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[26].Descriptor()
}

func (AUTHORIZE_SESSION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[26]
}

func (x AUTHORIZE_SESSION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_STATUS_ID.Descriptor instead.
func (AUTHORIZE_SESSION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{26}
}

type REGISTRY_VALUE_ACTIVITY_SEVERITY_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN       REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL      REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL         REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH          REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW           REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM        REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER         REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_SEVERITY_ID.
var (
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW",
		6: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Enum() *REGISTRY_VALUE_ACTIVITY_SEVERITY_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[27].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[27]
}

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{27}
}

type MALWARE_CLASSIFICATION_IDS int32

const (
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_UNKNOWN                 MALWARE_CLASSIFICATION_IDS = 0  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ADWARE                  MALWARE_CLASSIFICATION_IDS = 1  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BACKDOOR                MALWARE_CLASSIFICATION_IDS = 2  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BOOTKIT                 MALWARE_CLASSIFICATION_IDS = 3  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BOT                     MALWARE_CLASSIFICATION_IDS = 4  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DDOS                    MALWARE_CLASSIFICATION_IDS = 5  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DOWNLOADER              MALWARE_CLASSIFICATION_IDS = 6  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DROPPER                 MALWARE_CLASSIFICATION_IDS = 7  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT             MALWARE_CLASSIFICATION_IDS = 8  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_KEYLOGGER               MALWARE_CLASSIFICATION_IDS = 9  // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_OTHER                   MALWARE_CLASSIFICATION_IDS = 10 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_RANSOMWARE              MALWARE_CLASSIFICATION_IDS = 11 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN    MALWARE_CLASSIFICATION_IDS = 12 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION   MALWARE_CLASSIFICATION_IDS = 13 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE MALWARE_CLASSIFICATION_IDS = 14 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ROOTKIT                 MALWARE_CLASSIFICATION_IDS = 15 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE          MALWARE_CLASSIFICATION_IDS = 16 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_SPYWARE                 MALWARE_CLASSIFICATION_IDS = 17 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_TROJAN                  MALWARE_CLASSIFICATION_IDS = 18 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_VIRUS                   MALWARE_CLASSIFICATION_IDS = 19 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WEBSHELL                MALWARE_CLASSIFICATION_IDS = 20 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WIPER                   MALWARE_CLASSIFICATION_IDS = 21 // Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WORM                    MALWARE_CLASSIFICATION_IDS = 22 // Type: OCSF_VALUE;
)

// Enum value maps for MALWARE_CLASSIFICATION_IDS.
var (
	MALWARE_CLASSIFICATION_IDS_name = map[int32]string{
		0:  "MALWARE_CLASSIFICATION_IDS_UNKNOWN",
		1:  "MALWARE_CLASSIFICATION_IDS_ADWARE",
		2:  "MALWARE_CLASSIFICATION_IDS_BACKDOOR",
		3:  "MALWARE_CLASSIFICATION_IDS_BOOTKIT",
		4:  "MALWARE_CLASSIFICATION_IDS_BOT",
		5:  "MALWARE_CLASSIFICATION_IDS_DDOS",
		6:  "MALWARE_CLASSIFICATION_IDS_DOWNLOADER",
		7:  "MALWARE_CLASSIFICATION_IDS_DROPPER",
		8:  "MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT",
		9:  "MALWARE_CLASSIFICATION_IDS_KEYLOGGER",
		10: "MALWARE_CLASSIFICATION_IDS_OTHER",
		11: "MALWARE_CLASSIFICATION_IDS_RANSOMWARE",
		12: "MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN",
		13: "MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION",
		14: "MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE",
		15: "MALWARE_CLASSIFICATION_IDS_ROOTKIT",
		16: "MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE",
		17: "MALWARE_CLASSIFICATION_IDS_SPYWARE",
		18: "MALWARE_CLASSIFICATION_IDS_TROJAN",
		19: "MALWARE_CLASSIFICATION_IDS_VIRUS",
		20: "MALWARE_CLASSIFICATION_IDS_WEBSHELL",
		21: "MALWARE_CLASSIFICATION_IDS_WIPER",
		22: "MALWARE_CLASSIFICATION_IDS_WORM",
	}
	MALWARE_CLASSIFICATION_IDS_value = map[string]int32{
		"MALWARE_CLASSIFICATION_IDS_UNKNOWN":                 0,
		"MALWARE_CLASSIFICATION_IDS_ADWARE":                  1,
		"MALWARE_CLASSIFICATION_IDS_BACKDOOR":                2,
		"MALWARE_CLASSIFICATION_IDS_BOOTKIT":                 3,
		"MALWARE_CLASSIFICATION_IDS_BOT":                     4,
		"MALWARE_CLASSIFICATION_IDS_DDOS":                    5,
		"MALWARE_CLASSIFICATION_IDS_DOWNLOADER":              6,
		"MALWARE_CLASSIFICATION_IDS_DROPPER":                 7,
		"MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT":             8,
		"MALWARE_CLASSIFICATION_IDS_KEYLOGGER":               9,
		"MALWARE_CLASSIFICATION_IDS_OTHER":                   10,
		"MALWARE_CLASSIFICATION_IDS_RANSOMWARE":              11,
		"MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN":    12,
		"MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION":   13,
		"MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE": 14,
		"MALWARE_CLASSIFICATION_IDS_ROOTKIT":                 15,
		"MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE":          16,
		"MALWARE_CLASSIFICATION_IDS_SPYWARE":                 17,
		"MALWARE_CLASSIFICATION_IDS_TROJAN":                  18,
		"MALWARE_CLASSIFICATION_IDS_VIRUS":                   19,
		"MALWARE_CLASSIFICATION_IDS_WEBSHELL":                20,
		"MALWARE_CLASSIFICATION_IDS_WIPER":                   21,
		"MALWARE_CLASSIFICATION_IDS_WORM":                    22,
	}
)

func (x MALWARE_CLASSIFICATION_IDS) Enum() *MALWARE_CLASSIFICATION_IDS {
	p := new(MALWARE_CLASSIFICATION_IDS)
	*p = x
	return p
}

func (x MALWARE_CLASSIFICATION_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MALWARE_CLASSIFICATION_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[28].Descriptor()
}

func (MALWARE_CLASSIFICATION_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[28]
}

func (x MALWARE_CLASSIFICATION_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MALWARE_CLASSIFICATION_IDS.Descriptor instead.
func (MALWARE_CLASSIFICATION_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{28}
}

type IAM_ACTIVITY_ID int32

const (
	IAM_ACTIVITY_ID_IAM_ACTIVITY_ID_UNKNOWN IAM_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	IAM_ACTIVITY_ID_IAM_ACTIVITY_ID_OTHER   IAM_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for IAM_ACTIVITY_ID.
var (
	IAM_ACTIVITY_ID_name = map[int32]string{
		0: "IAM_ACTIVITY_ID_UNKNOWN",
		1: "IAM_ACTIVITY_ID_OTHER",
	}
	IAM_ACTIVITY_ID_value = map[string]int32{
		"IAM_ACTIVITY_ID_UNKNOWN": 0,
		"IAM_ACTIVITY_ID_OTHER":   1,
	}
)

func (x IAM_ACTIVITY_ID) Enum() *IAM_ACTIVITY_ID {
	p := new(IAM_ACTIVITY_ID)
	*p = x
	return p
}

func (x IAM_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[29].Descriptor()
}

func (IAM_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[29]
}

func (x IAM_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_ACTIVITY_ID.Descriptor instead.
func (IAM_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{29}
}

type AUTHENTICATION_AUTH_PROTOCOL_ID int32

const (
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN   AUTHENTICATION_AUTH_PROTOCOL_ID = 0  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP      AUTHENTICATION_AUTH_PROTOCOL_ID = 1  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST    AUTHENTICATION_AUTH_PROTOCOL_ID = 2  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_EAP       AUTHENTICATION_AUTH_PROTOCOL_ID = 3  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS  AUTHENTICATION_AUTH_PROTOCOL_ID = 4  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM      AUTHENTICATION_AUTH_PROTOCOL_ID = 5  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0 AUTHENTICATION_AUTH_PROTOCOL_ID = 6  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID   AUTHENTICATION_AUTH_PROTOCOL_ID = 7  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER     AUTHENTICATION_AUTH_PROTOCOL_ID = 8  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_PAP       AUTHENTICATION_AUTH_PROTOCOL_ID = 9  // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS    AUTHENTICATION_AUTH_PROTOCOL_ID = 10 // Type: OCSF_VALUE;
	AUTHENTICATION_AUTH_PROTOCOL_ID_AUTHENTICATION_AUTH_PROTOCOL_ID_SAML      AUTHENTICATION_AUTH_PROTOCOL_ID = 11 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_AUTH_PROTOCOL_ID.
var (
	AUTHENTICATION_AUTH_PROTOCOL_ID_name = map[int32]string{
		0:  "AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN",
		1:  "AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP",
		2:  "AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST",
		3:  "AUTHENTICATION_AUTH_PROTOCOL_ID_EAP",
		4:  "AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS",
		5:  "AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM",
		6:  "AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0",
		7:  "AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID",
		8:  "AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER",
		9:  "AUTHENTICATION_AUTH_PROTOCOL_ID_PAP",
		10: "AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS",
		11: "AUTHENTICATION_AUTH_PROTOCOL_ID_SAML",
	}
	AUTHENTICATION_AUTH_PROTOCOL_ID_value = map[string]int32{
		"AUTHENTICATION_AUTH_PROTOCOL_ID_UNKNOWN":   0,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_CHAP":      1,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_DIGEST":    2,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_EAP":       3,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_KERBEROS":  4,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_NTLM":      5,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OAUTH_2_0": 6,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OPEN_ID":   7,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_OTHER":     8,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_PAP":       9,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_RADIUS":    10,
		"AUTHENTICATION_AUTH_PROTOCOL_ID_SAML":      11,
	}
)

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) Enum() *AUTHENTICATION_AUTH_PROTOCOL_ID {
	p := new(AUTHENTICATION_AUTH_PROTOCOL_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_AUTH_PROTOCOL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[30].Descriptor()
}

func (AUTHENTICATION_AUTH_PROTOCOL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[30]
}

func (x AUTHENTICATION_AUTH_PROTOCOL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_AUTH_PROTOCOL_ID.Descriptor instead.
func (AUTHENTICATION_AUTH_PROTOCOL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{30}
}

type ACCOUNT_CHANGE_STATUS_ID int32

const (
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_UNKNOWN ACCOUNT_CHANGE_STATUS_ID = 0 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_FAILURE ACCOUNT_CHANGE_STATUS_ID = 1 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_OTHER   ACCOUNT_CHANGE_STATUS_ID = 2 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_STATUS_ID_ACCOUNT_CHANGE_STATUS_ID_SUCCESS ACCOUNT_CHANGE_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_STATUS_ID.
var (
	ACCOUNT_CHANGE_STATUS_ID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_STATUS_ID_UNKNOWN",
		1: "ACCOUNT_CHANGE_STATUS_ID_FAILURE",
		2: "ACCOUNT_CHANGE_STATUS_ID_OTHER",
		3: "ACCOUNT_CHANGE_STATUS_ID_SUCCESS",
	}
	ACCOUNT_CHANGE_STATUS_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_STATUS_ID_UNKNOWN": 0,
		"ACCOUNT_CHANGE_STATUS_ID_FAILURE": 1,
		"ACCOUNT_CHANGE_STATUS_ID_OTHER":   2,
		"ACCOUNT_CHANGE_STATUS_ID_SUCCESS": 3,
	}
)

func (x ACCOUNT_CHANGE_STATUS_ID) Enum() *ACCOUNT_CHANGE_STATUS_ID {
	p := new(ACCOUNT_CHANGE_STATUS_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[31].Descriptor()
}

func (ACCOUNT_CHANGE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[31]
}

func (x ACCOUNT_CHANGE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_STATUS_ID.Descriptor instead.
func (ACCOUNT_CHANGE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{31}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNKNOWN    WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_BASE_EVENT WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[32].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[32]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{32}
}

type FILE_ACTIVITY_STATUS_ID int32

const (
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_UNKNOWN FILE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_FAILURE FILE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_OTHER   FILE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_SUCCESS FILE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_STATUS_ID.
var (
	FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "FILE_ACTIVITY_STATUS_ID_FAILURE",
		2: "FILE_ACTIVITY_STATUS_ID_OTHER",
		3: "FILE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"FILE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"FILE_ACTIVITY_STATUS_ID_OTHER":   2,
		"FILE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x FILE_ACTIVITY_STATUS_ID) Enum() *FILE_ACTIVITY_STATUS_ID {
	p := new(FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[33].Descriptor()
}

func (FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[33]
}

func (x FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{33}
}

type REGISTRY_KEY_ACTIVITY_CATEGORY_UID int32

const (
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN       REGISTRY_KEY_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED REGISTRY_KEY_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_CATEGORY_UID.
var (
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Enum() *REGISTRY_KEY_ACTIVITY_CATEGORY_UID {
	p := new(REGISTRY_KEY_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[34].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[34]
}

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{34}
}

type PROCESS_ACTIVITY_STATUS_ID int32

const (
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_UNKNOWN PROCESS_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_FAILURE PROCESS_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_OTHER   PROCESS_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_SUCCESS PROCESS_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_STATUS_ID.
var (
	PROCESS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_STATUS_ID_FAILURE",
		2: "PROCESS_ACTIVITY_STATUS_ID_OTHER",
		3: "PROCESS_ACTIVITY_STATUS_ID_SUCCESS",
	}
	PROCESS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"PROCESS_ACTIVITY_STATUS_ID_FAILURE": 1,
		"PROCESS_ACTIVITY_STATUS_ID_OTHER":   2,
		"PROCESS_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x PROCESS_ACTIVITY_STATUS_ID) Enum() *PROCESS_ACTIVITY_STATUS_ID {
	p := new(PROCESS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[35].Descriptor()
}

func (PROCESS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[35]
}

func (x PROCESS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_STATUS_ID.Descriptor instead.
func (PROCESS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{35}
}

type FINDINGS_CATEGORY_UID int32

const (
	FINDINGS_CATEGORY_UID_FINDINGS_CATEGORY_UID_UNKNOWN       FINDINGS_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FINDINGS_CATEGORY_UID_FINDINGS_CATEGORY_UID_UNCATEGORIZED FINDINGS_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FINDINGS_CATEGORY_UID.
var (
	FINDINGS_CATEGORY_UID_name = map[int32]string{
		0: "FINDINGS_CATEGORY_UID_UNKNOWN",
		1: "FINDINGS_CATEGORY_UID_UNCATEGORIZED",
	}
	FINDINGS_CATEGORY_UID_value = map[string]int32{
		"FINDINGS_CATEGORY_UID_UNKNOWN":       0,
		"FINDINGS_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x FINDINGS_CATEGORY_UID) Enum() *FINDINGS_CATEGORY_UID {
	p := new(FINDINGS_CATEGORY_UID)
	*p = x
	return p
}

func (x FINDINGS_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[36].Descriptor()
}

func (FINDINGS_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[36]
}

func (x FINDINGS_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_CATEGORY_UID.Descriptor instead.
func (FINDINGS_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{36}
}

type NETWORK_ACTIVITY_ACTIVITY_ID int32

const (
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN NETWORK_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_ACTIVITY_ID_NETWORK_ACTIVITY_ACTIVITY_ID_OTHER   NETWORK_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_ACTIVITY_ID.
var (
	NETWORK_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "NETWORK_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NETWORK_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x NETWORK_ACTIVITY_ACTIVITY_ID) Enum() *NETWORK_ACTIVITY_ACTIVITY_ID {
	p := new(NETWORK_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[37].Descriptor()
}

func (NETWORK_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[37]
}

func (x NETWORK_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{37}
}

type KERNEL_ACTIVITY_DISPOSITION_ID int32

const (
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN             KERNEL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED             KERNEL_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED            KERNEL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED             KERNEL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED           KERNEL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       KERNEL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED             KERNEL_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DELETED             KERNEL_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED            KERNEL_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED             KERNEL_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED          KERNEL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED            KERNEL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED              KERNEL_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION           KERNEL_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_OTHER               KERNEL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED KERNEL_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED         KERNEL_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED            KERNEL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED              KERNEL_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         KERNEL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_DISPOSITION_ID.
var (
	KERNEL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "KERNEL_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "KERNEL_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	KERNEL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"KERNEL_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x KERNEL_ACTIVITY_DISPOSITION_ID) Enum() *KERNEL_ACTIVITY_DISPOSITION_ID {
	p := new(KERNEL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[38].Descriptor()
}

func (KERNEL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[38]
}

func (x KERNEL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (KERNEL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{38}
}

type REGISTRY_VALUE_ACTIVITY_CATEGORY_UID int32

const (
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN       REGISTRY_VALUE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED REGISTRY_VALUE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_CATEGORY_UID.
var (
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Enum() *REGISTRY_VALUE_ACTIVITY_CATEGORY_UID {
	p := new(REGISTRY_VALUE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[39].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[39]
}

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{39}
}

type RESOURCE_ACTIVITY_CATEGORY_UID int32

const (
	RESOURCE_ACTIVITY_CATEGORY_UID_RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN       RESOURCE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	RESOURCE_ACTIVITY_CATEGORY_UID_RESOURCE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED RESOURCE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_CATEGORY_UID.
var (
	RESOURCE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	RESOURCE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"RESOURCE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x RESOURCE_ACTIVITY_CATEGORY_UID) Enum() *RESOURCE_ACTIVITY_CATEGORY_UID {
	p := new(RESOURCE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[40].Descriptor()
}

func (RESOURCE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[40]
}

func (x RESOURCE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (RESOURCE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{40}
}

type RESOURCE_ACTIVITY_SEVERITY_ID int32

const (
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN       RESOURCE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL      RESOURCE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_FATAL         RESOURCE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_HIGH          RESOURCE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL RESOURCE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_LOW           RESOURCE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM        RESOURCE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_OTHER         RESOURCE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_SEVERITY_ID.
var (
	RESOURCE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "RESOURCE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "RESOURCE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "RESOURCE_ACTIVITY_SEVERITY_ID_LOW",
		6: "RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "RESOURCE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	RESOURCE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"RESOURCE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"RESOURCE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"RESOURCE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"RESOURCE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x RESOURCE_ACTIVITY_SEVERITY_ID) Enum() *RESOURCE_ACTIVITY_SEVERITY_ID {
	p := new(RESOURCE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[41].Descriptor()
}

func (RESOURCE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[41]
}

func (x RESOURCE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{41}
}

type APPLICATION_CLASS_UID int32

const (
	APPLICATION_CLASS_UID_APPLICATION_CLASS_UID_UNKNOWN    APPLICATION_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_CLASS_UID_APPLICATION_CLASS_UID_BASE_EVENT APPLICATION_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_CLASS_UID.
var (
	APPLICATION_CLASS_UID_name = map[int32]string{
		0: "APPLICATION_CLASS_UID_UNKNOWN",
		1: "APPLICATION_CLASS_UID_BASE_EVENT",
	}
	APPLICATION_CLASS_UID_value = map[string]int32{
		"APPLICATION_CLASS_UID_UNKNOWN":    0,
		"APPLICATION_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x APPLICATION_CLASS_UID) Enum() *APPLICATION_CLASS_UID {
	p := new(APPLICATION_CLASS_UID)
	*p = x
	return p
}

func (x APPLICATION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[42].Descriptor()
}

func (APPLICATION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[42]
}

func (x APPLICATION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_CLASS_UID.Descriptor instead.
func (APPLICATION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{42}
}

type APPLICATION_CATEGORY_UID int32

const (
	APPLICATION_CATEGORY_UID_APPLICATION_CATEGORY_UID_UNKNOWN       APPLICATION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_CATEGORY_UID_APPLICATION_CATEGORY_UID_UNCATEGORIZED APPLICATION_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_CATEGORY_UID.
var (
	APPLICATION_CATEGORY_UID_name = map[int32]string{
		0: "APPLICATION_CATEGORY_UID_UNKNOWN",
		1: "APPLICATION_CATEGORY_UID_UNCATEGORIZED",
	}
	APPLICATION_CATEGORY_UID_value = map[string]int32{
		"APPLICATION_CATEGORY_UID_UNKNOWN":       0,
		"APPLICATION_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x APPLICATION_CATEGORY_UID) Enum() *APPLICATION_CATEGORY_UID {
	p := new(APPLICATION_CATEGORY_UID)
	*p = x
	return p
}

func (x APPLICATION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[43].Descriptor()
}

func (APPLICATION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[43]
}

func (x APPLICATION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_CATEGORY_UID.Descriptor instead.
func (APPLICATION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{43}
}

type INVENTORY_INFO_CATEGORY_UID int32

const (
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_UNKNOWN       INVENTORY_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_UNCATEGORIZED INVENTORY_INFO_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_CATEGORY_UID.
var (
	INVENTORY_INFO_CATEGORY_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CATEGORY_UID_UNKNOWN",
		1: "INVENTORY_INFO_CATEGORY_UID_UNCATEGORIZED",
	}
	INVENTORY_INFO_CATEGORY_UID_value = map[string]int32{
		"INVENTORY_INFO_CATEGORY_UID_UNKNOWN":       0,
		"INVENTORY_INFO_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x INVENTORY_INFO_CATEGORY_UID) Enum() *INVENTORY_INFO_CATEGORY_UID {
	p := new(INVENTORY_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[44].Descriptor()
}

func (INVENTORY_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[44]
}

func (x INVENTORY_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CATEGORY_UID.Descriptor instead.
func (INVENTORY_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{44}
}

type FINDINGS_SEVERITY_ID int32

const (
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_UNKNOWN       FINDINGS_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_CRITICAL      FINDINGS_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_FATAL         FINDINGS_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_HIGH          FINDINGS_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_INFORMATIONAL FINDINGS_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_LOW           FINDINGS_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_MEDIUM        FINDINGS_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	FINDINGS_SEVERITY_ID_FINDINGS_SEVERITY_ID_OTHER         FINDINGS_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for FINDINGS_SEVERITY_ID.
var (
	FINDINGS_SEVERITY_ID_name = map[int32]string{
		0: "FINDINGS_SEVERITY_ID_UNKNOWN",
		1: "FINDINGS_SEVERITY_ID_CRITICAL",
		2: "FINDINGS_SEVERITY_ID_FATAL",
		3: "FINDINGS_SEVERITY_ID_HIGH",
		4: "FINDINGS_SEVERITY_ID_INFORMATIONAL",
		5: "FINDINGS_SEVERITY_ID_LOW",
		6: "FINDINGS_SEVERITY_ID_MEDIUM",
		7: "FINDINGS_SEVERITY_ID_OTHER",
	}
	FINDINGS_SEVERITY_ID_value = map[string]int32{
		"FINDINGS_SEVERITY_ID_UNKNOWN":       0,
		"FINDINGS_SEVERITY_ID_CRITICAL":      1,
		"FINDINGS_SEVERITY_ID_FATAL":         2,
		"FINDINGS_SEVERITY_ID_HIGH":          3,
		"FINDINGS_SEVERITY_ID_INFORMATIONAL": 4,
		"FINDINGS_SEVERITY_ID_LOW":           5,
		"FINDINGS_SEVERITY_ID_MEDIUM":        6,
		"FINDINGS_SEVERITY_ID_OTHER":         7,
	}
)

func (x FINDINGS_SEVERITY_ID) Enum() *FINDINGS_SEVERITY_ID {
	p := new(FINDINGS_SEVERITY_ID)
	*p = x
	return p
}

func (x FINDINGS_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[45].Descriptor()
}

func (FINDINGS_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[45]
}

func (x FINDINGS_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_SEVERITY_ID.Descriptor instead.
func (FINDINGS_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{45}
}

type RDP_ACTIVITY_STATUS_ID int32

const (
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_UNKNOWN RDP_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_FAILURE RDP_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_OTHER   RDP_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	RDP_ACTIVITY_STATUS_ID_RDP_ACTIVITY_STATUS_ID_SUCCESS RDP_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_STATUS_ID.
var (
	RDP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "RDP_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "RDP_ACTIVITY_STATUS_ID_FAILURE",
		2: "RDP_ACTIVITY_STATUS_ID_OTHER",
		3: "RDP_ACTIVITY_STATUS_ID_SUCCESS",
	}
	RDP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"RDP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"RDP_ACTIVITY_STATUS_ID_FAILURE": 1,
		"RDP_ACTIVITY_STATUS_ID_OTHER":   2,
		"RDP_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x RDP_ACTIVITY_STATUS_ID) Enum() *RDP_ACTIVITY_STATUS_ID {
	p := new(RDP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[46].Descriptor()
}

func (RDP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[46]
}

func (x RDP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_STATUS_ID.Descriptor instead.
func (RDP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{46}
}

type EMAIL_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_ACTIVITY_CATEGORY_UID_EMAIL_ACTIVITY_CATEGORY_UID_UNKNOWN       EMAIL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_ACTIVITY_CATEGORY_UID_EMAIL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED EMAIL_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "EMAIL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	EMAIL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"EMAIL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x EMAIL_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[47].Descriptor()
}

func (EMAIL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[47]
}

func (x EMAIL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{47}
}

type SMB_ACTIVITY_ACTIVITY_ID int32

const (
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN SMB_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	SMB_ACTIVITY_ACTIVITY_ID_SMB_ACTIVITY_ACTIVITY_ID_OTHER   SMB_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_ACTIVITY_ID.
var (
	SMB_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "SMB_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SMB_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SMB_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SMB_ACTIVITY_ACTIVITY_ID) Enum() *SMB_ACTIVITY_ACTIVITY_ID {
	p := new(SMB_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[48].Descriptor()
}

func (SMB_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[48]
}

func (x SMB_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SMB_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{48}
}

type FILE_ACTIVITY_DISPOSITION_ID int32

const (
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN             FILE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED             FILE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_APPROVED            FILE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED             FILE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED           FILE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       FILE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DELAYED             FILE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DELETED             FILE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DETECTED            FILE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DROPPED             FILE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED          FILE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED            FILE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_LOGGED              FILE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION           FILE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_OTHER               FILE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED FILE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED         FILE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_RESTORED            FILE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_TAGGED              FILE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         FILE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_DISPOSITION_ID.
var (
	FILE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "FILE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "FILE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "FILE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "FILE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "FILE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "FILE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "FILE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "FILE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "FILE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "FILE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "FILE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "FILE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "FILE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "FILE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	FILE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"FILE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"FILE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"FILE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"FILE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"FILE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"FILE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"FILE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"FILE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"FILE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"FILE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"FILE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"FILE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"FILE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"FILE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x FILE_ACTIVITY_DISPOSITION_ID) Enum() *FILE_ACTIVITY_DISPOSITION_ID {
	p := new(FILE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[49].Descriptor()
}

func (FILE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[49]
}

func (x FILE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (FILE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{49}
}

type RESOURCE_ACTIVITY_ACTIVITY_ID int32

const (
	RESOURCE_ACTIVITY_ACTIVITY_ID_RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN RESOURCE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_ACTIVITY_ID_RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER   RESOURCE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_ACTIVITY_ID.
var (
	RESOURCE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	RESOURCE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) Enum() *RESOURCE_ACTIVITY_ACTIVITY_ID {
	p := new(RESOURCE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[50].Descriptor()
}

func (RESOURCE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[50]
}

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{50}
}

type APPLICATION_ACTIVITY_ID int32

const (
	APPLICATION_ACTIVITY_ID_APPLICATION_ACTIVITY_ID_UNKNOWN APPLICATION_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_ACTIVITY_ID_APPLICATION_ACTIVITY_ID_OTHER   APPLICATION_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_ACTIVITY_ID.
var (
	APPLICATION_ACTIVITY_ID_name = map[int32]string{
		0: "APPLICATION_ACTIVITY_ID_UNKNOWN",
		1: "APPLICATION_ACTIVITY_ID_OTHER",
	}
	APPLICATION_ACTIVITY_ID_value = map[string]int32{
		"APPLICATION_ACTIVITY_ID_UNKNOWN": 0,
		"APPLICATION_ACTIVITY_ID_OTHER":   1,
	}
)

func (x APPLICATION_ACTIVITY_ID) Enum() *APPLICATION_ACTIVITY_ID {
	p := new(APPLICATION_ACTIVITY_ID)
	*p = x
	return p
}

func (x APPLICATION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[51].Descriptor()
}

func (APPLICATION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[51]
}

func (x APPLICATION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_ACTIVITY_ID.Descriptor instead.
func (APPLICATION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{51}
}

type EMAIL_ACTIVITY_CLASS_UID int32

const (
	EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY_CLASS_UID_UNKNOWN    EMAIL_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_ACTIVITY_CLASS_UID_EMAIL_ACTIVITY_CLASS_UID_BASE_EVENT EMAIL_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_CLASS_UID.
var (
	EMAIL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "EMAIL_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	EMAIL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"EMAIL_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x EMAIL_ACTIVITY_CLASS_UID) Enum() *EMAIL_ACTIVITY_CLASS_UID {
	p := new(EMAIL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[52].Descriptor()
}

func (EMAIL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[52]
}

func (x EMAIL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{52}
}

type FTP_ACTIVITY_CLASS_UID int32

const (
	FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY_CLASS_UID_UNKNOWN    FTP_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	FTP_ACTIVITY_CLASS_UID_FTP_ACTIVITY_CLASS_UID_BASE_EVENT FTP_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_CLASS_UID.
var (
	FTP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "FTP_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "FTP_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	FTP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"FTP_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"FTP_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x FTP_ACTIVITY_CLASS_UID) Enum() *FTP_ACTIVITY_CLASS_UID {
	p := new(FTP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[53].Descriptor()
}

func (FTP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[53]
}

func (x FTP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_CLASS_UID.Descriptor instead.
func (FTP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{53}
}

type SYSTEM_CLASS_UID int32

const (
	SYSTEM_CLASS_UID_SYSTEM_CLASS_UID_UNKNOWN    SYSTEM_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SYSTEM_CLASS_UID_SYSTEM_CLASS_UID_BASE_EVENT SYSTEM_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_CLASS_UID.
var (
	SYSTEM_CLASS_UID_name = map[int32]string{
		0: "SYSTEM_CLASS_UID_UNKNOWN",
		1: "SYSTEM_CLASS_UID_BASE_EVENT",
	}
	SYSTEM_CLASS_UID_value = map[string]int32{
		"SYSTEM_CLASS_UID_UNKNOWN":    0,
		"SYSTEM_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x SYSTEM_CLASS_UID) Enum() *SYSTEM_CLASS_UID {
	p := new(SYSTEM_CLASS_UID)
	*p = x
	return p
}

func (x SYSTEM_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[54].Descriptor()
}

func (SYSTEM_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[54]
}

func (x SYSTEM_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_CLASS_UID.Descriptor instead.
func (SYSTEM_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{54}
}

type URL_CATEGORY_IDS int32

const (
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_UNKNOWN                         URL_CATEGORY_IDS = 0  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ABORTION                        URL_CATEGORY_IDS = 1  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ADULT_MATURE_CONTENT            URL_CATEGORY_IDS = 2  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ALCOHOL                         URL_CATEGORY_IDS = 3  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF URL_CATEGORY_IDS = 4  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ART_CULTURE                     URL_CATEGORY_IDS = 5  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_AUCTIONS                        URL_CATEGORY_IDS = 6  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS               URL_CATEGORY_IDS = 7  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_BROKERAGE_TRADING               URL_CATEGORY_IDS = 8  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_BUSINESS_ECONOMY                URL_CATEGORY_IDS = 9  // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS        URL_CATEGORY_IDS = 10 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHAT_IM_SMS                     URL_CATEGORY_IDS = 11 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHILD_PORNOGRAPHY               URL_CATEGORY_IDS = 12 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY   URL_CATEGORY_IDS = 13 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CONTENT_SERVERS                 URL_CATEGORY_IDS = 14 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES           URL_CATEGORY_IDS = 15 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_DYNAMIC_DNS_HOST                URL_CATEGORY_IDS = 16 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_E_CARD_INVITATIONS              URL_CATEGORY_IDS = 17 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EDUCATION                       URL_CATEGORY_IDS = 18 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EMAIL                           URL_CATEGORY_IDS = 19 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ENTERTAINMENT                   URL_CATEGORY_IDS = 20 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EXTREME                         URL_CATEGORY_IDS = 21 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FILE_STORAGE_SHARING            URL_CATEGORY_IDS = 22 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FINANCIAL_SERVICES              URL_CATEGORY_IDS = 23 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FOR_KIDS                        URL_CATEGORY_IDS = 24 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GAMBLING                        URL_CATEGORY_IDS = 25 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GAMES                           URL_CATEGORY_IDS = 26 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GOVERNMENT_LEGAL                URL_CATEGORY_IDS = 27 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HACKING                         URL_CATEGORY_IDS = 28 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HEALTH                          URL_CATEGORY_IDS = 29 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HUMOR_JOKES                     URL_CATEGORY_IDS = 30 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INFORMATIONAL                   URL_CATEGORY_IDS = 31 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES      URL_CATEGORY_IDS = 32 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTERNET_TELEPHONY              URL_CATEGORY_IDS = 33 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT       URL_CATEGORY_IDS = 34 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_JOB_SEARCH_CAREERS              URL_CATEGORY_IDS = 35 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS URL_CATEGORY_IDS = 36 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS       URL_CATEGORY_IDS = 37 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MARIJUANA                       URL_CATEGORY_IDS = 38 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MEDIA_SHARING                   URL_CATEGORY_IDS = 39 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MILITARY                        URL_CATEGORY_IDS = 40 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT URL_CATEGORY_IDS = 41 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NEWS_MEDIA                      URL_CATEGORY_IDS = 42 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NEWSGROUPS_FORUMS               URL_CATEGORY_IDS = 43 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE     URL_CATEGORY_IDS = 44 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NUDITY                          URL_CATEGORY_IDS = 45 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS    URL_CATEGORY_IDS = 46 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ONLINE_MEETINGS                 URL_CATEGORY_IDS = 47 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_OTHER                           URL_CATEGORY_IDS = 48 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P              URL_CATEGORY_IDS = 49 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PERSONAL_SITES                  URL_CATEGORY_IDS = 50 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PERSONALS_DATING                URL_CATEGORY_IDS = 51 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PHISHING                        URL_CATEGORY_IDS = 52 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS       URL_CATEGORY_IDS = 53 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PLACEHOLDERS                    URL_CATEGORY_IDS = 54 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY       URL_CATEGORY_IDS = 55 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PORNOGRAPHY                     URL_CATEGORY_IDS = 56 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE   URL_CATEGORY_IDS = 57 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PROXY_AVOIDANCE                 URL_CATEGORY_IDS = 58 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS             URL_CATEGORY_IDS = 59 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REAL_ESTATE                     URL_CATEGORY_IDS = 60 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REFERENCE                       URL_CATEGORY_IDS = 61 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RELIGION                        URL_CATEGORY_IDS = 62 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS             URL_CATEGORY_IDS = 63 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD         URL_CATEGORY_IDS = 64 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL       URL_CATEGORY_IDS = 65 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS          URL_CATEGORY_IDS = 66 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEX_EDUCATION                   URL_CATEGORY_IDS = 67 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEXUAL_EXPRESSION               URL_CATEGORY_IDS = 68 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SHOPPING                        URL_CATEGORY_IDS = 69 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOCIAL_NETWORKING               URL_CATEGORY_IDS = 70 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING            URL_CATEGORY_IDS = 71 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS              URL_CATEGORY_IDS = 72 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SPAM                            URL_CATEGORY_IDS = 73 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SPORTS_RECREATION               URL_CATEGORY_IDS = 74 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SUSPICIOUS                      URL_CATEGORY_IDS = 75 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TV_VIDEO_STREAMS                URL_CATEGORY_IDS = 76 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TECHNOLOGY_INTERNET             URL_CATEGORY_IDS = 77 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TOBACCO                         URL_CATEGORY_IDS = 78 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TRANSLATION                     URL_CATEGORY_IDS = 79 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TRAVEL                          URL_CATEGORY_IDS = 80 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_UNCATEGORIZED                   URL_CATEGORY_IDS = 81 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_VEHICLES                        URL_CATEGORY_IDS = 82 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM            URL_CATEGORY_IDS = 83 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEAPONS                         URL_CATEGORY_IDS = 84 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEB_ADS_ANALYTICS               URL_CATEGORY_IDS = 85 // Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEB_HOSTING                     URL_CATEGORY_IDS = 86 // Type: OCSF_VALUE;
)

// Enum value maps for URL_CATEGORY_IDS.
var (
	URL_CATEGORY_IDS_name = map[int32]string{
		0:  "URL_CATEGORY_IDS_UNKNOWN",
		1:  "URL_CATEGORY_IDS_ABORTION",
		2:  "URL_CATEGORY_IDS_ADULT_MATURE_CONTENT",
		3:  "URL_CATEGORY_IDS_ALCOHOL",
		4:  "URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF",
		5:  "URL_CATEGORY_IDS_ART_CULTURE",
		6:  "URL_CATEGORY_IDS_AUCTIONS",
		7:  "URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS",
		8:  "URL_CATEGORY_IDS_BROKERAGE_TRADING",
		9:  "URL_CATEGORY_IDS_BUSINESS_ECONOMY",
		10: "URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS",
		11: "URL_CATEGORY_IDS_CHAT_IM_SMS",
		12: "URL_CATEGORY_IDS_CHILD_PORNOGRAPHY",
		13: "URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY",
		14: "URL_CATEGORY_IDS_CONTENT_SERVERS",
		15: "URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES",
		16: "URL_CATEGORY_IDS_DYNAMIC_DNS_HOST",
		17: "URL_CATEGORY_IDS_E_CARD_INVITATIONS",
		18: "URL_CATEGORY_IDS_EDUCATION",
		19: "URL_CATEGORY_IDS_EMAIL",
		20: "URL_CATEGORY_IDS_ENTERTAINMENT",
		21: "URL_CATEGORY_IDS_EXTREME",
		22: "URL_CATEGORY_IDS_FILE_STORAGE_SHARING",
		23: "URL_CATEGORY_IDS_FINANCIAL_SERVICES",
		24: "URL_CATEGORY_IDS_FOR_KIDS",
		25: "URL_CATEGORY_IDS_GAMBLING",
		26: "URL_CATEGORY_IDS_GAMES",
		27: "URL_CATEGORY_IDS_GOVERNMENT_LEGAL",
		28: "URL_CATEGORY_IDS_HACKING",
		29: "URL_CATEGORY_IDS_HEALTH",
		30: "URL_CATEGORY_IDS_HUMOR_JOKES",
		31: "URL_CATEGORY_IDS_INFORMATIONAL",
		32: "URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES",
		33: "URL_CATEGORY_IDS_INTERNET_TELEPHONY",
		34: "URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT",
		35: "URL_CATEGORY_IDS_JOB_SEARCH_CAREERS",
		36: "URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS",
		37: "URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS",
		38: "URL_CATEGORY_IDS_MARIJUANA",
		39: "URL_CATEGORY_IDS_MEDIA_SHARING",
		40: "URL_CATEGORY_IDS_MILITARY",
		41: "URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT",
		42: "URL_CATEGORY_IDS_NEWS_MEDIA",
		43: "URL_CATEGORY_IDS_NEWSGROUPS_FORUMS",
		44: "URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE",
		45: "URL_CATEGORY_IDS_NUDITY",
		46: "URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS",
		47: "URL_CATEGORY_IDS_ONLINE_MEETINGS",
		48: "URL_CATEGORY_IDS_OTHER",
		49: "URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P",
		50: "URL_CATEGORY_IDS_PERSONAL_SITES",
		51: "URL_CATEGORY_IDS_PERSONALS_DATING",
		52: "URL_CATEGORY_IDS_PHISHING",
		53: "URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS",
		54: "URL_CATEGORY_IDS_PLACEHOLDERS",
		55: "URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY",
		56: "URL_CATEGORY_IDS_PORNOGRAPHY",
		57: "URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE",
		58: "URL_CATEGORY_IDS_PROXY_AVOIDANCE",
		59: "URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS",
		60: "URL_CATEGORY_IDS_REAL_ESTATE",
		61: "URL_CATEGORY_IDS_REFERENCE",
		62: "URL_CATEGORY_IDS_RELIGION",
		63: "URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS",
		64: "URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD",
		65: "URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL",
		66: "URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS",
		67: "URL_CATEGORY_IDS_SEX_EDUCATION",
		68: "URL_CATEGORY_IDS_SEXUAL_EXPRESSION",
		69: "URL_CATEGORY_IDS_SHOPPING",
		70: "URL_CATEGORY_IDS_SOCIAL_NETWORKING",
		71: "URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING",
		72: "URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS",
		73: "URL_CATEGORY_IDS_SPAM",
		74: "URL_CATEGORY_IDS_SPORTS_RECREATION",
		75: "URL_CATEGORY_IDS_SUSPICIOUS",
		76: "URL_CATEGORY_IDS_TV_VIDEO_STREAMS",
		77: "URL_CATEGORY_IDS_TECHNOLOGY_INTERNET",
		78: "URL_CATEGORY_IDS_TOBACCO",
		79: "URL_CATEGORY_IDS_TRANSLATION",
		80: "URL_CATEGORY_IDS_TRAVEL",
		81: "URL_CATEGORY_IDS_UNCATEGORIZED",
		82: "URL_CATEGORY_IDS_VEHICLES",
		83: "URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM",
		84: "URL_CATEGORY_IDS_WEAPONS",
		85: "URL_CATEGORY_IDS_WEB_ADS_ANALYTICS",
		86: "URL_CATEGORY_IDS_WEB_HOSTING",
	}
	URL_CATEGORY_IDS_value = map[string]int32{
		"URL_CATEGORY_IDS_UNKNOWN":                         0,
		"URL_CATEGORY_IDS_ABORTION":                        1,
		"URL_CATEGORY_IDS_ADULT_MATURE_CONTENT":            2,
		"URL_CATEGORY_IDS_ALCOHOL":                         3,
		"URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF": 4,
		"URL_CATEGORY_IDS_ART_CULTURE":                     5,
		"URL_CATEGORY_IDS_AUCTIONS":                        6,
		"URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS":               7,
		"URL_CATEGORY_IDS_BROKERAGE_TRADING":               8,
		"URL_CATEGORY_IDS_BUSINESS_ECONOMY":                9,
		"URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS":        10,
		"URL_CATEGORY_IDS_CHAT_IM_SMS":                     11,
		"URL_CATEGORY_IDS_CHILD_PORNOGRAPHY":               12,
		"URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY":   13,
		"URL_CATEGORY_IDS_CONTENT_SERVERS":                 14,
		"URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES":           15,
		"URL_CATEGORY_IDS_DYNAMIC_DNS_HOST":                16,
		"URL_CATEGORY_IDS_E_CARD_INVITATIONS":              17,
		"URL_CATEGORY_IDS_EDUCATION":                       18,
		"URL_CATEGORY_IDS_EMAIL":                           19,
		"URL_CATEGORY_IDS_ENTERTAINMENT":                   20,
		"URL_CATEGORY_IDS_EXTREME":                         21,
		"URL_CATEGORY_IDS_FILE_STORAGE_SHARING":            22,
		"URL_CATEGORY_IDS_FINANCIAL_SERVICES":              23,
		"URL_CATEGORY_IDS_FOR_KIDS":                        24,
		"URL_CATEGORY_IDS_GAMBLING":                        25,
		"URL_CATEGORY_IDS_GAMES":                           26,
		"URL_CATEGORY_IDS_GOVERNMENT_LEGAL":                27,
		"URL_CATEGORY_IDS_HACKING":                         28,
		"URL_CATEGORY_IDS_HEALTH":                          29,
		"URL_CATEGORY_IDS_HUMOR_JOKES":                     30,
		"URL_CATEGORY_IDS_INFORMATIONAL":                   31,
		"URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES":      32,
		"URL_CATEGORY_IDS_INTERNET_TELEPHONY":              33,
		"URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT":       34,
		"URL_CATEGORY_IDS_JOB_SEARCH_CAREERS":              35,
		"URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS": 36,
		"URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS":       37,
		"URL_CATEGORY_IDS_MARIJUANA":                       38,
		"URL_CATEGORY_IDS_MEDIA_SHARING":                   39,
		"URL_CATEGORY_IDS_MILITARY":                        40,
		"URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT": 41,
		"URL_CATEGORY_IDS_NEWS_MEDIA":                      42,
		"URL_CATEGORY_IDS_NEWSGROUPS_FORUMS":               43,
		"URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE":     44,
		"URL_CATEGORY_IDS_NUDITY":                          45,
		"URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS":    46,
		"URL_CATEGORY_IDS_ONLINE_MEETINGS":                 47,
		"URL_CATEGORY_IDS_OTHER":                           48,
		"URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P":              49,
		"URL_CATEGORY_IDS_PERSONAL_SITES":                  50,
		"URL_CATEGORY_IDS_PERSONALS_DATING":                51,
		"URL_CATEGORY_IDS_PHISHING":                        52,
		"URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS":       53,
		"URL_CATEGORY_IDS_PLACEHOLDERS":                    54,
		"URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY":       55,
		"URL_CATEGORY_IDS_PORNOGRAPHY":                     56,
		"URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE":   57,
		"URL_CATEGORY_IDS_PROXY_AVOIDANCE":                 58,
		"URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS":             59,
		"URL_CATEGORY_IDS_REAL_ESTATE":                     60,
		"URL_CATEGORY_IDS_REFERENCE":                       61,
		"URL_CATEGORY_IDS_RELIGION":                        62,
		"URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS":             63,
		"URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD":         64,
		"URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL":       65,
		"URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS":          66,
		"URL_CATEGORY_IDS_SEX_EDUCATION":                   67,
		"URL_CATEGORY_IDS_SEXUAL_EXPRESSION":               68,
		"URL_CATEGORY_IDS_SHOPPING":                        69,
		"URL_CATEGORY_IDS_SOCIAL_NETWORKING":               70,
		"URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING":            71,
		"URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS":              72,
		"URL_CATEGORY_IDS_SPAM":                            73,
		"URL_CATEGORY_IDS_SPORTS_RECREATION":               74,
		"URL_CATEGORY_IDS_SUSPICIOUS":                      75,
		"URL_CATEGORY_IDS_TV_VIDEO_STREAMS":                76,
		"URL_CATEGORY_IDS_TECHNOLOGY_INTERNET":             77,
		"URL_CATEGORY_IDS_TOBACCO":                         78,
		"URL_CATEGORY_IDS_TRANSLATION":                     79,
		"URL_CATEGORY_IDS_TRAVEL":                          80,
		"URL_CATEGORY_IDS_UNCATEGORIZED":                   81,
		"URL_CATEGORY_IDS_VEHICLES":                        82,
		"URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM":            83,
		"URL_CATEGORY_IDS_WEAPONS":                         84,
		"URL_CATEGORY_IDS_WEB_ADS_ANALYTICS":               85,
		"URL_CATEGORY_IDS_WEB_HOSTING":                     86,
	}
)

func (x URL_CATEGORY_IDS) Enum() *URL_CATEGORY_IDS {
	p := new(URL_CATEGORY_IDS)
	*p = x
	return p
}

func (x URL_CATEGORY_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (URL_CATEGORY_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[55].Descriptor()
}

func (URL_CATEGORY_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[55]
}

func (x URL_CATEGORY_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use URL_CATEGORY_IDS.Descriptor instead.
func (URL_CATEGORY_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{55}
}

type API_ACTIVITY_STATUS_ID int32

const (
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_UNKNOWN API_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_FAILURE API_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_OTHER   API_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_SUCCESS API_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_STATUS_ID.
var (
	API_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "API_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "API_ACTIVITY_STATUS_ID_FAILURE",
		2: "API_ACTIVITY_STATUS_ID_OTHER",
		3: "API_ACTIVITY_STATUS_ID_SUCCESS",
	}
	API_ACTIVITY_STATUS_ID_value = map[string]int32{
		"API_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"API_ACTIVITY_STATUS_ID_FAILURE": 1,
		"API_ACTIVITY_STATUS_ID_OTHER":   2,
		"API_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x API_ACTIVITY_STATUS_ID) Enum() *API_ACTIVITY_STATUS_ID {
	p := new(API_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[56].Descriptor()
}

func (API_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[56]
}

func (x API_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_STATUS_ID.Descriptor instead.
func (API_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{56}
}

type FINGERPRINT_ALGORITHM_ID int32

const (
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_UNKNOWN        FINGERPRINT_ALGORITHM_ID = 0 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_CTPH           FINGERPRINT_ALGORITHM_ID = 1 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_MD_5           FINGERPRINT_ALGORITHM_ID = 2 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_OTHER          FINGERPRINT_ALGORITHM_ID = 3 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_1          FINGERPRINT_ALGORITHM_ID = 4 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_256        FINGERPRINT_ALGORITHM_ID = 5 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_512        FINGERPRINT_ALGORITHM_ID = 6 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_TLSH           FINGERPRINT_ALGORITHM_ID = 7 // Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH FINGERPRINT_ALGORITHM_ID = 8 // Type: OCSF_VALUE;
)

// Enum value maps for FINGERPRINT_ALGORITHM_ID.
var (
	FINGERPRINT_ALGORITHM_ID_name = map[int32]string{
		0: "FINGERPRINT_ALGORITHM_ID_UNKNOWN",
		1: "FINGERPRINT_ALGORITHM_ID_CTPH",
		2: "FINGERPRINT_ALGORITHM_ID_MD_5",
		3: "FINGERPRINT_ALGORITHM_ID_OTHER",
		4: "FINGERPRINT_ALGORITHM_ID_SHA_1",
		5: "FINGERPRINT_ALGORITHM_ID_SHA_256",
		6: "FINGERPRINT_ALGORITHM_ID_SHA_512",
		7: "FINGERPRINT_ALGORITHM_ID_TLSH",
		8: "FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH",
	}
	FINGERPRINT_ALGORITHM_ID_value = map[string]int32{
		"FINGERPRINT_ALGORITHM_ID_UNKNOWN":        0,
		"FINGERPRINT_ALGORITHM_ID_CTPH":           1,
		"FINGERPRINT_ALGORITHM_ID_MD_5":           2,
		"FINGERPRINT_ALGORITHM_ID_OTHER":          3,
		"FINGERPRINT_ALGORITHM_ID_SHA_1":          4,
		"FINGERPRINT_ALGORITHM_ID_SHA_256":        5,
		"FINGERPRINT_ALGORITHM_ID_SHA_512":        6,
		"FINGERPRINT_ALGORITHM_ID_TLSH":           7,
		"FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH": 8,
	}
)

func (x FINGERPRINT_ALGORITHM_ID) Enum() *FINGERPRINT_ALGORITHM_ID {
	p := new(FINGERPRINT_ALGORITHM_ID)
	*p = x
	return p
}

func (x FINGERPRINT_ALGORITHM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINGERPRINT_ALGORITHM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[57].Descriptor()
}

func (FINGERPRINT_ALGORITHM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[57]
}

func (x FINGERPRINT_ALGORITHM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINGERPRINT_ALGORITHM_ID.Descriptor instead.
func (FINGERPRINT_ALGORITHM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{57}
}

type SSH_ACTIVITY_DISPOSITION_ID int32

const (
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN             SSH_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ALLOWED             SSH_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_APPROVED            SSH_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_BLOCKED             SSH_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CORRECTED           SSH_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SSH_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DELAYED             SSH_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DELETED             SSH_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DETECTED            SSH_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_DROPPED             SSH_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_EXONERATED          SSH_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_ISOLATED            SSH_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_LOGGED              SSH_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION           SSH_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_OTHER               SSH_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SSH_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED         SSH_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_RESTORED            SSH_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_TAGGED              SSH_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	SSH_ACTIVITY_DISPOSITION_ID_SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SSH_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_DISPOSITION_ID.
var (
	SSH_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SSH_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SSH_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "SSH_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "SSH_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SSH_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "SSH_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "SSH_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "SSH_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "SSH_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SSH_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "SSH_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "SSH_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "SSH_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "SSH_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	SSH_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SSH_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SSH_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SSH_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"SSH_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"SSH_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"SSH_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SSH_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"SSH_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"SSH_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"SSH_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"SSH_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SSH_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"SSH_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"SSH_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"SSH_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"SSH_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SSH_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"SSH_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"SSH_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SSH_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SSH_ACTIVITY_DISPOSITION_ID) Enum() *SSH_ACTIVITY_DISPOSITION_ID {
	p := new(SSH_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[58].Descriptor()
}

func (SSH_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[58]
}

func (x SSH_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SSH_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{58}
}

type SYSTEM_DISPOSITION_ID int32

const (
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_UNKNOWN             SYSTEM_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_ALLOWED             SYSTEM_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_APPROVED            SYSTEM_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_BLOCKED             SYSTEM_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_CORRECTED           SYSTEM_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_CUSTOM_ACTION       SYSTEM_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DELAYED             SYSTEM_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DELETED             SYSTEM_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DETECTED            SYSTEM_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DROPPED             SYSTEM_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_EXONERATED          SYSTEM_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_ISOLATED            SYSTEM_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_LOGGED              SYSTEM_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_NO_ACTION           SYSTEM_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_OTHER               SYSTEM_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED SYSTEM_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_QUARANTINED         SYSTEM_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_RESTORED            SYSTEM_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_TAGGED              SYSTEM_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_UNCORRECTED         SYSTEM_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_DISPOSITION_ID.
var (
	SYSTEM_DISPOSITION_ID_name = map[int32]string{
		0:  "SYSTEM_DISPOSITION_ID_UNKNOWN",
		1:  "SYSTEM_DISPOSITION_ID_ALLOWED",
		2:  "SYSTEM_DISPOSITION_ID_APPROVED",
		3:  "SYSTEM_DISPOSITION_ID_BLOCKED",
		4:  "SYSTEM_DISPOSITION_ID_CORRECTED",
		5:  "SYSTEM_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SYSTEM_DISPOSITION_ID_DELAYED",
		7:  "SYSTEM_DISPOSITION_ID_DELETED",
		8:  "SYSTEM_DISPOSITION_ID_DETECTED",
		9:  "SYSTEM_DISPOSITION_ID_DROPPED",
		10: "SYSTEM_DISPOSITION_ID_EXONERATED",
		11: "SYSTEM_DISPOSITION_ID_ISOLATED",
		12: "SYSTEM_DISPOSITION_ID_LOGGED",
		13: "SYSTEM_DISPOSITION_ID_NO_ACTION",
		14: "SYSTEM_DISPOSITION_ID_OTHER",
		15: "SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SYSTEM_DISPOSITION_ID_QUARANTINED",
		17: "SYSTEM_DISPOSITION_ID_RESTORED",
		18: "SYSTEM_DISPOSITION_ID_TAGGED",
		19: "SYSTEM_DISPOSITION_ID_UNCORRECTED",
	}
	SYSTEM_DISPOSITION_ID_value = map[string]int32{
		"SYSTEM_DISPOSITION_ID_UNKNOWN":             0,
		"SYSTEM_DISPOSITION_ID_ALLOWED":             1,
		"SYSTEM_DISPOSITION_ID_APPROVED":            2,
		"SYSTEM_DISPOSITION_ID_BLOCKED":             3,
		"SYSTEM_DISPOSITION_ID_CORRECTED":           4,
		"SYSTEM_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SYSTEM_DISPOSITION_ID_DELAYED":             6,
		"SYSTEM_DISPOSITION_ID_DELETED":             7,
		"SYSTEM_DISPOSITION_ID_DETECTED":            8,
		"SYSTEM_DISPOSITION_ID_DROPPED":             9,
		"SYSTEM_DISPOSITION_ID_EXONERATED":          10,
		"SYSTEM_DISPOSITION_ID_ISOLATED":            11,
		"SYSTEM_DISPOSITION_ID_LOGGED":              12,
		"SYSTEM_DISPOSITION_ID_NO_ACTION":           13,
		"SYSTEM_DISPOSITION_ID_OTHER":               14,
		"SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SYSTEM_DISPOSITION_ID_QUARANTINED":         16,
		"SYSTEM_DISPOSITION_ID_RESTORED":            17,
		"SYSTEM_DISPOSITION_ID_TAGGED":              18,
		"SYSTEM_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SYSTEM_DISPOSITION_ID) Enum() *SYSTEM_DISPOSITION_ID {
	p := new(SYSTEM_DISPOSITION_ID)
	*p = x
	return p
}

func (x SYSTEM_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[59].Descriptor()
}

func (SYSTEM_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[59]
}

func (x SYSTEM_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_DISPOSITION_ID.Descriptor instead.
func (SYSTEM_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{59}
}

type USER_ACCESS_SEVERITY_ID int32

const (
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_UNKNOWN       USER_ACCESS_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_CRITICAL      USER_ACCESS_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_FATAL         USER_ACCESS_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_HIGH          USER_ACCESS_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_INFORMATIONAL USER_ACCESS_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_LOW           USER_ACCESS_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_MEDIUM        USER_ACCESS_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	USER_ACCESS_SEVERITY_ID_USER_ACCESS_SEVERITY_ID_OTHER         USER_ACCESS_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_SEVERITY_ID.
var (
	USER_ACCESS_SEVERITY_ID_name = map[int32]string{
		0: "USER_ACCESS_SEVERITY_ID_UNKNOWN",
		1: "USER_ACCESS_SEVERITY_ID_CRITICAL",
		2: "USER_ACCESS_SEVERITY_ID_FATAL",
		3: "USER_ACCESS_SEVERITY_ID_HIGH",
		4: "USER_ACCESS_SEVERITY_ID_INFORMATIONAL",
		5: "USER_ACCESS_SEVERITY_ID_LOW",
		6: "USER_ACCESS_SEVERITY_ID_MEDIUM",
		7: "USER_ACCESS_SEVERITY_ID_OTHER",
	}
	USER_ACCESS_SEVERITY_ID_value = map[string]int32{
		"USER_ACCESS_SEVERITY_ID_UNKNOWN":       0,
		"USER_ACCESS_SEVERITY_ID_CRITICAL":      1,
		"USER_ACCESS_SEVERITY_ID_FATAL":         2,
		"USER_ACCESS_SEVERITY_ID_HIGH":          3,
		"USER_ACCESS_SEVERITY_ID_INFORMATIONAL": 4,
		"USER_ACCESS_SEVERITY_ID_LOW":           5,
		"USER_ACCESS_SEVERITY_ID_MEDIUM":        6,
		"USER_ACCESS_SEVERITY_ID_OTHER":         7,
	}
)

func (x USER_ACCESS_SEVERITY_ID) Enum() *USER_ACCESS_SEVERITY_ID {
	p := new(USER_ACCESS_SEVERITY_ID)
	*p = x
	return p
}

func (x USER_ACCESS_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[60].Descriptor()
}

func (USER_ACCESS_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[60]
}

func (x USER_ACCESS_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_SEVERITY_ID.Descriptor instead.
func (USER_ACCESS_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{60}
}

type EMAIL_ACTIVITY_STATUS_ID int32

const (
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_FAILURE EMAIL_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_OTHER   EMAIL_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_STATUS_ID_EMAIL_ACTIVITY_STATUS_ID_SUCCESS EMAIL_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_STATUS_ID.
var (
	EMAIL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "EMAIL_ACTIVITY_STATUS_ID_FAILURE",
		2: "EMAIL_ACTIVITY_STATUS_ID_OTHER",
		3: "EMAIL_ACTIVITY_STATUS_ID_SUCCESS",
	}
	EMAIL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_ACTIVITY_STATUS_ID_FAILURE": 1,
		"EMAIL_ACTIVITY_STATUS_ID_OTHER":   2,
		"EMAIL_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x EMAIL_ACTIVITY_STATUS_ID) Enum() *EMAIL_ACTIVITY_STATUS_ID {
	p := new(EMAIL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[61].Descriptor()
}

func (EMAIL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[61]
}

func (x EMAIL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{61}
}

type REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER   REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID.
var (
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Enum() *REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[62].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[62]
}

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{62}
}

type FINDINGS_ACTIVITY_ID int32

const (
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_UNKNOWN FINDINGS_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	FINDINGS_ACTIVITY_ID_FINDINGS_ACTIVITY_ID_OTHER   FINDINGS_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FINDINGS_ACTIVITY_ID.
var (
	FINDINGS_ACTIVITY_ID_name = map[int32]string{
		0: "FINDINGS_ACTIVITY_ID_UNKNOWN",
		1: "FINDINGS_ACTIVITY_ID_OTHER",
	}
	FINDINGS_ACTIVITY_ID_value = map[string]int32{
		"FINDINGS_ACTIVITY_ID_UNKNOWN": 0,
		"FINDINGS_ACTIVITY_ID_OTHER":   1,
	}
)

func (x FINDINGS_ACTIVITY_ID) Enum() *FINDINGS_ACTIVITY_ID {
	p := new(FINDINGS_ACTIVITY_ID)
	*p = x
	return p
}

func (x FINDINGS_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[63].Descriptor()
}

func (FINDINGS_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[63]
}

func (x FINDINGS_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_ACTIVITY_ID.Descriptor instead.
func (FINDINGS_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{63}
}

type IAM_CLASS_UID int32

const (
	IAM_CLASS_UID_IAM_CLASS_UID_UNKNOWN    IAM_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	IAM_CLASS_UID_IAM_CLASS_UID_BASE_EVENT IAM_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for IAM_CLASS_UID.
var (
	IAM_CLASS_UID_name = map[int32]string{
		0: "IAM_CLASS_UID_UNKNOWN",
		1: "IAM_CLASS_UID_BASE_EVENT",
	}
	IAM_CLASS_UID_value = map[string]int32{
		"IAM_CLASS_UID_UNKNOWN":    0,
		"IAM_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x IAM_CLASS_UID) Enum() *IAM_CLASS_UID {
	p := new(IAM_CLASS_UID)
	*p = x
	return p
}

func (x IAM_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[64].Descriptor()
}

func (IAM_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[64]
}

func (x IAM_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_CLASS_UID.Descriptor instead.
func (IAM_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{64}
}

type IAM_CATEGORY_UID int32

const (
	IAM_CATEGORY_UID_IAM_CATEGORY_UID_UNKNOWN       IAM_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	IAM_CATEGORY_UID_IAM_CATEGORY_UID_UNCATEGORIZED IAM_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for IAM_CATEGORY_UID.
var (
	IAM_CATEGORY_UID_name = map[int32]string{
		0: "IAM_CATEGORY_UID_UNKNOWN",
		1: "IAM_CATEGORY_UID_UNCATEGORIZED",
	}
	IAM_CATEGORY_UID_value = map[string]int32{
		"IAM_CATEGORY_UID_UNKNOWN":       0,
		"IAM_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x IAM_CATEGORY_UID) Enum() *IAM_CATEGORY_UID {
	p := new(IAM_CATEGORY_UID)
	*p = x
	return p
}

func (x IAM_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[65].Descriptor()
}

func (IAM_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[65]
}

func (x IAM_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_CATEGORY_UID.Descriptor instead.
func (IAM_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{65}
}

type FTP_ACTIVITY_STATUS_ID int32

const (
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_UNKNOWN FTP_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_FAILURE FTP_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_OTHER   FTP_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	FTP_ACTIVITY_STATUS_ID_FTP_ACTIVITY_STATUS_ID_SUCCESS FTP_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_STATUS_ID.
var (
	FTP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "FTP_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "FTP_ACTIVITY_STATUS_ID_FAILURE",
		2: "FTP_ACTIVITY_STATUS_ID_OTHER",
		3: "FTP_ACTIVITY_STATUS_ID_SUCCESS",
	}
	FTP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"FTP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"FTP_ACTIVITY_STATUS_ID_FAILURE": 1,
		"FTP_ACTIVITY_STATUS_ID_OTHER":   2,
		"FTP_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x FTP_ACTIVITY_STATUS_ID) Enum() *FTP_ACTIVITY_STATUS_ID {
	p := new(FTP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[66].Descriptor()
}

func (FTP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[66]
}

func (x FTP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_STATUS_ID.Descriptor instead.
func (FTP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{66}
}

type SMB_ACTIVITY_SEVERITY_ID int32

const (
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_UNKNOWN       SMB_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_CRITICAL      SMB_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_FATAL         SMB_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_HIGH          SMB_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL SMB_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_LOW           SMB_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_MEDIUM        SMB_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	SMB_ACTIVITY_SEVERITY_ID_SMB_ACTIVITY_SEVERITY_ID_OTHER         SMB_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_SEVERITY_ID.
var (
	SMB_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "SMB_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "SMB_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "SMB_ACTIVITY_SEVERITY_ID_FATAL",
		3: "SMB_ACTIVITY_SEVERITY_ID_HIGH",
		4: "SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "SMB_ACTIVITY_SEVERITY_ID_LOW",
		6: "SMB_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "SMB_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SMB_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SMB_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SMB_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"SMB_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"SMB_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"SMB_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"SMB_ACTIVITY_SEVERITY_ID_LOW":           5,
		"SMB_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"SMB_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x SMB_ACTIVITY_SEVERITY_ID) Enum() *SMB_ACTIVITY_SEVERITY_ID {
	p := new(SMB_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[67].Descriptor()
}

func (SMB_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[67]
}

func (x SMB_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SMB_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{67}
}

type APPLICATION_LIFECYCLE_SEVERITY_ID int32

const (
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN       APPLICATION_LIFECYCLE_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL      APPLICATION_LIFECYCLE_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL         APPLICATION_LIFECYCLE_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH          APPLICATION_LIFECYCLE_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL APPLICATION_LIFECYCLE_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_LOW           APPLICATION_LIFECYCLE_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM        APPLICATION_LIFECYCLE_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER         APPLICATION_LIFECYCLE_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_SEVERITY_ID.
var (
	APPLICATION_LIFECYCLE_SEVERITY_ID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN",
		1: "APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL",
		2: "APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL",
		3: "APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH",
		4: "APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL",
		5: "APPLICATION_LIFECYCLE_SEVERITY_ID_LOW",
		6: "APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM",
		7: "APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER",
	}
	APPLICATION_LIFECYCLE_SEVERITY_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN":       0,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL":      1,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL":         2,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH":          3,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL": 4,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_LOW":           5,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM":        6,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER":         7,
	}
)

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) Enum() *APPLICATION_LIFECYCLE_SEVERITY_ID {
	p := new(APPLICATION_LIFECYCLE_SEVERITY_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[68].Descriptor()
}

func (APPLICATION_LIFECYCLE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[68]
}

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_SEVERITY_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{68}
}

type BASE_EVENT_STATUS_ID int32

const (
	BASE_EVENT_STATUS_ID_BASE_EVENT_STATUS_ID_UNKNOWN BASE_EVENT_STATUS_ID = 0 // Type: OCSF_VALUE;
	BASE_EVENT_STATUS_ID_BASE_EVENT_STATUS_ID_FAILURE BASE_EVENT_STATUS_ID = 1 // Type: OCSF_VALUE;
	BASE_EVENT_STATUS_ID_BASE_EVENT_STATUS_ID_OTHER   BASE_EVENT_STATUS_ID = 2 // Type: OCSF_VALUE;
	BASE_EVENT_STATUS_ID_BASE_EVENT_STATUS_ID_SUCCESS BASE_EVENT_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for BASE_EVENT_STATUS_ID.
var (
	BASE_EVENT_STATUS_ID_name = map[int32]string{
		0: "BASE_EVENT_STATUS_ID_UNKNOWN",
		1: "BASE_EVENT_STATUS_ID_FAILURE",
		2: "BASE_EVENT_STATUS_ID_OTHER",
		3: "BASE_EVENT_STATUS_ID_SUCCESS",
	}
	BASE_EVENT_STATUS_ID_value = map[string]int32{
		"BASE_EVENT_STATUS_ID_UNKNOWN": 0,
		"BASE_EVENT_STATUS_ID_FAILURE": 1,
		"BASE_EVENT_STATUS_ID_OTHER":   2,
		"BASE_EVENT_STATUS_ID_SUCCESS": 3,
	}
)

func (x BASE_EVENT_STATUS_ID) Enum() *BASE_EVENT_STATUS_ID {
	p := new(BASE_EVENT_STATUS_ID)
	*p = x
	return p
}

func (x BASE_EVENT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BASE_EVENT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[69].Descriptor()
}

func (BASE_EVENT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[69]
}

func (x BASE_EVENT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BASE_EVENT_STATUS_ID.Descriptor instead.
func (BASE_EVENT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{69}
}

type USER_TYPE_ID int32

const (
	USER_TYPE_ID_USER_TYPE_ID_UNKNOWN USER_TYPE_ID = 0 // Type: OCSF_VALUE;
	USER_TYPE_ID_USER_TYPE_ID_ADMIN   USER_TYPE_ID = 1 // Type: OCSF_VALUE;
	USER_TYPE_ID_USER_TYPE_ID_OTHER   USER_TYPE_ID = 2 // Type: OCSF_VALUE;
	USER_TYPE_ID_USER_TYPE_ID_SYSTEM  USER_TYPE_ID = 3 // Type: OCSF_VALUE;
	USER_TYPE_ID_USER_TYPE_ID_USER    USER_TYPE_ID = 4 // Type: OCSF_VALUE;
)

// Enum value maps for USER_TYPE_ID.
var (
	USER_TYPE_ID_name = map[int32]string{
		0: "USER_TYPE_ID_UNKNOWN",
		1: "USER_TYPE_ID_ADMIN",
		2: "USER_TYPE_ID_OTHER",
		3: "USER_TYPE_ID_SYSTEM",
		4: "USER_TYPE_ID_USER",
	}
	USER_TYPE_ID_value = map[string]int32{
		"USER_TYPE_ID_UNKNOWN": 0,
		"USER_TYPE_ID_ADMIN":   1,
		"USER_TYPE_ID_OTHER":   2,
		"USER_TYPE_ID_SYSTEM":  3,
		"USER_TYPE_ID_USER":    4,
	}
)

func (x USER_TYPE_ID) Enum() *USER_TYPE_ID {
	p := new(USER_TYPE_ID)
	*p = x
	return p
}

func (x USER_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[70].Descriptor()
}

func (USER_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[70]
}

func (x USER_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_TYPE_ID.Descriptor instead.
func (USER_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{70}
}

type DISCOVERY_CATEGORY_UID int32

const (
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_UNKNOWN       DISCOVERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_UNCATEGORIZED DISCOVERY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_CATEGORY_UID.
var (
	DISCOVERY_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_CATEGORY_UID_UNKNOWN",
		1: "DISCOVERY_CATEGORY_UID_UNCATEGORIZED",
	}
	DISCOVERY_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_CATEGORY_UID_UNKNOWN":       0,
		"DISCOVERY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x DISCOVERY_CATEGORY_UID) Enum() *DISCOVERY_CATEGORY_UID {
	p := new(DISCOVERY_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[71].Descriptor()
}

func (DISCOVERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[71]
}

func (x DISCOVERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{71}
}

type USER_ACCESS_CLASS_UID int32

const (
	USER_ACCESS_CLASS_UID_USER_ACCESS_CLASS_UID_UNKNOWN    USER_ACCESS_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	USER_ACCESS_CLASS_UID_USER_ACCESS_CLASS_UID_BASE_EVENT USER_ACCESS_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_CLASS_UID.
var (
	USER_ACCESS_CLASS_UID_name = map[int32]string{
		0: "USER_ACCESS_CLASS_UID_UNKNOWN",
		1: "USER_ACCESS_CLASS_UID_BASE_EVENT",
	}
	USER_ACCESS_CLASS_UID_value = map[string]int32{
		"USER_ACCESS_CLASS_UID_UNKNOWN":    0,
		"USER_ACCESS_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x USER_ACCESS_CLASS_UID) Enum() *USER_ACCESS_CLASS_UID {
	p := new(USER_ACCESS_CLASS_UID)
	*p = x
	return p
}

func (x USER_ACCESS_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[72].Descriptor()
}

func (USER_ACCESS_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[72]
}

func (x USER_ACCESS_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_CLASS_UID.Descriptor instead.
func (USER_ACCESS_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{72}
}

type DNS_ACTIVITY_DISPOSITION_ID int32

const (
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN             DNS_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ALLOWED             DNS_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_APPROVED            DNS_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_BLOCKED             DNS_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CORRECTED           DNS_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       DNS_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DELAYED             DNS_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DELETED             DNS_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DETECTED            DNS_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_DROPPED             DNS_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_EXONERATED          DNS_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_ISOLATED            DNS_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_LOGGED              DNS_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION           DNS_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_OTHER               DNS_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED DNS_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED         DNS_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_RESTORED            DNS_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_TAGGED              DNS_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	DNS_ACTIVITY_DISPOSITION_ID_DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED         DNS_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_DISPOSITION_ID.
var (
	DNS_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "DNS_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "DNS_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "DNS_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "DNS_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "DNS_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "DNS_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "DNS_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "DNS_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "DNS_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "DNS_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "DNS_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "DNS_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "DNS_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	DNS_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"DNS_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"DNS_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"DNS_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"DNS_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"DNS_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"DNS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"DNS_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"DNS_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"DNS_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"DNS_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"DNS_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"DNS_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"DNS_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"DNS_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"DNS_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"DNS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"DNS_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"DNS_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"DNS_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"DNS_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x DNS_ACTIVITY_DISPOSITION_ID) Enum() *DNS_ACTIVITY_DISPOSITION_ID {
	p := new(DNS_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[73].Descriptor()
}

func (DNS_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[73]
}

func (x DNS_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (DNS_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{73}
}

type REGISTRY_VALUE_ACTIVITY_CLASS_UID int32

const (
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN    REGISTRY_VALUE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY_CLASS_UID_BASE_EVENT REGISTRY_VALUE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_CLASS_UID.
var (
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"REGISTRY_VALUE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) Enum() *REGISTRY_VALUE_ACTIVITY_CLASS_UID {
	p := new(REGISTRY_VALUE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[74].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[74]
}

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_CLASS_UID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{74}
}

type RESOURCE_ACTIVITY_STATUS_ID int32

const (
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN RESOURCE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_FAILURE RESOURCE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_OTHER   RESOURCE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_SUCCESS RESOURCE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_STATUS_ID.
var (
	RESOURCE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_STATUS_ID_FAILURE",
		2: "RESOURCE_ACTIVITY_STATUS_ID_OTHER",
		3: "RESOURCE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	RESOURCE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"RESOURCE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"RESOURCE_ACTIVITY_STATUS_ID_OTHER":   2,
		"RESOURCE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x RESOURCE_ACTIVITY_STATUS_ID) Enum() *RESOURCE_ACTIVITY_STATUS_ID {
	p := new(RESOURCE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[75].Descriptor()
}

func (RESOURCE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[75]
}

func (x RESOURCE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_STATUS_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{75}
}

type DIGITAL_SIGNATURE_ALGORITHM_ID int32

const (
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN      DIGITAL_SIGNATURE_ALGORITHM_ID = 0 // Type: OCSF_VALUE;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE DIGITAL_SIGNATURE_ALGORITHM_ID = 1 // Type: OCSF_VALUE;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_DSA          DIGITAL_SIGNATURE_ALGORITHM_ID = 2 // Type: OCSF_VALUE;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA        DIGITAL_SIGNATURE_ALGORITHM_ID = 3 // Type: OCSF_VALUE;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER        DIGITAL_SIGNATURE_ALGORITHM_ID = 4 // Type: OCSF_VALUE;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_RSA          DIGITAL_SIGNATURE_ALGORITHM_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for DIGITAL_SIGNATURE_ALGORITHM_ID.
var (
	DIGITAL_SIGNATURE_ALGORITHM_ID_name = map[int32]string{
		0: "DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN",
		1: "DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE",
		2: "DIGITAL_SIGNATURE_ALGORITHM_ID_DSA",
		3: "DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA",
		4: "DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER",
		5: "DIGITAL_SIGNATURE_ALGORITHM_ID_RSA",
	}
	DIGITAL_SIGNATURE_ALGORITHM_ID_value = map[string]int32{
		"DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN":      0,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE": 1,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_DSA":          2,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA":        3,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER":        4,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_RSA":          5,
	}
)

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) Enum() *DIGITAL_SIGNATURE_ALGORITHM_ID {
	p := new(DIGITAL_SIGNATURE_ALGORITHM_ID)
	*p = x
	return p
}

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DIGITAL_SIGNATURE_ALGORITHM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[76].Descriptor()
}

func (DIGITAL_SIGNATURE_ALGORITHM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[76]
}

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DIGITAL_SIGNATURE_ALGORITHM_ID.Descriptor instead.
func (DIGITAL_SIGNATURE_ALGORITHM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{76}
}

type IAM_STATUS_ID int32

const (
	IAM_STATUS_ID_IAM_STATUS_ID_UNKNOWN IAM_STATUS_ID = 0 // Type: OCSF_VALUE;
	IAM_STATUS_ID_IAM_STATUS_ID_FAILURE IAM_STATUS_ID = 1 // Type: OCSF_VALUE;
	IAM_STATUS_ID_IAM_STATUS_ID_OTHER   IAM_STATUS_ID = 2 // Type: OCSF_VALUE;
	IAM_STATUS_ID_IAM_STATUS_ID_SUCCESS IAM_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for IAM_STATUS_ID.
var (
	IAM_STATUS_ID_name = map[int32]string{
		0: "IAM_STATUS_ID_UNKNOWN",
		1: "IAM_STATUS_ID_FAILURE",
		2: "IAM_STATUS_ID_OTHER",
		3: "IAM_STATUS_ID_SUCCESS",
	}
	IAM_STATUS_ID_value = map[string]int32{
		"IAM_STATUS_ID_UNKNOWN": 0,
		"IAM_STATUS_ID_FAILURE": 1,
		"IAM_STATUS_ID_OTHER":   2,
		"IAM_STATUS_ID_SUCCESS": 3,
	}
)

func (x IAM_STATUS_ID) Enum() *IAM_STATUS_ID {
	p := new(IAM_STATUS_ID)
	*p = x
	return p
}

func (x IAM_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[77].Descriptor()
}

func (IAM_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[77]
}

func (x IAM_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_STATUS_ID.Descriptor instead.
func (IAM_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{77}
}

type FILE_ACTIVITY_ACTIVITY_ID int32

const (
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN FILE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_OTHER   FILE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_ACTIVITY_ID.
var (
	FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "FILE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"FILE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x FILE_ACTIVITY_ACTIVITY_ID) Enum() *FILE_ACTIVITY_ACTIVITY_ID {
	p := new(FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[78].Descriptor()
}

func (FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[78]
}

func (x FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{78}
}

type KERNEL_EXTENSION_CLASS_UID int32

const (
	KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_CLASS_UID_UNKNOWN    KERNEL_EXTENSION_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_CLASS_UID_BASE_EVENT KERNEL_EXTENSION_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_CLASS_UID.
var (
	KERNEL_EXTENSION_CLASS_UID_name = map[int32]string{
		0: "KERNEL_EXTENSION_CLASS_UID_UNKNOWN",
		1: "KERNEL_EXTENSION_CLASS_UID_BASE_EVENT",
	}
	KERNEL_EXTENSION_CLASS_UID_value = map[string]int32{
		"KERNEL_EXTENSION_CLASS_UID_UNKNOWN":    0,
		"KERNEL_EXTENSION_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x KERNEL_EXTENSION_CLASS_UID) Enum() *KERNEL_EXTENSION_CLASS_UID {
	p := new(KERNEL_EXTENSION_CLASS_UID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[79].Descriptor()
}

func (KERNEL_EXTENSION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[79]
}

func (x KERNEL_EXTENSION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_CLASS_UID.Descriptor instead.
func (KERNEL_EXTENSION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{79}
}

type API_ACTIVITY_CLASS_UID int32

const (
	API_ACTIVITY_CLASS_UID_API_ACTIVITY_CLASS_UID_UNKNOWN    API_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	API_ACTIVITY_CLASS_UID_API_ACTIVITY_CLASS_UID_BASE_EVENT API_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_CLASS_UID.
var (
	API_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "API_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "API_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	API_ACTIVITY_CLASS_UID_value = map[string]int32{
		"API_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"API_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x API_ACTIVITY_CLASS_UID) Enum() *API_ACTIVITY_CLASS_UID {
	p := new(API_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x API_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[80].Descriptor()
}

func (API_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[80]
}

func (x API_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_CLASS_UID.Descriptor instead.
func (API_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{80}
}

type AUTHENTICATION_STATUS_ID int32

const (
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_UNKNOWN AUTHENTICATION_STATUS_ID = 0 // Type: OCSF_VALUE;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_FAILURE AUTHENTICATION_STATUS_ID = 1 // Type: OCSF_VALUE;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_OTHER   AUTHENTICATION_STATUS_ID = 2 // Type: OCSF_VALUE;
	AUTHENTICATION_STATUS_ID_AUTHENTICATION_STATUS_ID_SUCCESS AUTHENTICATION_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_STATUS_ID.
var (
	AUTHENTICATION_STATUS_ID_name = map[int32]string{
		0: "AUTHENTICATION_STATUS_ID_UNKNOWN",
		1: "AUTHENTICATION_STATUS_ID_FAILURE",
		2: "AUTHENTICATION_STATUS_ID_OTHER",
		3: "AUTHENTICATION_STATUS_ID_SUCCESS",
	}
	AUTHENTICATION_STATUS_ID_value = map[string]int32{
		"AUTHENTICATION_STATUS_ID_UNKNOWN": 0,
		"AUTHENTICATION_STATUS_ID_FAILURE": 1,
		"AUTHENTICATION_STATUS_ID_OTHER":   2,
		"AUTHENTICATION_STATUS_ID_SUCCESS": 3,
	}
)

func (x AUTHENTICATION_STATUS_ID) Enum() *AUTHENTICATION_STATUS_ID {
	p := new(AUTHENTICATION_STATUS_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[81].Descriptor()
}

func (AUTHENTICATION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[81]
}

func (x AUTHENTICATION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_STATUS_ID.Descriptor instead.
func (AUTHENTICATION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{81}
}

type NETWORK_CONNECTION_INFO_DIRECTION_ID int32

const (
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN  NETWORK_CONNECTION_INFO_DIRECTION_ID = 0 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND  NETWORK_CONNECTION_INFO_DIRECTION_ID = 1 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL  NETWORK_CONNECTION_INFO_DIRECTION_ID = 2 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER    NETWORK_CONNECTION_INFO_DIRECTION_ID = 3 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND NETWORK_CONNECTION_INFO_DIRECTION_ID = 4 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_CONNECTION_INFO_DIRECTION_ID.
var (
	NETWORK_CONNECTION_INFO_DIRECTION_ID_name = map[int32]string{
		0: "NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN",
		1: "NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND",
		2: "NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL",
		3: "NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER",
		4: "NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND",
	}
	NETWORK_CONNECTION_INFO_DIRECTION_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN":  0,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND":  1,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL":  2,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER":    3,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND": 4,
	}
)

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) Enum() *NETWORK_CONNECTION_INFO_DIRECTION_ID {
	p := new(NETWORK_CONNECTION_INFO_DIRECTION_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_DIRECTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[82].Descriptor()
}

func (NETWORK_CONNECTION_INFO_DIRECTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[82]
}

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_DIRECTION_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_DIRECTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{82}
}

type FILE_ACTIVITY_SEVERITY_ID int32

const (
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       FILE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      FILE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_FATAL         FILE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_HIGH          FILE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL FILE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_LOW           FILE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        FILE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_OTHER         FILE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_SEVERITY_ID.
var (
	FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "FILE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "FILE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "FILE_ACTIVITY_SEVERITY_ID_LOW",
		6: "FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"FILE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"FILE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"FILE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"FILE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x FILE_ACTIVITY_SEVERITY_ID) Enum() *FILE_ACTIVITY_SEVERITY_ID {
	p := new(FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[83].Descriptor()
}

func (FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[83]
}

func (x FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{83}
}

type SCHEDULED_JOB_ACTIVITY_CLASS_UID int32

const (
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN    SCHEDULED_JOB_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY_CLASS_UID_BASE_EVENT SCHEDULED_JOB_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_CLASS_UID.
var (
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"SCHEDULED_JOB_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) Enum() *SCHEDULED_JOB_ACTIVITY_CLASS_UID {
	p := new(SCHEDULED_JOB_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[84].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[84]
}

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_CLASS_UID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{84}
}

type OBSERVABLE_TYPE_ID int32

const (
	OBSERVABLE_TYPE_ID_OBSERVABLE_TYPE_ID_UNKNOWN OBSERVABLE_TYPE_ID = 0 // Type: OCSF_VALUE;
	OBSERVABLE_TYPE_ID_OBSERVABLE_TYPE_ID_OTHER   OBSERVABLE_TYPE_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for OBSERVABLE_TYPE_ID.
var (
	OBSERVABLE_TYPE_ID_name = map[int32]string{
		0: "OBSERVABLE_TYPE_ID_UNKNOWN",
		1: "OBSERVABLE_TYPE_ID_OTHER",
	}
	OBSERVABLE_TYPE_ID_value = map[string]int32{
		"OBSERVABLE_TYPE_ID_UNKNOWN": 0,
		"OBSERVABLE_TYPE_ID_OTHER":   1,
	}
)

func (x OBSERVABLE_TYPE_ID) Enum() *OBSERVABLE_TYPE_ID {
	p := new(OBSERVABLE_TYPE_ID)
	*p = x
	return p
}

func (x OBSERVABLE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OBSERVABLE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[85].Descriptor()
}

func (OBSERVABLE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[85]
}

func (x OBSERVABLE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OBSERVABLE_TYPE_ID.Descriptor instead.
func (OBSERVABLE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{85}
}

type EMAIL_URL_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_URL_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_URL_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_URL_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_URL_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_URL_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW           EMAIL_URL_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_URL_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_SEVERITY_ID_EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_URL_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_URL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL",
		3: "EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH",
		4: "EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW",
		6: "EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_LOW":           5,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"EMAIL_URL_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_URL_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_URL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[86].Descriptor()
}

func (EMAIL_URL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[86]
}

func (x EMAIL_URL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{86}
}

type EMAIL_URL_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_URL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_URL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_URL_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_URL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_URL_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_URL_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_URL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_URL_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_URL_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_URL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_URL_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_URL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	EMAIL_URL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_URL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_URL_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_URL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[87].Descriptor()
}

func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[87]
}

func (x EMAIL_URL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{87}
}

type NETWORK_ACTIVITY_SEVERITY_ID int32

const (
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN       NETWORK_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL      NETWORK_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_FATAL         NETWORK_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_HIGH          NETWORK_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL NETWORK_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_LOW           NETWORK_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM        NETWORK_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_SEVERITY_ID_NETWORK_ACTIVITY_SEVERITY_ID_OTHER         NETWORK_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_SEVERITY_ID.
var (
	NETWORK_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "NETWORK_ACTIVITY_SEVERITY_ID_FATAL",
		3: "NETWORK_ACTIVITY_SEVERITY_ID_HIGH",
		4: "NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "NETWORK_ACTIVITY_SEVERITY_ID_LOW",
		6: "NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "NETWORK_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NETWORK_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"NETWORK_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"NETWORK_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"NETWORK_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"NETWORK_ACTIVITY_SEVERITY_ID_LOW":           5,
		"NETWORK_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"NETWORK_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x NETWORK_ACTIVITY_SEVERITY_ID) Enum() *NETWORK_ACTIVITY_SEVERITY_ID {
	p := new(NETWORK_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[88].Descriptor()
}

func (NETWORK_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[88]
}

func (x NETWORK_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NETWORK_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{88}
}

type SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER   SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID.
var (
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Enum() *SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[89].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[89]
}

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{89}
}

type CONFIG_STATE_STATUS_ID int32

const (
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_UNKNOWN CONFIG_STATE_STATUS_ID = 0 // Type: OCSF_VALUE;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_FAILURE CONFIG_STATE_STATUS_ID = 1 // Type: OCSF_VALUE;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_OTHER   CONFIG_STATE_STATUS_ID = 2 // Type: OCSF_VALUE;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_SUCCESS CONFIG_STATE_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_STATUS_ID.
var (
	CONFIG_STATE_STATUS_ID_name = map[int32]string{
		0: "CONFIG_STATE_STATUS_ID_UNKNOWN",
		1: "CONFIG_STATE_STATUS_ID_FAILURE",
		2: "CONFIG_STATE_STATUS_ID_OTHER",
		3: "CONFIG_STATE_STATUS_ID_SUCCESS",
	}
	CONFIG_STATE_STATUS_ID_value = map[string]int32{
		"CONFIG_STATE_STATUS_ID_UNKNOWN": 0,
		"CONFIG_STATE_STATUS_ID_FAILURE": 1,
		"CONFIG_STATE_STATUS_ID_OTHER":   2,
		"CONFIG_STATE_STATUS_ID_SUCCESS": 3,
	}
)

func (x CONFIG_STATE_STATUS_ID) Enum() *CONFIG_STATE_STATUS_ID {
	p := new(CONFIG_STATE_STATUS_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[90].Descriptor()
}

func (CONFIG_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[90]
}

func (x CONFIG_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_STATUS_ID.Descriptor instead.
func (CONFIG_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{90}
}

type RDP_ACTIVITY_CATEGORY_UID int32

const (
	RDP_ACTIVITY_CATEGORY_UID_RDP_ACTIVITY_CATEGORY_UID_UNKNOWN       RDP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	RDP_ACTIVITY_CATEGORY_UID_RDP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED RDP_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_CATEGORY_UID.
var (
	RDP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "RDP_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "RDP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	RDP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"RDP_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"RDP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x RDP_ACTIVITY_CATEGORY_UID) Enum() *RDP_ACTIVITY_CATEGORY_UID {
	p := new(RDP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[91].Descriptor()
}

func (RDP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[91]
}

func (x RDP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (RDP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{91}
}

type NETWORK_ACTIVITY_CLASS_UID int32

const (
	NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY_CLASS_UID_UNKNOWN    NETWORK_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_ACTIVITY_CLASS_UID_NETWORK_ACTIVITY_CLASS_UID_BASE_EVENT NETWORK_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_CLASS_UID.
var (
	NETWORK_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "NETWORK_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	NETWORK_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NETWORK_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"NETWORK_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x NETWORK_ACTIVITY_CLASS_UID) Enum() *NETWORK_ACTIVITY_CLASS_UID {
	p := new(NETWORK_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[92].Descriptor()
}

func (NETWORK_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[92]
}

func (x NETWORK_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_CLASS_UID.Descriptor instead.
func (NETWORK_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{92}
}

type NETWORK_FILE_ACTIVITY_SEVERITY_ID int32

const (
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       NETWORK_FILE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      NETWORK_FILE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL         NETWORK_FILE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH          NETWORK_FILE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL NETWORK_FILE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW           NETWORK_FILE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        NETWORK_FILE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER         NETWORK_FILE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_SEVERITY_ID.
var (
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW",
		6: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"NETWORK_FILE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) Enum() *NETWORK_FILE_ACTIVITY_SEVERITY_ID {
	p := new(NETWORK_FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[93].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[93]
}

func (x NETWORK_FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{93}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER   WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[94].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[94]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{94}
}

type AUTHENTICATION_CATEGORY_UID int32

const (
	AUTHENTICATION_CATEGORY_UID_AUTHENTICATION_CATEGORY_UID_UNKNOWN       AUTHENTICATION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHENTICATION_CATEGORY_UID_AUTHENTICATION_CATEGORY_UID_UNCATEGORIZED AUTHENTICATION_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_CATEGORY_UID.
var (
	AUTHENTICATION_CATEGORY_UID_name = map[int32]string{
		0: "AUTHENTICATION_CATEGORY_UID_UNKNOWN",
		1: "AUTHENTICATION_CATEGORY_UID_UNCATEGORIZED",
	}
	AUTHENTICATION_CATEGORY_UID_value = map[string]int32{
		"AUTHENTICATION_CATEGORY_UID_UNKNOWN":       0,
		"AUTHENTICATION_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x AUTHENTICATION_CATEGORY_UID) Enum() *AUTHENTICATION_CATEGORY_UID {
	p := new(AUTHENTICATION_CATEGORY_UID)
	*p = x
	return p
}

func (x AUTHENTICATION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[95].Descriptor()
}

func (AUTHENTICATION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[95]
}

func (x AUTHENTICATION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_CATEGORY_UID.Descriptor instead.
func (AUTHENTICATION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{95}
}

type AUTHENTICATION_CLASS_UID int32

const (
	AUTHENTICATION_CLASS_UID_AUTHENTICATION_CLASS_UID_UNKNOWN    AUTHENTICATION_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHENTICATION_CLASS_UID_AUTHENTICATION_CLASS_UID_BASE_EVENT AUTHENTICATION_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_CLASS_UID.
var (
	AUTHENTICATION_CLASS_UID_name = map[int32]string{
		0: "AUTHENTICATION_CLASS_UID_UNKNOWN",
		1: "AUTHENTICATION_CLASS_UID_BASE_EVENT",
	}
	AUTHENTICATION_CLASS_UID_value = map[string]int32{
		"AUTHENTICATION_CLASS_UID_UNKNOWN":    0,
		"AUTHENTICATION_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x AUTHENTICATION_CLASS_UID) Enum() *AUTHENTICATION_CLASS_UID {
	p := new(AUTHENTICATION_CLASS_UID)
	*p = x
	return p
}

func (x AUTHENTICATION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[96].Descriptor()
}

func (AUTHENTICATION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[96]
}

func (x AUTHENTICATION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_CLASS_UID.Descriptor instead.
func (AUTHENTICATION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{96}
}

type GROUP_MANAGEMENT_STATUS_ID int32

const (
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_UNKNOWN GROUP_MANAGEMENT_STATUS_ID = 0 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_FAILURE GROUP_MANAGEMENT_STATUS_ID = 1 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_OTHER   GROUP_MANAGEMENT_STATUS_ID = 2 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_STATUS_ID_GROUP_MANAGEMENT_STATUS_ID_SUCCESS GROUP_MANAGEMENT_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_STATUS_ID.
var (
	GROUP_MANAGEMENT_STATUS_ID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_STATUS_ID_UNKNOWN",
		1: "GROUP_MANAGEMENT_STATUS_ID_FAILURE",
		2: "GROUP_MANAGEMENT_STATUS_ID_OTHER",
		3: "GROUP_MANAGEMENT_STATUS_ID_SUCCESS",
	}
	GROUP_MANAGEMENT_STATUS_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_STATUS_ID_UNKNOWN": 0,
		"GROUP_MANAGEMENT_STATUS_ID_FAILURE": 1,
		"GROUP_MANAGEMENT_STATUS_ID_OTHER":   2,
		"GROUP_MANAGEMENT_STATUS_ID_SUCCESS": 3,
	}
)

func (x GROUP_MANAGEMENT_STATUS_ID) Enum() *GROUP_MANAGEMENT_STATUS_ID {
	p := new(GROUP_MANAGEMENT_STATUS_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[97].Descriptor()
}

func (GROUP_MANAGEMENT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[97]
}

func (x GROUP_MANAGEMENT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_STATUS_ID.Descriptor instead.
func (GROUP_MANAGEMENT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{97}
}

type NETWORK_FILE_ACTIVITY_CLASS_UID int32

const (
	NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY_CLASS_UID_UNKNOWN    NETWORK_FILE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_CLASS_UID_NETWORK_FILE_ACTIVITY_CLASS_UID_BASE_EVENT NETWORK_FILE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_CLASS_UID.
var (
	NETWORK_FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "NETWORK_FILE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	NETWORK_FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"NETWORK_FILE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) Enum() *NETWORK_FILE_ACTIVITY_CLASS_UID {
	p := new(NETWORK_FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[98].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[98]
}

func (x NETWORK_FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{98}
}

type REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED           REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED          REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED              REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION           REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER               REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED         REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED              REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID.
var (
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Enum() *REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[99].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[99]
}

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{99}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNKNOWN       WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[100].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[100]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{100}
}

type SECURITY_FINDING_CLASS_UID int32

const (
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_UNKNOWN    SECURITY_FINDING_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CLASS_UID_SECURITY_FINDING_CLASS_UID_BASE_EVENT SECURITY_FINDING_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_CLASS_UID.
var (
	SECURITY_FINDING_CLASS_UID_name = map[int32]string{
		0: "SECURITY_FINDING_CLASS_UID_UNKNOWN",
		1: "SECURITY_FINDING_CLASS_UID_BASE_EVENT",
	}
	SECURITY_FINDING_CLASS_UID_value = map[string]int32{
		"SECURITY_FINDING_CLASS_UID_UNKNOWN":    0,
		"SECURITY_FINDING_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x SECURITY_FINDING_CLASS_UID) Enum() *SECURITY_FINDING_CLASS_UID {
	p := new(SECURITY_FINDING_CLASS_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[101].Descriptor()
}

func (SECURITY_FINDING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[101]
}

func (x SECURITY_FINDING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CLASS_UID.Descriptor instead.
func (SECURITY_FINDING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{101}
}

type AUTHENTICATION_SEVERITY_ID int32

const (
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_UNKNOWN       AUTHENTICATION_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_CRITICAL      AUTHENTICATION_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_FATAL         AUTHENTICATION_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_HIGH          AUTHENTICATION_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_INFORMATIONAL AUTHENTICATION_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_LOW           AUTHENTICATION_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_MEDIUM        AUTHENTICATION_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	AUTHENTICATION_SEVERITY_ID_AUTHENTICATION_SEVERITY_ID_OTHER         AUTHENTICATION_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_SEVERITY_ID.
var (
	AUTHENTICATION_SEVERITY_ID_name = map[int32]string{
		0: "AUTHENTICATION_SEVERITY_ID_UNKNOWN",
		1: "AUTHENTICATION_SEVERITY_ID_CRITICAL",
		2: "AUTHENTICATION_SEVERITY_ID_FATAL",
		3: "AUTHENTICATION_SEVERITY_ID_HIGH",
		4: "AUTHENTICATION_SEVERITY_ID_INFORMATIONAL",
		5: "AUTHENTICATION_SEVERITY_ID_LOW",
		6: "AUTHENTICATION_SEVERITY_ID_MEDIUM",
		7: "AUTHENTICATION_SEVERITY_ID_OTHER",
	}
	AUTHENTICATION_SEVERITY_ID_value = map[string]int32{
		"AUTHENTICATION_SEVERITY_ID_UNKNOWN":       0,
		"AUTHENTICATION_SEVERITY_ID_CRITICAL":      1,
		"AUTHENTICATION_SEVERITY_ID_FATAL":         2,
		"AUTHENTICATION_SEVERITY_ID_HIGH":          3,
		"AUTHENTICATION_SEVERITY_ID_INFORMATIONAL": 4,
		"AUTHENTICATION_SEVERITY_ID_LOW":           5,
		"AUTHENTICATION_SEVERITY_ID_MEDIUM":        6,
		"AUTHENTICATION_SEVERITY_ID_OTHER":         7,
	}
)

func (x AUTHENTICATION_SEVERITY_ID) Enum() *AUTHENTICATION_SEVERITY_ID {
	p := new(AUTHENTICATION_SEVERITY_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[102].Descriptor()
}

func (AUTHENTICATION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[102]
}

func (x AUTHENTICATION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_SEVERITY_ID.Descriptor instead.
func (AUTHENTICATION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{102}
}

type HTTP_ACTIVITY_SEVERITY_ID int32

const (
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN       HTTP_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_CRITICAL      HTTP_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_FATAL         HTTP_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_HIGH          HTTP_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL HTTP_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_LOW           HTTP_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_MEDIUM        HTTP_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_SEVERITY_ID_HTTP_ACTIVITY_SEVERITY_ID_OTHER         HTTP_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_SEVERITY_ID.
var (
	HTTP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "HTTP_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "HTTP_ACTIVITY_SEVERITY_ID_FATAL",
		3: "HTTP_ACTIVITY_SEVERITY_ID_HIGH",
		4: "HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "HTTP_ACTIVITY_SEVERITY_ID_LOW",
		6: "HTTP_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "HTTP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	HTTP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"HTTP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"HTTP_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"HTTP_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"HTTP_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"HTTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"HTTP_ACTIVITY_SEVERITY_ID_LOW":           5,
		"HTTP_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"HTTP_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x HTTP_ACTIVITY_SEVERITY_ID) Enum() *HTTP_ACTIVITY_SEVERITY_ID {
	p := new(HTTP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[103].Descriptor()
}

func (HTTP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[103]
}

func (x HTTP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (HTTP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{103}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER   WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE",
		2: "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER",
		3: "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE": 1,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER":   2,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[104].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[104]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{104}
}

type EMAIL_URL_ACTIVITY_CLASS_UID int32

const (
	EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY_CLASS_UID_UNKNOWN    EMAIL_URL_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_URL_ACTIVITY_CLASS_UID_EMAIL_URL_ACTIVITY_CLASS_UID_BASE_EVENT EMAIL_URL_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_CLASS_UID.
var (
	EMAIL_URL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "EMAIL_URL_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	EMAIL_URL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"EMAIL_URL_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x EMAIL_URL_ACTIVITY_CLASS_UID) Enum() *EMAIL_URL_ACTIVITY_CLASS_UID {
	p := new(EMAIL_URL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[105].Descriptor()
}

func (EMAIL_URL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[105]
}

func (x EMAIL_URL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{105}
}

type DEVICE_RISK_LEVEL_ID int32

const (
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_UNKNOWN  DEVICE_RISK_LEVEL_ID = 0 // Type: NON_OCSF_VALUE;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_CRITICAL DEVICE_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_HIGH     DEVICE_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_INFO     DEVICE_RISK_LEVEL_ID = 3 // Type: OCSF_VALUE;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_LOW      DEVICE_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_MEDIUM   DEVICE_RISK_LEVEL_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_RISK_LEVEL_ID.
var (
	DEVICE_RISK_LEVEL_ID_name = map[int32]string{
		0: "DEVICE_RISK_LEVEL_ID_UNKNOWN",
		1: "DEVICE_RISK_LEVEL_ID_CRITICAL",
		2: "DEVICE_RISK_LEVEL_ID_HIGH",
		3: "DEVICE_RISK_LEVEL_ID_INFO",
		4: "DEVICE_RISK_LEVEL_ID_LOW",
		5: "DEVICE_RISK_LEVEL_ID_MEDIUM",
	}
	DEVICE_RISK_LEVEL_ID_value = map[string]int32{
		"DEVICE_RISK_LEVEL_ID_UNKNOWN":  0,
		"DEVICE_RISK_LEVEL_ID_CRITICAL": 1,
		"DEVICE_RISK_LEVEL_ID_HIGH":     2,
		"DEVICE_RISK_LEVEL_ID_INFO":     3,
		"DEVICE_RISK_LEVEL_ID_LOW":      4,
		"DEVICE_RISK_LEVEL_ID_MEDIUM":   5,
	}
)

func (x DEVICE_RISK_LEVEL_ID) Enum() *DEVICE_RISK_LEVEL_ID {
	p := new(DEVICE_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[106].Descriptor()
}

func (DEVICE_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[106]
}

func (x DEVICE_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_RISK_LEVEL_ID.Descriptor instead.
func (DEVICE_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{106}
}

type WEB_RESOURCES_ACTIVITY_SEVERITY_ID int32

const (
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN       WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL      WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL         WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH          WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW           WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM        WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER         WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_SEVERITY_ID.
var (
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL",
		3: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH",
		4: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW",
		6: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW":           5,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Enum() *WEB_RESOURCES_ACTIVITY_SEVERITY_ID {
	p := new(WEB_RESOURCES_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[107].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[107]
}

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{107}
}

type NETWORK_ACTIVITY_DISPOSITION_ID int32

const (
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN             NETWORK_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED             NETWORK_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED            NETWORK_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED             NETWORK_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED           NETWORK_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       NETWORK_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED             NETWORK_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DELETED             NETWORK_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED            NETWORK_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED             NETWORK_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED          NETWORK_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED            NETWORK_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED              NETWORK_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION           NETWORK_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_OTHER               NETWORK_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED NETWORK_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED         NETWORK_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED            NETWORK_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED              NETWORK_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	NETWORK_ACTIVITY_DISPOSITION_ID_NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED         NETWORK_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_DISPOSITION_ID.
var (
	NETWORK_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "NETWORK_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "NETWORK_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	NETWORK_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"NETWORK_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"NETWORK_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"NETWORK_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"NETWORK_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"NETWORK_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"NETWORK_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"NETWORK_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"NETWORK_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"NETWORK_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"NETWORK_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"NETWORK_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"NETWORK_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"NETWORK_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"NETWORK_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"NETWORK_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x NETWORK_ACTIVITY_DISPOSITION_ID) Enum() *NETWORK_ACTIVITY_DISPOSITION_ID {
	p := new(NETWORK_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[108].Descriptor()
}

func (NETWORK_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[108]
}

func (x NETWORK_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (NETWORK_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{108}
}

type DHCP_ACTIVITY_CATEGORY_UID int32

const (
	DHCP_ACTIVITY_CATEGORY_UID_DHCP_ACTIVITY_CATEGORY_UID_UNKNOWN       DHCP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DHCP_ACTIVITY_CATEGORY_UID_DHCP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED DHCP_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_CATEGORY_UID.
var (
	DHCP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "DHCP_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "DHCP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	DHCP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"DHCP_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"DHCP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x DHCP_ACTIVITY_CATEGORY_UID) Enum() *DHCP_ACTIVITY_CATEGORY_UID {
	p := new(DHCP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[109].Descriptor()
}

func (DHCP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[109]
}

func (x DHCP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (DHCP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{109}
}

type FTP_ACTIVITY_ACTIVITY_ID int32

const (
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN FTP_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	FTP_ACTIVITY_ACTIVITY_ID_FTP_ACTIVITY_ACTIVITY_ID_OTHER   FTP_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_ACTIVITY_ID.
var (
	FTP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "FTP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	FTP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"FTP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"FTP_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x FTP_ACTIVITY_ACTIVITY_ID) Enum() *FTP_ACTIVITY_ACTIVITY_ID {
	p := new(FTP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[110].Descriptor()
}

func (FTP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[110]
}

func (x FTP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (FTP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{110}
}

type SYSTEM_ACTIVITY_ID int32

const (
	SYSTEM_ACTIVITY_ID_SYSTEM_ACTIVITY_ID_UNKNOWN SYSTEM_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	SYSTEM_ACTIVITY_ID_SYSTEM_ACTIVITY_ID_OTHER   SYSTEM_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_ACTIVITY_ID.
var (
	SYSTEM_ACTIVITY_ID_name = map[int32]string{
		0: "SYSTEM_ACTIVITY_ID_UNKNOWN",
		1: "SYSTEM_ACTIVITY_ID_OTHER",
	}
	SYSTEM_ACTIVITY_ID_value = map[string]int32{
		"SYSTEM_ACTIVITY_ID_UNKNOWN": 0,
		"SYSTEM_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SYSTEM_ACTIVITY_ID) Enum() *SYSTEM_ACTIVITY_ID {
	p := new(SYSTEM_ACTIVITY_ID)
	*p = x
	return p
}

func (x SYSTEM_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[111].Descriptor()
}

func (SYSTEM_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[111]
}

func (x SYSTEM_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_ACTIVITY_ID.Descriptor instead.
func (SYSTEM_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{111}
}

type NETWORK_INTERFACE_TYPE_ID int32

const (
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_UNKNOWN  NETWORK_INTERFACE_TYPE_ID = 0 // Type: OCSF_VALUE;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_MOBILE   NETWORK_INTERFACE_TYPE_ID = 1 // Type: OCSF_VALUE;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_OTHER    NETWORK_INTERFACE_TYPE_ID = 2 // Type: OCSF_VALUE;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_TUNNEL   NETWORK_INTERFACE_TYPE_ID = 3 // Type: OCSF_VALUE;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_WIRED    NETWORK_INTERFACE_TYPE_ID = 4 // Type: OCSF_VALUE;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_WIRELESS NETWORK_INTERFACE_TYPE_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_INTERFACE_TYPE_ID.
var (
	NETWORK_INTERFACE_TYPE_ID_name = map[int32]string{
		0: "NETWORK_INTERFACE_TYPE_ID_UNKNOWN",
		1: "NETWORK_INTERFACE_TYPE_ID_MOBILE",
		2: "NETWORK_INTERFACE_TYPE_ID_OTHER",
		3: "NETWORK_INTERFACE_TYPE_ID_TUNNEL",
		4: "NETWORK_INTERFACE_TYPE_ID_WIRED",
		5: "NETWORK_INTERFACE_TYPE_ID_WIRELESS",
	}
	NETWORK_INTERFACE_TYPE_ID_value = map[string]int32{
		"NETWORK_INTERFACE_TYPE_ID_UNKNOWN":  0,
		"NETWORK_INTERFACE_TYPE_ID_MOBILE":   1,
		"NETWORK_INTERFACE_TYPE_ID_OTHER":    2,
		"NETWORK_INTERFACE_TYPE_ID_TUNNEL":   3,
		"NETWORK_INTERFACE_TYPE_ID_WIRED":    4,
		"NETWORK_INTERFACE_TYPE_ID_WIRELESS": 5,
	}
)

func (x NETWORK_INTERFACE_TYPE_ID) Enum() *NETWORK_INTERFACE_TYPE_ID {
	p := new(NETWORK_INTERFACE_TYPE_ID)
	*p = x
	return p
}

func (x NETWORK_INTERFACE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_INTERFACE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[112].Descriptor()
}

func (NETWORK_INTERFACE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[112]
}

func (x NETWORK_INTERFACE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_INTERFACE_TYPE_ID.Descriptor instead.
func (NETWORK_INTERFACE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{112}
}

type SSH_ACTIVITY_CATEGORY_UID int32

const (
	SSH_ACTIVITY_CATEGORY_UID_SSH_ACTIVITY_CATEGORY_UID_UNKNOWN       SSH_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SSH_ACTIVITY_CATEGORY_UID_SSH_ACTIVITY_CATEGORY_UID_UNCATEGORIZED SSH_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_CATEGORY_UID.
var (
	SSH_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SSH_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "SSH_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	SSH_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SSH_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"SSH_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x SSH_ACTIVITY_CATEGORY_UID) Enum() *SSH_ACTIVITY_CATEGORY_UID {
	p := new(SSH_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[113].Descriptor()
}

func (SSH_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[113]
}

func (x SSH_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SSH_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{113}
}

type HTTP_ACTIVITY_DISPOSITION_ID int32

const (
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN             HTTP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED             HTTP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_APPROVED            HTTP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED             HTTP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED           HTTP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       HTTP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DELAYED             HTTP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DELETED             HTTP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DETECTED            HTTP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_DROPPED             HTTP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED          HTTP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED            HTTP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_LOGGED              HTTP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION           HTTP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_OTHER               HTTP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED HTTP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED         HTTP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_RESTORED            HTTP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_TAGGED              HTTP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_DISPOSITION_ID_HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         HTTP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_DISPOSITION_ID.
var (
	HTTP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "HTTP_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "HTTP_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "HTTP_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "HTTP_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "HTTP_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "HTTP_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "HTTP_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "HTTP_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "HTTP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	HTTP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"HTTP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"HTTP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"HTTP_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"HTTP_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"HTTP_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"HTTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"HTTP_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"HTTP_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"HTTP_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"HTTP_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"HTTP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"HTTP_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"HTTP_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"HTTP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"HTTP_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"HTTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"HTTP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"HTTP_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"HTTP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"HTTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x HTTP_ACTIVITY_DISPOSITION_ID) Enum() *HTTP_ACTIVITY_DISPOSITION_ID {
	p := new(HTTP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[114].Descriptor()
}

func (HTTP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[114]
}

func (x HTTP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (HTTP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{114}
}

type REGISTRY_KEY_ACTIVITY_SEVERITY_ID int32

const (
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN       REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL      REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL         REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH          REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW           REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM        REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER         REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_SEVERITY_ID.
var (
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL",
		3: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH",
		4: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW",
		6: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER",
	}
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW":           5,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Enum() *REGISTRY_KEY_ACTIVITY_SEVERITY_ID {
	p := new(REGISTRY_KEY_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[115].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[115]
}

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{115}
}

type PROCESS_ACTIVITY_CLASS_UID int32

const (
	PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY_CLASS_UID_UNKNOWN    PROCESS_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY_CLASS_UID_BASE_EVENT PROCESS_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_CLASS_UID.
var (
	PROCESS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "PROCESS_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	PROCESS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"PROCESS_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"PROCESS_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x PROCESS_ACTIVITY_CLASS_UID) Enum() *PROCESS_ACTIVITY_CLASS_UID {
	p := new(PROCESS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[116].Descriptor()
}

func (PROCESS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[116]
}

func (x PROCESS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_CLASS_UID.Descriptor instead.
func (PROCESS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{116}
}

type WEB_RESOURCES_ACTIVITY_STATUS_ID int32

const (
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN WEB_RESOURCES_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE WEB_RESOURCES_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER   WEB_RESOURCES_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS WEB_RESOURCES_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_STATUS_ID.
var (
	WEB_RESOURCES_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE",
		2: "WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER",
		3: "WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS",
	}
	WEB_RESOURCES_ACTIVITY_STATUS_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE": 1,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER":   2,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) Enum() *WEB_RESOURCES_ACTIVITY_STATUS_ID {
	p := new(WEB_RESOURCES_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[117].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[117]
}

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_STATUS_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{117}
}

type SECURITY_FINDING_IMPACT_ID int32

const (
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_UNKNOWN  SECURITY_FINDING_IMPACT_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_CRITICAL SECURITY_FINDING_IMPACT_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_HIGH     SECURITY_FINDING_IMPACT_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_LOW      SECURITY_FINDING_IMPACT_ID = 3 // Type: OCSF_VALUE;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_MEDIUM   SECURITY_FINDING_IMPACT_ID = 4 // Type: OCSF_VALUE;
	SECURITY_FINDING_IMPACT_ID_SECURITY_FINDING_IMPACT_ID_OTHER    SECURITY_FINDING_IMPACT_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_IMPACT_ID.
var (
	SECURITY_FINDING_IMPACT_ID_name = map[int32]string{
		0: "SECURITY_FINDING_IMPACT_ID_UNKNOWN",
		1: "SECURITY_FINDING_IMPACT_ID_CRITICAL",
		2: "SECURITY_FINDING_IMPACT_ID_HIGH",
		3: "SECURITY_FINDING_IMPACT_ID_LOW",
		4: "SECURITY_FINDING_IMPACT_ID_MEDIUM",
		5: "SECURITY_FINDING_IMPACT_ID_OTHER",
	}
	SECURITY_FINDING_IMPACT_ID_value = map[string]int32{
		"SECURITY_FINDING_IMPACT_ID_UNKNOWN":  0,
		"SECURITY_FINDING_IMPACT_ID_CRITICAL": 1,
		"SECURITY_FINDING_IMPACT_ID_HIGH":     2,
		"SECURITY_FINDING_IMPACT_ID_LOW":      3,
		"SECURITY_FINDING_IMPACT_ID_MEDIUM":   4,
		"SECURITY_FINDING_IMPACT_ID_OTHER":    5,
	}
)

func (x SECURITY_FINDING_IMPACT_ID) Enum() *SECURITY_FINDING_IMPACT_ID {
	p := new(SECURITY_FINDING_IMPACT_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_IMPACT_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_IMPACT_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[118].Descriptor()
}

func (SECURITY_FINDING_IMPACT_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[118]
}

func (x SECURITY_FINDING_IMPACT_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_IMPACT_ID.Descriptor instead.
func (SECURITY_FINDING_IMPACT_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{118}
}

type ENTITY_MANAGEMENT_CATEGORY_UID int32

const (
	ENTITY_MANAGEMENT_CATEGORY_UID_ENTITY_MANAGEMENT_CATEGORY_UID_UNKNOWN       ENTITY_MANAGEMENT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	ENTITY_MANAGEMENT_CATEGORY_UID_ENTITY_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED ENTITY_MANAGEMENT_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_CATEGORY_UID.
var (
	ENTITY_MANAGEMENT_CATEGORY_UID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_CATEGORY_UID_UNKNOWN",
		1: "ENTITY_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED",
	}
	ENTITY_MANAGEMENT_CATEGORY_UID_value = map[string]int32{
		"ENTITY_MANAGEMENT_CATEGORY_UID_UNKNOWN":       0,
		"ENTITY_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x ENTITY_MANAGEMENT_CATEGORY_UID) Enum() *ENTITY_MANAGEMENT_CATEGORY_UID {
	p := new(ENTITY_MANAGEMENT_CATEGORY_UID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[119].Descriptor()
}

func (ENTITY_MANAGEMENT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[119]
}

func (x ENTITY_MANAGEMENT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_CATEGORY_UID.Descriptor instead.
func (ENTITY_MANAGEMENT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{119}
}

type DNS_ACTIVITY_RCODE_ID int32

const (
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_UNKNOWN     DNS_ACTIVITY_RCODE_ID = 0  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADALG      DNS_ACTIVITY_RCODE_ID = 1  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADCOOKIE   DNS_ACTIVITY_RCODE_ID = 2  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADKEY      DNS_ACTIVITY_RCODE_ID = 3  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADMODE     DNS_ACTIVITY_RCODE_ID = 4  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADNAME     DNS_ACTIVITY_RCODE_ID = 5  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADSIG_VERS DNS_ACTIVITY_RCODE_ID = 6  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADTIME     DNS_ACTIVITY_RCODE_ID = 7  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_BADTRUNC    DNS_ACTIVITY_RCODE_ID = 8  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_DSOTYPENI   DNS_ACTIVITY_RCODE_ID = 9  // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_FORM_ERROR  DNS_ACTIVITY_RCODE_ID = 10 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NX_DOMAIN   DNS_ACTIVITY_RCODE_ID = 11 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NXRR_SET    DNS_ACTIVITY_RCODE_ID = 12 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_AUTH    DNS_ACTIVITY_RCODE_ID = 13 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_IMP     DNS_ACTIVITY_RCODE_ID = 14 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_NOT_ZONE    DNS_ACTIVITY_RCODE_ID = 15 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_OTHER       DNS_ACTIVITY_RCODE_ID = 16 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_REFUSED     DNS_ACTIVITY_RCODE_ID = 17 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_RESERVED    DNS_ACTIVITY_RCODE_ID = 18 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_SERV_ERROR  DNS_ACTIVITY_RCODE_ID = 19 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_UNASSIGNED  DNS_ACTIVITY_RCODE_ID = 20 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_YX_DOMAIN   DNS_ACTIVITY_RCODE_ID = 21 // Type: OCSF_VALUE;
	DNS_ACTIVITY_RCODE_ID_DNS_ACTIVITY_RCODE_ID_YXRR_SET    DNS_ACTIVITY_RCODE_ID = 22 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_RCODE_ID.
var (
	DNS_ACTIVITY_RCODE_ID_name = map[int32]string{
		0:  "DNS_ACTIVITY_RCODE_ID_UNKNOWN",
		1:  "DNS_ACTIVITY_RCODE_ID_BADALG",
		2:  "DNS_ACTIVITY_RCODE_ID_BADCOOKIE",
		3:  "DNS_ACTIVITY_RCODE_ID_BADKEY",
		4:  "DNS_ACTIVITY_RCODE_ID_BADMODE",
		5:  "DNS_ACTIVITY_RCODE_ID_BADNAME",
		6:  "DNS_ACTIVITY_RCODE_ID_BADSIG_VERS",
		7:  "DNS_ACTIVITY_RCODE_ID_BADTIME",
		8:  "DNS_ACTIVITY_RCODE_ID_BADTRUNC",
		9:  "DNS_ACTIVITY_RCODE_ID_DSOTYPENI",
		10: "DNS_ACTIVITY_RCODE_ID_FORM_ERROR",
		11: "DNS_ACTIVITY_RCODE_ID_NX_DOMAIN",
		12: "DNS_ACTIVITY_RCODE_ID_NXRR_SET",
		13: "DNS_ACTIVITY_RCODE_ID_NOT_AUTH",
		14: "DNS_ACTIVITY_RCODE_ID_NOT_IMP",
		15: "DNS_ACTIVITY_RCODE_ID_NOT_ZONE",
		16: "DNS_ACTIVITY_RCODE_ID_OTHER",
		17: "DNS_ACTIVITY_RCODE_ID_REFUSED",
		18: "DNS_ACTIVITY_RCODE_ID_RESERVED",
		19: "DNS_ACTIVITY_RCODE_ID_SERV_ERROR",
		20: "DNS_ACTIVITY_RCODE_ID_UNASSIGNED",
		21: "DNS_ACTIVITY_RCODE_ID_YX_DOMAIN",
		22: "DNS_ACTIVITY_RCODE_ID_YXRR_SET",
	}
	DNS_ACTIVITY_RCODE_ID_value = map[string]int32{
		"DNS_ACTIVITY_RCODE_ID_UNKNOWN":     0,
		"DNS_ACTIVITY_RCODE_ID_BADALG":      1,
		"DNS_ACTIVITY_RCODE_ID_BADCOOKIE":   2,
		"DNS_ACTIVITY_RCODE_ID_BADKEY":      3,
		"DNS_ACTIVITY_RCODE_ID_BADMODE":     4,
		"DNS_ACTIVITY_RCODE_ID_BADNAME":     5,
		"DNS_ACTIVITY_RCODE_ID_BADSIG_VERS": 6,
		"DNS_ACTIVITY_RCODE_ID_BADTIME":     7,
		"DNS_ACTIVITY_RCODE_ID_BADTRUNC":    8,
		"DNS_ACTIVITY_RCODE_ID_DSOTYPENI":   9,
		"DNS_ACTIVITY_RCODE_ID_FORM_ERROR":  10,
		"DNS_ACTIVITY_RCODE_ID_NX_DOMAIN":   11,
		"DNS_ACTIVITY_RCODE_ID_NXRR_SET":    12,
		"DNS_ACTIVITY_RCODE_ID_NOT_AUTH":    13,
		"DNS_ACTIVITY_RCODE_ID_NOT_IMP":     14,
		"DNS_ACTIVITY_RCODE_ID_NOT_ZONE":    15,
		"DNS_ACTIVITY_RCODE_ID_OTHER":       16,
		"DNS_ACTIVITY_RCODE_ID_REFUSED":     17,
		"DNS_ACTIVITY_RCODE_ID_RESERVED":    18,
		"DNS_ACTIVITY_RCODE_ID_SERV_ERROR":  19,
		"DNS_ACTIVITY_RCODE_ID_UNASSIGNED":  20,
		"DNS_ACTIVITY_RCODE_ID_YX_DOMAIN":   21,
		"DNS_ACTIVITY_RCODE_ID_YXRR_SET":    22,
	}
)

func (x DNS_ACTIVITY_RCODE_ID) Enum() *DNS_ACTIVITY_RCODE_ID {
	p := new(DNS_ACTIVITY_RCODE_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_RCODE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_RCODE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[120].Descriptor()
}

func (DNS_ACTIVITY_RCODE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[120]
}

func (x DNS_ACTIVITY_RCODE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_RCODE_ID.Descriptor instead.
func (DNS_ACTIVITY_RCODE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{120}
}

type EMAIL_ACTIVITY_DIRECTION_ID int32

const (
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN  EMAIL_ACTIVITY_DIRECTION_ID = 0 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_INBOUND  EMAIL_ACTIVITY_DIRECTION_ID = 1 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_LATERAL  EMAIL_ACTIVITY_DIRECTION_ID = 2 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_OTHER    EMAIL_ACTIVITY_DIRECTION_ID = 3 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_DIRECTION_ID_EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND EMAIL_ACTIVITY_DIRECTION_ID = 4 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_DIRECTION_ID.
var (
	EMAIL_ACTIVITY_DIRECTION_ID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN",
		1: "EMAIL_ACTIVITY_DIRECTION_ID_INBOUND",
		2: "EMAIL_ACTIVITY_DIRECTION_ID_LATERAL",
		3: "EMAIL_ACTIVITY_DIRECTION_ID_OTHER",
		4: "EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND",
	}
	EMAIL_ACTIVITY_DIRECTION_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_DIRECTION_ID_UNKNOWN":  0,
		"EMAIL_ACTIVITY_DIRECTION_ID_INBOUND":  1,
		"EMAIL_ACTIVITY_DIRECTION_ID_LATERAL":  2,
		"EMAIL_ACTIVITY_DIRECTION_ID_OTHER":    3,
		"EMAIL_ACTIVITY_DIRECTION_ID_OUTBOUND": 4,
	}
)

func (x EMAIL_ACTIVITY_DIRECTION_ID) Enum() *EMAIL_ACTIVITY_DIRECTION_ID {
	p := new(EMAIL_ACTIVITY_DIRECTION_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_DIRECTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_DIRECTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[121].Descriptor()
}

func (EMAIL_ACTIVITY_DIRECTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[121]
}

func (x EMAIL_ACTIVITY_DIRECTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_DIRECTION_ID.Descriptor instead.
func (EMAIL_ACTIVITY_DIRECTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{121}
}

type APPLICATION_STATUS_ID int32

const (
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_UNKNOWN APPLICATION_STATUS_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_FAILURE APPLICATION_STATUS_ID = 1 // Type: OCSF_VALUE;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_OTHER   APPLICATION_STATUS_ID = 2 // Type: OCSF_VALUE;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_SUCCESS APPLICATION_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_STATUS_ID.
var (
	APPLICATION_STATUS_ID_name = map[int32]string{
		0: "APPLICATION_STATUS_ID_UNKNOWN",
		1: "APPLICATION_STATUS_ID_FAILURE",
		2: "APPLICATION_STATUS_ID_OTHER",
		3: "APPLICATION_STATUS_ID_SUCCESS",
	}
	APPLICATION_STATUS_ID_value = map[string]int32{
		"APPLICATION_STATUS_ID_UNKNOWN": 0,
		"APPLICATION_STATUS_ID_FAILURE": 1,
		"APPLICATION_STATUS_ID_OTHER":   2,
		"APPLICATION_STATUS_ID_SUCCESS": 3,
	}
)

func (x APPLICATION_STATUS_ID) Enum() *APPLICATION_STATUS_ID {
	p := new(APPLICATION_STATUS_ID)
	*p = x
	return p
}

func (x APPLICATION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[122].Descriptor()
}

func (APPLICATION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[122]
}

func (x APPLICATION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_STATUS_ID.Descriptor instead.
func (APPLICATION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{122}
}

type FILE_TYPE_ID int32

const (
	FILE_TYPE_ID_FILE_TYPE_ID_UNKNOWN          FILE_TYPE_ID = 0 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_BLOCK_DEVICE     FILE_TYPE_ID = 1 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_CHARACTER_DEVICE FILE_TYPE_ID = 2 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_FOLDER           FILE_TYPE_ID = 3 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_LOCAL_SOCKET     FILE_TYPE_ID = 4 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_NAMED_PIPE       FILE_TYPE_ID = 5 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_OTHER            FILE_TYPE_ID = 6 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_REGULAR_FILE     FILE_TYPE_ID = 7 // Type: OCSF_VALUE;
	FILE_TYPE_ID_FILE_TYPE_ID_SYMBOLIC_LINK    FILE_TYPE_ID = 8 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_TYPE_ID.
var (
	FILE_TYPE_ID_name = map[int32]string{
		0: "FILE_TYPE_ID_UNKNOWN",
		1: "FILE_TYPE_ID_BLOCK_DEVICE",
		2: "FILE_TYPE_ID_CHARACTER_DEVICE",
		3: "FILE_TYPE_ID_FOLDER",
		4: "FILE_TYPE_ID_LOCAL_SOCKET",
		5: "FILE_TYPE_ID_NAMED_PIPE",
		6: "FILE_TYPE_ID_OTHER",
		7: "FILE_TYPE_ID_REGULAR_FILE",
		8: "FILE_TYPE_ID_SYMBOLIC_LINK",
	}
	FILE_TYPE_ID_value = map[string]int32{
		"FILE_TYPE_ID_UNKNOWN":          0,
		"FILE_TYPE_ID_BLOCK_DEVICE":     1,
		"FILE_TYPE_ID_CHARACTER_DEVICE": 2,
		"FILE_TYPE_ID_FOLDER":           3,
		"FILE_TYPE_ID_LOCAL_SOCKET":     4,
		"FILE_TYPE_ID_NAMED_PIPE":       5,
		"FILE_TYPE_ID_OTHER":            6,
		"FILE_TYPE_ID_REGULAR_FILE":     7,
		"FILE_TYPE_ID_SYMBOLIC_LINK":    8,
	}
)

func (x FILE_TYPE_ID) Enum() *FILE_TYPE_ID {
	p := new(FILE_TYPE_ID)
	*p = x
	return p
}

func (x FILE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[123].Descriptor()
}

func (FILE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[123]
}

func (x FILE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_TYPE_ID.Descriptor instead.
func (FILE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{123}
}

type APPLICATION_LIFECYCLE_CATEGORY_UID int32

const (
	APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_LIFECYCLE_CATEGORY_UID_UNKNOWN       APPLICATION_LIFECYCLE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_LIFECYCLE_CATEGORY_UID_UNCATEGORIZED APPLICATION_LIFECYCLE_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_CATEGORY_UID.
var (
	APPLICATION_LIFECYCLE_CATEGORY_UID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_CATEGORY_UID_UNKNOWN",
		1: "APPLICATION_LIFECYCLE_CATEGORY_UID_UNCATEGORIZED",
	}
	APPLICATION_LIFECYCLE_CATEGORY_UID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_CATEGORY_UID_UNKNOWN":       0,
		"APPLICATION_LIFECYCLE_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) Enum() *APPLICATION_LIFECYCLE_CATEGORY_UID {
	p := new(APPLICATION_LIFECYCLE_CATEGORY_UID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[124].Descriptor()
}

func (APPLICATION_LIFECYCLE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[124]
}

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_CATEGORY_UID.Descriptor instead.
func (APPLICATION_LIFECYCLE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{124}
}

type ACCOUNT_CHANGE_CATEGORY_UID int32

const (
	ACCOUNT_CHANGE_CATEGORY_UID_ACCOUNT_CHANGE_CATEGORY_UID_UNKNOWN       ACCOUNT_CHANGE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	ACCOUNT_CHANGE_CATEGORY_UID_ACCOUNT_CHANGE_CATEGORY_UID_UNCATEGORIZED ACCOUNT_CHANGE_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_CATEGORY_UID.
var (
	ACCOUNT_CHANGE_CATEGORY_UID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_CATEGORY_UID_UNKNOWN",
		1: "ACCOUNT_CHANGE_CATEGORY_UID_UNCATEGORIZED",
	}
	ACCOUNT_CHANGE_CATEGORY_UID_value = map[string]int32{
		"ACCOUNT_CHANGE_CATEGORY_UID_UNKNOWN":       0,
		"ACCOUNT_CHANGE_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x ACCOUNT_CHANGE_CATEGORY_UID) Enum() *ACCOUNT_CHANGE_CATEGORY_UID {
	p := new(ACCOUNT_CHANGE_CATEGORY_UID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[125].Descriptor()
}

func (ACCOUNT_CHANGE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[125]
}

func (x ACCOUNT_CHANGE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_CATEGORY_UID.Descriptor instead.
func (ACCOUNT_CHANGE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{125}
}

type HTTP_ACTIVITY_CLASS_UID int32

const (
	HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY_CLASS_UID_UNKNOWN    HTTP_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	HTTP_ACTIVITY_CLASS_UID_HTTP_ACTIVITY_CLASS_UID_BASE_EVENT HTTP_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_CLASS_UID.
var (
	HTTP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "HTTP_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "HTTP_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	HTTP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"HTTP_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"HTTP_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x HTTP_ACTIVITY_CLASS_UID) Enum() *HTTP_ACTIVITY_CLASS_UID {
	p := new(HTTP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[126].Descriptor()
}

func (HTTP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[126]
}

func (x HTTP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_CLASS_UID.Descriptor instead.
func (HTTP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{126}
}

type MODULE_ACTIVITY_ACTIVITY_ID int32

const (
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN MODULE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_OTHER   MODULE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_ACTIVITY_ID.
var (
	MODULE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	MODULE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"MODULE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x MODULE_ACTIVITY_ACTIVITY_ID) Enum() *MODULE_ACTIVITY_ACTIVITY_ID {
	p := new(MODULE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[127].Descriptor()
}

func (MODULE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[127]
}

func (x MODULE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (MODULE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{127}
}

type CONFIG_STATE_CATEGORY_UID int32

const (
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_UNKNOWN       CONFIG_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_UNCATEGORIZED CONFIG_STATE_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_CATEGORY_UID.
var (
	CONFIG_STATE_CATEGORY_UID_name = map[int32]string{
		0: "CONFIG_STATE_CATEGORY_UID_UNKNOWN",
		1: "CONFIG_STATE_CATEGORY_UID_UNCATEGORIZED",
	}
	CONFIG_STATE_CATEGORY_UID_value = map[string]int32{
		"CONFIG_STATE_CATEGORY_UID_UNKNOWN":       0,
		"CONFIG_STATE_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x CONFIG_STATE_CATEGORY_UID) Enum() *CONFIG_STATE_CATEGORY_UID {
	p := new(CONFIG_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[128].Descriptor()
}

func (CONFIG_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[128]
}

func (x CONFIG_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CATEGORY_UID.Descriptor instead.
func (CONFIG_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{128}
}

type ENTITY_MANAGEMENT_CLASS_UID int32

const (
	ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT_CLASS_UID_UNKNOWN    ENTITY_MANAGEMENT_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	ENTITY_MANAGEMENT_CLASS_UID_ENTITY_MANAGEMENT_CLASS_UID_BASE_EVENT ENTITY_MANAGEMENT_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_CLASS_UID.
var (
	ENTITY_MANAGEMENT_CLASS_UID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_CLASS_UID_UNKNOWN",
		1: "ENTITY_MANAGEMENT_CLASS_UID_BASE_EVENT",
	}
	ENTITY_MANAGEMENT_CLASS_UID_value = map[string]int32{
		"ENTITY_MANAGEMENT_CLASS_UID_UNKNOWN":    0,
		"ENTITY_MANAGEMENT_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x ENTITY_MANAGEMENT_CLASS_UID) Enum() *ENTITY_MANAGEMENT_CLASS_UID {
	p := new(ENTITY_MANAGEMENT_CLASS_UID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[129].Descriptor()
}

func (ENTITY_MANAGEMENT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[129]
}

func (x ENTITY_MANAGEMENT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_CLASS_UID.Descriptor instead.
func (ENTITY_MANAGEMENT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{129}
}

type RDP_ACTIVITY_DISPOSITION_ID int32

const (
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN             RDP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ALLOWED             RDP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_APPROVED            RDP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_BLOCKED             RDP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CORRECTED           RDP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       RDP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DELAYED             RDP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DELETED             RDP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DETECTED            RDP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_DROPPED             RDP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_EXONERATED          RDP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_ISOLATED            RDP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_LOGGED              RDP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION           RDP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_OTHER               RDP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED RDP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED         RDP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_RESTORED            RDP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_TAGGED              RDP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	RDP_ACTIVITY_DISPOSITION_ID_RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         RDP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_DISPOSITION_ID.
var (
	RDP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "RDP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "RDP_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "RDP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "RDP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "RDP_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "RDP_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "RDP_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "RDP_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "RDP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "RDP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "RDP_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "RDP_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "RDP_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "RDP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	RDP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"RDP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"RDP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"RDP_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"RDP_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"RDP_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"RDP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"RDP_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"RDP_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"RDP_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"RDP_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"RDP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"RDP_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"RDP_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"RDP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"RDP_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"RDP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"RDP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"RDP_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"RDP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"RDP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x RDP_ACTIVITY_DISPOSITION_ID) Enum() *RDP_ACTIVITY_DISPOSITION_ID {
	p := new(RDP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[130].Descriptor()
}

func (RDP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[130]
}

func (x RDP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (RDP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{130}
}

type REGISTRY_KEY_ACTIVITY_STATUS_ID int32

const (
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN REGISTRY_KEY_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE REGISTRY_KEY_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER   REGISTRY_KEY_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS REGISTRY_KEY_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_STATUS_ID.
var (
	REGISTRY_KEY_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE",
		2: "REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER",
		3: "REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS",
	}
	REGISTRY_KEY_ACTIVITY_STATUS_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE": 1,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER":   2,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) Enum() *REGISTRY_KEY_ACTIVITY_STATUS_ID {
	p := new(REGISTRY_KEY_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[131].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[131]
}

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_STATUS_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{131}
}

type MEMORY_ACTIVITY_ACTIVITY_ID int32

const (
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN MEMORY_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_OTHER   MEMORY_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_ACTIVITY_ID.
var (
	MEMORY_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	MEMORY_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"MEMORY_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x MEMORY_ACTIVITY_ACTIVITY_ID) Enum() *MEMORY_ACTIVITY_ACTIVITY_ID {
	p := new(MEMORY_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[132].Descriptor()
}

func (MEMORY_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[132]
}

func (x MEMORY_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (MEMORY_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{132}
}

type JOB_RUN_STATE_ID int32

const (
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_UNKNOWN JOB_RUN_STATE_ID = 0 // Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_OTHER   JOB_RUN_STATE_ID = 1 // Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_QUEUED  JOB_RUN_STATE_ID = 2 // Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_READY   JOB_RUN_STATE_ID = 3 // Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_RUNNING JOB_RUN_STATE_ID = 4 // Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_STOPPED JOB_RUN_STATE_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for JOB_RUN_STATE_ID.
var (
	JOB_RUN_STATE_ID_name = map[int32]string{
		0: "JOB_RUN_STATE_ID_UNKNOWN",
		1: "JOB_RUN_STATE_ID_OTHER",
		2: "JOB_RUN_STATE_ID_QUEUED",
		3: "JOB_RUN_STATE_ID_READY",
		4: "JOB_RUN_STATE_ID_RUNNING",
		5: "JOB_RUN_STATE_ID_STOPPED",
	}
	JOB_RUN_STATE_ID_value = map[string]int32{
		"JOB_RUN_STATE_ID_UNKNOWN": 0,
		"JOB_RUN_STATE_ID_OTHER":   1,
		"JOB_RUN_STATE_ID_QUEUED":  2,
		"JOB_RUN_STATE_ID_READY":   3,
		"JOB_RUN_STATE_ID_RUNNING": 4,
		"JOB_RUN_STATE_ID_STOPPED": 5,
	}
)

func (x JOB_RUN_STATE_ID) Enum() *JOB_RUN_STATE_ID {
	p := new(JOB_RUN_STATE_ID)
	*p = x
	return p
}

func (x JOB_RUN_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_RUN_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[133].Descriptor()
}

func (JOB_RUN_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[133]
}

func (x JOB_RUN_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_RUN_STATE_ID.Descriptor instead.
func (JOB_RUN_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{133}
}

type ACCOUNT_TYPE_ID int32

const (
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_UNKNOWN          ACCOUNT_TYPE_ID = 0  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_ACCOUNT      ACCOUNT_TYPE_ID = 1  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_IAM_ROLE     ACCOUNT_TYPE_ID = 2  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_IAM_USER     ACCOUNT_TYPE_ID = 3  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_APPLE_ACCOUNT    ACCOUNT_TYPE_ID = 4  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT ACCOUNT_TYPE_ID = 5  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_GCP_ACCOUNT      ACCOUNT_TYPE_ID = 6  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_LDAP_ACCOUNT     ACCOUNT_TYPE_ID = 7  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_LINUX_ACCOUNT    ACCOUNT_TYPE_ID = 8  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT   ACCOUNT_TYPE_ID = 9  // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_OTHER            ACCOUNT_TYPE_ID = 10 // Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT  ACCOUNT_TYPE_ID = 11 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_TYPE_ID.
var (
	ACCOUNT_TYPE_ID_name = map[int32]string{
		0:  "ACCOUNT_TYPE_ID_UNKNOWN",
		1:  "ACCOUNT_TYPE_ID_AWS_ACCOUNT",
		2:  "ACCOUNT_TYPE_ID_AWS_IAM_ROLE",
		3:  "ACCOUNT_TYPE_ID_AWS_IAM_USER",
		4:  "ACCOUNT_TYPE_ID_APPLE_ACCOUNT",
		5:  "ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT",
		6:  "ACCOUNT_TYPE_ID_GCP_ACCOUNT",
		7:  "ACCOUNT_TYPE_ID_LDAP_ACCOUNT",
		8:  "ACCOUNT_TYPE_ID_LINUX_ACCOUNT",
		9:  "ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT",
		10: "ACCOUNT_TYPE_ID_OTHER",
		11: "ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT",
	}
	ACCOUNT_TYPE_ID_value = map[string]int32{
		"ACCOUNT_TYPE_ID_UNKNOWN":          0,
		"ACCOUNT_TYPE_ID_AWS_ACCOUNT":      1,
		"ACCOUNT_TYPE_ID_AWS_IAM_ROLE":     2,
		"ACCOUNT_TYPE_ID_AWS_IAM_USER":     3,
		"ACCOUNT_TYPE_ID_APPLE_ACCOUNT":    4,
		"ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT": 5,
		"ACCOUNT_TYPE_ID_GCP_ACCOUNT":      6,
		"ACCOUNT_TYPE_ID_LDAP_ACCOUNT":     7,
		"ACCOUNT_TYPE_ID_LINUX_ACCOUNT":    8,
		"ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT":   9,
		"ACCOUNT_TYPE_ID_OTHER":            10,
		"ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT":  11,
	}
)

func (x ACCOUNT_TYPE_ID) Enum() *ACCOUNT_TYPE_ID {
	p := new(ACCOUNT_TYPE_ID)
	*p = x
	return p
}

func (x ACCOUNT_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[134].Descriptor()
}

func (ACCOUNT_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[134]
}

func (x ACCOUNT_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_TYPE_ID.Descriptor instead.
func (ACCOUNT_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{134}
}

type INVENTORY_INFO_STATUS_ID int32

const (
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_UNKNOWN INVENTORY_INFO_STATUS_ID = 0 // Type: OCSF_VALUE;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_FAILURE INVENTORY_INFO_STATUS_ID = 1 // Type: OCSF_VALUE;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_OTHER   INVENTORY_INFO_STATUS_ID = 2 // Type: OCSF_VALUE;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_SUCCESS INVENTORY_INFO_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_STATUS_ID.
var (
	INVENTORY_INFO_STATUS_ID_name = map[int32]string{
		0: "INVENTORY_INFO_STATUS_ID_UNKNOWN",
		1: "INVENTORY_INFO_STATUS_ID_FAILURE",
		2: "INVENTORY_INFO_STATUS_ID_OTHER",
		3: "INVENTORY_INFO_STATUS_ID_SUCCESS",
	}
	INVENTORY_INFO_STATUS_ID_value = map[string]int32{
		"INVENTORY_INFO_STATUS_ID_UNKNOWN": 0,
		"INVENTORY_INFO_STATUS_ID_FAILURE": 1,
		"INVENTORY_INFO_STATUS_ID_OTHER":   2,
		"INVENTORY_INFO_STATUS_ID_SUCCESS": 3,
	}
)

func (x INVENTORY_INFO_STATUS_ID) Enum() *INVENTORY_INFO_STATUS_ID {
	p := new(INVENTORY_INFO_STATUS_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[135].Descriptor()
}

func (INVENTORY_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[135]
}

func (x INVENTORY_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_STATUS_ID.Descriptor instead.
func (INVENTORY_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{135}
}

type INVENTORY_INFO_SEVERITY_ID int32

const (
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_UNKNOWN       INVENTORY_INFO_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_CRITICAL      INVENTORY_INFO_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_FATAL         INVENTORY_INFO_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_HIGH          INVENTORY_INFO_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL INVENTORY_INFO_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_LOW           INVENTORY_INFO_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_MEDIUM        INVENTORY_INFO_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_OTHER         INVENTORY_INFO_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_SEVERITY_ID.
var (
	INVENTORY_INFO_SEVERITY_ID_name = map[int32]string{
		0: "INVENTORY_INFO_SEVERITY_ID_UNKNOWN",
		1: "INVENTORY_INFO_SEVERITY_ID_CRITICAL",
		2: "INVENTORY_INFO_SEVERITY_ID_FATAL",
		3: "INVENTORY_INFO_SEVERITY_ID_HIGH",
		4: "INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL",
		5: "INVENTORY_INFO_SEVERITY_ID_LOW",
		6: "INVENTORY_INFO_SEVERITY_ID_MEDIUM",
		7: "INVENTORY_INFO_SEVERITY_ID_OTHER",
	}
	INVENTORY_INFO_SEVERITY_ID_value = map[string]int32{
		"INVENTORY_INFO_SEVERITY_ID_UNKNOWN":       0,
		"INVENTORY_INFO_SEVERITY_ID_CRITICAL":      1,
		"INVENTORY_INFO_SEVERITY_ID_FATAL":         2,
		"INVENTORY_INFO_SEVERITY_ID_HIGH":          3,
		"INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL": 4,
		"INVENTORY_INFO_SEVERITY_ID_LOW":           5,
		"INVENTORY_INFO_SEVERITY_ID_MEDIUM":        6,
		"INVENTORY_INFO_SEVERITY_ID_OTHER":         7,
	}
)

func (x INVENTORY_INFO_SEVERITY_ID) Enum() *INVENTORY_INFO_SEVERITY_ID {
	p := new(INVENTORY_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[136].Descriptor()
}

func (INVENTORY_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[136]
}

func (x INVENTORY_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_SEVERITY_ID.Descriptor instead.
func (INVENTORY_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{136}
}

type NETWORK_CONNECTION_INFO_BOUNDARY_ID int32

const (
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN                 NETWORK_CONNECTION_INFO_BOUNDARY_ID = 0  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 1  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC             NETWORK_CONNECTION_INFO_BOUNDARY_ID = 2  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 3  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 4  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 5  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY    NETWORK_CONNECTION_INFO_BOUNDARY_ID = 6  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 7  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY           NETWORK_CONNECTION_INFO_BOUNDARY_ID = 8  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST               NETWORK_CONNECTION_INFO_BOUNDARY_ID = 9  // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER                   NETWORK_CONNECTION_INFO_BOUNDARY_ID = 10 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 11 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY NETWORK_CONNECTION_INFO_BOUNDARY_ID = 12 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_CONNECTION_INFO_BOUNDARY_ID.
var (
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL",
		2:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC",
		3:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC",
		4:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL",
		5:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY",
		6:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY",
		7:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC",
		8:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY",
		9:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST",
		10: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER",
		11: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC",
		12: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY",
	}
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN":                 0,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL":                1,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC":             2,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC":        3,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL":                4,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY":        5,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY":    6,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC":        7,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY":           8,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST":               9,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER":                   10,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC":                11,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY": 12,
	}
)

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) Enum() *NETWORK_CONNECTION_INFO_BOUNDARY_ID {
	p := new(NETWORK_CONNECTION_INFO_BOUNDARY_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[137].Descriptor()
}

func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[137]
}

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_BOUNDARY_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{137}
}

type REGISTRY_VALUE_ACTIVITY_STATUS_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN REGISTRY_VALUE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE REGISTRY_VALUE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER   REGISTRY_VALUE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS REGISTRY_VALUE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_STATUS_ID.
var (
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE",
		2: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER",
		3: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER":   2,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) Enum() *REGISTRY_VALUE_ACTIVITY_STATUS_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[138].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[138]
}

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_STATUS_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{138}
}

type MEMORY_ACTIVITY_DISPOSITION_ID int32

const (
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN             MEMORY_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED             MEMORY_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED            MEMORY_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED             MEMORY_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED           MEMORY_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       MEMORY_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED             MEMORY_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DELETED             MEMORY_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED            MEMORY_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED             MEMORY_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED          MEMORY_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED            MEMORY_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED              MEMORY_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION           MEMORY_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_OTHER               MEMORY_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED MEMORY_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED         MEMORY_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED            MEMORY_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED              MEMORY_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED         MEMORY_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_DISPOSITION_ID.
var (
	MEMORY_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "MEMORY_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "MEMORY_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	MEMORY_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"MEMORY_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x MEMORY_ACTIVITY_DISPOSITION_ID) Enum() *MEMORY_ACTIVITY_DISPOSITION_ID {
	p := new(MEMORY_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[139].Descriptor()
}

func (MEMORY_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[139]
}

func (x MEMORY_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (MEMORY_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{139}
}

type SCHEDULED_JOB_ACTIVITY_SEVERITY_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN       SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL      SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL         SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH          SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW           SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM        SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER         SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_SEVERITY_ID.
var (
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL",
		3: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH",
		4: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW",
		6: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW":           5,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Enum() *SCHEDULED_JOB_ACTIVITY_SEVERITY_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[140].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[140]
}

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{140}
}

type WEB_RESOURCES_ACTIVITY_ACTIVITY_ID int32

const (
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER   WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_ACTIVITY_ID.
var (
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Enum() *WEB_RESOURCES_ACTIVITY_ACTIVITY_ID {
	p := new(WEB_RESOURCES_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[141].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[141]
}

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{141}
}

type PROCESS_ACTIVITY_SEVERITY_ID int32

const (
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN       PROCESS_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL      PROCESS_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_FATAL         PROCESS_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_HIGH          PROCESS_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL PROCESS_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_LOW           PROCESS_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM        PROCESS_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_OTHER         PROCESS_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_SEVERITY_ID.
var (
	PROCESS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "PROCESS_ACTIVITY_SEVERITY_ID_FATAL",
		3: "PROCESS_ACTIVITY_SEVERITY_ID_HIGH",
		4: "PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "PROCESS_ACTIVITY_SEVERITY_ID_LOW",
		6: "PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "PROCESS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	PROCESS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"PROCESS_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"PROCESS_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"PROCESS_ACTIVITY_SEVERITY_ID_LOW":           5,
		"PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"PROCESS_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x PROCESS_ACTIVITY_SEVERITY_ID) Enum() *PROCESS_ACTIVITY_SEVERITY_ID {
	p := new(PROCESS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[142].Descriptor()
}

func (PROCESS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[142]
}

func (x PROCESS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (PROCESS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{142}
}

type EMAIL_URL_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_URL_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_URL_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_URL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_URL_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_URL_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_URL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[143].Descriptor()
}

func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[143]
}

func (x EMAIL_URL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{143}
}

type FTP_ACTIVITY_CATEGORY_UID int32

const (
	FTP_ACTIVITY_CATEGORY_UID_FTP_ACTIVITY_CATEGORY_UID_UNKNOWN       FTP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FTP_ACTIVITY_CATEGORY_UID_FTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED FTP_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_CATEGORY_UID.
var (
	FTP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "FTP_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "FTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	FTP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"FTP_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"FTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x FTP_ACTIVITY_CATEGORY_UID) Enum() *FTP_ACTIVITY_CATEGORY_UID {
	p := new(FTP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[144].Descriptor()
}

func (FTP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[144]
}

func (x FTP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (FTP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{144}
}

type WIN_RESOURCE_TYPE_ID int32

const (
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_UNKNOWN                   WIN_RESOURCE_TYPE_ID = 0  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_ALPC_PORT                 WIN_RESOURCE_TYPE_ID = 1  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_ADAPTER                   WIN_RESOURCE_TYPE_ID = 2  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_CALLBACK                  WIN_RESOURCE_TYPE_ID = 3  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_CONTROLLER                WIN_RESOURCE_TYPE_ID = 4  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT              WIN_RESOURCE_TYPE_ID = 5  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DESKTOP                   WIN_RESOURCE_TYPE_ID = 6  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DEVICE                    WIN_RESOURCE_TYPE_ID = 7  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DIRECTORY                 WIN_RESOURCE_TYPE_ID = 8  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DRIVER                    WIN_RESOURCE_TYPE_ID = 9  // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_EVENT                     WIN_RESOURCE_TYPE_ID = 10 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_EVENT_PAIR                WIN_RESOURCE_TYPE_ID = 11 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILE                      WIN_RESOURCE_TYPE_ID = 12 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT WIN_RESOURCE_TYPE_ID = 13 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT    WIN_RESOURCE_TYPE_ID = 14 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_IO_COMPLETION             WIN_RESOURCE_TYPE_ID = 15 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_JOB                       WIN_RESOURCE_TYPE_ID = 16 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_KEY                       WIN_RESOURCE_TYPE_ID = 17 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_KEYED_EVENT               WIN_RESOURCE_TYPE_ID = 18 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_MUTANT                    WIN_RESOURCE_TYPE_ID = 19 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_OTHER                     WIN_RESOURCE_TYPE_ID = 20 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PORT                      WIN_RESOURCE_TYPE_ID = 21 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PROCESS                   WIN_RESOURCE_TYPE_ID = 22 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PROFILE                   WIN_RESOURCE_TYPE_ID = 23 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_ALIAS                 WIN_RESOURCE_TYPE_ID = 24 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_DOMAIN                WIN_RESOURCE_TYPE_ID = 25 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_GROUP                 WIN_RESOURCE_TYPE_ID = 26 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_SERVER                WIN_RESOURCE_TYPE_ID = 27 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_USER                  WIN_RESOURCE_TYPE_ID = 28 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SECTION                   WIN_RESOURCE_TYPE_ID = 29 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SEMAPHORE                 WIN_RESOURCE_TYPE_ID = 30 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK             WIN_RESOURCE_TYPE_ID = 31 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_THREAD                    WIN_RESOURCE_TYPE_ID = 32 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TIMER                     WIN_RESOURCE_TYPE_ID = 33 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TOKEN                     WIN_RESOURCE_TYPE_ID = 34 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TYPE                      WIN_RESOURCE_TYPE_ID = 35 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WAITABLE_PORT             WIN_RESOURCE_TYPE_ID = 36 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WINDOW_STATION            WIN_RESOURCE_TYPE_ID = 37 // Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WMI_GUID                  WIN_RESOURCE_TYPE_ID = 38 // Type: OCSF_VALUE;
)

// Enum value maps for WIN_RESOURCE_TYPE_ID.
var (
	WIN_RESOURCE_TYPE_ID_name = map[int32]string{
		0:  "WIN_RESOURCE_TYPE_ID_UNKNOWN",
		1:  "WIN_RESOURCE_TYPE_ID_ALPC_PORT",
		2:  "WIN_RESOURCE_TYPE_ID_ADAPTER",
		3:  "WIN_RESOURCE_TYPE_ID_CALLBACK",
		4:  "WIN_RESOURCE_TYPE_ID_CONTROLLER",
		5:  "WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT",
		6:  "WIN_RESOURCE_TYPE_ID_DESKTOP",
		7:  "WIN_RESOURCE_TYPE_ID_DEVICE",
		8:  "WIN_RESOURCE_TYPE_ID_DIRECTORY",
		9:  "WIN_RESOURCE_TYPE_ID_DRIVER",
		10: "WIN_RESOURCE_TYPE_ID_EVENT",
		11: "WIN_RESOURCE_TYPE_ID_EVENT_PAIR",
		12: "WIN_RESOURCE_TYPE_ID_FILE",
		13: "WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT",
		14: "WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT",
		15: "WIN_RESOURCE_TYPE_ID_IO_COMPLETION",
		16: "WIN_RESOURCE_TYPE_ID_JOB",
		17: "WIN_RESOURCE_TYPE_ID_KEY",
		18: "WIN_RESOURCE_TYPE_ID_KEYED_EVENT",
		19: "WIN_RESOURCE_TYPE_ID_MUTANT",
		20: "WIN_RESOURCE_TYPE_ID_OTHER",
		21: "WIN_RESOURCE_TYPE_ID_PORT",
		22: "WIN_RESOURCE_TYPE_ID_PROCESS",
		23: "WIN_RESOURCE_TYPE_ID_PROFILE",
		24: "WIN_RESOURCE_TYPE_ID_SAM_ALIAS",
		25: "WIN_RESOURCE_TYPE_ID_SAM_DOMAIN",
		26: "WIN_RESOURCE_TYPE_ID_SAM_GROUP",
		27: "WIN_RESOURCE_TYPE_ID_SAM_SERVER",
		28: "WIN_RESOURCE_TYPE_ID_SAM_USER",
		29: "WIN_RESOURCE_TYPE_ID_SECTION",
		30: "WIN_RESOURCE_TYPE_ID_SEMAPHORE",
		31: "WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK",
		32: "WIN_RESOURCE_TYPE_ID_THREAD",
		33: "WIN_RESOURCE_TYPE_ID_TIMER",
		34: "WIN_RESOURCE_TYPE_ID_TOKEN",
		35: "WIN_RESOURCE_TYPE_ID_TYPE",
		36: "WIN_RESOURCE_TYPE_ID_WAITABLE_PORT",
		37: "WIN_RESOURCE_TYPE_ID_WINDOW_STATION",
		38: "WIN_RESOURCE_TYPE_ID_WMI_GUID",
	}
	WIN_RESOURCE_TYPE_ID_value = map[string]int32{
		"WIN_RESOURCE_TYPE_ID_UNKNOWN":                   0,
		"WIN_RESOURCE_TYPE_ID_ALPC_PORT":                 1,
		"WIN_RESOURCE_TYPE_ID_ADAPTER":                   2,
		"WIN_RESOURCE_TYPE_ID_CALLBACK":                  3,
		"WIN_RESOURCE_TYPE_ID_CONTROLLER":                4,
		"WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT":              5,
		"WIN_RESOURCE_TYPE_ID_DESKTOP":                   6,
		"WIN_RESOURCE_TYPE_ID_DEVICE":                    7,
		"WIN_RESOURCE_TYPE_ID_DIRECTORY":                 8,
		"WIN_RESOURCE_TYPE_ID_DRIVER":                    9,
		"WIN_RESOURCE_TYPE_ID_EVENT":                     10,
		"WIN_RESOURCE_TYPE_ID_EVENT_PAIR":                11,
		"WIN_RESOURCE_TYPE_ID_FILE":                      12,
		"WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT": 13,
		"WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT":    14,
		"WIN_RESOURCE_TYPE_ID_IO_COMPLETION":             15,
		"WIN_RESOURCE_TYPE_ID_JOB":                       16,
		"WIN_RESOURCE_TYPE_ID_KEY":                       17,
		"WIN_RESOURCE_TYPE_ID_KEYED_EVENT":               18,
		"WIN_RESOURCE_TYPE_ID_MUTANT":                    19,
		"WIN_RESOURCE_TYPE_ID_OTHER":                     20,
		"WIN_RESOURCE_TYPE_ID_PORT":                      21,
		"WIN_RESOURCE_TYPE_ID_PROCESS":                   22,
		"WIN_RESOURCE_TYPE_ID_PROFILE":                   23,
		"WIN_RESOURCE_TYPE_ID_SAM_ALIAS":                 24,
		"WIN_RESOURCE_TYPE_ID_SAM_DOMAIN":                25,
		"WIN_RESOURCE_TYPE_ID_SAM_GROUP":                 26,
		"WIN_RESOURCE_TYPE_ID_SAM_SERVER":                27,
		"WIN_RESOURCE_TYPE_ID_SAM_USER":                  28,
		"WIN_RESOURCE_TYPE_ID_SECTION":                   29,
		"WIN_RESOURCE_TYPE_ID_SEMAPHORE":                 30,
		"WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK":             31,
		"WIN_RESOURCE_TYPE_ID_THREAD":                    32,
		"WIN_RESOURCE_TYPE_ID_TIMER":                     33,
		"WIN_RESOURCE_TYPE_ID_TOKEN":                     34,
		"WIN_RESOURCE_TYPE_ID_TYPE":                      35,
		"WIN_RESOURCE_TYPE_ID_WAITABLE_PORT":             36,
		"WIN_RESOURCE_TYPE_ID_WINDOW_STATION":            37,
		"WIN_RESOURCE_TYPE_ID_WMI_GUID":                  38,
	}
)

func (x WIN_RESOURCE_TYPE_ID) Enum() *WIN_RESOURCE_TYPE_ID {
	p := new(WIN_RESOURCE_TYPE_ID)
	*p = x
	return p
}

func (x WIN_RESOURCE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WIN_RESOURCE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[145].Descriptor()
}

func (WIN_RESOURCE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[145]
}

func (x WIN_RESOURCE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WIN_RESOURCE_TYPE_ID.Descriptor instead.
func (WIN_RESOURCE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{145}
}

type ENTITY_MANAGEMENT_ACTIVITY_ID int32

const (
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN ENTITY_MANAGEMENT_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_ACTIVITY_ID_ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER   ENTITY_MANAGEMENT_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_ACTIVITY_ID.
var (
	ENTITY_MANAGEMENT_ACTIVITY_ID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN",
		1: "ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER",
	}
	ENTITY_MANAGEMENT_ACTIVITY_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_ACTIVITY_ID_UNKNOWN": 0,
		"ENTITY_MANAGEMENT_ACTIVITY_ID_OTHER":   1,
	}
)

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) Enum() *ENTITY_MANAGEMENT_ACTIVITY_ID {
	p := new(ENTITY_MANAGEMENT_ACTIVITY_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[146].Descriptor()
}

func (ENTITY_MANAGEMENT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[146]
}

func (x ENTITY_MANAGEMENT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_ACTIVITY_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{146}
}

type EMAIL_FILE_ACTIVITY_CLASS_UID int32

const (
	EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY_CLASS_UID_UNKNOWN    EMAIL_FILE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_CLASS_UID_EMAIL_FILE_ACTIVITY_CLASS_UID_BASE_EVENT EMAIL_FILE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_CLASS_UID.
var (
	EMAIL_FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "EMAIL_FILE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	EMAIL_FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"EMAIL_FILE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) Enum() *EMAIL_FILE_ACTIVITY_CLASS_UID {
	p := new(EMAIL_FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[147].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[147]
}

func (x EMAIL_FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{147}
}

type RDP_ACTIVITY_CLASS_UID int32

const (
	RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY_CLASS_UID_UNKNOWN    RDP_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	RDP_ACTIVITY_CLASS_UID_RDP_ACTIVITY_CLASS_UID_BASE_EVENT RDP_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_CLASS_UID.
var (
	RDP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "RDP_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "RDP_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	RDP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"RDP_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"RDP_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x RDP_ACTIVITY_CLASS_UID) Enum() *RDP_ACTIVITY_CLASS_UID {
	p := new(RDP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[148].Descriptor()
}

func (RDP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[148]
}

func (x RDP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_CLASS_UID.Descriptor instead.
func (RDP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{148}
}

type HTTP_ACTIVITY_ACTIVITY_ID int32

const (
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN HTTP_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_ACTIVITY_ID_HTTP_ACTIVITY_ACTIVITY_ID_OTHER   HTTP_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_ACTIVITY_ID.
var (
	HTTP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "HTTP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	HTTP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"HTTP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"HTTP_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x HTTP_ACTIVITY_ACTIVITY_ID) Enum() *HTTP_ACTIVITY_ACTIVITY_ID {
	p := new(HTTP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[149].Descriptor()
}

func (HTTP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[149]
}

func (x HTTP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (HTTP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{149}
}

type SYSTEM_SEVERITY_ID int32

const (
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_UNKNOWN       SYSTEM_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_CRITICAL      SYSTEM_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_FATAL         SYSTEM_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_HIGH          SYSTEM_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_INFORMATIONAL SYSTEM_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_LOW           SYSTEM_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_MEDIUM        SYSTEM_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_OTHER         SYSTEM_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_SEVERITY_ID.
var (
	SYSTEM_SEVERITY_ID_name = map[int32]string{
		0: "SYSTEM_SEVERITY_ID_UNKNOWN",
		1: "SYSTEM_SEVERITY_ID_CRITICAL",
		2: "SYSTEM_SEVERITY_ID_FATAL",
		3: "SYSTEM_SEVERITY_ID_HIGH",
		4: "SYSTEM_SEVERITY_ID_INFORMATIONAL",
		5: "SYSTEM_SEVERITY_ID_LOW",
		6: "SYSTEM_SEVERITY_ID_MEDIUM",
		7: "SYSTEM_SEVERITY_ID_OTHER",
	}
	SYSTEM_SEVERITY_ID_value = map[string]int32{
		"SYSTEM_SEVERITY_ID_UNKNOWN":       0,
		"SYSTEM_SEVERITY_ID_CRITICAL":      1,
		"SYSTEM_SEVERITY_ID_FATAL":         2,
		"SYSTEM_SEVERITY_ID_HIGH":          3,
		"SYSTEM_SEVERITY_ID_INFORMATIONAL": 4,
		"SYSTEM_SEVERITY_ID_LOW":           5,
		"SYSTEM_SEVERITY_ID_MEDIUM":        6,
		"SYSTEM_SEVERITY_ID_OTHER":         7,
	}
)

func (x SYSTEM_SEVERITY_ID) Enum() *SYSTEM_SEVERITY_ID {
	p := new(SYSTEM_SEVERITY_ID)
	*p = x
	return p
}

func (x SYSTEM_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[150].Descriptor()
}

func (SYSTEM_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[150]
}

func (x SYSTEM_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_SEVERITY_ID.Descriptor instead.
func (SYSTEM_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{150}
}

type INVENTORY_INFO_CLASS_UID int32

const (
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_UNKNOWN    INVENTORY_INFO_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_BASE_EVENT INVENTORY_INFO_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_CLASS_UID.
var (
	INVENTORY_INFO_CLASS_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CLASS_UID_UNKNOWN",
		1: "INVENTORY_INFO_CLASS_UID_BASE_EVENT",
	}
	INVENTORY_INFO_CLASS_UID_value = map[string]int32{
		"INVENTORY_INFO_CLASS_UID_UNKNOWN":    0,
		"INVENTORY_INFO_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x INVENTORY_INFO_CLASS_UID) Enum() *INVENTORY_INFO_CLASS_UID {
	p := new(INVENTORY_INFO_CLASS_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[151].Descriptor()
}

func (INVENTORY_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[151]
}

func (x INVENTORY_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CLASS_UID.Descriptor instead.
func (INVENTORY_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{151}
}

type EMAIL_URL_ACTIVITY_STATUS_ID int32

const (
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_URL_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE EMAIL_URL_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_OTHER   EMAIL_URL_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	EMAIL_URL_ACTIVITY_STATUS_ID_EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS EMAIL_URL_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_STATUS_ID.
var (
	EMAIL_URL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE",
		2: "EMAIL_URL_ACTIVITY_STATUS_ID_OTHER",
		3: "EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS",
	}
	EMAIL_URL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_URL_ACTIVITY_STATUS_ID_FAILURE": 1,
		"EMAIL_URL_ACTIVITY_STATUS_ID_OTHER":   2,
		"EMAIL_URL_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x EMAIL_URL_ACTIVITY_STATUS_ID) Enum() *EMAIL_URL_ACTIVITY_STATUS_ID {
	p := new(EMAIL_URL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[152].Descriptor()
}

func (EMAIL_URL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[152]
}

func (x EMAIL_URL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{152}
}

type CVSS_DEPTH int32

const (
	CVSS_DEPTH_CVSS_DEPTH_UNKNOWN       CVSS_DEPTH = 0 // Type: NON_OCSF_VALUE;
	CVSS_DEPTH_CVSS_DEPTH_BASE          CVSS_DEPTH = 1 // Type: OCSF_VALUE;
	CVSS_DEPTH_CVSS_DEPTH_ENVIRONMENTAL CVSS_DEPTH = 2 // Type: OCSF_VALUE;
	CVSS_DEPTH_CVSS_DEPTH_TEMPORAL      CVSS_DEPTH = 3 // Type: OCSF_VALUE;
)

// Enum value maps for CVSS_DEPTH.
var (
	CVSS_DEPTH_name = map[int32]string{
		0: "CVSS_DEPTH_UNKNOWN",
		1: "CVSS_DEPTH_BASE",
		2: "CVSS_DEPTH_ENVIRONMENTAL",
		3: "CVSS_DEPTH_TEMPORAL",
	}
	CVSS_DEPTH_value = map[string]int32{
		"CVSS_DEPTH_UNKNOWN":       0,
		"CVSS_DEPTH_BASE":          1,
		"CVSS_DEPTH_ENVIRONMENTAL": 2,
		"CVSS_DEPTH_TEMPORAL":      3,
	}
)

func (x CVSS_DEPTH) Enum() *CVSS_DEPTH {
	p := new(CVSS_DEPTH)
	*p = x
	return p
}

func (x CVSS_DEPTH) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVSS_DEPTH) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[153].Descriptor()
}

func (CVSS_DEPTH) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[153]
}

func (x CVSS_DEPTH) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVSS_DEPTH.Descriptor instead.
func (CVSS_DEPTH) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{153}
}

type FTP_ACTIVITY_SEVERITY_ID int32

const (
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_UNKNOWN       FTP_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_CRITICAL      FTP_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_FATAL         FTP_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_HIGH          FTP_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL FTP_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_LOW           FTP_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_MEDIUM        FTP_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	FTP_ACTIVITY_SEVERITY_ID_FTP_ACTIVITY_SEVERITY_ID_OTHER         FTP_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_SEVERITY_ID.
var (
	FTP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "FTP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "FTP_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "FTP_ACTIVITY_SEVERITY_ID_FATAL",
		3: "FTP_ACTIVITY_SEVERITY_ID_HIGH",
		4: "FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "FTP_ACTIVITY_SEVERITY_ID_LOW",
		6: "FTP_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "FTP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	FTP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"FTP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"FTP_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"FTP_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"FTP_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"FTP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"FTP_ACTIVITY_SEVERITY_ID_LOW":           5,
		"FTP_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"FTP_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x FTP_ACTIVITY_SEVERITY_ID) Enum() *FTP_ACTIVITY_SEVERITY_ID {
	p := new(FTP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[154].Descriptor()
}

func (FTP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[154]
}

func (x FTP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (FTP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{154}
}

type SSH_ACTIVITY_ACTIVITY_ID int32

const (
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN SSH_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	SSH_ACTIVITY_ACTIVITY_ID_SSH_ACTIVITY_ACTIVITY_ID_OTHER   SSH_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_ACTIVITY_ID.
var (
	SSH_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "SSH_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SSH_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SSH_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"SSH_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SSH_ACTIVITY_ACTIVITY_ID) Enum() *SSH_ACTIVITY_ACTIVITY_ID {
	p := new(SSH_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[155].Descriptor()
}

func (SSH_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[155]
}

func (x SSH_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SSH_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{155}
}

type REGISTRY_KEY_ACTIVITY_ACTIVITY_ID int32

const (
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER   REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_ACTIVITY_ID.
var (
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Enum() *REGISTRY_KEY_ACTIVITY_ACTIVITY_ID {
	p := new(REGISTRY_KEY_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[156].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[156]
}

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{156}
}

type ANALYTIC_TYPE_ID int32

const (
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_UNKNOWN        ANALYTIC_TYPE_ID = 0 // Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_BEHAVIORAL     ANALYTIC_TYPE_ID = 1 // Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_LEARNING_ML_DL ANALYTIC_TYPE_ID = 2 // Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_OTHER          ANALYTIC_TYPE_ID = 3 // Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_RULE           ANALYTIC_TYPE_ID = 4 // Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_STATISTICAL    ANALYTIC_TYPE_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for ANALYTIC_TYPE_ID.
var (
	ANALYTIC_TYPE_ID_name = map[int32]string{
		0: "ANALYTIC_TYPE_ID_UNKNOWN",
		1: "ANALYTIC_TYPE_ID_BEHAVIORAL",
		2: "ANALYTIC_TYPE_ID_LEARNING_ML_DL",
		3: "ANALYTIC_TYPE_ID_OTHER",
		4: "ANALYTIC_TYPE_ID_RULE",
		5: "ANALYTIC_TYPE_ID_STATISTICAL",
	}
	ANALYTIC_TYPE_ID_value = map[string]int32{
		"ANALYTIC_TYPE_ID_UNKNOWN":        0,
		"ANALYTIC_TYPE_ID_BEHAVIORAL":     1,
		"ANALYTIC_TYPE_ID_LEARNING_ML_DL": 2,
		"ANALYTIC_TYPE_ID_OTHER":          3,
		"ANALYTIC_TYPE_ID_RULE":           4,
		"ANALYTIC_TYPE_ID_STATISTICAL":    5,
	}
)

func (x ANALYTIC_TYPE_ID) Enum() *ANALYTIC_TYPE_ID {
	p := new(ANALYTIC_TYPE_ID)
	*p = x
	return p
}

func (x ANALYTIC_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ANALYTIC_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[157].Descriptor()
}

func (ANALYTIC_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[157]
}

func (x ANALYTIC_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ANALYTIC_TYPE_ID.Descriptor instead.
func (ANALYTIC_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{157}
}

type GROUP_MANAGEMENT_SEVERITY_ID int32

const (
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN       GROUP_MANAGEMENT_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL      GROUP_MANAGEMENT_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_FATAL         GROUP_MANAGEMENT_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_HIGH          GROUP_MANAGEMENT_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL GROUP_MANAGEMENT_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_LOW           GROUP_MANAGEMENT_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM        GROUP_MANAGEMENT_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_SEVERITY_ID_GROUP_MANAGEMENT_SEVERITY_ID_OTHER         GROUP_MANAGEMENT_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_SEVERITY_ID.
var (
	GROUP_MANAGEMENT_SEVERITY_ID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN",
		1: "GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL",
		2: "GROUP_MANAGEMENT_SEVERITY_ID_FATAL",
		3: "GROUP_MANAGEMENT_SEVERITY_ID_HIGH",
		4: "GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL",
		5: "GROUP_MANAGEMENT_SEVERITY_ID_LOW",
		6: "GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM",
		7: "GROUP_MANAGEMENT_SEVERITY_ID_OTHER",
	}
	GROUP_MANAGEMENT_SEVERITY_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_SEVERITY_ID_UNKNOWN":       0,
		"GROUP_MANAGEMENT_SEVERITY_ID_CRITICAL":      1,
		"GROUP_MANAGEMENT_SEVERITY_ID_FATAL":         2,
		"GROUP_MANAGEMENT_SEVERITY_ID_HIGH":          3,
		"GROUP_MANAGEMENT_SEVERITY_ID_INFORMATIONAL": 4,
		"GROUP_MANAGEMENT_SEVERITY_ID_LOW":           5,
		"GROUP_MANAGEMENT_SEVERITY_ID_MEDIUM":        6,
		"GROUP_MANAGEMENT_SEVERITY_ID_OTHER":         7,
	}
)

func (x GROUP_MANAGEMENT_SEVERITY_ID) Enum() *GROUP_MANAGEMENT_SEVERITY_ID {
	p := new(GROUP_MANAGEMENT_SEVERITY_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[158].Descriptor()
}

func (GROUP_MANAGEMENT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[158]
}

func (x GROUP_MANAGEMENT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_SEVERITY_ID.Descriptor instead.
func (GROUP_MANAGEMENT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{158}
}

type RESOURCE_ACTIVITY_CLASS_UID int32

const (
	RESOURCE_ACTIVITY_CLASS_UID_RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN    RESOURCE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	RESOURCE_ACTIVITY_CLASS_UID_RESOURCE_ACTIVITY_CLASS_UID_BASE_EVENT RESOURCE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_CLASS_UID.
var (
	RESOURCE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	RESOURCE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"RESOURCE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x RESOURCE_ACTIVITY_CLASS_UID) Enum() *RESOURCE_ACTIVITY_CLASS_UID {
	p := new(RESOURCE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[159].Descriptor()
}

func (RESOURCE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[159]
}

func (x RESOURCE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_CLASS_UID.Descriptor instead.
func (RESOURCE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{159}
}

type FILE_CONFIDENTIALITY_ID int32

const (
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_UNKNOWN          FILE_CONFIDENTIALITY_ID = 0 // Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_CONFIDENTIAL     FILE_CONFIDENTIALITY_ID = 1 // Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL FILE_CONFIDENTIALITY_ID = 2 // Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_OTHER            FILE_CONFIDENTIALITY_ID = 3 // Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_SECRET           FILE_CONFIDENTIALITY_ID = 4 // Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_TOP_SECRET       FILE_CONFIDENTIALITY_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_CONFIDENTIALITY_ID.
var (
	FILE_CONFIDENTIALITY_ID_name = map[int32]string{
		0: "FILE_CONFIDENTIALITY_ID_UNKNOWN",
		1: "FILE_CONFIDENTIALITY_ID_CONFIDENTIAL",
		2: "FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL",
		3: "FILE_CONFIDENTIALITY_ID_OTHER",
		4: "FILE_CONFIDENTIALITY_ID_SECRET",
		5: "FILE_CONFIDENTIALITY_ID_TOP_SECRET",
	}
	FILE_CONFIDENTIALITY_ID_value = map[string]int32{
		"FILE_CONFIDENTIALITY_ID_UNKNOWN":          0,
		"FILE_CONFIDENTIALITY_ID_CONFIDENTIAL":     1,
		"FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL": 2,
		"FILE_CONFIDENTIALITY_ID_OTHER":            3,
		"FILE_CONFIDENTIALITY_ID_SECRET":           4,
		"FILE_CONFIDENTIALITY_ID_TOP_SECRET":       5,
	}
)

func (x FILE_CONFIDENTIALITY_ID) Enum() *FILE_CONFIDENTIALITY_ID {
	p := new(FILE_CONFIDENTIALITY_ID)
	*p = x
	return p
}

func (x FILE_CONFIDENTIALITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_CONFIDENTIALITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[160].Descriptor()
}

func (FILE_CONFIDENTIALITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[160]
}

func (x FILE_CONFIDENTIALITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_CONFIDENTIALITY_ID.Descriptor instead.
func (FILE_CONFIDENTIALITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{160}
}

type SECURITY_FINDING_SEVERITY_ID int32

const (
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_UNKNOWN       SECURITY_FINDING_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_CRITICAL      SECURITY_FINDING_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_FATAL         SECURITY_FINDING_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_HIGH          SECURITY_FINDING_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL SECURITY_FINDING_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_LOW           SECURITY_FINDING_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_MEDIUM        SECURITY_FINDING_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	SECURITY_FINDING_SEVERITY_ID_SECURITY_FINDING_SEVERITY_ID_OTHER         SECURITY_FINDING_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_SEVERITY_ID.
var (
	SECURITY_FINDING_SEVERITY_ID_name = map[int32]string{
		0: "SECURITY_FINDING_SEVERITY_ID_UNKNOWN",
		1: "SECURITY_FINDING_SEVERITY_ID_CRITICAL",
		2: "SECURITY_FINDING_SEVERITY_ID_FATAL",
		3: "SECURITY_FINDING_SEVERITY_ID_HIGH",
		4: "SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL",
		5: "SECURITY_FINDING_SEVERITY_ID_LOW",
		6: "SECURITY_FINDING_SEVERITY_ID_MEDIUM",
		7: "SECURITY_FINDING_SEVERITY_ID_OTHER",
	}
	SECURITY_FINDING_SEVERITY_ID_value = map[string]int32{
		"SECURITY_FINDING_SEVERITY_ID_UNKNOWN":       0,
		"SECURITY_FINDING_SEVERITY_ID_CRITICAL":      1,
		"SECURITY_FINDING_SEVERITY_ID_FATAL":         2,
		"SECURITY_FINDING_SEVERITY_ID_HIGH":          3,
		"SECURITY_FINDING_SEVERITY_ID_INFORMATIONAL": 4,
		"SECURITY_FINDING_SEVERITY_ID_LOW":           5,
		"SECURITY_FINDING_SEVERITY_ID_MEDIUM":        6,
		"SECURITY_FINDING_SEVERITY_ID_OTHER":         7,
	}
)

func (x SECURITY_FINDING_SEVERITY_ID) Enum() *SECURITY_FINDING_SEVERITY_ID {
	p := new(SECURITY_FINDING_SEVERITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[161].Descriptor()
}

func (SECURITY_FINDING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[161]
}

func (x SECURITY_FINDING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_SEVERITY_ID.Descriptor instead.
func (SECURITY_FINDING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{161}
}

type USER_ACCESS_STATUS_ID int32

const (
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_UNKNOWN USER_ACCESS_STATUS_ID = 0 // Type: OCSF_VALUE;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_FAILURE USER_ACCESS_STATUS_ID = 1 // Type: OCSF_VALUE;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_OTHER   USER_ACCESS_STATUS_ID = 2 // Type: OCSF_VALUE;
	USER_ACCESS_STATUS_ID_USER_ACCESS_STATUS_ID_SUCCESS USER_ACCESS_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_STATUS_ID.
var (
	USER_ACCESS_STATUS_ID_name = map[int32]string{
		0: "USER_ACCESS_STATUS_ID_UNKNOWN",
		1: "USER_ACCESS_STATUS_ID_FAILURE",
		2: "USER_ACCESS_STATUS_ID_OTHER",
		3: "USER_ACCESS_STATUS_ID_SUCCESS",
	}
	USER_ACCESS_STATUS_ID_value = map[string]int32{
		"USER_ACCESS_STATUS_ID_UNKNOWN": 0,
		"USER_ACCESS_STATUS_ID_FAILURE": 1,
		"USER_ACCESS_STATUS_ID_OTHER":   2,
		"USER_ACCESS_STATUS_ID_SUCCESS": 3,
	}
)

func (x USER_ACCESS_STATUS_ID) Enum() *USER_ACCESS_STATUS_ID {
	p := new(USER_ACCESS_STATUS_ID)
	*p = x
	return p
}

func (x USER_ACCESS_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[162].Descriptor()
}

func (USER_ACCESS_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[162]
}

func (x USER_ACCESS_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_STATUS_ID.Descriptor instead.
func (USER_ACCESS_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{162}
}

type ACCOUNT_CHANGE_CLASS_UID int32

const (
	ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE_CLASS_UID_UNKNOWN    ACCOUNT_CHANGE_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	ACCOUNT_CHANGE_CLASS_UID_ACCOUNT_CHANGE_CLASS_UID_BASE_EVENT ACCOUNT_CHANGE_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_CLASS_UID.
var (
	ACCOUNT_CHANGE_CLASS_UID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_CLASS_UID_UNKNOWN",
		1: "ACCOUNT_CHANGE_CLASS_UID_BASE_EVENT",
	}
	ACCOUNT_CHANGE_CLASS_UID_value = map[string]int32{
		"ACCOUNT_CHANGE_CLASS_UID_UNKNOWN":    0,
		"ACCOUNT_CHANGE_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x ACCOUNT_CHANGE_CLASS_UID) Enum() *ACCOUNT_CHANGE_CLASS_UID {
	p := new(ACCOUNT_CHANGE_CLASS_UID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[163].Descriptor()
}

func (ACCOUNT_CHANGE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[163]
}

func (x ACCOUNT_CHANGE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_CLASS_UID.Descriptor instead.
func (ACCOUNT_CHANGE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{163}
}

type KERNEL_ACTIVITY_ACTIVITY_ID int32

const (
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN KERNEL_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_OTHER   KERNEL_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_ACTIVITY_ID.
var (
	KERNEL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	KERNEL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"KERNEL_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x KERNEL_ACTIVITY_ACTIVITY_ID) Enum() *KERNEL_ACTIVITY_ACTIVITY_ID {
	p := new(KERNEL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[164].Descriptor()
}

func (KERNEL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[164]
}

func (x KERNEL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (KERNEL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{164}
}

type MEMORY_ACTIVITY_CLASS_UID int32

const (
	MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY_CLASS_UID_UNKNOWN    MEMORY_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY_CLASS_UID_BASE_EVENT MEMORY_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_CLASS_UID.
var (
	MEMORY_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "MEMORY_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	MEMORY_ACTIVITY_CLASS_UID_value = map[string]int32{
		"MEMORY_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"MEMORY_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x MEMORY_ACTIVITY_CLASS_UID) Enum() *MEMORY_ACTIVITY_CLASS_UID {
	p := new(MEMORY_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[165].Descriptor()
}

func (MEMORY_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[165]
}

func (x MEMORY_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_CLASS_UID.Descriptor instead.
func (MEMORY_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{165}
}

type CONFIG_STATE_ACTIVITY_ID int32

const (
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_UNKNOWN CONFIG_STATE_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_OTHER   CONFIG_STATE_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_ACTIVITY_ID.
var (
	CONFIG_STATE_ACTIVITY_ID_name = map[int32]string{
		0: "CONFIG_STATE_ACTIVITY_ID_UNKNOWN",
		1: "CONFIG_STATE_ACTIVITY_ID_OTHER",
	}
	CONFIG_STATE_ACTIVITY_ID_value = map[string]int32{
		"CONFIG_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"CONFIG_STATE_ACTIVITY_ID_OTHER":   1,
	}
)

func (x CONFIG_STATE_ACTIVITY_ID) Enum() *CONFIG_STATE_ACTIVITY_ID {
	p := new(CONFIG_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[166].Descriptor()
}

func (CONFIG_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[166]
}

func (x CONFIG_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_ACTIVITY_ID.Descriptor instead.
func (CONFIG_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{166}
}

type AUTHENTICATION_LOGON_TYPE_ID int32

const (
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN                   AUTHENTICATION_LOGON_TYPE_ID = 0  // Type: NON_OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_BATCH                     AUTHENTICATION_LOGON_TYPE_ID = 1  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE        AUTHENTICATION_LOGON_TYPE_ID = 2  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE AUTHENTICATION_LOGON_TYPE_ID = 3  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK             AUTHENTICATION_LOGON_TYPE_ID = 4  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE               AUTHENTICATION_LOGON_TYPE_ID = 5  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NETWORK                   AUTHENTICATION_LOGON_TYPE_ID = 6  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT         AUTHENTICATION_LOGON_TYPE_ID = 7  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS           AUTHENTICATION_LOGON_TYPE_ID = 8  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE                AUTHENTICATION_LOGON_TYPE_ID = 9  // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_OTHER                     AUTHENTICATION_LOGON_TYPE_ID = 10 // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE        AUTHENTICATION_LOGON_TYPE_ID = 11 // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_SYSTEM                    AUTHENTICATION_LOGON_TYPE_ID = 12 // Type: OCSF_VALUE;
	AUTHENTICATION_LOGON_TYPE_ID_AUTHENTICATION_LOGON_TYPE_ID_UNLOCK                    AUTHENTICATION_LOGON_TYPE_ID = 13 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_LOGON_TYPE_ID.
var (
	AUTHENTICATION_LOGON_TYPE_ID_name = map[int32]string{
		0:  "AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN",
		1:  "AUTHENTICATION_LOGON_TYPE_ID_BATCH",
		2:  "AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE",
		3:  "AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE",
		4:  "AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK",
		5:  "AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE",
		6:  "AUTHENTICATION_LOGON_TYPE_ID_NETWORK",
		7:  "AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT",
		8:  "AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS",
		9:  "AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE",
		10: "AUTHENTICATION_LOGON_TYPE_ID_OTHER",
		11: "AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE",
		12: "AUTHENTICATION_LOGON_TYPE_ID_SYSTEM",
		13: "AUTHENTICATION_LOGON_TYPE_ID_UNLOCK",
	}
	AUTHENTICATION_LOGON_TYPE_ID_value = map[string]int32{
		"AUTHENTICATION_LOGON_TYPE_ID_UNKNOWN":                   0,
		"AUTHENTICATION_LOGON_TYPE_ID_BATCH":                     1,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_INTERACTIVE":        2,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE": 3,
		"AUTHENTICATION_LOGON_TYPE_ID_CACHED_UNLOCK":             4,
		"AUTHENTICATION_LOGON_TYPE_ID_INTERACTIVE":               5,
		"AUTHENTICATION_LOGON_TYPE_ID_NETWORK":                   6,
		"AUTHENTICATION_LOGON_TYPE_ID_NETWORK_CLEARTEXT":         7,
		"AUTHENTICATION_LOGON_TYPE_ID_NEW_CREDENTIALS":           8,
		"AUTHENTICATION_LOGON_TYPE_ID_OS_SERVICE":                9,
		"AUTHENTICATION_LOGON_TYPE_ID_OTHER":                     10,
		"AUTHENTICATION_LOGON_TYPE_ID_REMOTE_INTERACTIVE":        11,
		"AUTHENTICATION_LOGON_TYPE_ID_SYSTEM":                    12,
		"AUTHENTICATION_LOGON_TYPE_ID_UNLOCK":                    13,
	}
)

func (x AUTHENTICATION_LOGON_TYPE_ID) Enum() *AUTHENTICATION_LOGON_TYPE_ID {
	p := new(AUTHENTICATION_LOGON_TYPE_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_LOGON_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_LOGON_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[167].Descriptor()
}

func (AUTHENTICATION_LOGON_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[167]
}

func (x AUTHENTICATION_LOGON_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_LOGON_TYPE_ID.Descriptor instead.
func (AUTHENTICATION_LOGON_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{167}
}

type AUTHORIZE_SESSION_SEVERITY_ID int32

const (
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN       AUTHORIZE_SESSION_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL      AUTHORIZE_SESSION_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_FATAL         AUTHORIZE_SESSION_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_HIGH          AUTHORIZE_SESSION_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL AUTHORIZE_SESSION_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_LOW           AUTHORIZE_SESSION_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM        AUTHORIZE_SESSION_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	AUTHORIZE_SESSION_SEVERITY_ID_AUTHORIZE_SESSION_SEVERITY_ID_OTHER         AUTHORIZE_SESSION_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_SEVERITY_ID.
var (
	AUTHORIZE_SESSION_SEVERITY_ID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN",
		1: "AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL",
		2: "AUTHORIZE_SESSION_SEVERITY_ID_FATAL",
		3: "AUTHORIZE_SESSION_SEVERITY_ID_HIGH",
		4: "AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL",
		5: "AUTHORIZE_SESSION_SEVERITY_ID_LOW",
		6: "AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM",
		7: "AUTHORIZE_SESSION_SEVERITY_ID_OTHER",
	}
	AUTHORIZE_SESSION_SEVERITY_ID_value = map[string]int32{
		"AUTHORIZE_SESSION_SEVERITY_ID_UNKNOWN":       0,
		"AUTHORIZE_SESSION_SEVERITY_ID_CRITICAL":      1,
		"AUTHORIZE_SESSION_SEVERITY_ID_FATAL":         2,
		"AUTHORIZE_SESSION_SEVERITY_ID_HIGH":          3,
		"AUTHORIZE_SESSION_SEVERITY_ID_INFORMATIONAL": 4,
		"AUTHORIZE_SESSION_SEVERITY_ID_LOW":           5,
		"AUTHORIZE_SESSION_SEVERITY_ID_MEDIUM":        6,
		"AUTHORIZE_SESSION_SEVERITY_ID_OTHER":         7,
	}
)

func (x AUTHORIZE_SESSION_SEVERITY_ID) Enum() *AUTHORIZE_SESSION_SEVERITY_ID {
	p := new(AUTHORIZE_SESSION_SEVERITY_ID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[168].Descriptor()
}

func (AUTHORIZE_SESSION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[168]
}

func (x AUTHORIZE_SESSION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_SEVERITY_ID.Descriptor instead.
func (AUTHORIZE_SESSION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{168}
}

type DHCP_ACTIVITY_STATUS_ID int32

const (
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_UNKNOWN DHCP_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_FAILURE DHCP_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_OTHER   DHCP_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_STATUS_ID_DHCP_ACTIVITY_STATUS_ID_SUCCESS DHCP_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_STATUS_ID.
var (
	DHCP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "DHCP_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "DHCP_ACTIVITY_STATUS_ID_FAILURE",
		2: "DHCP_ACTIVITY_STATUS_ID_OTHER",
		3: "DHCP_ACTIVITY_STATUS_ID_SUCCESS",
	}
	DHCP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"DHCP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"DHCP_ACTIVITY_STATUS_ID_FAILURE": 1,
		"DHCP_ACTIVITY_STATUS_ID_OTHER":   2,
		"DHCP_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x DHCP_ACTIVITY_STATUS_ID) Enum() *DHCP_ACTIVITY_STATUS_ID {
	p := new(DHCP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[169].Descriptor()
}

func (DHCP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[169]
}

func (x DHCP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_STATUS_ID.Descriptor instead.
func (DHCP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{169}
}

type HTTP_REQUEST_HTTP_METHOD int32

const (
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_UNKNOWN HTTP_REQUEST_HTTP_METHOD = 0 // Type: NON_OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_CONNECT HTTP_REQUEST_HTTP_METHOD = 1 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_DELETE  HTTP_REQUEST_HTTP_METHOD = 2 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_GET     HTTP_REQUEST_HTTP_METHOD = 3 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_HEAD    HTTP_REQUEST_HTTP_METHOD = 4 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_OPTIONS HTTP_REQUEST_HTTP_METHOD = 5 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_POST    HTTP_REQUEST_HTTP_METHOD = 6 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_PUT     HTTP_REQUEST_HTTP_METHOD = 7 // Type: OCSF_VALUE;
	HTTP_REQUEST_HTTP_METHOD_HTTP_REQUEST_HTTP_METHOD_TRACE   HTTP_REQUEST_HTTP_METHOD = 8 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_REQUEST_HTTP_METHOD.
var (
	HTTP_REQUEST_HTTP_METHOD_name = map[int32]string{
		0: "HTTP_REQUEST_HTTP_METHOD_UNKNOWN",
		1: "HTTP_REQUEST_HTTP_METHOD_CONNECT",
		2: "HTTP_REQUEST_HTTP_METHOD_DELETE",
		3: "HTTP_REQUEST_HTTP_METHOD_GET",
		4: "HTTP_REQUEST_HTTP_METHOD_HEAD",
		5: "HTTP_REQUEST_HTTP_METHOD_OPTIONS",
		6: "HTTP_REQUEST_HTTP_METHOD_POST",
		7: "HTTP_REQUEST_HTTP_METHOD_PUT",
		8: "HTTP_REQUEST_HTTP_METHOD_TRACE",
	}
	HTTP_REQUEST_HTTP_METHOD_value = map[string]int32{
		"HTTP_REQUEST_HTTP_METHOD_UNKNOWN": 0,
		"HTTP_REQUEST_HTTP_METHOD_CONNECT": 1,
		"HTTP_REQUEST_HTTP_METHOD_DELETE":  2,
		"HTTP_REQUEST_HTTP_METHOD_GET":     3,
		"HTTP_REQUEST_HTTP_METHOD_HEAD":    4,
		"HTTP_REQUEST_HTTP_METHOD_OPTIONS": 5,
		"HTTP_REQUEST_HTTP_METHOD_POST":    6,
		"HTTP_REQUEST_HTTP_METHOD_PUT":     7,
		"HTTP_REQUEST_HTTP_METHOD_TRACE":   8,
	}
)

func (x HTTP_REQUEST_HTTP_METHOD) Enum() *HTTP_REQUEST_HTTP_METHOD {
	p := new(HTTP_REQUEST_HTTP_METHOD)
	*p = x
	return p
}

func (x HTTP_REQUEST_HTTP_METHOD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_REQUEST_HTTP_METHOD) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[170].Descriptor()
}

func (HTTP_REQUEST_HTTP_METHOD) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[170]
}

func (x HTTP_REQUEST_HTTP_METHOD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_REQUEST_HTTP_METHOD.Descriptor instead.
func (HTTP_REQUEST_HTTP_METHOD) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{170}
}

type SECURITY_FINDING_RISK_LEVEL_ID int32

const (
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_UNKNOWN  SECURITY_FINDING_RISK_LEVEL_ID = 0 // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL SECURITY_FINDING_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_HIGH     SECURITY_FINDING_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_INFO     SECURITY_FINDING_RISK_LEVEL_ID = 3 // Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_LOW      SECURITY_FINDING_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE;
	SECURITY_FINDING_RISK_LEVEL_ID_SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM   SECURITY_FINDING_RISK_LEVEL_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_RISK_LEVEL_ID.
var (
	SECURITY_FINDING_RISK_LEVEL_ID_name = map[int32]string{
		0: "SECURITY_FINDING_RISK_LEVEL_ID_UNKNOWN",
		1: "SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL",
		2: "SECURITY_FINDING_RISK_LEVEL_ID_HIGH",
		3: "SECURITY_FINDING_RISK_LEVEL_ID_INFO",
		4: "SECURITY_FINDING_RISK_LEVEL_ID_LOW",
		5: "SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM",
	}
	SECURITY_FINDING_RISK_LEVEL_ID_value = map[string]int32{
		"SECURITY_FINDING_RISK_LEVEL_ID_UNKNOWN":  0,
		"SECURITY_FINDING_RISK_LEVEL_ID_CRITICAL": 1,
		"SECURITY_FINDING_RISK_LEVEL_ID_HIGH":     2,
		"SECURITY_FINDING_RISK_LEVEL_ID_INFO":     3,
		"SECURITY_FINDING_RISK_LEVEL_ID_LOW":      4,
		"SECURITY_FINDING_RISK_LEVEL_ID_MEDIUM":   5,
	}
)

func (x SECURITY_FINDING_RISK_LEVEL_ID) Enum() *SECURITY_FINDING_RISK_LEVEL_ID {
	p := new(SECURITY_FINDING_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[171].Descriptor()
}

func (SECURITY_FINDING_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[171]
}

func (x SECURITY_FINDING_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_RISK_LEVEL_ID.Descriptor instead.
func (SECURITY_FINDING_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{171}
}

type AUTHORIZE_SESSION_CATEGORY_UID int32

const (
	AUTHORIZE_SESSION_CATEGORY_UID_AUTHORIZE_SESSION_CATEGORY_UID_UNKNOWN       AUTHORIZE_SESSION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHORIZE_SESSION_CATEGORY_UID_AUTHORIZE_SESSION_CATEGORY_UID_UNCATEGORIZED AUTHORIZE_SESSION_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_CATEGORY_UID.
var (
	AUTHORIZE_SESSION_CATEGORY_UID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_CATEGORY_UID_UNKNOWN",
		1: "AUTHORIZE_SESSION_CATEGORY_UID_UNCATEGORIZED",
	}
	AUTHORIZE_SESSION_CATEGORY_UID_value = map[string]int32{
		"AUTHORIZE_SESSION_CATEGORY_UID_UNKNOWN":       0,
		"AUTHORIZE_SESSION_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x AUTHORIZE_SESSION_CATEGORY_UID) Enum() *AUTHORIZE_SESSION_CATEGORY_UID {
	p := new(AUTHORIZE_SESSION_CATEGORY_UID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[172].Descriptor()
}

func (AUTHORIZE_SESSION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[172]
}

func (x AUTHORIZE_SESSION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_CATEGORY_UID.Descriptor instead.
func (AUTHORIZE_SESSION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{172}
}

type NETWORK_FILE_ACTIVITY_ACTIVITY_ID int32

const (
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER   NETWORK_FILE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_ACTIVITY_ID.
var (
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	NETWORK_FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"NETWORK_FILE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Enum() *NETWORK_FILE_ACTIVITY_ACTIVITY_ID {
	p := new(NETWORK_FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[173].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[173]
}

func (x NETWORK_FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{173}
}

type MODULE_ACTIVITY_DISPOSITION_ID int32

const (
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN             MODULE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED             MODULE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_APPROVED            MODULE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED             MODULE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED           MODULE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       MODULE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DELAYED             MODULE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DELETED             MODULE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DETECTED            MODULE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DROPPED             MODULE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED          MODULE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED            MODULE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_LOGGED              MODULE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION           MODULE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_OTHER               MODULE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED MODULE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED         MODULE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_RESTORED            MODULE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_TAGGED              MODULE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         MODULE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_DISPOSITION_ID.
var (
	MODULE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "MODULE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "MODULE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "MODULE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "MODULE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "MODULE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "MODULE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "MODULE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "MODULE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "MODULE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	MODULE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"MODULE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"MODULE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"MODULE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"MODULE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"MODULE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"MODULE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"MODULE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"MODULE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"MODULE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x MODULE_ACTIVITY_DISPOSITION_ID) Enum() *MODULE_ACTIVITY_DISPOSITION_ID {
	p := new(MODULE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[174].Descriptor()
}

func (MODULE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[174]
}

func (x MODULE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (MODULE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{174}
}

type KERNEL_EXTENSION_ACTIVITY_ID int32

const (
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN KERNEL_EXTENSION_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_OTHER   KERNEL_EXTENSION_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_ACTIVITY_ID.
var (
	KERNEL_EXTENSION_ACTIVITY_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_ACTIVITY_ID_OTHER",
	}
	KERNEL_EXTENSION_ACTIVITY_ID_value = map[string]int32{
		"KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN": 0,
		"KERNEL_EXTENSION_ACTIVITY_ID_OTHER":   1,
	}
)

func (x KERNEL_EXTENSION_ACTIVITY_ID) Enum() *KERNEL_EXTENSION_ACTIVITY_ID {
	p := new(KERNEL_EXTENSION_ACTIVITY_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[175].Descriptor()
}

func (KERNEL_EXTENSION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[175]
}

func (x KERNEL_EXTENSION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_ACTIVITY_ID.Descriptor instead.
func (KERNEL_EXTENSION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{175}
}

type DISCOVERY_ACTIVITY_ID int32

const (
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_UNKNOWN DISCOVERY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_OTHER   DISCOVERY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_ACTIVITY_ID.
var (
	DISCOVERY_ACTIVITY_ID_name = map[int32]string{
		0: "DISCOVERY_ACTIVITY_ID_UNKNOWN",
		1: "DISCOVERY_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_ACTIVITY_ID_UNKNOWN": 0,
		"DISCOVERY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x DISCOVERY_ACTIVITY_ID) Enum() *DISCOVERY_ACTIVITY_ID {
	p := new(DISCOVERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[176].Descriptor()
}

func (DISCOVERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[176]
}

func (x DISCOVERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{176}
}

type FINDINGS_CLASS_UID int32

const (
	FINDINGS_CLASS_UID_FINDINGS_CLASS_UID_UNKNOWN    FINDINGS_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	FINDINGS_CLASS_UID_FINDINGS_CLASS_UID_BASE_EVENT FINDINGS_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FINDINGS_CLASS_UID.
var (
	FINDINGS_CLASS_UID_name = map[int32]string{
		0: "FINDINGS_CLASS_UID_UNKNOWN",
		1: "FINDINGS_CLASS_UID_BASE_EVENT",
	}
	FINDINGS_CLASS_UID_value = map[string]int32{
		"FINDINGS_CLASS_UID_UNKNOWN":    0,
		"FINDINGS_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x FINDINGS_CLASS_UID) Enum() *FINDINGS_CLASS_UID {
	p := new(FINDINGS_CLASS_UID)
	*p = x
	return p
}

func (x FINDINGS_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[177].Descriptor()
}

func (FINDINGS_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[177]
}

func (x FINDINGS_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_CLASS_UID.Descriptor instead.
func (FINDINGS_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{177}
}

type DNS_ACTIVITY_ACTIVITY_ID int32

const (
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN DNS_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	DNS_ACTIVITY_ACTIVITY_ID_DNS_ACTIVITY_ACTIVITY_ID_OTHER   DNS_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_ACTIVITY_ID.
var (
	DNS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "DNS_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	DNS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"DNS_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"DNS_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x DNS_ACTIVITY_ACTIVITY_ID) Enum() *DNS_ACTIVITY_ACTIVITY_ID {
	p := new(DNS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[178].Descriptor()
}

func (DNS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[178]
}

func (x DNS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (DNS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{178}
}

type SYSTEM_CATEGORY_UID int32

const (
	SYSTEM_CATEGORY_UID_SYSTEM_CATEGORY_UID_UNKNOWN       SYSTEM_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SYSTEM_CATEGORY_UID_SYSTEM_CATEGORY_UID_UNCATEGORIZED SYSTEM_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_CATEGORY_UID.
var (
	SYSTEM_CATEGORY_UID_name = map[int32]string{
		0: "SYSTEM_CATEGORY_UID_UNKNOWN",
		1: "SYSTEM_CATEGORY_UID_UNCATEGORIZED",
	}
	SYSTEM_CATEGORY_UID_value = map[string]int32{
		"SYSTEM_CATEGORY_UID_UNKNOWN":       0,
		"SYSTEM_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x SYSTEM_CATEGORY_UID) Enum() *SYSTEM_CATEGORY_UID {
	p := new(SYSTEM_CATEGORY_UID)
	*p = x
	return p
}

func (x SYSTEM_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[179].Descriptor()
}

func (SYSTEM_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[179]
}

func (x SYSTEM_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_CATEGORY_UID.Descriptor instead.
func (SYSTEM_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{179}
}

type MEMORY_ACTIVITY_STATUS_ID int32

const (
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_UNKNOWN MEMORY_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_FAILURE MEMORY_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_OTHER   MEMORY_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_SUCCESS MEMORY_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_STATUS_ID.
var (
	MEMORY_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_STATUS_ID_FAILURE",
		2: "MEMORY_ACTIVITY_STATUS_ID_OTHER",
		3: "MEMORY_ACTIVITY_STATUS_ID_SUCCESS",
	}
	MEMORY_ACTIVITY_STATUS_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"MEMORY_ACTIVITY_STATUS_ID_FAILURE": 1,
		"MEMORY_ACTIVITY_STATUS_ID_OTHER":   2,
		"MEMORY_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x MEMORY_ACTIVITY_STATUS_ID) Enum() *MEMORY_ACTIVITY_STATUS_ID {
	p := new(MEMORY_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[180].Descriptor()
}

func (MEMORY_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[180]
}

func (x MEMORY_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_STATUS_ID.Descriptor instead.
func (MEMORY_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{180}
}

type REPUTATION_SCORE_ID int32

const (
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_UNKNOWN            REPUTATION_SCORE_ID = 0  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_EXERCISE_CAUTION   REPUTATION_SCORE_ID = 1  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_LEANS_SAFE         REPUTATION_SCORE_ID = 2  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_MALICIOUS          REPUTATION_SCORE_ID = 3  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE    REPUTATION_SCORE_ID = 4  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_OTHER              REPUTATION_SCORE_ID = 5  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS REPUTATION_SCORE_ID = 6  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_PROBABLY_MALICIOUS REPUTATION_SCORE_ID = 7  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_PROBABLY_SAFE      REPUTATION_SCORE_ID = 8  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_SAFE               REPUTATION_SCORE_ID = 9  // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_SUSPICIOUS_RISKY   REPUTATION_SCORE_ID = 10 // Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_VERY_SAFE          REPUTATION_SCORE_ID = 11 // Type: OCSF_VALUE;
)

// Enum value maps for REPUTATION_SCORE_ID.
var (
	REPUTATION_SCORE_ID_name = map[int32]string{
		0:  "REPUTATION_SCORE_ID_UNKNOWN",
		1:  "REPUTATION_SCORE_ID_EXERCISE_CAUTION",
		2:  "REPUTATION_SCORE_ID_LEANS_SAFE",
		3:  "REPUTATION_SCORE_ID_MALICIOUS",
		4:  "REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE",
		5:  "REPUTATION_SCORE_ID_OTHER",
		6:  "REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS",
		7:  "REPUTATION_SCORE_ID_PROBABLY_MALICIOUS",
		8:  "REPUTATION_SCORE_ID_PROBABLY_SAFE",
		9:  "REPUTATION_SCORE_ID_SAFE",
		10: "REPUTATION_SCORE_ID_SUSPICIOUS_RISKY",
		11: "REPUTATION_SCORE_ID_VERY_SAFE",
	}
	REPUTATION_SCORE_ID_value = map[string]int32{
		"REPUTATION_SCORE_ID_UNKNOWN":            0,
		"REPUTATION_SCORE_ID_EXERCISE_CAUTION":   1,
		"REPUTATION_SCORE_ID_LEANS_SAFE":         2,
		"REPUTATION_SCORE_ID_MALICIOUS":          3,
		"REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE":    4,
		"REPUTATION_SCORE_ID_OTHER":              5,
		"REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS": 6,
		"REPUTATION_SCORE_ID_PROBABLY_MALICIOUS": 7,
		"REPUTATION_SCORE_ID_PROBABLY_SAFE":      8,
		"REPUTATION_SCORE_ID_SAFE":               9,
		"REPUTATION_SCORE_ID_SUSPICIOUS_RISKY":   10,
		"REPUTATION_SCORE_ID_VERY_SAFE":          11,
	}
)

func (x REPUTATION_SCORE_ID) Enum() *REPUTATION_SCORE_ID {
	p := new(REPUTATION_SCORE_ID)
	*p = x
	return p
}

func (x REPUTATION_SCORE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REPUTATION_SCORE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[181].Descriptor()
}

func (REPUTATION_SCORE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[181]
}

func (x REPUTATION_SCORE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REPUTATION_SCORE_ID.Descriptor instead.
func (REPUTATION_SCORE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{181}
}

type CONFIG_STATE_CLASS_UID int32

const (
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_UNKNOWN    CONFIG_STATE_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_BASE_EVENT CONFIG_STATE_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_CLASS_UID.
var (
	CONFIG_STATE_CLASS_UID_name = map[int32]string{
		0: "CONFIG_STATE_CLASS_UID_UNKNOWN",
		1: "CONFIG_STATE_CLASS_UID_BASE_EVENT",
	}
	CONFIG_STATE_CLASS_UID_value = map[string]int32{
		"CONFIG_STATE_CLASS_UID_UNKNOWN":    0,
		"CONFIG_STATE_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x CONFIG_STATE_CLASS_UID) Enum() *CONFIG_STATE_CLASS_UID {
	p := new(CONFIG_STATE_CLASS_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[182].Descriptor()
}

func (CONFIG_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[182]
}

func (x CONFIG_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CLASS_UID.Descriptor instead.
func (CONFIG_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{182}
}

type DISCOVERY_STATUS_ID int32

const (
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_UNKNOWN DISCOVERY_STATUS_ID = 0 // Type: OCSF_VALUE;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_FAILURE DISCOVERY_STATUS_ID = 1 // Type: OCSF_VALUE;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_OTHER   DISCOVERY_STATUS_ID = 2 // Type: OCSF_VALUE;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_SUCCESS DISCOVERY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_STATUS_ID.
var (
	DISCOVERY_STATUS_ID_name = map[int32]string{
		0: "DISCOVERY_STATUS_ID_UNKNOWN",
		1: "DISCOVERY_STATUS_ID_FAILURE",
		2: "DISCOVERY_STATUS_ID_OTHER",
		3: "DISCOVERY_STATUS_ID_SUCCESS",
	}
	DISCOVERY_STATUS_ID_value = map[string]int32{
		"DISCOVERY_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_STATUS_ID_FAILURE": 1,
		"DISCOVERY_STATUS_ID_OTHER":   2,
		"DISCOVERY_STATUS_ID_SUCCESS": 3,
	}
)

func (x DISCOVERY_STATUS_ID) Enum() *DISCOVERY_STATUS_ID {
	p := new(DISCOVERY_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[183].Descriptor()
}

func (DISCOVERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[183]
}

func (x DISCOVERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_STATUS_ID.Descriptor instead.
func (DISCOVERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{183}
}

type SMB_ACTIVITY_DISPOSITION_ID int32

const (
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN             SMB_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ALLOWED             SMB_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_APPROVED            SMB_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_BLOCKED             SMB_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CORRECTED           SMB_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SMB_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DELAYED             SMB_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DELETED             SMB_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DETECTED            SMB_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_DROPPED             SMB_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_EXONERATED          SMB_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_ISOLATED            SMB_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_LOGGED              SMB_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION           SMB_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_OTHER               SMB_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SMB_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED         SMB_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_RESTORED            SMB_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_TAGGED              SMB_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	SMB_ACTIVITY_DISPOSITION_ID_SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SMB_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_DISPOSITION_ID.
var (
	SMB_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SMB_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SMB_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "SMB_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "SMB_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SMB_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "SMB_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "SMB_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "SMB_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "SMB_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SMB_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "SMB_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "SMB_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "SMB_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "SMB_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	SMB_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SMB_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SMB_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SMB_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"SMB_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"SMB_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"SMB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SMB_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"SMB_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"SMB_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"SMB_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"SMB_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SMB_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"SMB_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"SMB_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"SMB_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"SMB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SMB_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"SMB_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"SMB_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SMB_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SMB_ACTIVITY_DISPOSITION_ID) Enum() *SMB_ACTIVITY_DISPOSITION_ID {
	p := new(SMB_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[184].Descriptor()
}

func (SMB_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[184]
}

func (x SMB_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SMB_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{184}
}

type MODULE_ACTIVITY_CATEGORY_UID int32

const (
	MODULE_ACTIVITY_CATEGORY_UID_MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN       MODULE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	MODULE_ACTIVITY_CATEGORY_UID_MODULE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED MODULE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_CATEGORY_UID.
var (
	MODULE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "MODULE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	MODULE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"MODULE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x MODULE_ACTIVITY_CATEGORY_UID) Enum() *MODULE_ACTIVITY_CATEGORY_UID {
	p := new(MODULE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[185].Descriptor()
}

func (MODULE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[185]
}

func (x MODULE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (MODULE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{185}
}

type MEMORY_ACTIVITY_SEVERITY_ID int32

const (
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN       MEMORY_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL      MEMORY_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_FATAL         MEMORY_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_HIGH          MEMORY_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL MEMORY_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_LOW           MEMORY_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM        MEMORY_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_OTHER         MEMORY_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for MEMORY_ACTIVITY_SEVERITY_ID.
var (
	MEMORY_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "MEMORY_ACTIVITY_SEVERITY_ID_FATAL",
		3: "MEMORY_ACTIVITY_SEVERITY_ID_HIGH",
		4: "MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "MEMORY_ACTIVITY_SEVERITY_ID_LOW",
		6: "MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "MEMORY_ACTIVITY_SEVERITY_ID_OTHER",
	}
	MEMORY_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"MEMORY_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"MEMORY_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"MEMORY_ACTIVITY_SEVERITY_ID_LOW":           5,
		"MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"MEMORY_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x MEMORY_ACTIVITY_SEVERITY_ID) Enum() *MEMORY_ACTIVITY_SEVERITY_ID {
	p := new(MEMORY_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[186].Descriptor()
}

func (MEMORY_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[186]
}

func (x MEMORY_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (MEMORY_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{186}
}

type AUTHORIZE_SESSION_CLASS_UID int32

const (
	AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION_CLASS_UID_UNKNOWN    AUTHORIZE_SESSION_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	AUTHORIZE_SESSION_CLASS_UID_AUTHORIZE_SESSION_CLASS_UID_BASE_EVENT AUTHORIZE_SESSION_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHORIZE_SESSION_CLASS_UID.
var (
	AUTHORIZE_SESSION_CLASS_UID_name = map[int32]string{
		0: "AUTHORIZE_SESSION_CLASS_UID_UNKNOWN",
		1: "AUTHORIZE_SESSION_CLASS_UID_BASE_EVENT",
	}
	AUTHORIZE_SESSION_CLASS_UID_value = map[string]int32{
		"AUTHORIZE_SESSION_CLASS_UID_UNKNOWN":    0,
		"AUTHORIZE_SESSION_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x AUTHORIZE_SESSION_CLASS_UID) Enum() *AUTHORIZE_SESSION_CLASS_UID {
	p := new(AUTHORIZE_SESSION_CLASS_UID)
	*p = x
	return p
}

func (x AUTHORIZE_SESSION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHORIZE_SESSION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[187].Descriptor()
}

func (AUTHORIZE_SESSION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[187]
}

func (x AUTHORIZE_SESSION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHORIZE_SESSION_CLASS_UID.Descriptor instead.
func (AUTHORIZE_SESSION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{187}
}

type DHCP_ACTIVITY_CLASS_UID int32

const (
	DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY_CLASS_UID_UNKNOWN    DHCP_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	DHCP_ACTIVITY_CLASS_UID_DHCP_ACTIVITY_CLASS_UID_BASE_EVENT DHCP_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_CLASS_UID.
var (
	DHCP_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "DHCP_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "DHCP_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	DHCP_ACTIVITY_CLASS_UID_value = map[string]int32{
		"DHCP_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"DHCP_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x DHCP_ACTIVITY_CLASS_UID) Enum() *DHCP_ACTIVITY_CLASS_UID {
	p := new(DHCP_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[188].Descriptor()
}

func (DHCP_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[188]
}

func (x DHCP_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_CLASS_UID.Descriptor instead.
func (DHCP_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{188}
}

type NETWORK_FILE_ACTIVITY_STATUS_ID int32

const (
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN NETWORK_FILE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE NETWORK_FILE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER   NETWORK_FILE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_STATUS_ID_NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS NETWORK_FILE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_STATUS_ID.
var (
	NETWORK_FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE",
		2: "NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER",
		3: "NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	NETWORK_FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_OTHER":   2,
		"NETWORK_FILE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) Enum() *NETWORK_FILE_ACTIVITY_STATUS_ID {
	p := new(NETWORK_FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[189].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[189]
}

func (x NETWORK_FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{189}
}

type KERNEL_EXTENSION_STATUS_ID int32

const (
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_UNKNOWN KERNEL_EXTENSION_STATUS_ID = 0 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_FAILURE KERNEL_EXTENSION_STATUS_ID = 1 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_OTHER   KERNEL_EXTENSION_STATUS_ID = 2 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_SUCCESS KERNEL_EXTENSION_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_STATUS_ID.
var (
	KERNEL_EXTENSION_STATUS_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_STATUS_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_STATUS_ID_FAILURE",
		2: "KERNEL_EXTENSION_STATUS_ID_OTHER",
		3: "KERNEL_EXTENSION_STATUS_ID_SUCCESS",
	}
	KERNEL_EXTENSION_STATUS_ID_value = map[string]int32{
		"KERNEL_EXTENSION_STATUS_ID_UNKNOWN": 0,
		"KERNEL_EXTENSION_STATUS_ID_FAILURE": 1,
		"KERNEL_EXTENSION_STATUS_ID_OTHER":   2,
		"KERNEL_EXTENSION_STATUS_ID_SUCCESS": 3,
	}
)

func (x KERNEL_EXTENSION_STATUS_ID) Enum() *KERNEL_EXTENSION_STATUS_ID {
	p := new(KERNEL_EXTENSION_STATUS_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[190].Descriptor()
}

func (KERNEL_EXTENSION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[190]
}

func (x KERNEL_EXTENSION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_STATUS_ID.Descriptor instead.
func (KERNEL_EXTENSION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{190}
}

type RDP_ACTIVITY_SEVERITY_ID int32

const (
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_UNKNOWN       RDP_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_CRITICAL      RDP_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_FATAL         RDP_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_HIGH          RDP_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL RDP_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_LOW           RDP_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_MEDIUM        RDP_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	RDP_ACTIVITY_SEVERITY_ID_RDP_ACTIVITY_SEVERITY_ID_OTHER         RDP_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for RDP_ACTIVITY_SEVERITY_ID.
var (
	RDP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "RDP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "RDP_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "RDP_ACTIVITY_SEVERITY_ID_FATAL",
		3: "RDP_ACTIVITY_SEVERITY_ID_HIGH",
		4: "RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "RDP_ACTIVITY_SEVERITY_ID_LOW",
		6: "RDP_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "RDP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	RDP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"RDP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"RDP_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"RDP_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"RDP_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"RDP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"RDP_ACTIVITY_SEVERITY_ID_LOW":           5,
		"RDP_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"RDP_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x RDP_ACTIVITY_SEVERITY_ID) Enum() *RDP_ACTIVITY_SEVERITY_ID {
	p := new(RDP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x RDP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RDP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[191].Descriptor()
}

func (RDP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[191]
}

func (x RDP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RDP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (RDP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{191}
}

type EMAIL_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_ACTIVITY_ID_EMAIL_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "EMAIL_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x EMAIL_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[192].Descriptor()
}

func (EMAIL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[192]
}

func (x EMAIL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{192}
}

type MODULE_ACTIVITY_SEVERITY_ID int32

const (
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN       MODULE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_CRITICAL      MODULE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_FATAL         MODULE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_HIGH          MODULE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL MODULE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_LOW           MODULE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_MEDIUM        MODULE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_OTHER         MODULE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_SEVERITY_ID.
var (
	MODULE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "MODULE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "MODULE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "MODULE_ACTIVITY_SEVERITY_ID_LOW",
		6: "MODULE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "MODULE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	MODULE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"MODULE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"MODULE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"MODULE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"MODULE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"MODULE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"MODULE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x MODULE_ACTIVITY_SEVERITY_ID) Enum() *MODULE_ACTIVITY_SEVERITY_ID {
	p := new(MODULE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[193].Descriptor()
}

func (MODULE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[193]
}

func (x MODULE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (MODULE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{193}
}

type REGISTRY_KEY_ACTIVITY_DISPOSITION_ID int32

const (
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED           REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED          REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED              REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION           REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER               REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED         REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED              REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED         REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_DISPOSITION_ID.
var (
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Enum() *REGISTRY_KEY_ACTIVITY_DISPOSITION_ID {
	p := new(REGISTRY_KEY_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[194].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[194]
}

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{194}
}

type KERNEL_EXTENSION_DISPOSITION_ID int32

const (
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN             KERNEL_EXTENSION_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED             KERNEL_EXTENSION_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_APPROVED            KERNEL_EXTENSION_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED             KERNEL_EXTENSION_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED           KERNEL_EXTENSION_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION       KERNEL_EXTENSION_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DELAYED             KERNEL_EXTENSION_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DELETED             KERNEL_EXTENSION_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DETECTED            KERNEL_EXTENSION_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DROPPED             KERNEL_EXTENSION_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED          KERNEL_EXTENSION_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED            KERNEL_EXTENSION_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_LOGGED              KERNEL_EXTENSION_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION           KERNEL_EXTENSION_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_OTHER               KERNEL_EXTENSION_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED KERNEL_EXTENSION_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED         KERNEL_EXTENSION_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_RESTORED            KERNEL_EXTENSION_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_TAGGED              KERNEL_EXTENSION_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED         KERNEL_EXTENSION_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_DISPOSITION_ID.
var (
	KERNEL_EXTENSION_DISPOSITION_ID_name = map[int32]string{
		0:  "KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN",
		1:  "KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED",
		2:  "KERNEL_EXTENSION_DISPOSITION_ID_APPROVED",
		3:  "KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED",
		4:  "KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED",
		5:  "KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "KERNEL_EXTENSION_DISPOSITION_ID_DELAYED",
		7:  "KERNEL_EXTENSION_DISPOSITION_ID_DELETED",
		8:  "KERNEL_EXTENSION_DISPOSITION_ID_DETECTED",
		9:  "KERNEL_EXTENSION_DISPOSITION_ID_DROPPED",
		10: "KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED",
		11: "KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED",
		12: "KERNEL_EXTENSION_DISPOSITION_ID_LOGGED",
		13: "KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION",
		14: "KERNEL_EXTENSION_DISPOSITION_ID_OTHER",
		15: "KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED",
		17: "KERNEL_EXTENSION_DISPOSITION_ID_RESTORED",
		18: "KERNEL_EXTENSION_DISPOSITION_ID_TAGGED",
		19: "KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED",
	}
	KERNEL_EXTENSION_DISPOSITION_ID_value = map[string]int32{
		"KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN":             0,
		"KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED":             1,
		"KERNEL_EXTENSION_DISPOSITION_ID_APPROVED":            2,
		"KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED":             3,
		"KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED":           4,
		"KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"KERNEL_EXTENSION_DISPOSITION_ID_DELAYED":             6,
		"KERNEL_EXTENSION_DISPOSITION_ID_DELETED":             7,
		"KERNEL_EXTENSION_DISPOSITION_ID_DETECTED":            8,
		"KERNEL_EXTENSION_DISPOSITION_ID_DROPPED":             9,
		"KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED":          10,
		"KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED":            11,
		"KERNEL_EXTENSION_DISPOSITION_ID_LOGGED":              12,
		"KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION":           13,
		"KERNEL_EXTENSION_DISPOSITION_ID_OTHER":               14,
		"KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED":         16,
		"KERNEL_EXTENSION_DISPOSITION_ID_RESTORED":            17,
		"KERNEL_EXTENSION_DISPOSITION_ID_TAGGED":              18,
		"KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x KERNEL_EXTENSION_DISPOSITION_ID) Enum() *KERNEL_EXTENSION_DISPOSITION_ID {
	p := new(KERNEL_EXTENSION_DISPOSITION_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[195].Descriptor()
}

func (KERNEL_EXTENSION_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[195]
}

func (x KERNEL_EXTENSION_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_DISPOSITION_ID.Descriptor instead.
func (KERNEL_EXTENSION_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{195}
}

type PROCESS_ACTIVITY_ACTIVITY_ID int32

const (
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN PROCESS_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_OTHER   PROCESS_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_ACTIVITY_ID.
var (
	PROCESS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	PROCESS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"PROCESS_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x PROCESS_ACTIVITY_ACTIVITY_ID) Enum() *PROCESS_ACTIVITY_ACTIVITY_ID {
	p := new(PROCESS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[196].Descriptor()
}

func (PROCESS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[196]
}

func (x PROCESS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (PROCESS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{196}
}

type SCHEDULED_JOB_ACTIVITY_STATUS_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN SCHEDULED_JOB_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE SCHEDULED_JOB_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER   SCHEDULED_JOB_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS SCHEDULED_JOB_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_STATUS_ID.
var (
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE",
		2: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER",
		3: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS",
	}
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE": 1,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER":   2,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) Enum() *SCHEDULED_JOB_ACTIVITY_STATUS_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[197].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[197]
}

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_STATUS_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{197}
}

type OS_TYPE_ID int32

const (
	OS_TYPE_ID_OS_TYPE_ID_UNKNOWN        OS_TYPE_ID = 0  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_AIX            OS_TYPE_ID = 1  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_ANDROID        OS_TYPE_ID = 2  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_HP_UX          OS_TYPE_ID = 3  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_LINUX          OS_TYPE_ID = 4  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_OTHER          OS_TYPE_ID = 5  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_SOLARIS        OS_TYPE_ID = 6  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_WINDOWS        OS_TYPE_ID = 7  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_WINDOWS_MOBILE OS_TYPE_ID = 8  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_I_OS           OS_TYPE_ID = 9  // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_I_PAD_OS       OS_TYPE_ID = 10 // Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_MAC_OS         OS_TYPE_ID = 11 // Type: OCSF_VALUE;
)

// Enum value maps for OS_TYPE_ID.
var (
	OS_TYPE_ID_name = map[int32]string{
		0:  "OS_TYPE_ID_UNKNOWN",
		1:  "OS_TYPE_ID_AIX",
		2:  "OS_TYPE_ID_ANDROID",
		3:  "OS_TYPE_ID_HP_UX",
		4:  "OS_TYPE_ID_LINUX",
		5:  "OS_TYPE_ID_OTHER",
		6:  "OS_TYPE_ID_SOLARIS",
		7:  "OS_TYPE_ID_WINDOWS",
		8:  "OS_TYPE_ID_WINDOWS_MOBILE",
		9:  "OS_TYPE_ID_I_OS",
		10: "OS_TYPE_ID_I_PAD_OS",
		11: "OS_TYPE_ID_MAC_OS",
	}
	OS_TYPE_ID_value = map[string]int32{
		"OS_TYPE_ID_UNKNOWN":        0,
		"OS_TYPE_ID_AIX":            1,
		"OS_TYPE_ID_ANDROID":        2,
		"OS_TYPE_ID_HP_UX":          3,
		"OS_TYPE_ID_LINUX":          4,
		"OS_TYPE_ID_OTHER":          5,
		"OS_TYPE_ID_SOLARIS":        6,
		"OS_TYPE_ID_WINDOWS":        7,
		"OS_TYPE_ID_WINDOWS_MOBILE": 8,
		"OS_TYPE_ID_I_OS":           9,
		"OS_TYPE_ID_I_PAD_OS":       10,
		"OS_TYPE_ID_MAC_OS":         11,
	}
)

func (x OS_TYPE_ID) Enum() *OS_TYPE_ID {
	p := new(OS_TYPE_ID)
	*p = x
	return p
}

func (x OS_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OS_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[198].Descriptor()
}

func (OS_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[198]
}

func (x OS_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OS_TYPE_ID.Descriptor instead.
func (OS_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{198}
}

type DNS_ACTIVITY_SEVERITY_ID int32

const (
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_UNKNOWN       DNS_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_CRITICAL      DNS_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_FATAL         DNS_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_HIGH          DNS_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL DNS_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_LOW           DNS_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_MEDIUM        DNS_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	DNS_ACTIVITY_SEVERITY_ID_DNS_ACTIVITY_SEVERITY_ID_OTHER         DNS_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_SEVERITY_ID.
var (
	DNS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "DNS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "DNS_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "DNS_ACTIVITY_SEVERITY_ID_FATAL",
		3: "DNS_ACTIVITY_SEVERITY_ID_HIGH",
		4: "DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "DNS_ACTIVITY_SEVERITY_ID_LOW",
		6: "DNS_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "DNS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	DNS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"DNS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"DNS_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"DNS_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"DNS_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"DNS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"DNS_ACTIVITY_SEVERITY_ID_LOW":           5,
		"DNS_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"DNS_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x DNS_ACTIVITY_SEVERITY_ID) Enum() *DNS_ACTIVITY_SEVERITY_ID {
	p := new(DNS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[199].Descriptor()
}

func (DNS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[199]
}

func (x DNS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (DNS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{199}
}

type KERNEL_TYPE_ID int32

const (
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_UNKNOWN      KERNEL_TYPE_ID = 0 // Type: OCSF_VALUE;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_OTHER        KERNEL_TYPE_ID = 1 // Type: OCSF_VALUE;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_SHARED_MUTEX KERNEL_TYPE_ID = 2 // Type: OCSF_VALUE;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_SYSTEM_CALL  KERNEL_TYPE_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_TYPE_ID.
var (
	KERNEL_TYPE_ID_name = map[int32]string{
		0: "KERNEL_TYPE_ID_UNKNOWN",
		1: "KERNEL_TYPE_ID_OTHER",
		2: "KERNEL_TYPE_ID_SHARED_MUTEX",
		3: "KERNEL_TYPE_ID_SYSTEM_CALL",
	}
	KERNEL_TYPE_ID_value = map[string]int32{
		"KERNEL_TYPE_ID_UNKNOWN":      0,
		"KERNEL_TYPE_ID_OTHER":        1,
		"KERNEL_TYPE_ID_SHARED_MUTEX": 2,
		"KERNEL_TYPE_ID_SYSTEM_CALL":  3,
	}
)

func (x KERNEL_TYPE_ID) Enum() *KERNEL_TYPE_ID {
	p := new(KERNEL_TYPE_ID)
	*p = x
	return p
}

func (x KERNEL_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[200].Descriptor()
}

func (KERNEL_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[200]
}

func (x KERNEL_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_TYPE_ID.Descriptor instead.
func (KERNEL_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{200}
}

type REGISTRY_VALUE_TYPE_ID int32

const (
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_UNKNOWN                 REGISTRY_VALUE_TYPE_ID = 0  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_OTHER                   REGISTRY_VALUE_TYPE_ID = 1  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_BINARY              REGISTRY_VALUE_TYPE_ID = 2  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_DWORD               REGISTRY_VALUE_TYPE_ID = 3  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN    REGISTRY_VALUE_TYPE_ID = 4  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_EXPAND_SZ           REGISTRY_VALUE_TYPE_ID = 5  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_LINK                REGISTRY_VALUE_TYPE_ID = 6  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_MULTI_SZ            REGISTRY_VALUE_TYPE_ID = 7  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_NONE                REGISTRY_VALUE_TYPE_ID = 8  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_QWORD               REGISTRY_VALUE_TYPE_ID = 9  // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN REGISTRY_VALUE_TYPE_ID = 10 // Type: OCSF_VALUE;
	REGISTRY_VALUE_TYPE_ID_REGISTRY_VALUE_TYPE_ID_REG_SZ                  REGISTRY_VALUE_TYPE_ID = 11 // Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_TYPE_ID.
var (
	REGISTRY_VALUE_TYPE_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_TYPE_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_TYPE_ID_OTHER",
		2:  "REGISTRY_VALUE_TYPE_ID_REG_BINARY",
		3:  "REGISTRY_VALUE_TYPE_ID_REG_DWORD",
		4:  "REGISTRY_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN",
		5:  "REGISTRY_VALUE_TYPE_ID_REG_EXPAND_SZ",
		6:  "REGISTRY_VALUE_TYPE_ID_REG_LINK",
		7:  "REGISTRY_VALUE_TYPE_ID_REG_MULTI_SZ",
		8:  "REGISTRY_VALUE_TYPE_ID_REG_NONE",
		9:  "REGISTRY_VALUE_TYPE_ID_REG_QWORD",
		10: "REGISTRY_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN",
		11: "REGISTRY_VALUE_TYPE_ID_REG_SZ",
	}
	REGISTRY_VALUE_TYPE_ID_value = map[string]int32{
		"REGISTRY_VALUE_TYPE_ID_UNKNOWN":                 0,
		"REGISTRY_VALUE_TYPE_ID_OTHER":                   1,
		"REGISTRY_VALUE_TYPE_ID_REG_BINARY":              2,
		"REGISTRY_VALUE_TYPE_ID_REG_DWORD":               3,
		"REGISTRY_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN":    4,
		"REGISTRY_VALUE_TYPE_ID_REG_EXPAND_SZ":           5,
		"REGISTRY_VALUE_TYPE_ID_REG_LINK":                6,
		"REGISTRY_VALUE_TYPE_ID_REG_MULTI_SZ":            7,
		"REGISTRY_VALUE_TYPE_ID_REG_NONE":                8,
		"REGISTRY_VALUE_TYPE_ID_REG_QWORD":               9,
		"REGISTRY_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN": 10,
		"REGISTRY_VALUE_TYPE_ID_REG_SZ":                  11,
	}
)

func (x REGISTRY_VALUE_TYPE_ID) Enum() *REGISTRY_VALUE_TYPE_ID {
	p := new(REGISTRY_VALUE_TYPE_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[201].Descriptor()
}

func (REGISTRY_VALUE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[201]
}

func (x REGISTRY_VALUE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_TYPE_ID.Descriptor instead.
func (REGISTRY_VALUE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{201}
}

type PROCESS_INTEGRITY_ID int32

const (
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_UNKNOWN   PROCESS_INTEGRITY_ID = 0 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_HIGH      PROCESS_INTEGRITY_ID = 1 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_LOW       PROCESS_INTEGRITY_ID = 2 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_MEDIUM    PROCESS_INTEGRITY_ID = 3 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_OTHER     PROCESS_INTEGRITY_ID = 4 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_PROTECTED PROCESS_INTEGRITY_ID = 5 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_SYSTEM    PROCESS_INTEGRITY_ID = 6 // Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_UNTRUSTED PROCESS_INTEGRITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_INTEGRITY_ID.
var (
	PROCESS_INTEGRITY_ID_name = map[int32]string{
		0: "PROCESS_INTEGRITY_ID_UNKNOWN",
		1: "PROCESS_INTEGRITY_ID_HIGH",
		2: "PROCESS_INTEGRITY_ID_LOW",
		3: "PROCESS_INTEGRITY_ID_MEDIUM",
		4: "PROCESS_INTEGRITY_ID_OTHER",
		5: "PROCESS_INTEGRITY_ID_PROTECTED",
		6: "PROCESS_INTEGRITY_ID_SYSTEM",
		7: "PROCESS_INTEGRITY_ID_UNTRUSTED",
	}
	PROCESS_INTEGRITY_ID_value = map[string]int32{
		"PROCESS_INTEGRITY_ID_UNKNOWN":   0,
		"PROCESS_INTEGRITY_ID_HIGH":      1,
		"PROCESS_INTEGRITY_ID_LOW":       2,
		"PROCESS_INTEGRITY_ID_MEDIUM":    3,
		"PROCESS_INTEGRITY_ID_OTHER":     4,
		"PROCESS_INTEGRITY_ID_PROTECTED": 5,
		"PROCESS_INTEGRITY_ID_SYSTEM":    6,
		"PROCESS_INTEGRITY_ID_UNTRUSTED": 7,
	}
)

func (x PROCESS_INTEGRITY_ID) Enum() *PROCESS_INTEGRITY_ID {
	p := new(PROCESS_INTEGRITY_ID)
	*p = x
	return p
}

func (x PROCESS_INTEGRITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_INTEGRITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[202].Descriptor()
}

func (PROCESS_INTEGRITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[202]
}

func (x PROCESS_INTEGRITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_INTEGRITY_ID.Descriptor instead.
func (PROCESS_INTEGRITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{202}
}

type EMAIL_FILE_ACTIVITY_ACTIVITY_ID int32

const (
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER   EMAIL_FILE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_ACTIVITY_ID.
var (
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	EMAIL_FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"EMAIL_FILE_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Enum() *EMAIL_FILE_ACTIVITY_ACTIVITY_ID {
	p := new(EMAIL_FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[203].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[203]
}

func (x EMAIL_FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{203}
}

type EMAIL_FILE_ACTIVITY_DISPOSITION_ID int32

const (
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED           EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED             EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED          EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED              EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION           EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER               EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED         EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED            EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED              EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         EMAIL_FILE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_DISPOSITION_ID.
var (
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	EMAIL_FILE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"EMAIL_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Enum() *EMAIL_FILE_ACTIVITY_DISPOSITION_ID {
	p := new(EMAIL_FILE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[204].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[204]
}

func (x EMAIL_FILE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{204}
}

type SMB_ACTIVITY_CLASS_UID int32

const (
	SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY_CLASS_UID_UNKNOWN    SMB_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SMB_ACTIVITY_CLASS_UID_SMB_ACTIVITY_CLASS_UID_BASE_EVENT SMB_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_CLASS_UID.
var (
	SMB_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "SMB_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "SMB_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	SMB_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SMB_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"SMB_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x SMB_ACTIVITY_CLASS_UID) Enum() *SMB_ACTIVITY_CLASS_UID {
	p := new(SMB_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[205].Descriptor()
}

func (SMB_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[205]
}

func (x SMB_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_CLASS_UID.Descriptor instead.
func (SMB_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{205}
}

type APPLICATION_LIFECYCLE_STATUS_ID int32

const (
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN APPLICATION_LIFECYCLE_STATUS_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_FAILURE APPLICATION_LIFECYCLE_STATUS_ID = 1 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_OTHER   APPLICATION_LIFECYCLE_STATUS_ID = 2 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS APPLICATION_LIFECYCLE_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_STATUS_ID.
var (
	APPLICATION_LIFECYCLE_STATUS_ID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN",
		1: "APPLICATION_LIFECYCLE_STATUS_ID_FAILURE",
		2: "APPLICATION_LIFECYCLE_STATUS_ID_OTHER",
		3: "APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS",
	}
	APPLICATION_LIFECYCLE_STATUS_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN": 0,
		"APPLICATION_LIFECYCLE_STATUS_ID_FAILURE": 1,
		"APPLICATION_LIFECYCLE_STATUS_ID_OTHER":   2,
		"APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS": 3,
	}
)

func (x APPLICATION_LIFECYCLE_STATUS_ID) Enum() *APPLICATION_LIFECYCLE_STATUS_ID {
	p := new(APPLICATION_LIFECYCLE_STATUS_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[206].Descriptor()
}

func (APPLICATION_LIFECYCLE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[206]
}

func (x APPLICATION_LIFECYCLE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_STATUS_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{206}
}

type USER_ACCESS_ACTIVITY_ID int32

const (
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_UNKNOWN USER_ACCESS_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	USER_ACCESS_ACTIVITY_ID_USER_ACCESS_ACTIVITY_ID_OTHER   USER_ACCESS_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for USER_ACCESS_ACTIVITY_ID.
var (
	USER_ACCESS_ACTIVITY_ID_name = map[int32]string{
		0: "USER_ACCESS_ACTIVITY_ID_UNKNOWN",
		1: "USER_ACCESS_ACTIVITY_ID_OTHER",
	}
	USER_ACCESS_ACTIVITY_ID_value = map[string]int32{
		"USER_ACCESS_ACTIVITY_ID_UNKNOWN": 0,
		"USER_ACCESS_ACTIVITY_ID_OTHER":   1,
	}
)

func (x USER_ACCESS_ACTIVITY_ID) Enum() *USER_ACCESS_ACTIVITY_ID {
	p := new(USER_ACCESS_ACTIVITY_ID)
	*p = x
	return p
}

func (x USER_ACCESS_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_ACCESS_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[207].Descriptor()
}

func (USER_ACCESS_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[207]
}

func (x USER_ACCESS_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_ACCESS_ACTIVITY_ID.Descriptor instead.
func (USER_ACCESS_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{207}
}

type FILE_ACTIVITY_CLASS_UID int32

const (
	FILE_ACTIVITY_CLASS_UID_FILE_ACTIVITY_CLASS_UID_UNKNOWN    FILE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_ACTIVITY_CLASS_UID_FILE_ACTIVITY_CLASS_UID_BASE_EVENT FILE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_CLASS_UID.
var (
	FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "FILE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "FILE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"FILE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"FILE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x FILE_ACTIVITY_CLASS_UID) Enum() *FILE_ACTIVITY_CLASS_UID {
	p := new(FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[208].Descriptor()
}

func (FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[208]
}

func (x FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{208}
}

type SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED           SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED          SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED              SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION           SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER               SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED         SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED              SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID.
var (
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Enum() *SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[209].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[209]
}

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{209}
}

type FINDINGS_STATUS_ID int32

const (
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_UNKNOWN FINDINGS_STATUS_ID = 0 // Type: OCSF_VALUE;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_FAILURE FINDINGS_STATUS_ID = 1 // Type: OCSF_VALUE;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_OTHER   FINDINGS_STATUS_ID = 2 // Type: OCSF_VALUE;
	FINDINGS_STATUS_ID_FINDINGS_STATUS_ID_SUCCESS FINDINGS_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for FINDINGS_STATUS_ID.
var (
	FINDINGS_STATUS_ID_name = map[int32]string{
		0: "FINDINGS_STATUS_ID_UNKNOWN",
		1: "FINDINGS_STATUS_ID_FAILURE",
		2: "FINDINGS_STATUS_ID_OTHER",
		3: "FINDINGS_STATUS_ID_SUCCESS",
	}
	FINDINGS_STATUS_ID_value = map[string]int32{
		"FINDINGS_STATUS_ID_UNKNOWN": 0,
		"FINDINGS_STATUS_ID_FAILURE": 1,
		"FINDINGS_STATUS_ID_OTHER":   2,
		"FINDINGS_STATUS_ID_SUCCESS": 3,
	}
)

func (x FINDINGS_STATUS_ID) Enum() *FINDINGS_STATUS_ID {
	p := new(FINDINGS_STATUS_ID)
	*p = x
	return p
}

func (x FINDINGS_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINDINGS_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[210].Descriptor()
}

func (FINDINGS_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[210]
}

func (x FINDINGS_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINDINGS_STATUS_ID.Descriptor instead.
func (FINDINGS_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{210}
}

type KERNEL_ACTIVITY_CATEGORY_UID int32

const (
	KERNEL_ACTIVITY_CATEGORY_UID_KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN       KERNEL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_ACTIVITY_CATEGORY_UID_KERNEL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED KERNEL_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_CATEGORY_UID.
var (
	KERNEL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "KERNEL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	KERNEL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"KERNEL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x KERNEL_ACTIVITY_CATEGORY_UID) Enum() *KERNEL_ACTIVITY_CATEGORY_UID {
	p := new(KERNEL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[211].Descriptor()
}

func (KERNEL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[211]
}

func (x KERNEL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (KERNEL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{211}
}

type PROCESS_ACTIVITY_DISPOSITION_ID int32

const (
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN             PROCESS_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED             PROCESS_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED            PROCESS_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED             PROCESS_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED           PROCESS_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       PROCESS_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED             PROCESS_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DELETED             PROCESS_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED            PROCESS_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED             PROCESS_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED          PROCESS_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED            PROCESS_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED              PROCESS_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION           PROCESS_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_OTHER               PROCESS_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED PROCESS_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED         PROCESS_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED            PROCESS_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED              PROCESS_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED         PROCESS_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_DISPOSITION_ID.
var (
	PROCESS_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "PROCESS_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "PROCESS_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	PROCESS_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"PROCESS_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x PROCESS_ACTIVITY_DISPOSITION_ID) Enum() *PROCESS_ACTIVITY_DISPOSITION_ID {
	p := new(PROCESS_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[212].Descriptor()
}

func (PROCESS_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[212]
}

func (x PROCESS_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (PROCESS_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{212}
}

type DNS_ACTIVITY_CLASS_UID int32

const (
	DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY_CLASS_UID_UNKNOWN    DNS_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	DNS_ACTIVITY_CLASS_UID_DNS_ACTIVITY_CLASS_UID_BASE_EVENT DNS_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_CLASS_UID.
var (
	DNS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "DNS_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "DNS_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	DNS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"DNS_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"DNS_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x DNS_ACTIVITY_CLASS_UID) Enum() *DNS_ACTIVITY_CLASS_UID {
	p := new(DNS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[213].Descriptor()
}

func (DNS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[213]
}

func (x DNS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_CLASS_UID.Descriptor instead.
func (DNS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{213}
}

type SMB_ACTIVITY_CATEGORY_UID int32

const (
	SMB_ACTIVITY_CATEGORY_UID_SMB_ACTIVITY_CATEGORY_UID_UNKNOWN       SMB_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SMB_ACTIVITY_CATEGORY_UID_SMB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED SMB_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_CATEGORY_UID.
var (
	SMB_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SMB_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "SMB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	SMB_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SMB_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"SMB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x SMB_ACTIVITY_CATEGORY_UID) Enum() *SMB_ACTIVITY_CATEGORY_UID {
	p := new(SMB_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[214].Descriptor()
}

func (SMB_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[214]
}

func (x SMB_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SMB_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{214}
}

type KERNEL_ACTIVITY_SEVERITY_ID int32

const (
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN       KERNEL_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL      KERNEL_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_FATAL         KERNEL_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_HIGH          KERNEL_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL KERNEL_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_LOW           KERNEL_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM        KERNEL_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_OTHER         KERNEL_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_SEVERITY_ID.
var (
	KERNEL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "KERNEL_ACTIVITY_SEVERITY_ID_FATAL",
		3: "KERNEL_ACTIVITY_SEVERITY_ID_HIGH",
		4: "KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "KERNEL_ACTIVITY_SEVERITY_ID_LOW",
		6: "KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "KERNEL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	KERNEL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"KERNEL_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"KERNEL_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"KERNEL_ACTIVITY_SEVERITY_ID_LOW":           5,
		"KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"KERNEL_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x KERNEL_ACTIVITY_SEVERITY_ID) Enum() *KERNEL_ACTIVITY_SEVERITY_ID {
	p := new(KERNEL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[215].Descriptor()
}

func (KERNEL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[215]
}

func (x KERNEL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (KERNEL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{215}
}

type APPLICATION_LIFECYCLE_ACTIVITY_ID int32

const (
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN APPLICATION_LIFECYCLE_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER   APPLICATION_LIFECYCLE_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_ACTIVITY_ID.
var (
	APPLICATION_LIFECYCLE_ACTIVITY_ID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN",
		1: "APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER",
	}
	APPLICATION_LIFECYCLE_ACTIVITY_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN": 0,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER":   1,
	}
)

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) Enum() *APPLICATION_LIFECYCLE_ACTIVITY_ID {
	p := new(APPLICATION_LIFECYCLE_ACTIVITY_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[216].Descriptor()
}

func (APPLICATION_LIFECYCLE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[216]
}

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_ACTIVITY_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{216}
}

type CONFIG_STATE_SEVERITY_ID int32

const (
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_UNKNOWN       CONFIG_STATE_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_CRITICAL      CONFIG_STATE_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_FATAL         CONFIG_STATE_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_HIGH          CONFIG_STATE_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_INFORMATIONAL CONFIG_STATE_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_LOW           CONFIG_STATE_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_MEDIUM        CONFIG_STATE_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_OTHER         CONFIG_STATE_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for CONFIG_STATE_SEVERITY_ID.
var (
	CONFIG_STATE_SEVERITY_ID_name = map[int32]string{
		0: "CONFIG_STATE_SEVERITY_ID_UNKNOWN",
		1: "CONFIG_STATE_SEVERITY_ID_CRITICAL",
		2: "CONFIG_STATE_SEVERITY_ID_FATAL",
		3: "CONFIG_STATE_SEVERITY_ID_HIGH",
		4: "CONFIG_STATE_SEVERITY_ID_INFORMATIONAL",
		5: "CONFIG_STATE_SEVERITY_ID_LOW",
		6: "CONFIG_STATE_SEVERITY_ID_MEDIUM",
		7: "CONFIG_STATE_SEVERITY_ID_OTHER",
	}
	CONFIG_STATE_SEVERITY_ID_value = map[string]int32{
		"CONFIG_STATE_SEVERITY_ID_UNKNOWN":       0,
		"CONFIG_STATE_SEVERITY_ID_CRITICAL":      1,
		"CONFIG_STATE_SEVERITY_ID_FATAL":         2,
		"CONFIG_STATE_SEVERITY_ID_HIGH":          3,
		"CONFIG_STATE_SEVERITY_ID_INFORMATIONAL": 4,
		"CONFIG_STATE_SEVERITY_ID_LOW":           5,
		"CONFIG_STATE_SEVERITY_ID_MEDIUM":        6,
		"CONFIG_STATE_SEVERITY_ID_OTHER":         7,
	}
)

func (x CONFIG_STATE_SEVERITY_ID) Enum() *CONFIG_STATE_SEVERITY_ID {
	p := new(CONFIG_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[217].Descriptor()
}

func (CONFIG_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[217]
}

func (x CONFIG_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_SEVERITY_ID.Descriptor instead.
func (CONFIG_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{217}
}

type SECURITY_FINDING_STATUS_ID int32

const (
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_UNKNOWN SECURITY_FINDING_STATUS_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_FAILURE SECURITY_FINDING_STATUS_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_OTHER   SECURITY_FINDING_STATUS_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATUS_ID_SECURITY_FINDING_STATUS_ID_SUCCESS SECURITY_FINDING_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_STATUS_ID.
var (
	SECURITY_FINDING_STATUS_ID_name = map[int32]string{
		0: "SECURITY_FINDING_STATUS_ID_UNKNOWN",
		1: "SECURITY_FINDING_STATUS_ID_FAILURE",
		2: "SECURITY_FINDING_STATUS_ID_OTHER",
		3: "SECURITY_FINDING_STATUS_ID_SUCCESS",
	}
	SECURITY_FINDING_STATUS_ID_value = map[string]int32{
		"SECURITY_FINDING_STATUS_ID_UNKNOWN": 0,
		"SECURITY_FINDING_STATUS_ID_FAILURE": 1,
		"SECURITY_FINDING_STATUS_ID_OTHER":   2,
		"SECURITY_FINDING_STATUS_ID_SUCCESS": 3,
	}
)

func (x SECURITY_FINDING_STATUS_ID) Enum() *SECURITY_FINDING_STATUS_ID {
	p := new(SECURITY_FINDING_STATUS_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[218].Descriptor()
}

func (SECURITY_FINDING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[218]
}

func (x SECURITY_FINDING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATUS_ID.Descriptor instead.
func (SECURITY_FINDING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{218}
}

type SSH_ACTIVITY_CLASS_UID int32

const (
	SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY_CLASS_UID_UNKNOWN    SSH_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SSH_ACTIVITY_CLASS_UID_SSH_ACTIVITY_CLASS_UID_BASE_EVENT SSH_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_CLASS_UID.
var (
	SSH_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "SSH_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "SSH_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	SSH_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SSH_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"SSH_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x SSH_ACTIVITY_CLASS_UID) Enum() *SSH_ACTIVITY_CLASS_UID {
	p := new(SSH_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[219].Descriptor()
}

func (SSH_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[219]
}

func (x SSH_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_CLASS_UID.Descriptor instead.
func (SSH_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{219}
}

type HTTP_ACTIVITY_CATEGORY_UID int32

const (
	HTTP_ACTIVITY_CATEGORY_UID_HTTP_ACTIVITY_CATEGORY_UID_UNKNOWN       HTTP_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	HTTP_ACTIVITY_CATEGORY_UID_HTTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED HTTP_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_CATEGORY_UID.
var (
	HTTP_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "HTTP_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "HTTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	HTTP_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"HTTP_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"HTTP_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x HTTP_ACTIVITY_CATEGORY_UID) Enum() *HTTP_ACTIVITY_CATEGORY_UID {
	p := new(HTTP_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[220].Descriptor()
}

func (HTTP_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[220]
}

func (x HTTP_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (HTTP_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{220}
}

type DISCOVERY_CLASS_UID int32

const (
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_UNKNOWN    DISCOVERY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_BASE_EVENT DISCOVERY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_CLASS_UID.
var (
	DISCOVERY_CLASS_UID_name = map[int32]string{
		0: "DISCOVERY_CLASS_UID_UNKNOWN",
		1: "DISCOVERY_CLASS_UID_BASE_EVENT",
	}
	DISCOVERY_CLASS_UID_value = map[string]int32{
		"DISCOVERY_CLASS_UID_UNKNOWN":    0,
		"DISCOVERY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x DISCOVERY_CLASS_UID) Enum() *DISCOVERY_CLASS_UID {
	p := new(DISCOVERY_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[221].Descriptor()
}

func (DISCOVERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[221]
}

func (x DISCOVERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CLASS_UID.Descriptor instead.
func (DISCOVERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{221}
}

type GROUP_MANAGEMENT_CATEGORY_UID int32

const (
	GROUP_MANAGEMENT_CATEGORY_UID_GROUP_MANAGEMENT_CATEGORY_UID_UNKNOWN       GROUP_MANAGEMENT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	GROUP_MANAGEMENT_CATEGORY_UID_GROUP_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED GROUP_MANAGEMENT_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_CATEGORY_UID.
var (
	GROUP_MANAGEMENT_CATEGORY_UID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_CATEGORY_UID_UNKNOWN",
		1: "GROUP_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED",
	}
	GROUP_MANAGEMENT_CATEGORY_UID_value = map[string]int32{
		"GROUP_MANAGEMENT_CATEGORY_UID_UNKNOWN":       0,
		"GROUP_MANAGEMENT_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x GROUP_MANAGEMENT_CATEGORY_UID) Enum() *GROUP_MANAGEMENT_CATEGORY_UID {
	p := new(GROUP_MANAGEMENT_CATEGORY_UID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[222].Descriptor()
}

func (GROUP_MANAGEMENT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[222]
}

func (x GROUP_MANAGEMENT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_CATEGORY_UID.Descriptor instead.
func (GROUP_MANAGEMENT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{222}
}

type KERNEL_EXTENSION_CATEGORY_UID int32

const (
	KERNEL_EXTENSION_CATEGORY_UID_KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN       KERNEL_EXTENSION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_EXTENSION_CATEGORY_UID_KERNEL_EXTENSION_CATEGORY_UID_UNCATEGORIZED KERNEL_EXTENSION_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_CATEGORY_UID.
var (
	KERNEL_EXTENSION_CATEGORY_UID_name = map[int32]string{
		0: "KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN",
		1: "KERNEL_EXTENSION_CATEGORY_UID_UNCATEGORIZED",
	}
	KERNEL_EXTENSION_CATEGORY_UID_value = map[string]int32{
		"KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN":       0,
		"KERNEL_EXTENSION_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x KERNEL_EXTENSION_CATEGORY_UID) Enum() *KERNEL_EXTENSION_CATEGORY_UID {
	p := new(KERNEL_EXTENSION_CATEGORY_UID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[223].Descriptor()
}

func (KERNEL_EXTENSION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[223]
}

func (x KERNEL_EXTENSION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_CATEGORY_UID.Descriptor instead.
func (KERNEL_EXTENSION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{223}
}

type SMB_ACTIVITY_STATUS_ID int32

const (
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_UNKNOWN SMB_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_FAILURE SMB_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_OTHER   SMB_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	SMB_ACTIVITY_STATUS_ID_SMB_ACTIVITY_STATUS_ID_SUCCESS SMB_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for SMB_ACTIVITY_STATUS_ID.
var (
	SMB_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "SMB_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "SMB_ACTIVITY_STATUS_ID_FAILURE",
		2: "SMB_ACTIVITY_STATUS_ID_OTHER",
		3: "SMB_ACTIVITY_STATUS_ID_SUCCESS",
	}
	SMB_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SMB_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SMB_ACTIVITY_STATUS_ID_FAILURE": 1,
		"SMB_ACTIVITY_STATUS_ID_OTHER":   2,
		"SMB_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x SMB_ACTIVITY_STATUS_ID) Enum() *SMB_ACTIVITY_STATUS_ID {
	p := new(SMB_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SMB_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMB_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[224].Descriptor()
}

func (SMB_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[224]
}

func (x SMB_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMB_ACTIVITY_STATUS_ID.Descriptor instead.
func (SMB_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{224}
}

type API_ACTIVITY_CATEGORY_UID int32

const (
	API_ACTIVITY_CATEGORY_UID_API_ACTIVITY_CATEGORY_UID_UNKNOWN       API_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	API_ACTIVITY_CATEGORY_UID_API_ACTIVITY_CATEGORY_UID_UNCATEGORIZED API_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_CATEGORY_UID.
var (
	API_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "API_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "API_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	API_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"API_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"API_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x API_ACTIVITY_CATEGORY_UID) Enum() *API_ACTIVITY_CATEGORY_UID {
	p := new(API_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x API_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[225].Descriptor()
}

func (API_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[225]
}

func (x API_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (API_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{225}
}

type AUTHENTICATION_ACTIVITY_ID int32

const (
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_UNKNOWN AUTHENTICATION_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	AUTHENTICATION_ACTIVITY_ID_AUTHENTICATION_ACTIVITY_ID_OTHER   AUTHENTICATION_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for AUTHENTICATION_ACTIVITY_ID.
var (
	AUTHENTICATION_ACTIVITY_ID_name = map[int32]string{
		0: "AUTHENTICATION_ACTIVITY_ID_UNKNOWN",
		1: "AUTHENTICATION_ACTIVITY_ID_OTHER",
	}
	AUTHENTICATION_ACTIVITY_ID_value = map[string]int32{
		"AUTHENTICATION_ACTIVITY_ID_UNKNOWN": 0,
		"AUTHENTICATION_ACTIVITY_ID_OTHER":   1,
	}
)

func (x AUTHENTICATION_ACTIVITY_ID) Enum() *AUTHENTICATION_ACTIVITY_ID {
	p := new(AUTHENTICATION_ACTIVITY_ID)
	*p = x
	return p
}

func (x AUTHENTICATION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTHENTICATION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[226].Descriptor()
}

func (AUTHENTICATION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[226]
}

func (x AUTHENTICATION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTHENTICATION_ACTIVITY_ID.Descriptor instead.
func (AUTHENTICATION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{226}
}

type ACCOUNT_CHANGE_SEVERITY_ID int32

const (
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN       ACCOUNT_CHANGE_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL      ACCOUNT_CHANGE_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_FATAL         ACCOUNT_CHANGE_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_HIGH          ACCOUNT_CHANGE_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL ACCOUNT_CHANGE_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_LOW           ACCOUNT_CHANGE_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM        ACCOUNT_CHANGE_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	ACCOUNT_CHANGE_SEVERITY_ID_ACCOUNT_CHANGE_SEVERITY_ID_OTHER         ACCOUNT_CHANGE_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for ACCOUNT_CHANGE_SEVERITY_ID.
var (
	ACCOUNT_CHANGE_SEVERITY_ID_name = map[int32]string{
		0: "ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN",
		1: "ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL",
		2: "ACCOUNT_CHANGE_SEVERITY_ID_FATAL",
		3: "ACCOUNT_CHANGE_SEVERITY_ID_HIGH",
		4: "ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL",
		5: "ACCOUNT_CHANGE_SEVERITY_ID_LOW",
		6: "ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM",
		7: "ACCOUNT_CHANGE_SEVERITY_ID_OTHER",
	}
	ACCOUNT_CHANGE_SEVERITY_ID_value = map[string]int32{
		"ACCOUNT_CHANGE_SEVERITY_ID_UNKNOWN":       0,
		"ACCOUNT_CHANGE_SEVERITY_ID_CRITICAL":      1,
		"ACCOUNT_CHANGE_SEVERITY_ID_FATAL":         2,
		"ACCOUNT_CHANGE_SEVERITY_ID_HIGH":          3,
		"ACCOUNT_CHANGE_SEVERITY_ID_INFORMATIONAL": 4,
		"ACCOUNT_CHANGE_SEVERITY_ID_LOW":           5,
		"ACCOUNT_CHANGE_SEVERITY_ID_MEDIUM":        6,
		"ACCOUNT_CHANGE_SEVERITY_ID_OTHER":         7,
	}
)

func (x ACCOUNT_CHANGE_SEVERITY_ID) Enum() *ACCOUNT_CHANGE_SEVERITY_ID {
	p := new(ACCOUNT_CHANGE_SEVERITY_ID)
	*p = x
	return p
}

func (x ACCOUNT_CHANGE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_CHANGE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[227].Descriptor()
}

func (ACCOUNT_CHANGE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[227]
}

func (x ACCOUNT_CHANGE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_CHANGE_SEVERITY_ID.Descriptor instead.
func (ACCOUNT_CHANGE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{227}
}

type SSH_ACTIVITY_STATUS_ID int32

const (
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_UNKNOWN SSH_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_FAILURE SSH_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_OTHER   SSH_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	SSH_ACTIVITY_STATUS_ID_SSH_ACTIVITY_STATUS_ID_SUCCESS SSH_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_STATUS_ID.
var (
	SSH_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "SSH_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "SSH_ACTIVITY_STATUS_ID_FAILURE",
		2: "SSH_ACTIVITY_STATUS_ID_OTHER",
		3: "SSH_ACTIVITY_STATUS_ID_SUCCESS",
	}
	SSH_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SSH_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SSH_ACTIVITY_STATUS_ID_FAILURE": 1,
		"SSH_ACTIVITY_STATUS_ID_OTHER":   2,
		"SSH_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x SSH_ACTIVITY_STATUS_ID) Enum() *SSH_ACTIVITY_STATUS_ID {
	p := new(SSH_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[228].Descriptor()
}

func (SSH_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[228]
}

func (x SSH_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_STATUS_ID.Descriptor instead.
func (SSH_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{228}
}

type HTTP_ACTIVITY_STATUS_ID int32

const (
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_UNKNOWN HTTP_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_FAILURE HTTP_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_OTHER   HTTP_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	HTTP_ACTIVITY_STATUS_ID_HTTP_ACTIVITY_STATUS_ID_SUCCESS HTTP_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for HTTP_ACTIVITY_STATUS_ID.
var (
	HTTP_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "HTTP_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "HTTP_ACTIVITY_STATUS_ID_FAILURE",
		2: "HTTP_ACTIVITY_STATUS_ID_OTHER",
		3: "HTTP_ACTIVITY_STATUS_ID_SUCCESS",
	}
	HTTP_ACTIVITY_STATUS_ID_value = map[string]int32{
		"HTTP_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"HTTP_ACTIVITY_STATUS_ID_FAILURE": 1,
		"HTTP_ACTIVITY_STATUS_ID_OTHER":   2,
		"HTTP_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x HTTP_ACTIVITY_STATUS_ID) Enum() *HTTP_ACTIVITY_STATUS_ID {
	p := new(HTTP_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x HTTP_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTP_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[229].Descriptor()
}

func (HTTP_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[229]
}

func (x HTTP_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTP_ACTIVITY_STATUS_ID.Descriptor instead.
func (HTTP_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{229}
}

type SECURITY_FINDING_CATEGORY_UID int32

const (
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_UNKNOWN       SECURITY_FINDING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SECURITY_FINDING_CATEGORY_UID_SECURITY_FINDING_CATEGORY_UID_UNCATEGORIZED SECURITY_FINDING_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_CATEGORY_UID.
var (
	SECURITY_FINDING_CATEGORY_UID_name = map[int32]string{
		0: "SECURITY_FINDING_CATEGORY_UID_UNKNOWN",
		1: "SECURITY_FINDING_CATEGORY_UID_UNCATEGORIZED",
	}
	SECURITY_FINDING_CATEGORY_UID_value = map[string]int32{
		"SECURITY_FINDING_CATEGORY_UID_UNKNOWN":       0,
		"SECURITY_FINDING_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x SECURITY_FINDING_CATEGORY_UID) Enum() *SECURITY_FINDING_CATEGORY_UID {
	p := new(SECURITY_FINDING_CATEGORY_UID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[230].Descriptor()
}

func (SECURITY_FINDING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[230]
}

func (x SECURITY_FINDING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CATEGORY_UID.Descriptor instead.
func (SECURITY_FINDING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{230}
}

type GROUP_MANAGEMENT_ACTIVITY_ID int32

const (
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN GROUP_MANAGEMENT_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	GROUP_MANAGEMENT_ACTIVITY_ID_GROUP_MANAGEMENT_ACTIVITY_ID_OTHER   GROUP_MANAGEMENT_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_ACTIVITY_ID.
var (
	GROUP_MANAGEMENT_ACTIVITY_ID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN",
		1: "GROUP_MANAGEMENT_ACTIVITY_ID_OTHER",
	}
	GROUP_MANAGEMENT_ACTIVITY_ID_value = map[string]int32{
		"GROUP_MANAGEMENT_ACTIVITY_ID_UNKNOWN": 0,
		"GROUP_MANAGEMENT_ACTIVITY_ID_OTHER":   1,
	}
)

func (x GROUP_MANAGEMENT_ACTIVITY_ID) Enum() *GROUP_MANAGEMENT_ACTIVITY_ID {
	p := new(GROUP_MANAGEMENT_ACTIVITY_ID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[231].Descriptor()
}

func (GROUP_MANAGEMENT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[231]
}

func (x GROUP_MANAGEMENT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_ACTIVITY_ID.Descriptor instead.
func (GROUP_MANAGEMENT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{231}
}

type FTP_ACTIVITY_DISPOSITION_ID int32

const (
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN             FTP_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ALLOWED             FTP_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_APPROVED            FTP_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_BLOCKED             FTP_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CORRECTED           FTP_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       FTP_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DELAYED             FTP_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DELETED             FTP_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DETECTED            FTP_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_DROPPED             FTP_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_EXONERATED          FTP_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_ISOLATED            FTP_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_LOGGED              FTP_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION           FTP_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_OTHER               FTP_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED FTP_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED         FTP_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_RESTORED            FTP_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_TAGGED              FTP_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	FTP_ACTIVITY_DISPOSITION_ID_FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED         FTP_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for FTP_ACTIVITY_DISPOSITION_ID.
var (
	FTP_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "FTP_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "FTP_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "FTP_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "FTP_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "FTP_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "FTP_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "FTP_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "FTP_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "FTP_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "FTP_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "FTP_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "FTP_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "FTP_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "FTP_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	FTP_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"FTP_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"FTP_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"FTP_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"FTP_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"FTP_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"FTP_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"FTP_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"FTP_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"FTP_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"FTP_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"FTP_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"FTP_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"FTP_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"FTP_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"FTP_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"FTP_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"FTP_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"FTP_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"FTP_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"FTP_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x FTP_ACTIVITY_DISPOSITION_ID) Enum() *FTP_ACTIVITY_DISPOSITION_ID {
	p := new(FTP_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x FTP_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FTP_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[232].Descriptor()
}

func (FTP_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[232]
}

func (x FTP_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FTP_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (FTP_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{232}
}

type FILE_ACTIVITY_CATEGORY_UID int32

const (
	FILE_ACTIVITY_CATEGORY_UID_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN       FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_ACTIVITY_CATEGORY_UID_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED FILE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_CATEGORY_UID.
var (
	FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "FILE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"FILE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x FILE_ACTIVITY_CATEGORY_UID) Enum() *FILE_ACTIVITY_CATEGORY_UID {
	p := new(FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[233].Descriptor()
}

func (FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[233]
}

func (x FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{233}
}

type DEVICE_TYPE_ID int32

const (
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_UNKNOWN DEVICE_TYPE_ID = 0 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_BROWSER DEVICE_TYPE_ID = 1 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_DESKTOP DEVICE_TYPE_ID = 2 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_IOT     DEVICE_TYPE_ID = 3 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_LAPTOP  DEVICE_TYPE_ID = 4 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_MOBILE  DEVICE_TYPE_ID = 5 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_OTHER   DEVICE_TYPE_ID = 6 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_SERVER  DEVICE_TYPE_ID = 7 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_TABLET  DEVICE_TYPE_ID = 8 // Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_VIRTUAL DEVICE_TYPE_ID = 9 // Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_TYPE_ID.
var (
	DEVICE_TYPE_ID_name = map[int32]string{
		0: "DEVICE_TYPE_ID_UNKNOWN",
		1: "DEVICE_TYPE_ID_BROWSER",
		2: "DEVICE_TYPE_ID_DESKTOP",
		3: "DEVICE_TYPE_ID_IOT",
		4: "DEVICE_TYPE_ID_LAPTOP",
		5: "DEVICE_TYPE_ID_MOBILE",
		6: "DEVICE_TYPE_ID_OTHER",
		7: "DEVICE_TYPE_ID_SERVER",
		8: "DEVICE_TYPE_ID_TABLET",
		9: "DEVICE_TYPE_ID_VIRTUAL",
	}
	DEVICE_TYPE_ID_value = map[string]int32{
		"DEVICE_TYPE_ID_UNKNOWN": 0,
		"DEVICE_TYPE_ID_BROWSER": 1,
		"DEVICE_TYPE_ID_DESKTOP": 2,
		"DEVICE_TYPE_ID_IOT":     3,
		"DEVICE_TYPE_ID_LAPTOP":  4,
		"DEVICE_TYPE_ID_MOBILE":  5,
		"DEVICE_TYPE_ID_OTHER":   6,
		"DEVICE_TYPE_ID_SERVER":  7,
		"DEVICE_TYPE_ID_TABLET":  8,
		"DEVICE_TYPE_ID_VIRTUAL": 9,
	}
)

func (x DEVICE_TYPE_ID) Enum() *DEVICE_TYPE_ID {
	p := new(DEVICE_TYPE_ID)
	*p = x
	return p
}

func (x DEVICE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[234].Descriptor()
}

func (DEVICE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[234]
}

func (x DEVICE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_TYPE_ID.Descriptor instead.
func (DEVICE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{234}
}

type SECURITY_FINDING_CONFIDENCE_ID int32

const (
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN SECURITY_FINDING_CONFIDENCE_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_HIGH    SECURITY_FINDING_CONFIDENCE_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_LOW     SECURITY_FINDING_CONFIDENCE_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_MEDIUM  SECURITY_FINDING_CONFIDENCE_ID = 3 // Type: OCSF_VALUE;
	SECURITY_FINDING_CONFIDENCE_ID_SECURITY_FINDING_CONFIDENCE_ID_OTHER   SECURITY_FINDING_CONFIDENCE_ID = 4 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_CONFIDENCE_ID.
var (
	SECURITY_FINDING_CONFIDENCE_ID_name = map[int32]string{
		0: "SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN",
		1: "SECURITY_FINDING_CONFIDENCE_ID_HIGH",
		2: "SECURITY_FINDING_CONFIDENCE_ID_LOW",
		3: "SECURITY_FINDING_CONFIDENCE_ID_MEDIUM",
		4: "SECURITY_FINDING_CONFIDENCE_ID_OTHER",
	}
	SECURITY_FINDING_CONFIDENCE_ID_value = map[string]int32{
		"SECURITY_FINDING_CONFIDENCE_ID_UNKNOWN": 0,
		"SECURITY_FINDING_CONFIDENCE_ID_HIGH":    1,
		"SECURITY_FINDING_CONFIDENCE_ID_LOW":     2,
		"SECURITY_FINDING_CONFIDENCE_ID_MEDIUM":  3,
		"SECURITY_FINDING_CONFIDENCE_ID_OTHER":   4,
	}
)

func (x SECURITY_FINDING_CONFIDENCE_ID) Enum() *SECURITY_FINDING_CONFIDENCE_ID {
	p := new(SECURITY_FINDING_CONFIDENCE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_CONFIDENCE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_CONFIDENCE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[235].Descriptor()
}

func (SECURITY_FINDING_CONFIDENCE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[235]
}

func (x SECURITY_FINDING_CONFIDENCE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_CONFIDENCE_ID.Descriptor instead.
func (SECURITY_FINDING_CONFIDENCE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{235}
}

type DHCP_ACTIVITY_SEVERITY_ID int32

const (
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN       DHCP_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_CRITICAL      DHCP_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_FATAL         DHCP_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_HIGH          DHCP_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL DHCP_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_LOW           DHCP_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_MEDIUM        DHCP_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_SEVERITY_ID_DHCP_ACTIVITY_SEVERITY_ID_OTHER         DHCP_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_SEVERITY_ID.
var (
	DHCP_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "DHCP_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "DHCP_ACTIVITY_SEVERITY_ID_FATAL",
		3: "DHCP_ACTIVITY_SEVERITY_ID_HIGH",
		4: "DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "DHCP_ACTIVITY_SEVERITY_ID_LOW",
		6: "DHCP_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "DHCP_ACTIVITY_SEVERITY_ID_OTHER",
	}
	DHCP_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"DHCP_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"DHCP_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"DHCP_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"DHCP_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"DHCP_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"DHCP_ACTIVITY_SEVERITY_ID_LOW":           5,
		"DHCP_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"DHCP_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x DHCP_ACTIVITY_SEVERITY_ID) Enum() *DHCP_ACTIVITY_SEVERITY_ID {
	p := new(DHCP_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[236].Descriptor()
}

func (DHCP_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[236]
}

func (x DHCP_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (DHCP_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{236}
}

type WEB_RESOURCES_ACTIVITY_CATEGORY_UID int32

const (
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNKNOWN       WEB_RESOURCES_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNCATEGORIZED WEB_RESOURCES_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_CATEGORY_UID.
var (
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Enum() *WEB_RESOURCES_ACTIVITY_CATEGORY_UID {
	p := new(WEB_RESOURCES_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[237].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[237]
}

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{237}
}

type DISCOVERY_SEVERITY_ID int32

const (
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_UNKNOWN       DISCOVERY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_CRITICAL      DISCOVERY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_FATAL         DISCOVERY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_HIGH          DISCOVERY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_INFORMATIONAL DISCOVERY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_LOW           DISCOVERY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_MEDIUM        DISCOVERY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_OTHER         DISCOVERY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_SEVERITY_ID.
var (
	DISCOVERY_SEVERITY_ID_name = map[int32]string{
		0: "DISCOVERY_SEVERITY_ID_UNKNOWN",
		1: "DISCOVERY_SEVERITY_ID_CRITICAL",
		2: "DISCOVERY_SEVERITY_ID_FATAL",
		3: "DISCOVERY_SEVERITY_ID_HIGH",
		4: "DISCOVERY_SEVERITY_ID_INFORMATIONAL",
		5: "DISCOVERY_SEVERITY_ID_LOW",
		6: "DISCOVERY_SEVERITY_ID_MEDIUM",
		7: "DISCOVERY_SEVERITY_ID_OTHER",
	}
	DISCOVERY_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_SEVERITY_ID_CRITICAL":      1,
		"DISCOVERY_SEVERITY_ID_FATAL":         2,
		"DISCOVERY_SEVERITY_ID_HIGH":          3,
		"DISCOVERY_SEVERITY_ID_INFORMATIONAL": 4,
		"DISCOVERY_SEVERITY_ID_LOW":           5,
		"DISCOVERY_SEVERITY_ID_MEDIUM":        6,
		"DISCOVERY_SEVERITY_ID_OTHER":         7,
	}
)

func (x DISCOVERY_SEVERITY_ID) Enum() *DISCOVERY_SEVERITY_ID {
	p := new(DISCOVERY_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[238].Descriptor()
}

func (DISCOVERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[238]
}

func (x DISCOVERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{238}
}

type SECURITY_FINDING_ACTIVITY_ID int32

const (
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_UNKNOWN SECURITY_FINDING_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_ACTIVITY_ID_SECURITY_FINDING_ACTIVITY_ID_OTHER   SECURITY_FINDING_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_ACTIVITY_ID.
var (
	SECURITY_FINDING_ACTIVITY_ID_name = map[int32]string{
		0: "SECURITY_FINDING_ACTIVITY_ID_UNKNOWN",
		1: "SECURITY_FINDING_ACTIVITY_ID_OTHER",
	}
	SECURITY_FINDING_ACTIVITY_ID_value = map[string]int32{
		"SECURITY_FINDING_ACTIVITY_ID_UNKNOWN": 0,
		"SECURITY_FINDING_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SECURITY_FINDING_ACTIVITY_ID) Enum() *SECURITY_FINDING_ACTIVITY_ID {
	p := new(SECURITY_FINDING_ACTIVITY_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[239].Descriptor()
}

func (SECURITY_FINDING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[239]
}

func (x SECURITY_FINDING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_ACTIVITY_ID.Descriptor instead.
func (SECURITY_FINDING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{239}
}

type GROUP_MANAGEMENT_CLASS_UID int32

const (
	GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT_CLASS_UID_UNKNOWN    GROUP_MANAGEMENT_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	GROUP_MANAGEMENT_CLASS_UID_GROUP_MANAGEMENT_CLASS_UID_BASE_EVENT GROUP_MANAGEMENT_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for GROUP_MANAGEMENT_CLASS_UID.
var (
	GROUP_MANAGEMENT_CLASS_UID_name = map[int32]string{
		0: "GROUP_MANAGEMENT_CLASS_UID_UNKNOWN",
		1: "GROUP_MANAGEMENT_CLASS_UID_BASE_EVENT",
	}
	GROUP_MANAGEMENT_CLASS_UID_value = map[string]int32{
		"GROUP_MANAGEMENT_CLASS_UID_UNKNOWN":    0,
		"GROUP_MANAGEMENT_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x GROUP_MANAGEMENT_CLASS_UID) Enum() *GROUP_MANAGEMENT_CLASS_UID {
	p := new(GROUP_MANAGEMENT_CLASS_UID)
	*p = x
	return p
}

func (x GROUP_MANAGEMENT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GROUP_MANAGEMENT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[240].Descriptor()
}

func (GROUP_MANAGEMENT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[240]
}

func (x GROUP_MANAGEMENT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GROUP_MANAGEMENT_CLASS_UID.Descriptor instead.
func (GROUP_MANAGEMENT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{240}
}

type NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID int32

const (
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN                            NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 0 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4 NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 1 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6 NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 2 // Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER                              NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID.
var (
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_name = map[int32]string{
		0: "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN",
		1: "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4",
		2: "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6",
		3: "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER",
	}
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN":                            0,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4": 1,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6": 2,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER":                              3,
	}
)

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Enum() *NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID {
	p := new(NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[241].Descriptor()
}

func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[241]
}

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{241}
}

type BASE_EVENT_SEVERITY_ID int32

const (
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_UNKNOWN       BASE_EVENT_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_CRITICAL      BASE_EVENT_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_FATAL         BASE_EVENT_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_HIGH          BASE_EVENT_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_INFORMATIONAL BASE_EVENT_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_LOW           BASE_EVENT_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_MEDIUM        BASE_EVENT_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	BASE_EVENT_SEVERITY_ID_BASE_EVENT_SEVERITY_ID_OTHER         BASE_EVENT_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for BASE_EVENT_SEVERITY_ID.
var (
	BASE_EVENT_SEVERITY_ID_name = map[int32]string{
		0: "BASE_EVENT_SEVERITY_ID_UNKNOWN",
		1: "BASE_EVENT_SEVERITY_ID_CRITICAL",
		2: "BASE_EVENT_SEVERITY_ID_FATAL",
		3: "BASE_EVENT_SEVERITY_ID_HIGH",
		4: "BASE_EVENT_SEVERITY_ID_INFORMATIONAL",
		5: "BASE_EVENT_SEVERITY_ID_LOW",
		6: "BASE_EVENT_SEVERITY_ID_MEDIUM",
		7: "BASE_EVENT_SEVERITY_ID_OTHER",
	}
	BASE_EVENT_SEVERITY_ID_value = map[string]int32{
		"BASE_EVENT_SEVERITY_ID_UNKNOWN":       0,
		"BASE_EVENT_SEVERITY_ID_CRITICAL":      1,
		"BASE_EVENT_SEVERITY_ID_FATAL":         2,
		"BASE_EVENT_SEVERITY_ID_HIGH":          3,
		"BASE_EVENT_SEVERITY_ID_INFORMATIONAL": 4,
		"BASE_EVENT_SEVERITY_ID_LOW":           5,
		"BASE_EVENT_SEVERITY_ID_MEDIUM":        6,
		"BASE_EVENT_SEVERITY_ID_OTHER":         7,
	}
)

func (x BASE_EVENT_SEVERITY_ID) Enum() *BASE_EVENT_SEVERITY_ID {
	p := new(BASE_EVENT_SEVERITY_ID)
	*p = x
	return p
}

func (x BASE_EVENT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BASE_EVENT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[242].Descriptor()
}

func (BASE_EVENT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[242]
}

func (x BASE_EVENT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BASE_EVENT_SEVERITY_ID.Descriptor instead.
func (BASE_EVENT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{242}
}

type BASE_EVENT_CLASS_UID int32

const (
	BASE_EVENT_CLASS_UID_BASE_EVENT_CLASS_UID_UNKNOWN    BASE_EVENT_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	BASE_EVENT_CLASS_UID_BASE_EVENT_CLASS_UID_BASE_EVENT BASE_EVENT_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for BASE_EVENT_CLASS_UID.
var (
	BASE_EVENT_CLASS_UID_name = map[int32]string{
		0: "BASE_EVENT_CLASS_UID_UNKNOWN",
		1: "BASE_EVENT_CLASS_UID_BASE_EVENT",
	}
	BASE_EVENT_CLASS_UID_value = map[string]int32{
		"BASE_EVENT_CLASS_UID_UNKNOWN":    0,
		"BASE_EVENT_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x BASE_EVENT_CLASS_UID) Enum() *BASE_EVENT_CLASS_UID {
	p := new(BASE_EVENT_CLASS_UID)
	*p = x
	return p
}

func (x BASE_EVENT_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BASE_EVENT_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[243].Descriptor()
}

func (BASE_EVENT_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[243]
}

func (x BASE_EVENT_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BASE_EVENT_CLASS_UID.Descriptor instead.
func (BASE_EVENT_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{243}
}

type RESOURCE_ACTIVITY_DISPOSITION_ID int32

const (
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN             RESOURCE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED             RESOURCE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED            RESOURCE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED             RESOURCE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED           RESOURCE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       RESOURCE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED             RESOURCE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED             RESOURCE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED            RESOURCE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED             RESOURCE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED          RESOURCE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED            RESOURCE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED              RESOURCE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION           RESOURCE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER               RESOURCE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED RESOURCE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED         RESOURCE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED            RESOURCE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED              RESOURCE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         RESOURCE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE;
)

// Enum value maps for RESOURCE_ACTIVITY_DISPOSITION_ID.
var (
	RESOURCE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	RESOURCE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) Enum() *RESOURCE_ACTIVITY_DISPOSITION_ID {
	p := new(RESOURCE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[244].Descriptor()
}

func (RESOURCE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[244]
}

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{244}
}

type EMAIL_FILE_ACTIVITY_STATUS_ID int32

const (
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN EMAIL_FILE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE EMAIL_FILE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER   EMAIL_FILE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	EMAIL_FILE_ACTIVITY_STATUS_ID_EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS EMAIL_FILE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_FILE_ACTIVITY_STATUS_ID.
var (
	EMAIL_FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE",
		2: "EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER",
		3: "EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	EMAIL_FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"EMAIL_FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_OTHER":   2,
		"EMAIL_FILE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) Enum() *EMAIL_FILE_ACTIVITY_STATUS_ID {
	p := new(EMAIL_FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[245].Descriptor()
}

func (EMAIL_FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[245]
}

func (x EMAIL_FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (EMAIL_FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{245}
}

type EMAIL_URL_ACTIVITY_CATEGORY_UID int32

const (
	EMAIL_URL_ACTIVITY_CATEGORY_UID_EMAIL_URL_ACTIVITY_CATEGORY_UID_UNKNOWN       EMAIL_URL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	EMAIL_URL_ACTIVITY_CATEGORY_UID_EMAIL_URL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED EMAIL_URL_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_URL_ACTIVITY_CATEGORY_UID.
var (
	EMAIL_URL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "EMAIL_URL_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "EMAIL_URL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	EMAIL_URL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"EMAIL_URL_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"EMAIL_URL_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) Enum() *EMAIL_URL_ACTIVITY_CATEGORY_UID {
	p := new(EMAIL_URL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_URL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[246].Descriptor()
}

func (EMAIL_URL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[246]
}

func (x EMAIL_URL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_URL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (EMAIL_URL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{246}
}

type NETWORK_ACTIVITY_CATEGORY_UID int32

const (
	NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY_CATEGORY_UID_UNKNOWN       NETWORK_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_ACTIVITY_CATEGORY_UID_NETWORK_ACTIVITY_CATEGORY_UID_UNCATEGORIZED NETWORK_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ACTIVITY_CATEGORY_UID.
var (
	NETWORK_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "NETWORK_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	NETWORK_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"NETWORK_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x NETWORK_ACTIVITY_CATEGORY_UID) Enum() *NETWORK_ACTIVITY_CATEGORY_UID {
	p := new(NETWORK_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[247].Descriptor()
}

func (NETWORK_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[247]
}

func (x NETWORK_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NETWORK_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{247}
}

type DHCP_ACTIVITY_ACTIVITY_ID int32

const (
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN DHCP_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	DHCP_ACTIVITY_ACTIVITY_ID_DHCP_ACTIVITY_ACTIVITY_ID_OTHER   DHCP_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DHCP_ACTIVITY_ACTIVITY_ID.
var (
	DHCP_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "DHCP_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	DHCP_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"DHCP_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"DHCP_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x DHCP_ACTIVITY_ACTIVITY_ID) Enum() *DHCP_ACTIVITY_ACTIVITY_ID {
	p := new(DHCP_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DHCP_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCP_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[248].Descriptor()
}

func (DHCP_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[248]
}

func (x DHCP_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCP_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (DHCP_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{248}
}

type DNS_ACTIVITY_CATEGORY_UID int32

const (
	DNS_ACTIVITY_CATEGORY_UID_DNS_ACTIVITY_CATEGORY_UID_UNKNOWN       DNS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DNS_ACTIVITY_CATEGORY_UID_DNS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED DNS_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for DNS_ACTIVITY_CATEGORY_UID.
var (
	DNS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "DNS_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "DNS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	DNS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"DNS_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"DNS_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x DNS_ACTIVITY_CATEGORY_UID) Enum() *DNS_ACTIVITY_CATEGORY_UID {
	p := new(DNS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x DNS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[249].Descriptor()
}

func (DNS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[249]
}

func (x DNS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (DNS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{249}
}

type NETWORK_FILE_ACTIVITY_CATEGORY_UID int32

const (
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN       NETWORK_FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED NETWORK_FILE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_FILE_ACTIVITY_CATEGORY_UID.
var (
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	NETWORK_FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"NETWORK_FILE_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) Enum() *NETWORK_FILE_ACTIVITY_CATEGORY_UID {
	p := new(NETWORK_FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[250].Descriptor()
}

func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[250]
}

func (x NETWORK_FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (NETWORK_FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{250}
}

type BASE_EVENT_CATEGORY_UID int32

const (
	BASE_EVENT_CATEGORY_UID_BASE_EVENT_CATEGORY_UID_UNKNOWN       BASE_EVENT_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	BASE_EVENT_CATEGORY_UID_BASE_EVENT_CATEGORY_UID_UNCATEGORIZED BASE_EVENT_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for BASE_EVENT_CATEGORY_UID.
var (
	BASE_EVENT_CATEGORY_UID_name = map[int32]string{
		0: "BASE_EVENT_CATEGORY_UID_UNKNOWN",
		1: "BASE_EVENT_CATEGORY_UID_UNCATEGORIZED",
	}
	BASE_EVENT_CATEGORY_UID_value = map[string]int32{
		"BASE_EVENT_CATEGORY_UID_UNKNOWN":       0,
		"BASE_EVENT_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x BASE_EVENT_CATEGORY_UID) Enum() *BASE_EVENT_CATEGORY_UID {
	p := new(BASE_EVENT_CATEGORY_UID)
	*p = x
	return p
}

func (x BASE_EVENT_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BASE_EVENT_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[251].Descriptor()
}

func (BASE_EVENT_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[251]
}

func (x BASE_EVENT_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BASE_EVENT_CATEGORY_UID.Descriptor instead.
func (BASE_EVENT_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{251}
}

type SSH_ACTIVITY_SEVERITY_ID int32

const (
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_UNKNOWN       SSH_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_CRITICAL      SSH_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_FATAL         SSH_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_HIGH          SSH_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL SSH_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_LOW           SSH_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_MEDIUM        SSH_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	SSH_ACTIVITY_SEVERITY_ID_SSH_ACTIVITY_SEVERITY_ID_OTHER         SSH_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for SSH_ACTIVITY_SEVERITY_ID.
var (
	SSH_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "SSH_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "SSH_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "SSH_ACTIVITY_SEVERITY_ID_FATAL",
		3: "SSH_ACTIVITY_SEVERITY_ID_HIGH",
		4: "SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "SSH_ACTIVITY_SEVERITY_ID_LOW",
		6: "SSH_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "SSH_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SSH_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SSH_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SSH_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"SSH_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"SSH_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"SSH_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"SSH_ACTIVITY_SEVERITY_ID_LOW":           5,
		"SSH_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"SSH_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x SSH_ACTIVITY_SEVERITY_ID) Enum() *SSH_ACTIVITY_SEVERITY_ID {
	p := new(SSH_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SSH_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSH_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[252].Descriptor()
}

func (SSH_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[252]
}

func (x SSH_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSH_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SSH_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{252}
}

type MODULE_LOAD_TYPE_ID int32

const (
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_UNKNOWN             MODULE_LOAD_TYPE_ID = 0 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_MAPPED              MODULE_LOAD_TYPE_ID = 1 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_NON_STANDARD        MODULE_LOAD_TYPE_ID = 2 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED MODULE_LOAD_TYPE_ID = 3 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_OTHER               MODULE_LOAD_TYPE_ID = 4 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_SHELL_CODE          MODULE_LOAD_TYPE_ID = 5 // Type: OCSF_VALUE;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_STANDARD            MODULE_LOAD_TYPE_ID = 6 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_LOAD_TYPE_ID.
var (
	MODULE_LOAD_TYPE_ID_name = map[int32]string{
		0: "MODULE_LOAD_TYPE_ID_UNKNOWN",
		1: "MODULE_LOAD_TYPE_ID_MAPPED",
		2: "MODULE_LOAD_TYPE_ID_NON_STANDARD",
		3: "MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED",
		4: "MODULE_LOAD_TYPE_ID_OTHER",
		5: "MODULE_LOAD_TYPE_ID_SHELL_CODE",
		6: "MODULE_LOAD_TYPE_ID_STANDARD",
	}
	MODULE_LOAD_TYPE_ID_value = map[string]int32{
		"MODULE_LOAD_TYPE_ID_UNKNOWN":             0,
		"MODULE_LOAD_TYPE_ID_MAPPED":              1,
		"MODULE_LOAD_TYPE_ID_NON_STANDARD":        2,
		"MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED": 3,
		"MODULE_LOAD_TYPE_ID_OTHER":               4,
		"MODULE_LOAD_TYPE_ID_SHELL_CODE":          5,
		"MODULE_LOAD_TYPE_ID_STANDARD":            6,
	}
)

func (x MODULE_LOAD_TYPE_ID) Enum() *MODULE_LOAD_TYPE_ID {
	p := new(MODULE_LOAD_TYPE_ID)
	*p = x
	return p
}

func (x MODULE_LOAD_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_LOAD_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[253].Descriptor()
}

func (MODULE_LOAD_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[253]
}

func (x MODULE_LOAD_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_LOAD_TYPE_ID.Descriptor instead.
func (MODULE_LOAD_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{253}
}

type MODULE_ACTIVITY_CLASS_UID int32

const (
	MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY_CLASS_UID_UNKNOWN    MODULE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY_CLASS_UID_BASE_EVENT MODULE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for MODULE_ACTIVITY_CLASS_UID.
var (
	MODULE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "MODULE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "MODULE_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	MODULE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"MODULE_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"MODULE_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x MODULE_ACTIVITY_CLASS_UID) Enum() *MODULE_ACTIVITY_CLASS_UID {
	p := new(MODULE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[254].Descriptor()
}

func (MODULE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[254]
}

func (x MODULE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_CLASS_UID.Descriptor instead.
func (MODULE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{254}
}

type KERNEL_ACTIVITY_STATUS_ID int32

const (
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_UNKNOWN KERNEL_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_FAILURE KERNEL_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_OTHER   KERNEL_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_SUCCESS KERNEL_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_STATUS_ID.
var (
	KERNEL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_STATUS_ID_FAILURE",
		2: "KERNEL_ACTIVITY_STATUS_ID_OTHER",
		3: "KERNEL_ACTIVITY_STATUS_ID_SUCCESS",
	}
	KERNEL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"KERNEL_ACTIVITY_STATUS_ID_FAILURE": 1,
		"KERNEL_ACTIVITY_STATUS_ID_OTHER":   2,
		"KERNEL_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x KERNEL_ACTIVITY_STATUS_ID) Enum() *KERNEL_ACTIVITY_STATUS_ID {
	p := new(KERNEL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[255].Descriptor()
}

func (KERNEL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[255]
}

func (x KERNEL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_STATUS_ID.Descriptor instead.
func (KERNEL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{255}
}

type ENTITY_MANAGEMENT_SEVERITY_ID int32

const (
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN       ENTITY_MANAGEMENT_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL      ENTITY_MANAGEMENT_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_FATAL         ENTITY_MANAGEMENT_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_HIGH          ENTITY_MANAGEMENT_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL ENTITY_MANAGEMENT_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_LOW           ENTITY_MANAGEMENT_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM        ENTITY_MANAGEMENT_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_SEVERITY_ID_ENTITY_MANAGEMENT_SEVERITY_ID_OTHER         ENTITY_MANAGEMENT_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_SEVERITY_ID.
var (
	ENTITY_MANAGEMENT_SEVERITY_ID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN",
		1: "ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL",
		2: "ENTITY_MANAGEMENT_SEVERITY_ID_FATAL",
		3: "ENTITY_MANAGEMENT_SEVERITY_ID_HIGH",
		4: "ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL",
		5: "ENTITY_MANAGEMENT_SEVERITY_ID_LOW",
		6: "ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM",
		7: "ENTITY_MANAGEMENT_SEVERITY_ID_OTHER",
	}
	ENTITY_MANAGEMENT_SEVERITY_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_SEVERITY_ID_UNKNOWN":       0,
		"ENTITY_MANAGEMENT_SEVERITY_ID_CRITICAL":      1,
		"ENTITY_MANAGEMENT_SEVERITY_ID_FATAL":         2,
		"ENTITY_MANAGEMENT_SEVERITY_ID_HIGH":          3,
		"ENTITY_MANAGEMENT_SEVERITY_ID_INFORMATIONAL": 4,
		"ENTITY_MANAGEMENT_SEVERITY_ID_LOW":           5,
		"ENTITY_MANAGEMENT_SEVERITY_ID_MEDIUM":        6,
		"ENTITY_MANAGEMENT_SEVERITY_ID_OTHER":         7,
	}
)

func (x ENTITY_MANAGEMENT_SEVERITY_ID) Enum() *ENTITY_MANAGEMENT_SEVERITY_ID {
	p := new(ENTITY_MANAGEMENT_SEVERITY_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[256].Descriptor()
}

func (ENTITY_MANAGEMENT_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[256]
}

func (x ENTITY_MANAGEMENT_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_SEVERITY_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{256}
}

type ENTITY_MANAGEMENT_STATUS_ID int32

const (
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN ENTITY_MANAGEMENT_STATUS_ID = 0 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_FAILURE ENTITY_MANAGEMENT_STATUS_ID = 1 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_OTHER   ENTITY_MANAGEMENT_STATUS_ID = 2 // Type: OCSF_VALUE;
	ENTITY_MANAGEMENT_STATUS_ID_ENTITY_MANAGEMENT_STATUS_ID_SUCCESS ENTITY_MANAGEMENT_STATUS_ID = 3 // Type: OCSF_VALUE;
)

// Enum value maps for ENTITY_MANAGEMENT_STATUS_ID.
var (
	ENTITY_MANAGEMENT_STATUS_ID_name = map[int32]string{
		0: "ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN",
		1: "ENTITY_MANAGEMENT_STATUS_ID_FAILURE",
		2: "ENTITY_MANAGEMENT_STATUS_ID_OTHER",
		3: "ENTITY_MANAGEMENT_STATUS_ID_SUCCESS",
	}
	ENTITY_MANAGEMENT_STATUS_ID_value = map[string]int32{
		"ENTITY_MANAGEMENT_STATUS_ID_UNKNOWN": 0,
		"ENTITY_MANAGEMENT_STATUS_ID_FAILURE": 1,
		"ENTITY_MANAGEMENT_STATUS_ID_OTHER":   2,
		"ENTITY_MANAGEMENT_STATUS_ID_SUCCESS": 3,
	}
)

func (x ENTITY_MANAGEMENT_STATUS_ID) Enum() *ENTITY_MANAGEMENT_STATUS_ID {
	p := new(ENTITY_MANAGEMENT_STATUS_ID)
	*p = x
	return p
}

func (x ENTITY_MANAGEMENT_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_MANAGEMENT_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[257].Descriptor()
}

func (ENTITY_MANAGEMENT_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[257]
}

func (x ENTITY_MANAGEMENT_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENTITY_MANAGEMENT_STATUS_ID.Descriptor instead.
func (ENTITY_MANAGEMENT_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{257}
}

type BASE_EVENT_ACTIVITY_ID int32

const (
	BASE_EVENT_ACTIVITY_ID_BASE_EVENT_ACTIVITY_ID_UNKNOWN BASE_EVENT_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	BASE_EVENT_ACTIVITY_ID_BASE_EVENT_ACTIVITY_ID_OTHER   BASE_EVENT_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for BASE_EVENT_ACTIVITY_ID.
var (
	BASE_EVENT_ACTIVITY_ID_name = map[int32]string{
		0: "BASE_EVENT_ACTIVITY_ID_UNKNOWN",
		1: "BASE_EVENT_ACTIVITY_ID_OTHER",
	}
	BASE_EVENT_ACTIVITY_ID_value = map[string]int32{
		"BASE_EVENT_ACTIVITY_ID_UNKNOWN": 0,
		"BASE_EVENT_ACTIVITY_ID_OTHER":   1,
	}
)

func (x BASE_EVENT_ACTIVITY_ID) Enum() *BASE_EVENT_ACTIVITY_ID {
	p := new(BASE_EVENT_ACTIVITY_ID)
	*p = x
	return p
}

func (x BASE_EVENT_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BASE_EVENT_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[258].Descriptor()
}

func (BASE_EVENT_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[258]
}

func (x BASE_EVENT_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BASE_EVENT_ACTIVITY_ID.Descriptor instead.
func (BASE_EVENT_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{258}
}

type API_ACTIVITY_ACTIVITY_ID int32

const (
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_UNKNOWN API_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_OTHER   API_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_ACTIVITY_ID.
var (
	API_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "API_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "API_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	API_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"API_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"API_ACTIVITY_ACTIVITY_ID_OTHER":   1,
	}
)

func (x API_ACTIVITY_ACTIVITY_ID) Enum() *API_ACTIVITY_ACTIVITY_ID {
	p := new(API_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[259].Descriptor()
}

func (API_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[259]
}

func (x API_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (API_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{259}
}

type IAM_SEVERITY_ID int32

const (
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_UNKNOWN       IAM_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_CRITICAL      IAM_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_FATAL         IAM_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_HIGH          IAM_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_INFORMATIONAL IAM_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_LOW           IAM_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_MEDIUM        IAM_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	IAM_SEVERITY_ID_IAM_SEVERITY_ID_OTHER         IAM_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for IAM_SEVERITY_ID.
var (
	IAM_SEVERITY_ID_name = map[int32]string{
		0: "IAM_SEVERITY_ID_UNKNOWN",
		1: "IAM_SEVERITY_ID_CRITICAL",
		2: "IAM_SEVERITY_ID_FATAL",
		3: "IAM_SEVERITY_ID_HIGH",
		4: "IAM_SEVERITY_ID_INFORMATIONAL",
		5: "IAM_SEVERITY_ID_LOW",
		6: "IAM_SEVERITY_ID_MEDIUM",
		7: "IAM_SEVERITY_ID_OTHER",
	}
	IAM_SEVERITY_ID_value = map[string]int32{
		"IAM_SEVERITY_ID_UNKNOWN":       0,
		"IAM_SEVERITY_ID_CRITICAL":      1,
		"IAM_SEVERITY_ID_FATAL":         2,
		"IAM_SEVERITY_ID_HIGH":          3,
		"IAM_SEVERITY_ID_INFORMATIONAL": 4,
		"IAM_SEVERITY_ID_LOW":           5,
		"IAM_SEVERITY_ID_MEDIUM":        6,
		"IAM_SEVERITY_ID_OTHER":         7,
	}
)

func (x IAM_SEVERITY_ID) Enum() *IAM_SEVERITY_ID {
	p := new(IAM_SEVERITY_ID)
	*p = x
	return p
}

func (x IAM_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IAM_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[260].Descriptor()
}

func (IAM_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[260]
}

func (x IAM_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IAM_SEVERITY_ID.Descriptor instead.
func (IAM_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{260}
}

type INVENTORY_INFO_ACTIVITY_ID int32

const (
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_UNKNOWN INVENTORY_INFO_ACTIVITY_ID = 0 // Type: OCSF_VALUE;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_OTHER   INVENTORY_INFO_ACTIVITY_ID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for INVENTORY_INFO_ACTIVITY_ID.
var (
	INVENTORY_INFO_ACTIVITY_ID_name = map[int32]string{
		0: "INVENTORY_INFO_ACTIVITY_ID_UNKNOWN",
		1: "INVENTORY_INFO_ACTIVITY_ID_OTHER",
	}
	INVENTORY_INFO_ACTIVITY_ID_value = map[string]int32{
		"INVENTORY_INFO_ACTIVITY_ID_UNKNOWN": 0,
		"INVENTORY_INFO_ACTIVITY_ID_OTHER":   1,
	}
)

func (x INVENTORY_INFO_ACTIVITY_ID) Enum() *INVENTORY_INFO_ACTIVITY_ID {
	p := new(INVENTORY_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[261].Descriptor()
}

func (INVENTORY_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[261]
}

func (x INVENTORY_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_ACTIVITY_ID.Descriptor instead.
func (INVENTORY_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{261}
}

type SECURITY_FINDING_STATE_ID int32

const (
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_UNKNOWN     SECURITY_FINDING_STATE_ID = 0 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_IN_PROGRESS SECURITY_FINDING_STATE_ID = 1 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_NEW         SECURITY_FINDING_STATE_ID = 2 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_OTHER       SECURITY_FINDING_STATE_ID = 3 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_RESOLVED    SECURITY_FINDING_STATE_ID = 4 // Type: OCSF_VALUE;
	SECURITY_FINDING_STATE_ID_SECURITY_FINDING_STATE_ID_SUPPRESSED  SECURITY_FINDING_STATE_ID = 5 // Type: OCSF_VALUE;
)

// Enum value maps for SECURITY_FINDING_STATE_ID.
var (
	SECURITY_FINDING_STATE_ID_name = map[int32]string{
		0: "SECURITY_FINDING_STATE_ID_UNKNOWN",
		1: "SECURITY_FINDING_STATE_ID_IN_PROGRESS",
		2: "SECURITY_FINDING_STATE_ID_NEW",
		3: "SECURITY_FINDING_STATE_ID_OTHER",
		4: "SECURITY_FINDING_STATE_ID_RESOLVED",
		5: "SECURITY_FINDING_STATE_ID_SUPPRESSED",
	}
	SECURITY_FINDING_STATE_ID_value = map[string]int32{
		"SECURITY_FINDING_STATE_ID_UNKNOWN":     0,
		"SECURITY_FINDING_STATE_ID_IN_PROGRESS": 1,
		"SECURITY_FINDING_STATE_ID_NEW":         2,
		"SECURITY_FINDING_STATE_ID_OTHER":       3,
		"SECURITY_FINDING_STATE_ID_RESOLVED":    4,
		"SECURITY_FINDING_STATE_ID_SUPPRESSED":  5,
	}
)

func (x SECURITY_FINDING_STATE_ID) Enum() *SECURITY_FINDING_STATE_ID {
	p := new(SECURITY_FINDING_STATE_ID)
	*p = x
	return p
}

func (x SECURITY_FINDING_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_FINDING_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[262].Descriptor()
}

func (SECURITY_FINDING_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[262]
}

func (x SECURITY_FINDING_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_FINDING_STATE_ID.Descriptor instead.
func (SECURITY_FINDING_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{262}
}

type EMAIL_ACTIVITY_SEVERITY_ID int32

const (
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN       EMAIL_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL      EMAIL_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_FATAL         EMAIL_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_HIGH          EMAIL_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL EMAIL_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_LOW           EMAIL_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM        EMAIL_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE;
	EMAIL_ACTIVITY_SEVERITY_ID_EMAIL_ACTIVITY_SEVERITY_ID_OTHER         EMAIL_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE;
)

// Enum value maps for EMAIL_ACTIVITY_SEVERITY_ID.
var (
	EMAIL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "EMAIL_ACTIVITY_SEVERITY_ID_FATAL",
		3: "EMAIL_ACTIVITY_SEVERITY_ID_HIGH",
		4: "EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "EMAIL_ACTIVITY_SEVERITY_ID_LOW",
		6: "EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "EMAIL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	EMAIL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"EMAIL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"EMAIL_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"EMAIL_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"EMAIL_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"EMAIL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"EMAIL_ACTIVITY_SEVERITY_ID_LOW":           5,
		"EMAIL_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"EMAIL_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x EMAIL_ACTIVITY_SEVERITY_ID) Enum() *EMAIL_ACTIVITY_SEVERITY_ID {
	p := new(EMAIL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x EMAIL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMAIL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[263].Descriptor()
}

func (EMAIL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[263]
}

func (x EMAIL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMAIL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (EMAIL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{263}
}

type KERNEL_ACTIVITY_CLASS_UID int32

const (
	KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY_CLASS_UID_UNKNOWN    KERNEL_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY_CLASS_UID_BASE_EVENT KERNEL_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_CLASS_UID.
var (
	KERNEL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "KERNEL_ACTIVITY_CLASS_UID_BASE_EVENT",
	}
	KERNEL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"KERNEL_ACTIVITY_CLASS_UID_UNKNOWN":    0,
		"KERNEL_ACTIVITY_CLASS_UID_BASE_EVENT": 1,
	}
)

func (x KERNEL_ACTIVITY_CLASS_UID) Enum() *KERNEL_ACTIVITY_CLASS_UID {
	p := new(KERNEL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[264].Descriptor()
}

func (KERNEL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[264]
}

func (x KERNEL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_CLASS_UID.Descriptor instead.
func (KERNEL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{264}
}

type SCHEDULED_JOB_ACTIVITY_CATEGORY_UID int32

const (
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN       SCHEDULED_JOB_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED SCHEDULED_JOB_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_CATEGORY_UID.
var (
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED",
	}
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN":       0,
		"SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNCATEGORIZED": 1,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Enum() *SCHEDULED_JOB_ACTIVITY_CATEGORY_UID {
	p := new(SCHEDULED_JOB_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[265].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes[265]
}

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP(), []int{265}
}

var File_ocsf_v1_0_0_events_other_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x73, 0x0a, 0x1d,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x25, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x64, 0x0a, 0x18, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xda, 0x02, 0x0a, 0x13, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x07, 0x2a, 0xb5, 0x01, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xd5, 0x03, 0x0a,
	0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x3a, 0x0a,
	0x36, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x33, 0x0a, 0x2f, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x2a, 0x6a, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x2a, 0x84, 0x01, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12,
	0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07,
	0x2a, 0x7b, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x88, 0x01,
	0x0a, 0x10, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x7e, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x84, 0x03, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xa3, 0x02, 0x0a,
	0x13, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x53, 0x4f,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x07, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xc5, 0x02, 0x0a, 0x18,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50,
	0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x07, 0x2a, 0x95, 0x08, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a,
	0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x40, 0x0a, 0x3c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x54, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x06, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x42, 0x45, 0x41, 0x54, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x08, 0x12, 0x31, 0x0a, 0x2d, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x46, 0x52, 0x41,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x09, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x53, 0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x53, 0x10, 0x10, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x11, 0x12, 0x36, 0x0a, 0x32, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x13, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x14, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x50, 0x10, 0x16, 0x2a, 0x9c, 0x07, 0x0a, 0x1d,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2a,
	0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x35, 0x0a, 0x31, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2d, 0x0a, 0x29, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xda, 0x01, 0x0a, 0x1a, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0xed, 0x01, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33,
	0x0a, 0x2f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x1c, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x81, 0x01, 0x0a, 0x20, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xea, 0x02, 0x0a, 0x13, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x1b, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d,
	0x0a, 0x29, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x4e,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x4e, 0x41, 0x49, 0x53, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x08, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0xa8, 0x03, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a,
	0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05,
	0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a,
	0xe2, 0x07, 0x0a, 0x1a, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x12, 0x26,
	0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x44, 0x4f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x4f, 0x54,
	0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x44, 0x44, 0x4f, 0x53, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x4c, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41,
	0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54,
	0x5f, 0x4b, 0x49, 0x54, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x10, 0x09,
	0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x53, 0x4f, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x52,
	0x4f, 0x4a, 0x41, 0x4e, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x36, 0x0a, 0x32,
	0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41,
	0x52, 0x45, 0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x4d,
	0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x50, 0x59, 0x57, 0x41, 0x52,
	0x45, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x54, 0x52, 0x4f, 0x4a, 0x41, 0x4e, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41,
	0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x56, 0x49, 0x52, 0x55, 0x53, 0x10, 0x13,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57,
	0x45, 0x42, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4c,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x49, 0x50, 0x45, 0x52, 0x10, 0x15, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x4f,
	0x52, 0x4d, 0x10, 0x16, 0x2a, 0x49, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0xab, 0x04, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x47, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x41, 0x50, 0x10, 0x03, 0x12,
	0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x42, 0x45, 0x52, 0x4f, 0x53, 0x10, 0x04, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x54, 0x4c, 0x4d, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x32, 0x5f, 0x30, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x50, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55,
	0x53, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x0b, 0x2a, 0xb0, 0x01,
	0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0x93, 0x01, 0x0a, 0x26, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x22, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x63,
	0x0a, 0x15, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x01, 0x2a, 0x70, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xb1, 0x07, 0x0a, 0x1e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a,
	0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29,
	0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x90, 0x01, 0x0a, 0x24, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x7e, 0x0a, 0x1e,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xf2, 0x02, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x07, 0x2a, 0x60, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x75, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xa1, 0x02, 0x0a, 0x14, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xa6, 0x01, 0x0a,
	0x16, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x18,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0x87, 0x07, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29,
	0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2c,
	0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x73, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x25, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x61, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0x69, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a,
	0x63, 0x0a, 0x16, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0x51, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x8a, 0x1a, 0x0a, 0x10, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41,
	0x42, 0x4f, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44,
	0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c,
	0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x52, 0x49, 0x54, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x52, 0x54,
	0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4c, 0x49, 0x50, 0x53, 0x10,
	0x07, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x10, 0x09,
	0x12, 0x2d, 0x0a, 0x29, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0a, 0x12,
	0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x4d, 0x5f, 0x53, 0x4d, 0x53, 0x10,
	0x0b, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x4e,
	0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x53, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x0f, 0x12,
	0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x44, 0x4e, 0x53, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x45, 0x4d, 0x45, 0x10, 0x15, 0x12, 0x29, 0x0a,
	0x25, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x17, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x44, 0x53, 0x10, 0x18,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c,
	0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x48, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x1c,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x1d, 0x12, 0x20, 0x0a,
	0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x48, 0x55, 0x4d, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x4b, 0x45, 0x53, 0x10, 0x1e, 0x12,
	0x22, 0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x1f, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x53, 0x10, 0x20, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x59, 0x10, 0x21, 0x12, 0x2e, 0x0a,
	0x2a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x45, 0x4c, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x53, 0x55, 0x49, 0x54, 0x10, 0x22, 0x12, 0x27, 0x0a,
	0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x52,
	0x45, 0x45, 0x52, 0x53, 0x10, 0x23, 0x12, 0x34, 0x0a, 0x30, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43,
	0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x42, 0x4f, 0x54, 0x4e, 0x45, 0x54, 0x53, 0x10, 0x24, 0x12, 0x2e, 0x0a, 0x2a,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x4d, 0x41, 0x4c, 0x4e, 0x45, 0x54, 0x53, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x4d, 0x41, 0x52, 0x49, 0x4a, 0x55, 0x41, 0x4e, 0x41, 0x10, 0x26, 0x12, 0x22, 0x0a, 0x1e,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x27,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59, 0x10, 0x28, 0x12,
	0x34, 0x0a, 0x30, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x44,
	0x55, 0x4c, 0x54, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x10, 0x2a, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x55, 0x4d, 0x53, 0x10, 0x2b, 0x12, 0x30,
	0x0a, 0x2c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x2c,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x55, 0x44, 0x49, 0x54, 0x59, 0x10, 0x2d, 0x12, 0x31, 0x0a,
	0x2d, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x2e,
	0x12, 0x24, 0x0a, 0x20, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x45, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x30, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x50, 0x5f, 0x32, 0x5f, 0x50, 0x10, 0x31, 0x12, 0x23, 0x0a, 0x1f, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x53, 0x10, 0x32,
	0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x53, 0x5f, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x33, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x48, 0x49, 0x53,
	0x48, 0x49, 0x4e, 0x47, 0x10, 0x34, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x49, 0x52, 0x41, 0x43,
	0x59, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x43,
	0x45, 0x52, 0x4e, 0x53, 0x10, 0x35, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x53, 0x10, 0x36, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x44, 0x56, 0x4f, 0x43, 0x41, 0x43, 0x59, 0x10, 0x37, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x4f,
	0x52, 0x4e, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x38, 0x12, 0x32, 0x0a, 0x2e, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x57, 0x41,
	0x4e, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x39, 0x12,
	0x24, 0x0a, 0x20, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x3a, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x3b, 0x12,
	0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x3c, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x3d, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x3e,
	0x12, 0x28, 0x0a, 0x24, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x3f, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x40, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x43, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x41, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x53, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x53, 0x10, 0x42, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x45, 0x58, 0x5f, 0x45, 0x44,
	0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x43, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x45,
	0x58, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x44, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x45,
	0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x46, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x43,
	0x49, 0x45, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x47, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0x49, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4a, 0x12,
	0x1f, 0x0a, 0x1b, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x4b,
	0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x56, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x4c, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x52, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48,
	0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10,
	0x4d, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x4e, 0x12,
	0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x4f, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x10, 0x50, 0x12, 0x22,
	0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x51, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x53, 0x10,
	0x52, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x48,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x49, 0x53, 0x4d, 0x10, 0x53, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x53, 0x10, 0x54, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x41, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53,
	0x10, 0x55, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x56, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xea, 0x02,
	0x0a, 0x18, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x54, 0x50,
	0x48, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49,
	0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x44, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4c, 0x53, 0x48, 0x10, 0x07, 0x12, 0x2b, 0x0a,
	0x27, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x58, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x08, 0x2a, 0xf2, 0x06, 0x0a, 0x1b, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58,
	0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x33,
	0x0a, 0x2f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a,
	0xf4, 0x05, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52,
	0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12,
	0x25, 0x0a, 0x21, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x23, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x2a, 0x58, 0x0a, 0x14, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x0d, 0x49, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x10, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x41, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x41, 0x4d, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x46,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x96, 0x03, 0x0a, 0x21,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x2a, 0x9c, 0x01, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x2a, 0x88, 0x01, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x66,
	0x0a, 0x16, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x60, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xf2, 0x06, 0x0a, 0x1b, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x33, 0x0a, 0x2f,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x2b, 0x0a, 0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x84, 0x01,
	0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xa1, 0x02, 0x0a, 0x1e, 0x44, 0x49, 0x47, 0x49, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x47,
	0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x53, 0x41, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x47, 0x49,
	0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x05, 0x2a, 0x79, 0x0a, 0x0d, 0x49, 0x41,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x41,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x6f,
	0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a,
	0x63, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x9f, 0x02, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x81, 0x01, 0x0a, 0x20, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x52,
	0x0a, 0x12, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0xfb, 0x02, 0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x03, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07,
	0x2a, 0xf0, 0x07, 0x0a, 0x21, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x39, 0x0a, 0x35, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x10, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x13, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x27,
	0x0a, 0x23, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a,
	0x82, 0x01, 0x0a, 0x22, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x6f, 0x0a,
	0x19, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x6f,
	0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a,
	0x96, 0x03, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x33, 0x0a,
	0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2c, 0x0a,
	0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x94, 0x01, 0x0a, 0x28, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0x75, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x69, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x7e,
	0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd9,
	0x08, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x38, 0x0a, 0x34, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x32,
	0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d,
	0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x3e, 0x0a, 0x3a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12,
	0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x9f, 0x01, 0x0a, 0x29, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x3b, 0x0a, 0x37, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x1a,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd7, 0x02,
	0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xf6, 0x01, 0x0a, 0x26, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x32, 0x0a,
	0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x2a, 0x75, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x14, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x05, 0x2a, 0x9f, 0x03, 0x0a, 0x22, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xc6, 0x07, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2b, 0x0a,
	0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x29,
	0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a,
	0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x72,
	0x0a, 0x1a, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x01, 0x2a, 0x64, 0x0a, 0x18, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x80, 0x02, 0x0a,
	0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x57, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x05, 0x2a,
	0x6f, 0x0a, 0x19, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01,
	0x2a, 0x87, 0x07, 0x0a, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x2b, 0x0a, 0x27, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c,
	0x12, 0x2a, 0x0a, 0x26, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x34, 0x0a, 0x30, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x96, 0x03, 0x0a, 0x21, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x07, 0x2a, 0x6f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x20, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a,
	0x83, 0x02, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x04, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x7e, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xd3, 0x06, 0x0a, 0x15, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x41,
	0x4c, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x44, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x05, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x53, 0x49,
	0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x10, 0x08, 0x12,
	0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x53, 0x4f, 0x54, 0x59, 0x50, 0x45,
	0x4e, 0x49, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x58, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x0b, 0x12,
	0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x58, 0x52, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x0f, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x10, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x59, 0x58, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x59, 0x58, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x16, 0x2a, 0xe9, 0x01, 0x0a, 0x1b,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0xa1, 0x01, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x96, 0x02, 0x0a, 0x0c,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x49, 0x43, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x08, 0x2a, 0x8a, 0x01, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x75, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x2a, 0x6d, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0x6f, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01,
	0x2a, 0x72, 0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0xf2, 0x06, 0x0a, 0x1b, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x44, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27,
	0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xd3, 0x01, 0x0a, 0x1f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a,
	0x6d, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x23, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xc1,
	0x01, 0x0a, 0x10, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f,
	0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0xa6, 0x03, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x41, 0x4d, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4f,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x2a, 0xb0, 0x01, 0x0a, 0x18,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xd7,
	0x02, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xe7, 0x05, 0x0a, 0x23, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x56, 0x50, 0x43, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x50, 0x43,
	0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x3c,
	0x0a, 0x38, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x56,
	0x50, 0x43, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x50, 0x43, 0x10, 0x07, 0x12, 0x35, 0x0a, 0x31, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x08, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x09,
	0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12,
	0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x56, 0x50, 0x43, 0x10,
	0x0b, 0x12, 0x3f, 0x0a, 0x3b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x10, 0x0c, 0x2a, 0xdd, 0x01, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x2a, 0xb1, 0x07, 0x0a, 0x1e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a,
	0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c,
	0x0a, 0x28, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x9f, 0x03, 0x0a, 0x22, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x82, 0x01, 0x0a, 0x22, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x2a, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xe9, 0x02,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x76, 0x0a, 0x1e, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x6f, 0x0a, 0x19, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x01, 0x2a, 0x83, 0x0b, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x50, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54,
	0x4f, 0x50, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x32,
	0x0a, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4f, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x1f, 0x0a,
	0x1b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1e,
	0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1d,
	0x0a, 0x19, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x15, 0x12, 0x20, 0x0a,
	0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x16, 0x12,
	0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x17, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x41, 0x4c,
	0x49, 0x41, 0x53, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41,
	0x4d, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1a, 0x12, 0x23,
	0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x1b, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x4d, 0x41, 0x50, 0x48, 0x4f, 0x52, 0x45, 0x10, 0x1e, 0x12, 0x26, 0x0a, 0x22,
	0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x49, 0x43, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x1f, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x23, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24, 0x12, 0x27, 0x0a, 0x23,
	0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x4d,
	0x49, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x10, 0x26, 0x2a, 0x73, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x78, 0x0a,
	0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x63, 0x0a, 0x16, 0x52, 0x44, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x67, 0x0a, 0x19,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x8f, 0x02, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x69, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x2a, 0xc4, 0x01, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0a, 0x43, 0x56, 0x53,
	0x53, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x56, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x56, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x56, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x50,
	0x54, 0x48, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x56, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xc5, 0x02, 0x0a, 0x18,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x07, 0x2a, 0x64, 0x0a, 0x18, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x7f, 0x0a, 0x21, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d,
	0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xcf, 0x01, 0x0a, 0x10, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4c, 0x5f, 0x44,
	0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0xe9, 0x02, 0x0a,
	0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x72, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x85, 0x02, 0x0a,
	0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x52,
	0x45, 0x54, 0x10, 0x05, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07,
	0x2a, 0xa1, 0x01, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a,
	0x6d, 0x0a, 0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x6c,
	0x0a, 0x19, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x18,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0xab, 0x05, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x32,
	0x0a, 0x2e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x07, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x53, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x09, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0d,
	0x2a, 0xf2, 0x02, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x2a, 0xdf, 0x02, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x45,
	0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x12,
	0x20, 0x0a, 0x1c, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10,
	0x07, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x10, 0x08, 0x2a, 0x9e, 0x02, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x05, 0x2a, 0x7e, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x7f, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xb1, 0x07, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11,
	0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x70, 0x0a, 0x1c, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x5b, 0x0a,
	0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x57, 0x0a, 0x12, 0x46, 0x49,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x18, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x13, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xb5, 0x01, 0x0a, 0x19, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0xd9, 0x03, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x55,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x4e, 0x53,
	0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50, 0x55, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45,
	0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x41, 0x46,
	0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x06, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x4c, 0x59, 0x5f, 0x4d,
	0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x4c, 0x59, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10,
	0x08, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x09, 0x12,
	0x28, 0x0a, 0x24, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55,
	0x53, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x59, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x0b, 0x2a, 0x63, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0x97, 0x01, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xf2, 0x06, 0x0a, 0x1b,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a,
	0x25, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x33, 0x0a, 0x2f, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13,
	0x2a, 0x78, 0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xe0, 0x02, 0x0a, 0x1b, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x72, 0x0a,
	0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0x66, 0x0a, 0x17, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd3, 0x01, 0x0a, 0x1f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a,
	0xba, 0x01, 0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xc5, 0x02, 0x0a,
	0x18, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x44,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x52,
	0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x22, 0x0a, 0x1e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x2a, 0x6a, 0x0a, 0x1a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x2a, 0xe0, 0x02, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x07, 0x2a, 0xaf, 0x08, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30,
	0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x3c, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x31, 0x0a, 0x2d, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2f,
	0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12,
	0x34, 0x0a, 0x30, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xc6, 0x07, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2b, 0x0a,
	0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x29,
	0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a,
	0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x70,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01,
	0x2a, 0xd8, 0x01, 0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xa6, 0x02, 0x0a, 0x0a,
	0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x49, 0x58, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x50, 0x5f,
	0x55, 0x58, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x4f, 0x4c, 0x41, 0x52, 0x49, 0x53, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x5f,
	0x4f, 0x53, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x5f, 0x50, 0x41, 0x44, 0x5f, 0x4f, 0x53, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x4f, 0x53, 0x10, 0x0b, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x87, 0x01, 0x0a,
	0x0e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4d,
	0x55, 0x54, 0x45, 0x58, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xf6, 0x03, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x44, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x44,
	0x49, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x5a, 0x10, 0x05, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x47, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x5a, 0x10, 0x07, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x5f, 0x51, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x09, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x49, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x5a, 0x10, 0x0b, 0x2a,
	0x9f, 0x02, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x2a, 0x79, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x85, 0x08, 0x0a,
	0x22, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2e, 0x0a,
	0x2a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x31, 0x0a,
	0x2d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c,
	0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e,
	0x12, 0x3a, 0x0a, 0x36, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x32, 0x0a, 0x2e,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x32, 0x0a, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x2a, 0x63, 0x0a, 0x16, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xd3, 0x01, 0x0a, 0x1f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a,
	0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a,
	0x61, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0x66, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xc4, 0x08, 0x0a, 0x25, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x31,
	0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x34, 0x0a, 0x30,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2f, 0x0a,
	0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x3d,
	0x0a, 0x39, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x35, 0x0a,
	0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x13, 0x2a, 0x92, 0x01, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x1c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01,
	0x2a, 0xc6, 0x07, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a,
	0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2f, 0x0a,
	0x2b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x63, 0x0a, 0x16, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x6f,
	0x0a, 0x19, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0xe0, 0x02, 0x0a, 0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x07, 0x2a, 0x7f, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x01, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xba, 0x01, 0x0a, 0x1a,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x72, 0x0a,
	0x1a, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x5a, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x7b, 0x0a,
	0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x1d, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4d,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x6a, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xd7, 0x02,
	0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0xab, 0x01, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x7b,
	0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x70, 0x0a, 0x1c, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xf2, 0x06,
	0x0a, 0x1b, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a,
	0x29, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28,
	0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a,
	0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x29, 0x0a, 0x25, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x0e, 0x12, 0x33, 0x0a, 0x2f, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x26, 0x0a,
	0x22, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x13, 0x2a, 0x72, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x9e, 0x02, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x50, 0x54, 0x4f, 0x50, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x09, 0x2a, 0xf2, 0x01, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xce, 0x02, 0x0a,
	0x19, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x48,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x8d, 0x01,
	0x0a, 0x23, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xaa, 0x02,
	0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x70, 0x0a, 0x1c, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x1a,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xb1, 0x02,
	0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x4e,
	0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x5f, 0x49, 0x5f, 0x50, 0x56, 0x5f, 0x34, 0x10, 0x01, 0x12, 0x4e,
	0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x5f, 0x49, 0x5f, 0x50, 0x56, 0x5f, 0x36, 0x10, 0x02, 0x12, 0x31,
	0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x03, 0x2a, 0xb3, 0x02, 0x0a, 0x16, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x5d, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xdb, 0x07, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x38, 0x0a, 0x34, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x2a, 0xc9, 0x01, 0x0a, 0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0x81, 0x01, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x67, 0x0a, 0x19, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x21, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x19, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x22,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x69, 0x0a, 0x17, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x01, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x8e, 0x02, 0x0a, 0x13,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48,
	0x45, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x06, 0x2a, 0x6c, 0x0a, 0x19,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xb5, 0x01, 0x0a, 0x19, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x2a, 0xf2, 0x02, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a,
	0x21, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x27,
	0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x5e, 0x0a, 0x16, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x18, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0xf4, 0x01, 0x0a, 0x0f, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x41, 0x4d,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x6a, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0x87, 0x02, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x45, 0x57, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xd7, 0x02, 0x0a,
	0x1a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x6c, 0x0a, 0x19, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x23, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a,
	0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x01, 0x42, 0x8d, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f,
	0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x4f, 0x45, 0xaa, 0x02, 0x1c, 0x4f, 0x63, 0x73, 0x66, 0x2e,
	0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x1c, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x28, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31,
	0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x5c,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x20, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x3a, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescData = file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDesc
)

func file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDescData
}

var file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 266)
var file_ocsf_v1_0_0_events_other_enums_enums_proto_goTypes = []interface{}{
	(AUTHORIZE_SESSION_ACTIVITY_ID)(0),             // 0: ocsf.v1_0_0.events.other.enums.AUTHORIZE_SESSION_ACTIVITY_ID
	(RDP_ACTIVITY_ACTIVITY_ID)(0),                  // 1: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_ACTIVITY_ID
	(DNS_ANSWER_FLAG_IDS)(0),                       // 2: ocsf.v1_0_0.events.other.enums.DNS_ANSWER_FLAG_IDS
	(MODULE_ACTIVITY_STATUS_ID)(0),                 // 3: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_STATUS_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID)(0),  // 4: ocsf.v1_0_0.events.other.enums.WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID
	(ACCOUNT_CHANGE_ACTIVITY_ID)(0),                // 5: ocsf.v1_0_0.events.other.enums.ACCOUNT_CHANGE_ACTIVITY_ID
	(EMAIL_FILE_ACTIVITY_CATEGORY_UID)(0),          // 6: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID
	(NETWORK_ACTIVITY_STATUS_ID)(0),                // 7: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_STATUS_ID
	(REGISTRY_KEY_ACTIVITY_CLASS_UID)(0),           // 8: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_CLASS_UID
	(KERNEL_EXTENSION_SEVERITY_ID)(0),              // 9: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_SEVERITY_ID
	(PROCESS_ACTIVITY_CATEGORY_UID)(0),             // 10: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_CATEGORY_UID
	(SYSTEM_STATUS_ID)(0),                          // 11: ocsf.v1_0_0.events.other.enums.SYSTEM_STATUS_ID
	(APPLICATION_SEVERITY_ID)(0),                   // 12: ocsf.v1_0_0.events.other.enums.APPLICATION_SEVERITY_ID
	(APPLICATION_LIFECYCLE_CLASS_UID)(0),           // 13: ocsf.v1_0_0.events.other.enums.APPLICATION_LIFECYCLE_CLASS_UID
	(USER_ACCESS_CATEGORY_UID)(0),                  // 14: ocsf.v1_0_0.events.other.enums.USER_ACCESS_CATEGORY_UID
	(EMAIL_FILE_ACTIVITY_SEVERITY_ID)(0),           // 15: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID
	(DNS_QUERY_OPCODE_ID)(0),                       // 16: ocsf.v1_0_0.events.other.enums.DNS_QUERY_OPCODE_ID
	(DNS_ACTIVITY_STATUS_ID)(0),                    // 17: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_STATUS_ID
	(API_ACTIVITY_SEVERITY_ID)(0),                  // 18: ocsf.v1_0_0.events.other.enums.API_ACTIVITY_SEVERITY_ID
	(TLS_EXTENSION_TYPE_ID)(0),                     // 19: ocsf.v1_0_0.events.other.enums.TLS_EXTENSION_TYPE_ID
	(EMAIL_ACTIVITY_DISPOSITION_ID)(0),             // 20: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_DISPOSITION_ID
	(SMB_ACTIVITY_SHARE_TYPE_ID)(0),                // 21: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_SHARE_TYPE_ID
	(PROCESS_ACTIVITY_INJECTION_TYPE_ID)(0),        // 22: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID
	(MEMORY_ACTIVITY_CATEGORY_UID)(0),              // 23: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_CATEGORY_UID
	(WEB_RESOURCES_ACTIVITY_CLASS_UID)(0),          // 24: ocsf.v1_0_0.events.other.enums.WEB_RESOURCES_ACTIVITY_CLASS_UID
	(KILL_CHAIN_PHASE_ID)(0),                       // 25: ocsf.v1_0_0.events.other.enums.KILL_CHAIN_PHASE_ID
	(AUTHORIZE_SESSION_STATUS_ID)(0),               // 26: ocsf.v1_0_0.events.other.enums.AUTHORIZE_SESSION_STATUS_ID
	(REGISTRY_VALUE_ACTIVITY_SEVERITY_ID)(0),       // 27: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID
	(MALWARE_CLASSIFICATION_IDS)(0),                // 28: ocsf.v1_0_0.events.other.enums.MALWARE_CLASSIFICATION_IDS
	(IAM_ACTIVITY_ID)(0),                           // 29: ocsf.v1_0_0.events.other.enums.IAM_ACTIVITY_ID
	(AUTHENTICATION_AUTH_PROTOCOL_ID)(0),           // 30: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_AUTH_PROTOCOL_ID
	(ACCOUNT_CHANGE_STATUS_ID)(0),                  // 31: ocsf.v1_0_0.events.other.enums.ACCOUNT_CHANGE_STATUS_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID)(0),    // 32: ocsf.v1_0_0.events.other.enums.WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID
	(FILE_ACTIVITY_STATUS_ID)(0),                   // 33: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_STATUS_ID
	(REGISTRY_KEY_ACTIVITY_CATEGORY_UID)(0),        // 34: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID
	(PROCESS_ACTIVITY_STATUS_ID)(0),                // 35: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_STATUS_ID
	(FINDINGS_CATEGORY_UID)(0),                     // 36: ocsf.v1_0_0.events.other.enums.FINDINGS_CATEGORY_UID
	(NETWORK_ACTIVITY_ACTIVITY_ID)(0),              // 37: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_ACTIVITY_ID
	(KERNEL_ACTIVITY_DISPOSITION_ID)(0),            // 38: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_DISPOSITION_ID
	(REGISTRY_VALUE_ACTIVITY_CATEGORY_UID)(0),      // 39: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID
	(RESOURCE_ACTIVITY_CATEGORY_UID)(0),            // 40: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_CATEGORY_UID
	(RESOURCE_ACTIVITY_SEVERITY_ID)(0),             // 41: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_SEVERITY_ID
	(APPLICATION_CLASS_UID)(0),                     // 42: ocsf.v1_0_0.events.other.enums.APPLICATION_CLASS_UID
	(APPLICATION_CATEGORY_UID)(0),                  // 43: ocsf.v1_0_0.events.other.enums.APPLICATION_CATEGORY_UID
	(INVENTORY_INFO_CATEGORY_UID)(0),               // 44: ocsf.v1_0_0.events.other.enums.INVENTORY_INFO_CATEGORY_UID
	(FINDINGS_SEVERITY_ID)(0),                      // 45: ocsf.v1_0_0.events.other.enums.FINDINGS_SEVERITY_ID
	(RDP_ACTIVITY_STATUS_ID)(0),                    // 46: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_STATUS_ID
	(EMAIL_ACTIVITY_CATEGORY_UID)(0),               // 47: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_CATEGORY_UID
	(SMB_ACTIVITY_ACTIVITY_ID)(0),                  // 48: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_ACTIVITY_ID
	(FILE_ACTIVITY_DISPOSITION_ID)(0),              // 49: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_DISPOSITION_ID
	(RESOURCE_ACTIVITY_ACTIVITY_ID)(0),             // 50: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_ACTIVITY_ID
	(APPLICATION_ACTIVITY_ID)(0),                   // 51: ocsf.v1_0_0.events.other.enums.APPLICATION_ACTIVITY_ID
	(EMAIL_ACTIVITY_CLASS_UID)(0),                  // 52: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_CLASS_UID
	(FTP_ACTIVITY_CLASS_UID)(0),                    // 53: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_CLASS_UID
	(SYSTEM_CLASS_UID)(0),                          // 54: ocsf.v1_0_0.events.other.enums.SYSTEM_CLASS_UID
	(URL_CATEGORY_IDS)(0),                          // 55: ocsf.v1_0_0.events.other.enums.URL_CATEGORY_IDS
	(API_ACTIVITY_STATUS_ID)(0),                    // 56: ocsf.v1_0_0.events.other.enums.API_ACTIVITY_STATUS_ID
	(FINGERPRINT_ALGORITHM_ID)(0),                  // 57: ocsf.v1_0_0.events.other.enums.FINGERPRINT_ALGORITHM_ID
	(SSH_ACTIVITY_DISPOSITION_ID)(0),               // 58: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_DISPOSITION_ID
	(SYSTEM_DISPOSITION_ID)(0),                     // 59: ocsf.v1_0_0.events.other.enums.SYSTEM_DISPOSITION_ID
	(USER_ACCESS_SEVERITY_ID)(0),                   // 60: ocsf.v1_0_0.events.other.enums.USER_ACCESS_SEVERITY_ID
	(EMAIL_ACTIVITY_STATUS_ID)(0),                  // 61: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_STATUS_ID
	(REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID)(0),       // 62: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID
	(FINDINGS_ACTIVITY_ID)(0),                      // 63: ocsf.v1_0_0.events.other.enums.FINDINGS_ACTIVITY_ID
	(IAM_CLASS_UID)(0),                             // 64: ocsf.v1_0_0.events.other.enums.IAM_CLASS_UID
	(IAM_CATEGORY_UID)(0),                          // 65: ocsf.v1_0_0.events.other.enums.IAM_CATEGORY_UID
	(FTP_ACTIVITY_STATUS_ID)(0),                    // 66: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_STATUS_ID
	(SMB_ACTIVITY_SEVERITY_ID)(0),                  // 67: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_SEVERITY_ID
	(APPLICATION_LIFECYCLE_SEVERITY_ID)(0),         // 68: ocsf.v1_0_0.events.other.enums.APPLICATION_LIFECYCLE_SEVERITY_ID
	(BASE_EVENT_STATUS_ID)(0),                      // 69: ocsf.v1_0_0.events.other.enums.BASE_EVENT_STATUS_ID
	(USER_TYPE_ID)(0),                              // 70: ocsf.v1_0_0.events.other.enums.USER_TYPE_ID
	(DISCOVERY_CATEGORY_UID)(0),                    // 71: ocsf.v1_0_0.events.other.enums.DISCOVERY_CATEGORY_UID
	(USER_ACCESS_CLASS_UID)(0),                     // 72: ocsf.v1_0_0.events.other.enums.USER_ACCESS_CLASS_UID
	(DNS_ACTIVITY_DISPOSITION_ID)(0),               // 73: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_DISPOSITION_ID
	(REGISTRY_VALUE_ACTIVITY_CLASS_UID)(0),         // 74: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID
	(RESOURCE_ACTIVITY_STATUS_ID)(0),               // 75: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_STATUS_ID
	(DIGITAL_SIGNATURE_ALGORITHM_ID)(0),            // 76: ocsf.v1_0_0.events.other.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	(IAM_STATUS_ID)(0),                             // 77: ocsf.v1_0_0.events.other.enums.IAM_STATUS_ID
	(FILE_ACTIVITY_ACTIVITY_ID)(0),                 // 78: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_ACTIVITY_ID
	(KERNEL_EXTENSION_CLASS_UID)(0),                // 79: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_CLASS_UID
	(API_ACTIVITY_CLASS_UID)(0),                    // 80: ocsf.v1_0_0.events.other.enums.API_ACTIVITY_CLASS_UID
	(AUTHENTICATION_STATUS_ID)(0),                  // 81: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_STATUS_ID
	(NETWORK_CONNECTION_INFO_DIRECTION_ID)(0),      // 82: ocsf.v1_0_0.events.other.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	(FILE_ACTIVITY_SEVERITY_ID)(0),                 // 83: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_SEVERITY_ID
	(SCHEDULED_JOB_ACTIVITY_CLASS_UID)(0),          // 84: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID
	(OBSERVABLE_TYPE_ID)(0),                        // 85: ocsf.v1_0_0.events.other.enums.OBSERVABLE_TYPE_ID
	(EMAIL_URL_ACTIVITY_SEVERITY_ID)(0),            // 86: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_SEVERITY_ID
	(EMAIL_URL_ACTIVITY_DISPOSITION_ID)(0),         // 87: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID
	(NETWORK_ACTIVITY_SEVERITY_ID)(0),              // 88: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_SEVERITY_ID
	(SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID)(0),        // 89: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID
	(CONFIG_STATE_STATUS_ID)(0),                    // 90: ocsf.v1_0_0.events.other.enums.CONFIG_STATE_STATUS_ID
	(RDP_ACTIVITY_CATEGORY_UID)(0),                 // 91: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_CATEGORY_UID
	(NETWORK_ACTIVITY_CLASS_UID)(0),                // 92: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_CLASS_UID
	(NETWORK_FILE_ACTIVITY_SEVERITY_ID)(0),         // 93: ocsf.v1_0_0.events.other.enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID)(0),  // 94: ocsf.v1_0_0.events.other.enums.WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID
	(AUTHENTICATION_CATEGORY_UID)(0),               // 95: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_CATEGORY_UID
	(AUTHENTICATION_CLASS_UID)(0),                  // 96: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_CLASS_UID
	(GROUP_MANAGEMENT_STATUS_ID)(0),                // 97: ocsf.v1_0_0.events.other.enums.GROUP_MANAGEMENT_STATUS_ID
	(NETWORK_FILE_ACTIVITY_CLASS_UID)(0),           // 98: ocsf.v1_0_0.events.other.enums.NETWORK_FILE_ACTIVITY_CLASS_UID
	(REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID)(0),    // 99: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID)(0), // 100: ocsf.v1_0_0.events.other.enums.WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID
	(SECURITY_FINDING_CLASS_UID)(0),                // 101: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_CLASS_UID
	(AUTHENTICATION_SEVERITY_ID)(0),                // 102: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_SEVERITY_ID
	(HTTP_ACTIVITY_SEVERITY_ID)(0),                 // 103: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID)(0),    // 104: ocsf.v1_0_0.events.other.enums.WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID
	(EMAIL_URL_ACTIVITY_CLASS_UID)(0),              // 105: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_CLASS_UID
	(DEVICE_RISK_LEVEL_ID)(0),                      // 106: ocsf.v1_0_0.events.other.enums.DEVICE_RISK_LEVEL_ID
	(WEB_RESOURCES_ACTIVITY_SEVERITY_ID)(0),        // 107: ocsf.v1_0_0.events.other.enums.WEB_RESOURCES_ACTIVITY_SEVERITY_ID
	(NETWORK_ACTIVITY_DISPOSITION_ID)(0),           // 108: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_DISPOSITION_ID
	(DHCP_ACTIVITY_CATEGORY_UID)(0),                // 109: ocsf.v1_0_0.events.other.enums.DHCP_ACTIVITY_CATEGORY_UID
	(FTP_ACTIVITY_ACTIVITY_ID)(0),                  // 110: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_ACTIVITY_ID
	(SYSTEM_ACTIVITY_ID)(0),                        // 111: ocsf.v1_0_0.events.other.enums.SYSTEM_ACTIVITY_ID
	(NETWORK_INTERFACE_TYPE_ID)(0),                 // 112: ocsf.v1_0_0.events.other.enums.NETWORK_INTERFACE_TYPE_ID
	(SSH_ACTIVITY_CATEGORY_UID)(0),                 // 113: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_CATEGORY_UID
	(HTTP_ACTIVITY_DISPOSITION_ID)(0),              // 114: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_DISPOSITION_ID
	(REGISTRY_KEY_ACTIVITY_SEVERITY_ID)(0),         // 115: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID
	(PROCESS_ACTIVITY_CLASS_UID)(0),                // 116: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_CLASS_UID
	(WEB_RESOURCES_ACTIVITY_STATUS_ID)(0),          // 117: ocsf.v1_0_0.events.other.enums.WEB_RESOURCES_ACTIVITY_STATUS_ID
	(SECURITY_FINDING_IMPACT_ID)(0),                // 118: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_IMPACT_ID
	(ENTITY_MANAGEMENT_CATEGORY_UID)(0),            // 119: ocsf.v1_0_0.events.other.enums.ENTITY_MANAGEMENT_CATEGORY_UID
	(DNS_ACTIVITY_RCODE_ID)(0),                     // 120: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_RCODE_ID
	(EMAIL_ACTIVITY_DIRECTION_ID)(0),               // 121: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_DIRECTION_ID
	(APPLICATION_STATUS_ID)(0),                     // 122: ocsf.v1_0_0.events.other.enums.APPLICATION_STATUS_ID
	(FILE_TYPE_ID)(0),                              // 123: ocsf.v1_0_0.events.other.enums.FILE_TYPE_ID
	(APPLICATION_LIFECYCLE_CATEGORY_UID)(0),        // 124: ocsf.v1_0_0.events.other.enums.APPLICATION_LIFECYCLE_CATEGORY_UID
	(ACCOUNT_CHANGE_CATEGORY_UID)(0),               // 125: ocsf.v1_0_0.events.other.enums.ACCOUNT_CHANGE_CATEGORY_UID
	(HTTP_ACTIVITY_CLASS_UID)(0),                   // 126: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_CLASS_UID
	(MODULE_ACTIVITY_ACTIVITY_ID)(0),               // 127: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_ACTIVITY_ID
	(CONFIG_STATE_CATEGORY_UID)(0),                 // 128: ocsf.v1_0_0.events.other.enums.CONFIG_STATE_CATEGORY_UID
	(ENTITY_MANAGEMENT_CLASS_UID)(0),               // 129: ocsf.v1_0_0.events.other.enums.ENTITY_MANAGEMENT_CLASS_UID
	(RDP_ACTIVITY_DISPOSITION_ID)(0),               // 130: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_DISPOSITION_ID
	(REGISTRY_KEY_ACTIVITY_STATUS_ID)(0),           // 131: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_STATUS_ID
	(MEMORY_ACTIVITY_ACTIVITY_ID)(0),               // 132: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_ACTIVITY_ID
	(JOB_RUN_STATE_ID)(0),                          // 133: ocsf.v1_0_0.events.other.enums.JOB_RUN_STATE_ID
	(ACCOUNT_TYPE_ID)(0),                           // 134: ocsf.v1_0_0.events.other.enums.ACCOUNT_TYPE_ID
	(INVENTORY_INFO_STATUS_ID)(0),                  // 135: ocsf.v1_0_0.events.other.enums.INVENTORY_INFO_STATUS_ID
	(INVENTORY_INFO_SEVERITY_ID)(0),                // 136: ocsf.v1_0_0.events.other.enums.INVENTORY_INFO_SEVERITY_ID
	(NETWORK_CONNECTION_INFO_BOUNDARY_ID)(0),       // 137: ocsf.v1_0_0.events.other.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	(REGISTRY_VALUE_ACTIVITY_STATUS_ID)(0),         // 138: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID
	(MEMORY_ACTIVITY_DISPOSITION_ID)(0),            // 139: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_DISPOSITION_ID
	(SCHEDULED_JOB_ACTIVITY_SEVERITY_ID)(0),        // 140: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCES_ACTIVITY_ACTIVITY_ID)(0),        // 141: ocsf.v1_0_0.events.other.enums.WEB_RESOURCES_ACTIVITY_ACTIVITY_ID
	(PROCESS_ACTIVITY_SEVERITY_ID)(0),              // 142: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_SEVERITY_ID
	(EMAIL_URL_ACTIVITY_ACTIVITY_ID)(0),            // 143: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID
	(FTP_ACTIVITY_CATEGORY_UID)(0),                 // 144: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_CATEGORY_UID
	(WIN_RESOURCE_TYPE_ID)(0),                      // 145: ocsf.v1_0_0.events.other.enums.WIN_RESOURCE_TYPE_ID
	(ENTITY_MANAGEMENT_ACTIVITY_ID)(0),             // 146: ocsf.v1_0_0.events.other.enums.ENTITY_MANAGEMENT_ACTIVITY_ID
	(EMAIL_FILE_ACTIVITY_CLASS_UID)(0),             // 147: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_CLASS_UID
	(RDP_ACTIVITY_CLASS_UID)(0),                    // 148: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_CLASS_UID
	(HTTP_ACTIVITY_ACTIVITY_ID)(0),                 // 149: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_ACTIVITY_ID
	(SYSTEM_SEVERITY_ID)(0),                        // 150: ocsf.v1_0_0.events.other.enums.SYSTEM_SEVERITY_ID
	(INVENTORY_INFO_CLASS_UID)(0),                  // 151: ocsf.v1_0_0.events.other.enums.INVENTORY_INFO_CLASS_UID
	(EMAIL_URL_ACTIVITY_STATUS_ID)(0),              // 152: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_STATUS_ID
	(CVSS_DEPTH)(0),                                // 153: ocsf.v1_0_0.events.other.enums.CVSS_DEPTH
	(FTP_ACTIVITY_SEVERITY_ID)(0),                  // 154: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_SEVERITY_ID
	(SSH_ACTIVITY_ACTIVITY_ID)(0),                  // 155: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_ACTIVITY_ID
	(REGISTRY_KEY_ACTIVITY_ACTIVITY_ID)(0),         // 156: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID
	(ANALYTIC_TYPE_ID)(0),                          // 157: ocsf.v1_0_0.events.other.enums.ANALYTIC_TYPE_ID
	(GROUP_MANAGEMENT_SEVERITY_ID)(0),              // 158: ocsf.v1_0_0.events.other.enums.GROUP_MANAGEMENT_SEVERITY_ID
	(RESOURCE_ACTIVITY_CLASS_UID)(0),               // 159: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_CLASS_UID
	(FILE_CONFIDENTIALITY_ID)(0),                   // 160: ocsf.v1_0_0.events.other.enums.FILE_CONFIDENTIALITY_ID
	(SECURITY_FINDING_SEVERITY_ID)(0),              // 161: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_SEVERITY_ID
	(USER_ACCESS_STATUS_ID)(0),                     // 162: ocsf.v1_0_0.events.other.enums.USER_ACCESS_STATUS_ID
	(ACCOUNT_CHANGE_CLASS_UID)(0),                  // 163: ocsf.v1_0_0.events.other.enums.ACCOUNT_CHANGE_CLASS_UID
	(KERNEL_ACTIVITY_ACTIVITY_ID)(0),               // 164: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_ACTIVITY_ID
	(MEMORY_ACTIVITY_CLASS_UID)(0),                 // 165: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_CLASS_UID
	(CONFIG_STATE_ACTIVITY_ID)(0),                  // 166: ocsf.v1_0_0.events.other.enums.CONFIG_STATE_ACTIVITY_ID
	(AUTHENTICATION_LOGON_TYPE_ID)(0),              // 167: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_LOGON_TYPE_ID
	(AUTHORIZE_SESSION_SEVERITY_ID)(0),             // 168: ocsf.v1_0_0.events.other.enums.AUTHORIZE_SESSION_SEVERITY_ID
	(DHCP_ACTIVITY_STATUS_ID)(0),                   // 169: ocsf.v1_0_0.events.other.enums.DHCP_ACTIVITY_STATUS_ID
	(HTTP_REQUEST_HTTP_METHOD)(0),                  // 170: ocsf.v1_0_0.events.other.enums.HTTP_REQUEST_HTTP_METHOD
	(SECURITY_FINDING_RISK_LEVEL_ID)(0),            // 171: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_RISK_LEVEL_ID
	(AUTHORIZE_SESSION_CATEGORY_UID)(0),            // 172: ocsf.v1_0_0.events.other.enums.AUTHORIZE_SESSION_CATEGORY_UID
	(NETWORK_FILE_ACTIVITY_ACTIVITY_ID)(0),         // 173: ocsf.v1_0_0.events.other.enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID
	(MODULE_ACTIVITY_DISPOSITION_ID)(0),            // 174: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_DISPOSITION_ID
	(KERNEL_EXTENSION_ACTIVITY_ID)(0),              // 175: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_ACTIVITY_ID
	(DISCOVERY_ACTIVITY_ID)(0),                     // 176: ocsf.v1_0_0.events.other.enums.DISCOVERY_ACTIVITY_ID
	(FINDINGS_CLASS_UID)(0),                        // 177: ocsf.v1_0_0.events.other.enums.FINDINGS_CLASS_UID
	(DNS_ACTIVITY_ACTIVITY_ID)(0),                  // 178: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_ACTIVITY_ID
	(SYSTEM_CATEGORY_UID)(0),                       // 179: ocsf.v1_0_0.events.other.enums.SYSTEM_CATEGORY_UID
	(MEMORY_ACTIVITY_STATUS_ID)(0),                 // 180: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_STATUS_ID
	(REPUTATION_SCORE_ID)(0),                       // 181: ocsf.v1_0_0.events.other.enums.REPUTATION_SCORE_ID
	(CONFIG_STATE_CLASS_UID)(0),                    // 182: ocsf.v1_0_0.events.other.enums.CONFIG_STATE_CLASS_UID
	(DISCOVERY_STATUS_ID)(0),                       // 183: ocsf.v1_0_0.events.other.enums.DISCOVERY_STATUS_ID
	(SMB_ACTIVITY_DISPOSITION_ID)(0),               // 184: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_DISPOSITION_ID
	(MODULE_ACTIVITY_CATEGORY_UID)(0),              // 185: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_CATEGORY_UID
	(MEMORY_ACTIVITY_SEVERITY_ID)(0),               // 186: ocsf.v1_0_0.events.other.enums.MEMORY_ACTIVITY_SEVERITY_ID
	(AUTHORIZE_SESSION_CLASS_UID)(0),               // 187: ocsf.v1_0_0.events.other.enums.AUTHORIZE_SESSION_CLASS_UID
	(DHCP_ACTIVITY_CLASS_UID)(0),                   // 188: ocsf.v1_0_0.events.other.enums.DHCP_ACTIVITY_CLASS_UID
	(NETWORK_FILE_ACTIVITY_STATUS_ID)(0),           // 189: ocsf.v1_0_0.events.other.enums.NETWORK_FILE_ACTIVITY_STATUS_ID
	(KERNEL_EXTENSION_STATUS_ID)(0),                // 190: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_STATUS_ID
	(RDP_ACTIVITY_SEVERITY_ID)(0),                  // 191: ocsf.v1_0_0.events.other.enums.RDP_ACTIVITY_SEVERITY_ID
	(EMAIL_ACTIVITY_ACTIVITY_ID)(0),                // 192: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_ACTIVITY_ID
	(MODULE_ACTIVITY_SEVERITY_ID)(0),               // 193: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_SEVERITY_ID
	(REGISTRY_KEY_ACTIVITY_DISPOSITION_ID)(0),      // 194: ocsf.v1_0_0.events.other.enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID
	(KERNEL_EXTENSION_DISPOSITION_ID)(0),           // 195: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_DISPOSITION_ID
	(PROCESS_ACTIVITY_ACTIVITY_ID)(0),              // 196: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_ACTIVITY_ID
	(SCHEDULED_JOB_ACTIVITY_STATUS_ID)(0),          // 197: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID
	(OS_TYPE_ID)(0),                                // 198: ocsf.v1_0_0.events.other.enums.OS_TYPE_ID
	(DNS_ACTIVITY_SEVERITY_ID)(0),                  // 199: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_SEVERITY_ID
	(KERNEL_TYPE_ID)(0),                            // 200: ocsf.v1_0_0.events.other.enums.KERNEL_TYPE_ID
	(REGISTRY_VALUE_TYPE_ID)(0),                    // 201: ocsf.v1_0_0.events.other.enums.REGISTRY_VALUE_TYPE_ID
	(PROCESS_INTEGRITY_ID)(0),                      // 202: ocsf.v1_0_0.events.other.enums.PROCESS_INTEGRITY_ID
	(EMAIL_FILE_ACTIVITY_ACTIVITY_ID)(0),           // 203: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID
	(EMAIL_FILE_ACTIVITY_DISPOSITION_ID)(0),        // 204: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID
	(SMB_ACTIVITY_CLASS_UID)(0),                    // 205: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_CLASS_UID
	(APPLICATION_LIFECYCLE_STATUS_ID)(0),           // 206: ocsf.v1_0_0.events.other.enums.APPLICATION_LIFECYCLE_STATUS_ID
	(USER_ACCESS_ACTIVITY_ID)(0),                   // 207: ocsf.v1_0_0.events.other.enums.USER_ACCESS_ACTIVITY_ID
	(FILE_ACTIVITY_CLASS_UID)(0),                   // 208: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_CLASS_UID
	(SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID)(0),     // 209: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID
	(FINDINGS_STATUS_ID)(0),                        // 210: ocsf.v1_0_0.events.other.enums.FINDINGS_STATUS_ID
	(KERNEL_ACTIVITY_CATEGORY_UID)(0),              // 211: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_CATEGORY_UID
	(PROCESS_ACTIVITY_DISPOSITION_ID)(0),           // 212: ocsf.v1_0_0.events.other.enums.PROCESS_ACTIVITY_DISPOSITION_ID
	(DNS_ACTIVITY_CLASS_UID)(0),                    // 213: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_CLASS_UID
	(SMB_ACTIVITY_CATEGORY_UID)(0),                 // 214: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_CATEGORY_UID
	(KERNEL_ACTIVITY_SEVERITY_ID)(0),               // 215: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_SEVERITY_ID
	(APPLICATION_LIFECYCLE_ACTIVITY_ID)(0),         // 216: ocsf.v1_0_0.events.other.enums.APPLICATION_LIFECYCLE_ACTIVITY_ID
	(CONFIG_STATE_SEVERITY_ID)(0),                  // 217: ocsf.v1_0_0.events.other.enums.CONFIG_STATE_SEVERITY_ID
	(SECURITY_FINDING_STATUS_ID)(0),                // 218: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_STATUS_ID
	(SSH_ACTIVITY_CLASS_UID)(0),                    // 219: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_CLASS_UID
	(HTTP_ACTIVITY_CATEGORY_UID)(0),                // 220: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_CATEGORY_UID
	(DISCOVERY_CLASS_UID)(0),                       // 221: ocsf.v1_0_0.events.other.enums.DISCOVERY_CLASS_UID
	(GROUP_MANAGEMENT_CATEGORY_UID)(0),             // 222: ocsf.v1_0_0.events.other.enums.GROUP_MANAGEMENT_CATEGORY_UID
	(KERNEL_EXTENSION_CATEGORY_UID)(0),             // 223: ocsf.v1_0_0.events.other.enums.KERNEL_EXTENSION_CATEGORY_UID
	(SMB_ACTIVITY_STATUS_ID)(0),                    // 224: ocsf.v1_0_0.events.other.enums.SMB_ACTIVITY_STATUS_ID
	(API_ACTIVITY_CATEGORY_UID)(0),                 // 225: ocsf.v1_0_0.events.other.enums.API_ACTIVITY_CATEGORY_UID
	(AUTHENTICATION_ACTIVITY_ID)(0),                // 226: ocsf.v1_0_0.events.other.enums.AUTHENTICATION_ACTIVITY_ID
	(ACCOUNT_CHANGE_SEVERITY_ID)(0),                // 227: ocsf.v1_0_0.events.other.enums.ACCOUNT_CHANGE_SEVERITY_ID
	(SSH_ACTIVITY_STATUS_ID)(0),                    // 228: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_STATUS_ID
	(HTTP_ACTIVITY_STATUS_ID)(0),                   // 229: ocsf.v1_0_0.events.other.enums.HTTP_ACTIVITY_STATUS_ID
	(SECURITY_FINDING_CATEGORY_UID)(0),             // 230: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_CATEGORY_UID
	(GROUP_MANAGEMENT_ACTIVITY_ID)(0),              // 231: ocsf.v1_0_0.events.other.enums.GROUP_MANAGEMENT_ACTIVITY_ID
	(FTP_ACTIVITY_DISPOSITION_ID)(0),               // 232: ocsf.v1_0_0.events.other.enums.FTP_ACTIVITY_DISPOSITION_ID
	(FILE_ACTIVITY_CATEGORY_UID)(0),                // 233: ocsf.v1_0_0.events.other.enums.FILE_ACTIVITY_CATEGORY_UID
	(DEVICE_TYPE_ID)(0),                            // 234: ocsf.v1_0_0.events.other.enums.DEVICE_TYPE_ID
	(SECURITY_FINDING_CONFIDENCE_ID)(0),            // 235: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_CONFIDENCE_ID
	(DHCP_ACTIVITY_SEVERITY_ID)(0),                 // 236: ocsf.v1_0_0.events.other.enums.DHCP_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCES_ACTIVITY_CATEGORY_UID)(0),       // 237: ocsf.v1_0_0.events.other.enums.WEB_RESOURCES_ACTIVITY_CATEGORY_UID
	(DISCOVERY_SEVERITY_ID)(0),                     // 238: ocsf.v1_0_0.events.other.enums.DISCOVERY_SEVERITY_ID
	(SECURITY_FINDING_ACTIVITY_ID)(0),              // 239: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_ACTIVITY_ID
	(GROUP_MANAGEMENT_CLASS_UID)(0),                // 240: ocsf.v1_0_0.events.other.enums.GROUP_MANAGEMENT_CLASS_UID
	(NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)(0),   // 241: ocsf.v1_0_0.events.other.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
	(BASE_EVENT_SEVERITY_ID)(0),                    // 242: ocsf.v1_0_0.events.other.enums.BASE_EVENT_SEVERITY_ID
	(BASE_EVENT_CLASS_UID)(0),                      // 243: ocsf.v1_0_0.events.other.enums.BASE_EVENT_CLASS_UID
	(RESOURCE_ACTIVITY_DISPOSITION_ID)(0),          // 244: ocsf.v1_0_0.events.other.enums.RESOURCE_ACTIVITY_DISPOSITION_ID
	(EMAIL_FILE_ACTIVITY_STATUS_ID)(0),             // 245: ocsf.v1_0_0.events.other.enums.EMAIL_FILE_ACTIVITY_STATUS_ID
	(EMAIL_URL_ACTIVITY_CATEGORY_UID)(0),           // 246: ocsf.v1_0_0.events.other.enums.EMAIL_URL_ACTIVITY_CATEGORY_UID
	(NETWORK_ACTIVITY_CATEGORY_UID)(0),             // 247: ocsf.v1_0_0.events.other.enums.NETWORK_ACTIVITY_CATEGORY_UID
	(DHCP_ACTIVITY_ACTIVITY_ID)(0),                 // 248: ocsf.v1_0_0.events.other.enums.DHCP_ACTIVITY_ACTIVITY_ID
	(DNS_ACTIVITY_CATEGORY_UID)(0),                 // 249: ocsf.v1_0_0.events.other.enums.DNS_ACTIVITY_CATEGORY_UID
	(NETWORK_FILE_ACTIVITY_CATEGORY_UID)(0),        // 250: ocsf.v1_0_0.events.other.enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID
	(BASE_EVENT_CATEGORY_UID)(0),                   // 251: ocsf.v1_0_0.events.other.enums.BASE_EVENT_CATEGORY_UID
	(SSH_ACTIVITY_SEVERITY_ID)(0),                  // 252: ocsf.v1_0_0.events.other.enums.SSH_ACTIVITY_SEVERITY_ID
	(MODULE_LOAD_TYPE_ID)(0),                       // 253: ocsf.v1_0_0.events.other.enums.MODULE_LOAD_TYPE_ID
	(MODULE_ACTIVITY_CLASS_UID)(0),                 // 254: ocsf.v1_0_0.events.other.enums.MODULE_ACTIVITY_CLASS_UID
	(KERNEL_ACTIVITY_STATUS_ID)(0),                 // 255: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_STATUS_ID
	(ENTITY_MANAGEMENT_SEVERITY_ID)(0),             // 256: ocsf.v1_0_0.events.other.enums.ENTITY_MANAGEMENT_SEVERITY_ID
	(ENTITY_MANAGEMENT_STATUS_ID)(0),               // 257: ocsf.v1_0_0.events.other.enums.ENTITY_MANAGEMENT_STATUS_ID
	(BASE_EVENT_ACTIVITY_ID)(0),                    // 258: ocsf.v1_0_0.events.other.enums.BASE_EVENT_ACTIVITY_ID
	(API_ACTIVITY_ACTIVITY_ID)(0),                  // 259: ocsf.v1_0_0.events.other.enums.API_ACTIVITY_ACTIVITY_ID
	(IAM_SEVERITY_ID)(0),                           // 260: ocsf.v1_0_0.events.other.enums.IAM_SEVERITY_ID
	(INVENTORY_INFO_ACTIVITY_ID)(0),                // 261: ocsf.v1_0_0.events.other.enums.INVENTORY_INFO_ACTIVITY_ID
	(SECURITY_FINDING_STATE_ID)(0),                 // 262: ocsf.v1_0_0.events.other.enums.SECURITY_FINDING_STATE_ID
	(EMAIL_ACTIVITY_SEVERITY_ID)(0),                // 263: ocsf.v1_0_0.events.other.enums.EMAIL_ACTIVITY_SEVERITY_ID
	(KERNEL_ACTIVITY_CLASS_UID)(0),                 // 264: ocsf.v1_0_0.events.other.enums.KERNEL_ACTIVITY_CLASS_UID
	(SCHEDULED_JOB_ACTIVITY_CATEGORY_UID)(0),       // 265: ocsf.v1_0_0.events.other.enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID
}
var file_ocsf_v1_0_0_events_other_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_other_enums_enums_proto_init() }
func file_ocsf_v1_0_0_events_other_enums_enums_proto_init() {
	if File_ocsf_v1_0_0_events_other_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDesc,
			NumEnums:      266,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_other_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_other_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_0_0_events_other_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_0_0_events_other_enums_enums_proto = out.File
	file_ocsf_v1_0_0_events_other_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_other_enums_enums_proto_goTypes = nil
	file_ocsf_v1_0_0_events_other_enums_enums_proto_depIdxs = nil
}
