// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/discovery/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type INVENTORY_INFO_CATEGORY_UID int32

const (
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_UNKNOWN   INVENTORY_INFO_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CATEGORY_UID_INVENTORY_INFO_CATEGORY_UID_DISCOVERY INVENTORY_INFO_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for INVENTORY_INFO_CATEGORY_UID.
var (
	INVENTORY_INFO_CATEGORY_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CATEGORY_UID_UNKNOWN",
		1: "INVENTORY_INFO_CATEGORY_UID_DISCOVERY",
	}
	INVENTORY_INFO_CATEGORY_UID_value = map[string]int32{
		"INVENTORY_INFO_CATEGORY_UID_UNKNOWN":   0,
		"INVENTORY_INFO_CATEGORY_UID_DISCOVERY": 1,
	}
)

func (x INVENTORY_INFO_CATEGORY_UID) Enum() *INVENTORY_INFO_CATEGORY_UID {
	p := new(INVENTORY_INFO_CATEGORY_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[0].Descriptor()
}

func (INVENTORY_INFO_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[0]
}

func (x INVENTORY_INFO_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CATEGORY_UID.Descriptor instead.
func (INVENTORY_INFO_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{0}
}

type CONFIG_STATE_ACTIVITY_ID int32

const (
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_UNKNOWN CONFIG_STATE_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_COLLECT CONFIG_STATE_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_LOG     CONFIG_STATE_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_ACTIVITY_ID_CONFIG_STATE_ACTIVITY_ID_OTHER   CONFIG_STATE_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_ACTIVITY_ID.
var (
	CONFIG_STATE_ACTIVITY_ID_name = map[int32]string{
		0: "CONFIG_STATE_ACTIVITY_ID_UNKNOWN",
		1: "CONFIG_STATE_ACTIVITY_ID_COLLECT",
		2: "CONFIG_STATE_ACTIVITY_ID_LOG",
		3: "CONFIG_STATE_ACTIVITY_ID_OTHER",
	}
	CONFIG_STATE_ACTIVITY_ID_value = map[string]int32{
		"CONFIG_STATE_ACTIVITY_ID_UNKNOWN": 0,
		"CONFIG_STATE_ACTIVITY_ID_COLLECT": 1,
		"CONFIG_STATE_ACTIVITY_ID_LOG":     2,
		"CONFIG_STATE_ACTIVITY_ID_OTHER":   3,
	}
)

func (x CONFIG_STATE_ACTIVITY_ID) Enum() *CONFIG_STATE_ACTIVITY_ID {
	p := new(CONFIG_STATE_ACTIVITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[1].Descriptor()
}

func (CONFIG_STATE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[1]
}

func (x CONFIG_STATE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_ACTIVITY_ID.Descriptor instead.
func (CONFIG_STATE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{1}
}

type DISCOVERY_CLASS_UID int32

const (
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_UNKNOWN   DISCOVERY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CLASS_UID_DISCOVERY_CLASS_UID_DISCOVERY DISCOVERY_CLASS_UID = 1 // EnumValue: 5000; Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_CLASS_UID.
var (
	DISCOVERY_CLASS_UID_name = map[int32]string{
		0: "DISCOVERY_CLASS_UID_UNKNOWN",
		1: "DISCOVERY_CLASS_UID_DISCOVERY",
	}
	DISCOVERY_CLASS_UID_value = map[string]int32{
		"DISCOVERY_CLASS_UID_UNKNOWN":   0,
		"DISCOVERY_CLASS_UID_DISCOVERY": 1,
	}
)

func (x DISCOVERY_CLASS_UID) Enum() *DISCOVERY_CLASS_UID {
	p := new(DISCOVERY_CLASS_UID)
	*p = x
	return p
}

func (x DISCOVERY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[2].Descriptor()
}

func (DISCOVERY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[2]
}

func (x DISCOVERY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CLASS_UID.Descriptor instead.
func (DISCOVERY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{2}
}

type DISCOVERY_TYPE_UID int32

const (
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN DISCOVERY_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 500000;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_COLLECT DISCOVERY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 500002;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_LOG     DISCOVERY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 500001;
	DISCOVERY_TYPE_UID_DISCOVERY_TYPE_UID_DISCOVERY_OTHER   DISCOVERY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 500099;
)

// Enum value maps for DISCOVERY_TYPE_UID.
var (
	DISCOVERY_TYPE_UID_name = map[int32]string{
		0: "DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN",
		1: "DISCOVERY_TYPE_UID_DISCOVERY_COLLECT",
		2: "DISCOVERY_TYPE_UID_DISCOVERY_LOG",
		3: "DISCOVERY_TYPE_UID_DISCOVERY_OTHER",
	}
	DISCOVERY_TYPE_UID_value = map[string]int32{
		"DISCOVERY_TYPE_UID_DISCOVERY_UNKNOWN": 0,
		"DISCOVERY_TYPE_UID_DISCOVERY_COLLECT": 1,
		"DISCOVERY_TYPE_UID_DISCOVERY_LOG":     2,
		"DISCOVERY_TYPE_UID_DISCOVERY_OTHER":   3,
	}
)

func (x DISCOVERY_TYPE_UID) Enum() *DISCOVERY_TYPE_UID {
	p := new(DISCOVERY_TYPE_UID)
	*p = x
	return p
}

func (x DISCOVERY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[3].Descriptor()
}

func (DISCOVERY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[3]
}

func (x DISCOVERY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_TYPE_UID.Descriptor instead.
func (DISCOVERY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{3}
}

type DISCOVERY_STATUS_ID int32

const (
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_UNKNOWN DISCOVERY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_FAILURE DISCOVERY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_OTHER   DISCOVERY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	DISCOVERY_STATUS_ID_DISCOVERY_STATUS_ID_SUCCESS DISCOVERY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for DISCOVERY_STATUS_ID.
var (
	DISCOVERY_STATUS_ID_name = map[int32]string{
		0: "DISCOVERY_STATUS_ID_UNKNOWN",
		1: "DISCOVERY_STATUS_ID_FAILURE",
		2: "DISCOVERY_STATUS_ID_OTHER",
		3: "DISCOVERY_STATUS_ID_SUCCESS",
	}
	DISCOVERY_STATUS_ID_value = map[string]int32{
		"DISCOVERY_STATUS_ID_UNKNOWN": 0,
		"DISCOVERY_STATUS_ID_FAILURE": 1,
		"DISCOVERY_STATUS_ID_OTHER":   2,
		"DISCOVERY_STATUS_ID_SUCCESS": 3,
	}
)

func (x DISCOVERY_STATUS_ID) Enum() *DISCOVERY_STATUS_ID {
	p := new(DISCOVERY_STATUS_ID)
	*p = x
	return p
}

func (x DISCOVERY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[4].Descriptor()
}

func (DISCOVERY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[4]
}

func (x DISCOVERY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_STATUS_ID.Descriptor instead.
func (DISCOVERY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{4}
}

type INVENTORY_INFO_SEVERITY_ID int32

const (
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_UNKNOWN       INVENTORY_INFO_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_CRITICAL      INVENTORY_INFO_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_FATAL         INVENTORY_INFO_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_HIGH          INVENTORY_INFO_SEVERITY_ID = 3 // EnumValue: 4; Type: OCSF_VALUE;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL INVENTORY_INFO_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_LOW           INVENTORY_INFO_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_MEDIUM        INVENTORY_INFO_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	INVENTORY_INFO_SEVERITY_ID_INVENTORY_INFO_SEVERITY_ID_OTHER         INVENTORY_INFO_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INVENTORY_INFO_SEVERITY_ID.
var (
	INVENTORY_INFO_SEVERITY_ID_name = map[int32]string{
		0: "INVENTORY_INFO_SEVERITY_ID_UNKNOWN",
		1: "INVENTORY_INFO_SEVERITY_ID_CRITICAL",
		2: "INVENTORY_INFO_SEVERITY_ID_FATAL",
		3: "INVENTORY_INFO_SEVERITY_ID_HIGH",
		4: "INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL",
		5: "INVENTORY_INFO_SEVERITY_ID_LOW",
		6: "INVENTORY_INFO_SEVERITY_ID_MEDIUM",
		7: "INVENTORY_INFO_SEVERITY_ID_OTHER",
	}
	INVENTORY_INFO_SEVERITY_ID_value = map[string]int32{
		"INVENTORY_INFO_SEVERITY_ID_UNKNOWN":       0,
		"INVENTORY_INFO_SEVERITY_ID_CRITICAL":      1,
		"INVENTORY_INFO_SEVERITY_ID_FATAL":         2,
		"INVENTORY_INFO_SEVERITY_ID_HIGH":          3,
		"INVENTORY_INFO_SEVERITY_ID_INFORMATIONAL": 4,
		"INVENTORY_INFO_SEVERITY_ID_LOW":           5,
		"INVENTORY_INFO_SEVERITY_ID_MEDIUM":        6,
		"INVENTORY_INFO_SEVERITY_ID_OTHER":         7,
	}
)

func (x INVENTORY_INFO_SEVERITY_ID) Enum() *INVENTORY_INFO_SEVERITY_ID {
	p := new(INVENTORY_INFO_SEVERITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[5].Descriptor()
}

func (INVENTORY_INFO_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[5]
}

func (x INVENTORY_INFO_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_SEVERITY_ID.Descriptor instead.
func (INVENTORY_INFO_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{5}
}

type CONFIG_STATE_CATEGORY_UID int32

const (
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_UNKNOWN   CONFIG_STATE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CATEGORY_UID_CONFIG_STATE_CATEGORY_UID_DISCOVERY CONFIG_STATE_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for CONFIG_STATE_CATEGORY_UID.
var (
	CONFIG_STATE_CATEGORY_UID_name = map[int32]string{
		0: "CONFIG_STATE_CATEGORY_UID_UNKNOWN",
		1: "CONFIG_STATE_CATEGORY_UID_DISCOVERY",
	}
	CONFIG_STATE_CATEGORY_UID_value = map[string]int32{
		"CONFIG_STATE_CATEGORY_UID_UNKNOWN":   0,
		"CONFIG_STATE_CATEGORY_UID_DISCOVERY": 1,
	}
)

func (x CONFIG_STATE_CATEGORY_UID) Enum() *CONFIG_STATE_CATEGORY_UID {
	p := new(CONFIG_STATE_CATEGORY_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[6].Descriptor()
}

func (CONFIG_STATE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[6]
}

func (x CONFIG_STATE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CATEGORY_UID.Descriptor instead.
func (CONFIG_STATE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{6}
}

type INVENTORY_INFO_TYPE_UID int32

const (
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN INVENTORY_INFO_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 500100;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT INVENTORY_INFO_TYPE_UID = 1 // EnumValue: 500102; Type: OCSF_VALUE;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG     INVENTORY_INFO_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 500101;
	INVENTORY_INFO_TYPE_UID_INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER   INVENTORY_INFO_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 500199;
)

// Enum value maps for INVENTORY_INFO_TYPE_UID.
var (
	INVENTORY_INFO_TYPE_UID_name = map[int32]string{
		0: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN",
		1: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT",
		2: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG",
		3: "INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER",
	}
	INVENTORY_INFO_TYPE_UID_value = map[string]int32{
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_UNKNOWN": 0,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_COLLECT": 1,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_LOG":     2,
		"INVENTORY_INFO_TYPE_UID_DEVICE_INVENTORY_INFO_OTHER":   3,
	}
)

func (x INVENTORY_INFO_TYPE_UID) Enum() *INVENTORY_INFO_TYPE_UID {
	p := new(INVENTORY_INFO_TYPE_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[7].Descriptor()
}

func (INVENTORY_INFO_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[7]
}

func (x INVENTORY_INFO_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_TYPE_UID.Descriptor instead.
func (INVENTORY_INFO_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{7}
}

type INVENTORY_INFO_ACTIVITY_ID int32

const (
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_UNKNOWN INVENTORY_INFO_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_COLLECT INVENTORY_INFO_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_LOG     INVENTORY_INFO_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 1;
	INVENTORY_INFO_ACTIVITY_ID_INVENTORY_INFO_ACTIVITY_ID_OTHER   INVENTORY_INFO_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for INVENTORY_INFO_ACTIVITY_ID.
var (
	INVENTORY_INFO_ACTIVITY_ID_name = map[int32]string{
		0: "INVENTORY_INFO_ACTIVITY_ID_UNKNOWN",
		1: "INVENTORY_INFO_ACTIVITY_ID_COLLECT",
		2: "INVENTORY_INFO_ACTIVITY_ID_LOG",
		3: "INVENTORY_INFO_ACTIVITY_ID_OTHER",
	}
	INVENTORY_INFO_ACTIVITY_ID_value = map[string]int32{
		"INVENTORY_INFO_ACTIVITY_ID_UNKNOWN": 0,
		"INVENTORY_INFO_ACTIVITY_ID_COLLECT": 1,
		"INVENTORY_INFO_ACTIVITY_ID_LOG":     2,
		"INVENTORY_INFO_ACTIVITY_ID_OTHER":   3,
	}
)

func (x INVENTORY_INFO_ACTIVITY_ID) Enum() *INVENTORY_INFO_ACTIVITY_ID {
	p := new(INVENTORY_INFO_ACTIVITY_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[8].Descriptor()
}

func (INVENTORY_INFO_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[8]
}

func (x INVENTORY_INFO_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_ACTIVITY_ID.Descriptor instead.
func (INVENTORY_INFO_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{8}
}

type DISCOVERY_CATEGORY_UID int32

const (
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_UNKNOWN   DISCOVERY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DISCOVERY_CATEGORY_UID_DISCOVERY_CATEGORY_UID_DISCOVERY DISCOVERY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 5;
)

// Enum value maps for DISCOVERY_CATEGORY_UID.
var (
	DISCOVERY_CATEGORY_UID_name = map[int32]string{
		0: "DISCOVERY_CATEGORY_UID_UNKNOWN",
		1: "DISCOVERY_CATEGORY_UID_DISCOVERY",
	}
	DISCOVERY_CATEGORY_UID_value = map[string]int32{
		"DISCOVERY_CATEGORY_UID_UNKNOWN":   0,
		"DISCOVERY_CATEGORY_UID_DISCOVERY": 1,
	}
)

func (x DISCOVERY_CATEGORY_UID) Enum() *DISCOVERY_CATEGORY_UID {
	p := new(DISCOVERY_CATEGORY_UID)
	*p = x
	return p
}

func (x DISCOVERY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[9].Descriptor()
}

func (DISCOVERY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[9]
}

func (x DISCOVERY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_CATEGORY_UID.Descriptor instead.
func (DISCOVERY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{9}
}

type CONFIG_STATE_SEVERITY_ID int32

const (
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_UNKNOWN       CONFIG_STATE_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_CRITICAL      CONFIG_STATE_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_FATAL         CONFIG_STATE_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_HIGH          CONFIG_STATE_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_INFORMATIONAL CONFIG_STATE_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_LOW           CONFIG_STATE_SEVERITY_ID = 5 // EnumValue: 2; Type: OCSF_VALUE;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_MEDIUM        CONFIG_STATE_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	CONFIG_STATE_SEVERITY_ID_CONFIG_STATE_SEVERITY_ID_OTHER         CONFIG_STATE_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for CONFIG_STATE_SEVERITY_ID.
var (
	CONFIG_STATE_SEVERITY_ID_name = map[int32]string{
		0: "CONFIG_STATE_SEVERITY_ID_UNKNOWN",
		1: "CONFIG_STATE_SEVERITY_ID_CRITICAL",
		2: "CONFIG_STATE_SEVERITY_ID_FATAL",
		3: "CONFIG_STATE_SEVERITY_ID_HIGH",
		4: "CONFIG_STATE_SEVERITY_ID_INFORMATIONAL",
		5: "CONFIG_STATE_SEVERITY_ID_LOW",
		6: "CONFIG_STATE_SEVERITY_ID_MEDIUM",
		7: "CONFIG_STATE_SEVERITY_ID_OTHER",
	}
	CONFIG_STATE_SEVERITY_ID_value = map[string]int32{
		"CONFIG_STATE_SEVERITY_ID_UNKNOWN":       0,
		"CONFIG_STATE_SEVERITY_ID_CRITICAL":      1,
		"CONFIG_STATE_SEVERITY_ID_FATAL":         2,
		"CONFIG_STATE_SEVERITY_ID_HIGH":          3,
		"CONFIG_STATE_SEVERITY_ID_INFORMATIONAL": 4,
		"CONFIG_STATE_SEVERITY_ID_LOW":           5,
		"CONFIG_STATE_SEVERITY_ID_MEDIUM":        6,
		"CONFIG_STATE_SEVERITY_ID_OTHER":         7,
	}
)

func (x CONFIG_STATE_SEVERITY_ID) Enum() *CONFIG_STATE_SEVERITY_ID {
	p := new(CONFIG_STATE_SEVERITY_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[10].Descriptor()
}

func (CONFIG_STATE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[10]
}

func (x CONFIG_STATE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_SEVERITY_ID.Descriptor instead.
func (CONFIG_STATE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{10}
}

type INVENTORY_INFO_STATUS_ID int32

const (
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_UNKNOWN INVENTORY_INFO_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_FAILURE INVENTORY_INFO_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_OTHER   INVENTORY_INFO_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	INVENTORY_INFO_STATUS_ID_INVENTORY_INFO_STATUS_ID_SUCCESS INVENTORY_INFO_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for INVENTORY_INFO_STATUS_ID.
var (
	INVENTORY_INFO_STATUS_ID_name = map[int32]string{
		0: "INVENTORY_INFO_STATUS_ID_UNKNOWN",
		1: "INVENTORY_INFO_STATUS_ID_FAILURE",
		2: "INVENTORY_INFO_STATUS_ID_OTHER",
		3: "INVENTORY_INFO_STATUS_ID_SUCCESS",
	}
	INVENTORY_INFO_STATUS_ID_value = map[string]int32{
		"INVENTORY_INFO_STATUS_ID_UNKNOWN": 0,
		"INVENTORY_INFO_STATUS_ID_FAILURE": 1,
		"INVENTORY_INFO_STATUS_ID_OTHER":   2,
		"INVENTORY_INFO_STATUS_ID_SUCCESS": 3,
	}
)

func (x INVENTORY_INFO_STATUS_ID) Enum() *INVENTORY_INFO_STATUS_ID {
	p := new(INVENTORY_INFO_STATUS_ID)
	*p = x
	return p
}

func (x INVENTORY_INFO_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[11].Descriptor()
}

func (INVENTORY_INFO_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[11]
}

func (x INVENTORY_INFO_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_STATUS_ID.Descriptor instead.
func (INVENTORY_INFO_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{11}
}

type DISCOVERY_ACTIVITY_ID int32

const (
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_UNKNOWN DISCOVERY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_COLLECT DISCOVERY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_LOG     DISCOVERY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_ACTIVITY_ID_DISCOVERY_ACTIVITY_ID_OTHER   DISCOVERY_ACTIVITY_ID = 3 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DISCOVERY_ACTIVITY_ID.
var (
	DISCOVERY_ACTIVITY_ID_name = map[int32]string{
		0: "DISCOVERY_ACTIVITY_ID_UNKNOWN",
		1: "DISCOVERY_ACTIVITY_ID_COLLECT",
		2: "DISCOVERY_ACTIVITY_ID_LOG",
		3: "DISCOVERY_ACTIVITY_ID_OTHER",
	}
	DISCOVERY_ACTIVITY_ID_value = map[string]int32{
		"DISCOVERY_ACTIVITY_ID_UNKNOWN": 0,
		"DISCOVERY_ACTIVITY_ID_COLLECT": 1,
		"DISCOVERY_ACTIVITY_ID_LOG":     2,
		"DISCOVERY_ACTIVITY_ID_OTHER":   3,
	}
)

func (x DISCOVERY_ACTIVITY_ID) Enum() *DISCOVERY_ACTIVITY_ID {
	p := new(DISCOVERY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[12].Descriptor()
}

func (DISCOVERY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[12]
}

func (x DISCOVERY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_ACTIVITY_ID.Descriptor instead.
func (DISCOVERY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{12}
}

type CONFIG_STATE_CLASS_UID int32

const (
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_UNKNOWN             CONFIG_STATE_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	CONFIG_STATE_CLASS_UID_CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE CONFIG_STATE_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 5002;
)

// Enum value maps for CONFIG_STATE_CLASS_UID.
var (
	CONFIG_STATE_CLASS_UID_name = map[int32]string{
		0: "CONFIG_STATE_CLASS_UID_UNKNOWN",
		1: "CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE",
	}
	CONFIG_STATE_CLASS_UID_value = map[string]int32{
		"CONFIG_STATE_CLASS_UID_UNKNOWN":             0,
		"CONFIG_STATE_CLASS_UID_DEVICE_CONFIG_STATE": 1,
	}
)

func (x CONFIG_STATE_CLASS_UID) Enum() *CONFIG_STATE_CLASS_UID {
	p := new(CONFIG_STATE_CLASS_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[13].Descriptor()
}

func (CONFIG_STATE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[13]
}

func (x CONFIG_STATE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_CLASS_UID.Descriptor instead.
func (CONFIG_STATE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{13}
}

type INVENTORY_INFO_CLASS_UID int32

const (
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_UNKNOWN               INVENTORY_INFO_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	INVENTORY_INFO_CLASS_UID_INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO INVENTORY_INFO_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 5001;
)

// Enum value maps for INVENTORY_INFO_CLASS_UID.
var (
	INVENTORY_INFO_CLASS_UID_name = map[int32]string{
		0: "INVENTORY_INFO_CLASS_UID_UNKNOWN",
		1: "INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO",
	}
	INVENTORY_INFO_CLASS_UID_value = map[string]int32{
		"INVENTORY_INFO_CLASS_UID_UNKNOWN":               0,
		"INVENTORY_INFO_CLASS_UID_DEVICE_INVENTORY_INFO": 1,
	}
)

func (x INVENTORY_INFO_CLASS_UID) Enum() *INVENTORY_INFO_CLASS_UID {
	p := new(INVENTORY_INFO_CLASS_UID)
	*p = x
	return p
}

func (x INVENTORY_INFO_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVENTORY_INFO_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[14].Descriptor()
}

func (INVENTORY_INFO_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[14]
}

func (x INVENTORY_INFO_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVENTORY_INFO_CLASS_UID.Descriptor instead.
func (INVENTORY_INFO_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{14}
}

type CONFIG_STATE_TYPE_UID int32

const (
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN CONFIG_STATE_TYPE_UID = 0 // EnumValue: 500200; Type: OCSF_VALUE;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT CONFIG_STATE_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 500202;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG     CONFIG_STATE_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 500201;
	CONFIG_STATE_TYPE_UID_CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER   CONFIG_STATE_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 500299;
)

// Enum value maps for CONFIG_STATE_TYPE_UID.
var (
	CONFIG_STATE_TYPE_UID_name = map[int32]string{
		0: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN",
		1: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT",
		2: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG",
		3: "CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER",
	}
	CONFIG_STATE_TYPE_UID_value = map[string]int32{
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_UNKNOWN": 0,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_COLLECT": 1,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_LOG":     2,
		"CONFIG_STATE_TYPE_UID_DEVICE_CONFIG_STATE_OTHER":   3,
	}
)

func (x CONFIG_STATE_TYPE_UID) Enum() *CONFIG_STATE_TYPE_UID {
	p := new(CONFIG_STATE_TYPE_UID)
	*p = x
	return p
}

func (x CONFIG_STATE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[15].Descriptor()
}

func (CONFIG_STATE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[15]
}

func (x CONFIG_STATE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_TYPE_UID.Descriptor instead.
func (CONFIG_STATE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{15}
}

type DISCOVERY_SEVERITY_ID int32

const (
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_UNKNOWN       DISCOVERY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_CRITICAL      DISCOVERY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_FATAL         DISCOVERY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_HIGH          DISCOVERY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_INFORMATIONAL DISCOVERY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_LOW           DISCOVERY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_MEDIUM        DISCOVERY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	DISCOVERY_SEVERITY_ID_DISCOVERY_SEVERITY_ID_OTHER         DISCOVERY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DISCOVERY_SEVERITY_ID.
var (
	DISCOVERY_SEVERITY_ID_name = map[int32]string{
		0: "DISCOVERY_SEVERITY_ID_UNKNOWN",
		1: "DISCOVERY_SEVERITY_ID_CRITICAL",
		2: "DISCOVERY_SEVERITY_ID_FATAL",
		3: "DISCOVERY_SEVERITY_ID_HIGH",
		4: "DISCOVERY_SEVERITY_ID_INFORMATIONAL",
		5: "DISCOVERY_SEVERITY_ID_LOW",
		6: "DISCOVERY_SEVERITY_ID_MEDIUM",
		7: "DISCOVERY_SEVERITY_ID_OTHER",
	}
	DISCOVERY_SEVERITY_ID_value = map[string]int32{
		"DISCOVERY_SEVERITY_ID_UNKNOWN":       0,
		"DISCOVERY_SEVERITY_ID_CRITICAL":      1,
		"DISCOVERY_SEVERITY_ID_FATAL":         2,
		"DISCOVERY_SEVERITY_ID_HIGH":          3,
		"DISCOVERY_SEVERITY_ID_INFORMATIONAL": 4,
		"DISCOVERY_SEVERITY_ID_LOW":           5,
		"DISCOVERY_SEVERITY_ID_MEDIUM":        6,
		"DISCOVERY_SEVERITY_ID_OTHER":         7,
	}
)

func (x DISCOVERY_SEVERITY_ID) Enum() *DISCOVERY_SEVERITY_ID {
	p := new(DISCOVERY_SEVERITY_ID)
	*p = x
	return p
}

func (x DISCOVERY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISCOVERY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[16].Descriptor()
}

func (DISCOVERY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[16]
}

func (x DISCOVERY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISCOVERY_SEVERITY_ID.Descriptor instead.
func (DISCOVERY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{16}
}

type CONFIG_STATE_STATUS_ID int32

const (
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_UNKNOWN CONFIG_STATE_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_FAILURE CONFIG_STATE_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_OTHER   CONFIG_STATE_STATUS_ID = 2 // EnumValue: 99; Type: OCSF_VALUE;
	CONFIG_STATE_STATUS_ID_CONFIG_STATE_STATUS_ID_SUCCESS CONFIG_STATE_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for CONFIG_STATE_STATUS_ID.
var (
	CONFIG_STATE_STATUS_ID_name = map[int32]string{
		0: "CONFIG_STATE_STATUS_ID_UNKNOWN",
		1: "CONFIG_STATE_STATUS_ID_FAILURE",
		2: "CONFIG_STATE_STATUS_ID_OTHER",
		3: "CONFIG_STATE_STATUS_ID_SUCCESS",
	}
	CONFIG_STATE_STATUS_ID_value = map[string]int32{
		"CONFIG_STATE_STATUS_ID_UNKNOWN": 0,
		"CONFIG_STATE_STATUS_ID_FAILURE": 1,
		"CONFIG_STATE_STATUS_ID_OTHER":   2,
		"CONFIG_STATE_STATUS_ID_SUCCESS": 3,
	}
)

func (x CONFIG_STATE_STATUS_ID) Enum() *CONFIG_STATE_STATUS_ID {
	p := new(CONFIG_STATE_STATUS_ID)
	*p = x
	return p
}

func (x CONFIG_STATE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONFIG_STATE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[17].Descriptor()
}

func (CONFIG_STATE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes[17]
}

func (x CONFIG_STATE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONFIG_STATE_STATUS_ID.Descriptor instead.
func (CONFIG_STATE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP(), []int{17}
}

var File_ocsf_v1_0_0_events_discovery_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x71, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x2a, 0xac, 0x01, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10,
	0x01, 0x2a, 0xb6, 0x01, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x13, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0xd7, 0x02, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x05, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x6b,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x2a, 0xff, 0x01, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x35, 0x0a,
	0x31, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x02, 0x12, 0x37, 0x0a, 0x33, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xb6, 0x01,
	0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x07, 0x2a, 0xb0, 0x01, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x2a, 0x74, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x2a, 0xed, 0x01, 0x0a, 0x15, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xaa, 0x02, 0x0a, 0x15, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x42,
	0xa5, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x44, 0x45, 0xaa, 0x02, 0x20, 0x4f, 0x63,
	0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02,
	0x20, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x45, 0x6e, 0x75, 0x6d,
	0x73, 0xe2, 0x02, 0x2c, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x24, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescData = file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDesc
)

func file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDescData
}

var file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_ocsf_v1_0_0_events_discovery_enums_enums_proto_goTypes = []interface{}{
	(INVENTORY_INFO_CATEGORY_UID)(0), // 0: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(CONFIG_STATE_ACTIVITY_ID)(0),    // 1: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	(DISCOVERY_CLASS_UID)(0),         // 2: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(DISCOVERY_TYPE_UID)(0),          // 3: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(DISCOVERY_STATUS_ID)(0),         // 4: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(INVENTORY_INFO_SEVERITY_ID)(0),  // 5: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(CONFIG_STATE_CATEGORY_UID)(0),   // 6: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(INVENTORY_INFO_TYPE_UID)(0),     // 7: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(INVENTORY_INFO_ACTIVITY_ID)(0),  // 8: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(DISCOVERY_CATEGORY_UID)(0),      // 9: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	(CONFIG_STATE_SEVERITY_ID)(0),    // 10: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	(INVENTORY_INFO_STATUS_ID)(0),    // 11: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(DISCOVERY_ACTIVITY_ID)(0),       // 12: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(CONFIG_STATE_CLASS_UID)(0),      // 13: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(INVENTORY_INFO_CLASS_UID)(0),    // 14: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(CONFIG_STATE_TYPE_UID)(0),       // 15: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(DISCOVERY_SEVERITY_ID)(0),       // 16: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(CONFIG_STATE_STATUS_ID)(0),      // 17: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
}
var file_ocsf_v1_0_0_events_discovery_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_discovery_enums_enums_proto_init() }
func file_ocsf_v1_0_0_events_discovery_enums_enums_proto_init() {
	if File_ocsf_v1_0_0_events_discovery_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_discovery_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_discovery_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_0_0_events_discovery_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_0_0_events_discovery_enums_enums_proto = out.File
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_goTypes = nil
	file_ocsf_v1_0_0_events_discovery_enums_enums_proto_depIdxs = nil
}
