// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/discovery/discovery.proto

package discovery

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/events/discovery/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: discovery
// Event UID: 1
// URL: https://schema.ocsf.io/1.0.0/classes/inventory_info
type InventoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode     string                            `protobuf:"bytes,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                         // Caption: Status Code;
	Status         string                            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                                                                   // Caption: Status;
	Api            *objects.Api                      `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`                                                                                                         // Caption: API Details; Profile: cloud;
	Severity       string                            `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                               // Caption: Severity;
	TimezoneOffset int32                             `protobuf:"varint,5,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                            // Caption: Timezone Offset;
	Actor          *objects.Actor                    `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                     // Caption: Actor;
	Time           int64                             `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                                                                                                      // Caption: Event Time;
	CategoryUid    enums.INVENTORY_INFO_CATEGORY_UID `protobuf:"varint,8,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	SeverityId     enums.INVENTORY_INFO_SEVERITY_ID  `protobuf:"varint,9,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	TypeUid        enums.INVENTORY_INFO_TYPE_UID     `protobuf:"varint,10,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID" json:"type_uid,omitempty"`                // Caption: Type ID;
	ActivityName   string                            `protobuf:"bytes,11,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                  // Caption: Activity;
	Metadata       *objects.Metadata                 `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                              // Caption: Metadata;
	TypeName       string                            `protobuf:"bytes,13,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                              // Caption: Type Name;
	StatusDetail   string                            `protobuf:"bytes,14,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                  // Caption: Status Details;
	CategoryName   string                            `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                  // Caption: Category;
	EndTime        int64                             `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                // Caption: End Time;
	Duration       int32                             `protobuf:"varint,17,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                             // Caption: Duration;
	Device         *objects.Device                   `protobuf:"bytes,18,opt,name=device,proto3" json:"device,omitempty"`                                                                                                  // Caption: Device;
	StartTime      int64                             `protobuf:"varint,19,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                          // Caption: Start Time;
	StatusId       enums.INVENTORY_INFO_STATUS_ID    `protobuf:"varint,20,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	RawData        string                            `protobuf:"bytes,21,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                 // Caption: Raw Data;
	Count          int32                             `protobuf:"varint,22,opt,name=count,proto3" json:"count,omitempty"`                                                                                                   // Caption: Count;
	Cloud          *objects.Cloud                    `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                    // Caption: Cloud; Profile: cloud;
	ActivityId     enums.INVENTORY_INFO_ACTIVITY_ID  `protobuf:"varint,24,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	Unmapped       *objects.Object                   `protobuf:"bytes,25,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                              // Caption: Unmapped Data;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,26,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                        // Caption: Enrichments;
	Message        string                            `protobuf:"bytes,27,opt,name=message,proto3" json:"message,omitempty"`                                                                                                // Caption: Message;
	ClassUid       enums.INVENTORY_INFO_CLASS_UID    `protobuf:"varint,28,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID" json:"class_uid,omitempty"`            // Caption: Class ID;
	ClassName      string                            `protobuf:"bytes,29,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                           // Caption: Class;
	Observables    []*objects.Observable             `protobuf:"bytes,30,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                        // Caption: Observables;
}

func (x *InventoryInfo) Reset() {
	*x = InventoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfo) ProtoMessage() {}

func (x *InventoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfo.ProtoReflect.Descriptor instead.
func (*InventoryInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *InventoryInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *InventoryInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InventoryInfo) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *InventoryInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *InventoryInfo) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *InventoryInfo) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *InventoryInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InventoryInfo) GetCategoryUid() enums.INVENTORY_INFO_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.INVENTORY_INFO_CATEGORY_UID(0)
}

func (x *InventoryInfo) GetSeverityId() enums.INVENTORY_INFO_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.INVENTORY_INFO_SEVERITY_ID(0)
}

func (x *InventoryInfo) GetTypeUid() enums.INVENTORY_INFO_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.INVENTORY_INFO_TYPE_UID(0)
}

func (x *InventoryInfo) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *InventoryInfo) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InventoryInfo) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *InventoryInfo) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *InventoryInfo) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *InventoryInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InventoryInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *InventoryInfo) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *InventoryInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InventoryInfo) GetStatusId() enums.INVENTORY_INFO_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.INVENTORY_INFO_STATUS_ID(0)
}

func (x *InventoryInfo) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *InventoryInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InventoryInfo) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *InventoryInfo) GetActivityId() enums.INVENTORY_INFO_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.INVENTORY_INFO_ACTIVITY_ID(0)
}

func (x *InventoryInfo) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *InventoryInfo) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *InventoryInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InventoryInfo) GetClassUid() enums.INVENTORY_INFO_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.INVENTORY_INFO_CLASS_UID(0)
}

func (x *InventoryInfo) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *InventoryInfo) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

// Event: discovery
// Event UID: 0
// URL: https://schema.ocsf.io/1.0.0/classes/discovery
type Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryUid    enums.DISCOVERY_CATEGORY_UID `protobuf:"varint,1,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Count          int32                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                                                                                               // Caption: Count;
	Time           int64                        `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                 // Caption: Event Time;
	TypeUid        enums.DISCOVERY_TYPE_UID     `protobuf:"varint,4,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	EndTime        int64                        `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                            // Caption: End Time;
	SeverityId     enums.DISCOVERY_SEVERITY_ID  `protobuf:"varint,6,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	StartTime      int64                        `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                      // Caption: Start Time;
	Cloud          *objects.Cloud               `protobuf:"bytes,8,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                // Caption: Cloud; Profile: cloud;
	Unmapped       *objects.Object              `protobuf:"bytes,9,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                          // Caption: Unmapped Data;
	Duration       int32                        `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                        // Caption: Duration;
	Observables    []*objects.Observable        `protobuf:"bytes,11,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                   // Caption: Observables;
	ActivityId     enums.DISCOVERY_ACTIVITY_ID  `protobuf:"varint,12,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID" json:"activity_id,omitempty"`    // Caption: Activity ID;
	Enrichments    []*objects.Enrichment        `protobuf:"bytes,13,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                   // Caption: Enrichments;
	StatusId       enums.DISCOVERY_STATUS_ID    `protobuf:"varint,14,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_STATUS_ID" json:"status_id,omitempty"`            // Caption: Status ID;
	Status         string                       `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`                                                                                             // Caption: Status;
	Message        string                       `protobuf:"bytes,16,opt,name=message,proto3" json:"message,omitempty"`                                                                                           // Caption: Message;
	ActivityName   string                       `protobuf:"bytes,17,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                             // Caption: Activity;
	RawData        string                       `protobuf:"bytes,18,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                            // Caption: Raw Data;
	Metadata       *objects.Metadata            `protobuf:"bytes,19,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                         // Caption: Metadata;
	StatusCode     string                       `protobuf:"bytes,20,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                   // Caption: Status Code;
	StatusDetail   string                       `protobuf:"bytes,21,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                             // Caption: Status Details;
	CategoryName   string                       `protobuf:"bytes,22,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                             // Caption: Category;
	ClassUid       enums.DISCOVERY_CLASS_UID    `protobuf:"varint,23,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CLASS_UID" json:"class_uid,omitempty"`            // Caption: Class ID;
	TypeName       string                       `protobuf:"bytes,24,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                         // Caption: Type Name;
	Severity       string                       `protobuf:"bytes,25,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                         // Caption: Severity;
	TimezoneOffset int32                        `protobuf:"varint,26,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                      // Caption: Timezone Offset;
	Api            *objects.Api                 `protobuf:"bytes,27,opt,name=api,proto3" json:"api,omitempty"`                                                                                                   // Caption: API Details; Profile: cloud;
	ClassName      string                       `protobuf:"bytes,28,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                      // Caption: Class;
}

func (x *Discovery) Reset() {
	*x = Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discovery) ProtoMessage() {}

func (x *Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discovery.ProtoReflect.Descriptor instead.
func (*Discovery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *Discovery) GetCategoryUid() enums.DISCOVERY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DISCOVERY_CATEGORY_UID(0)
}

func (x *Discovery) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Discovery) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Discovery) GetTypeUid() enums.DISCOVERY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DISCOVERY_TYPE_UID(0)
}

func (x *Discovery) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Discovery) GetSeverityId() enums.DISCOVERY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DISCOVERY_SEVERITY_ID(0)
}

func (x *Discovery) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Discovery) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *Discovery) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *Discovery) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Discovery) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *Discovery) GetActivityId() enums.DISCOVERY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DISCOVERY_ACTIVITY_ID(0)
}

func (x *Discovery) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *Discovery) GetStatusId() enums.DISCOVERY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DISCOVERY_STATUS_ID(0)
}

func (x *Discovery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Discovery) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Discovery) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *Discovery) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *Discovery) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Discovery) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *Discovery) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *Discovery) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Discovery) GetClassUid() enums.DISCOVERY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DISCOVERY_CLASS_UID(0)
}

func (x *Discovery) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Discovery) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Discovery) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Discovery) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Discovery) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

// Event: discovery
// Event UID: 2
// URL: https://schema.ocsf.io/1.0.0/classes/config_state
type ConfigState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUid            enums.CONFIG_STATE_TYPE_UID     `protobuf:"varint,1,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_TYPE_UID" json:"type_uid,omitempty"`                  // Caption: Type ID;
	CisBenchmarkResult *objects.CisBenchmarkResult     `protobuf:"bytes,2,opt,name=cis_benchmark_result,json=cisBenchmarkResult,proto3" json:"cis_benchmark_result,omitempty"`                                              // Caption: CIS Benchmark Result;
	ActivityId         enums.CONFIG_STATE_ACTIVITY_ID  `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID" json:"activity_id,omitempty"`      // Caption: Activity ID;
	StatusCode         string                          `protobuf:"bytes,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                        // Caption: Status Code;
	Message            string                          `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                                                                                                // Caption: Message;
	Time               int64                           `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     // Caption: Event Time;
	Count              int32                           `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                                                                                                   // Caption: Count;
	Cloud              *objects.Cloud                  `protobuf:"bytes,8,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                    // Caption: Cloud; Profile: cloud;
	Duration           int32                           `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                             // Caption: Duration;
	Observables        []*objects.Observable           `protobuf:"bytes,10,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                       // Caption: Observables;
	Metadata           *objects.Metadata               `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                             // Caption: Metadata;
	ClassUid           enums.CONFIG_STATE_CLASS_UID    `protobuf:"varint,12,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	TimezoneOffset     int32                           `protobuf:"varint,13,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                          // Caption: Timezone Offset;
	StatusId           enums.CONFIG_STATE_STATUS_ID    `protobuf:"varint,14,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	RawData            string                          `protobuf:"bytes,15,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                // Caption: Raw Data;
	ClassName          string                          `protobuf:"bytes,16,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                          // Caption: Class;
	Actor              *objects.Actor                  `protobuf:"bytes,17,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                   // Caption: Actor;
	TypeName           string                          `protobuf:"bytes,18,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                             // Caption: Type Name;
	Api                *objects.Api                    `protobuf:"bytes,19,opt,name=api,proto3" json:"api,omitempty"`                                                                                                       // Profile: cloud; Caption: API Details;
	CategoryUid        enums.CONFIG_STATE_CATEGORY_UID `protobuf:"varint,20,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	SeverityId         enums.CONFIG_STATE_SEVERITY_ID  `protobuf:"varint,21,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Unmapped           *objects.Object                 `protobuf:"bytes,22,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                             // Caption: Unmapped Data;
	Severity           string                          `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                             // Caption: Severity;
	EndTime            int64                           `protobuf:"varint,24,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	Device             *objects.Device                 `protobuf:"bytes,25,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 // Caption: Device;
	ActivityName       string                          `protobuf:"bytes,26,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                 // Caption: Activity;
	StatusDetail       string                          `protobuf:"bytes,27,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                 // Caption: Status Details;
	Status             string                          `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`                                                                                                 // Caption: Status;
	CategoryName       string                          `protobuf:"bytes,29,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                 // Caption: Category;
	StartTime          int64                           `protobuf:"varint,30,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                         // Caption: Start Time;
	Enrichments        []*objects.Enrichment           `protobuf:"bytes,31,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
}

func (x *ConfigState) Reset() {
	*x = ConfigState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigState) ProtoMessage() {}

func (x *ConfigState) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigState.ProtoReflect.Descriptor instead.
func (*ConfigState) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigState) GetTypeUid() enums.CONFIG_STATE_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.CONFIG_STATE_TYPE_UID(0)
}

func (x *ConfigState) GetCisBenchmarkResult() *objects.CisBenchmarkResult {
	if x != nil {
		return x.CisBenchmarkResult
	}
	return nil
}

func (x *ConfigState) GetActivityId() enums.CONFIG_STATE_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.CONFIG_STATE_ACTIVITY_ID(0)
}

func (x *ConfigState) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ConfigState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ConfigState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfigState) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ConfigState) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ConfigState) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ConfigState) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConfigState) GetClassUid() enums.CONFIG_STATE_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.CONFIG_STATE_CLASS_UID(0)
}

func (x *ConfigState) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ConfigState) GetStatusId() enums.CONFIG_STATE_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.CONFIG_STATE_STATUS_ID(0)
}

func (x *ConfigState) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ConfigState) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ConfigState) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ConfigState) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ConfigState) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ConfigState) GetCategoryUid() enums.CONFIG_STATE_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.CONFIG_STATE_CATEGORY_UID(0)
}

func (x *ConfigState) GetSeverityId() enums.CONFIG_STATE_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.CONFIG_STATE_SEVERITY_ID(0)
}

func (x *ConfigState) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ConfigState) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ConfigState) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ConfigState) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ConfigState) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ConfigState) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ConfigState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConfigState) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ConfigState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ConfigState) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

var File_ocsf_v1_0_0_events_discovery_discovery_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe0, 0x0b, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x59, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x5f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x49, 0x4e,
	0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x22, 0xd7, 0x0a, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x5d, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x0c, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x69, 0x73, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x69, 0x73, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x60, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x83, 0x02, 0x0a,
	0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x42, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66,
	0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x44, 0xaa,
	0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xca, 0x02, 0x1a, 0x4f,
	0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xe2, 0x02, 0x26, 0x4f, 0x63, 0x73, 0x66,
	0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a,
	0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescData = file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDesc
)

func file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDescData
}

var file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ocsf_v1_0_0_events_discovery_discovery_proto_goTypes = []interface{}{
	(*InventoryInfo)(nil),                  // 0: ocsf.v1_0_0.events.discovery.InventoryInfo
	(*Discovery)(nil),                      // 1: ocsf.v1_0_0.events.discovery.Discovery
	(*ConfigState)(nil),                    // 2: ocsf.v1_0_0.events.discovery.ConfigState
	(*objects.Api)(nil),                    // 3: ocsf.v1_0_0.objects.Api
	(*objects.Actor)(nil),                  // 4: ocsf.v1_0_0.objects.Actor
	(enums.INVENTORY_INFO_CATEGORY_UID)(0), // 5: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	(enums.INVENTORY_INFO_SEVERITY_ID)(0),  // 6: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	(enums.INVENTORY_INFO_TYPE_UID)(0),     // 7: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	(*objects.Metadata)(nil),               // 8: ocsf.v1_0_0.objects.Metadata
	(*objects.Device)(nil),                 // 9: ocsf.v1_0_0.objects.Device
	(enums.INVENTORY_INFO_STATUS_ID)(0),    // 10: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	(*objects.Cloud)(nil),                  // 11: ocsf.v1_0_0.objects.Cloud
	(enums.INVENTORY_INFO_ACTIVITY_ID)(0),  // 12: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	(*objects.Object)(nil),                 // 13: ocsf.v1_0_0.objects.Object
	(*objects.Enrichment)(nil),             // 14: ocsf.v1_0_0.objects.Enrichment
	(enums.INVENTORY_INFO_CLASS_UID)(0),    // 15: ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	(*objects.Observable)(nil),             // 16: ocsf.v1_0_0.objects.Observable
	(enums.DISCOVERY_CATEGORY_UID)(0),      // 17: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	(enums.DISCOVERY_TYPE_UID)(0),          // 18: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_TYPE_UID
	(enums.DISCOVERY_SEVERITY_ID)(0),       // 19: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	(enums.DISCOVERY_ACTIVITY_ID)(0),       // 20: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	(enums.DISCOVERY_STATUS_ID)(0),         // 21: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_STATUS_ID
	(enums.DISCOVERY_CLASS_UID)(0),         // 22: ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CLASS_UID
	(enums.CONFIG_STATE_TYPE_UID)(0),       // 23: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	(*objects.CisBenchmarkResult)(nil),     // 24: ocsf.v1_0_0.objects.CisBenchmarkResult
	(enums.CONFIG_STATE_ACTIVITY_ID)(0),    // 25: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	(enums.CONFIG_STATE_CLASS_UID)(0),      // 26: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	(enums.CONFIG_STATE_STATUS_ID)(0),      // 27: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	(enums.CONFIG_STATE_CATEGORY_UID)(0),   // 28: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	(enums.CONFIG_STATE_SEVERITY_ID)(0),    // 29: ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
}
var file_ocsf_v1_0_0_events_discovery_discovery_proto_depIdxs = []int32{
	3,  // 0: ocsf.v1_0_0.events.discovery.InventoryInfo.api:type_name -> ocsf.v1_0_0.objects.Api
	4,  // 1: ocsf.v1_0_0.events.discovery.InventoryInfo.actor:type_name -> ocsf.v1_0_0.objects.Actor
	5,  // 2: ocsf.v1_0_0.events.discovery.InventoryInfo.category_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CATEGORY_UID
	6,  // 3: ocsf.v1_0_0.events.discovery.InventoryInfo.severity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_SEVERITY_ID
	7,  // 4: ocsf.v1_0_0.events.discovery.InventoryInfo.type_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_TYPE_UID
	8,  // 5: ocsf.v1_0_0.events.discovery.InventoryInfo.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	9,  // 6: ocsf.v1_0_0.events.discovery.InventoryInfo.device:type_name -> ocsf.v1_0_0.objects.Device
	10, // 7: ocsf.v1_0_0.events.discovery.InventoryInfo.status_id:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_STATUS_ID
	11, // 8: ocsf.v1_0_0.events.discovery.InventoryInfo.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	12, // 9: ocsf.v1_0_0.events.discovery.InventoryInfo.activity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_ACTIVITY_ID
	13, // 10: ocsf.v1_0_0.events.discovery.InventoryInfo.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	14, // 11: ocsf.v1_0_0.events.discovery.InventoryInfo.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	15, // 12: ocsf.v1_0_0.events.discovery.InventoryInfo.class_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.INVENTORY_INFO_CLASS_UID
	16, // 13: ocsf.v1_0_0.events.discovery.InventoryInfo.observables:type_name -> ocsf.v1_0_0.objects.Observable
	17, // 14: ocsf.v1_0_0.events.discovery.Discovery.category_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CATEGORY_UID
	18, // 15: ocsf.v1_0_0.events.discovery.Discovery.type_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_TYPE_UID
	19, // 16: ocsf.v1_0_0.events.discovery.Discovery.severity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_SEVERITY_ID
	11, // 17: ocsf.v1_0_0.events.discovery.Discovery.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	13, // 18: ocsf.v1_0_0.events.discovery.Discovery.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	16, // 19: ocsf.v1_0_0.events.discovery.Discovery.observables:type_name -> ocsf.v1_0_0.objects.Observable
	20, // 20: ocsf.v1_0_0.events.discovery.Discovery.activity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_ACTIVITY_ID
	14, // 21: ocsf.v1_0_0.events.discovery.Discovery.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	21, // 22: ocsf.v1_0_0.events.discovery.Discovery.status_id:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_STATUS_ID
	8,  // 23: ocsf.v1_0_0.events.discovery.Discovery.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	22, // 24: ocsf.v1_0_0.events.discovery.Discovery.class_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.DISCOVERY_CLASS_UID
	3,  // 25: ocsf.v1_0_0.events.discovery.Discovery.api:type_name -> ocsf.v1_0_0.objects.Api
	23, // 26: ocsf.v1_0_0.events.discovery.ConfigState.type_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_TYPE_UID
	24, // 27: ocsf.v1_0_0.events.discovery.ConfigState.cis_benchmark_result:type_name -> ocsf.v1_0_0.objects.CisBenchmarkResult
	25, // 28: ocsf.v1_0_0.events.discovery.ConfigState.activity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_ACTIVITY_ID
	11, // 29: ocsf.v1_0_0.events.discovery.ConfigState.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	16, // 30: ocsf.v1_0_0.events.discovery.ConfigState.observables:type_name -> ocsf.v1_0_0.objects.Observable
	8,  // 31: ocsf.v1_0_0.events.discovery.ConfigState.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	26, // 32: ocsf.v1_0_0.events.discovery.ConfigState.class_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CLASS_UID
	27, // 33: ocsf.v1_0_0.events.discovery.ConfigState.status_id:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_STATUS_ID
	4,  // 34: ocsf.v1_0_0.events.discovery.ConfigState.actor:type_name -> ocsf.v1_0_0.objects.Actor
	3,  // 35: ocsf.v1_0_0.events.discovery.ConfigState.api:type_name -> ocsf.v1_0_0.objects.Api
	28, // 36: ocsf.v1_0_0.events.discovery.ConfigState.category_uid:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_CATEGORY_UID
	29, // 37: ocsf.v1_0_0.events.discovery.ConfigState.severity_id:type_name -> ocsf.v1_0_0.events.discovery.enums.CONFIG_STATE_SEVERITY_ID
	13, // 38: ocsf.v1_0_0.events.discovery.ConfigState.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	9,  // 39: ocsf.v1_0_0.events.discovery.ConfigState.device:type_name -> ocsf.v1_0_0.objects.Device
	14, // 40: ocsf.v1_0_0.events.discovery.ConfigState.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_discovery_discovery_proto_init() }
func file_ocsf_v1_0_0_events_discovery_discovery_proto_init() {
	if File_ocsf_v1_0_0_events_discovery_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_discovery_discovery_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_discovery_discovery_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_0_0_events_discovery_discovery_proto_msgTypes,
	}.Build()
	File_ocsf_v1_0_0_events_discovery_discovery_proto = out.File
	file_ocsf_v1_0_0_events_discovery_discovery_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_discovery_discovery_proto_goTypes = nil
	file_ocsf_v1_0_0_events_discovery_discovery_proto_depIdxs = nil
}
