// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/system/system.proto

package system

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/events/system/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// URL: https://schema.ocsf.io/1.0.0/classes/system
// Event: system
// Event UID: 0
type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryUid    enums.SYSTEM_CATEGORY_UID   `protobuf:"varint,1,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_CATEGORY_UID" json:"category_uid,omitempty"`          // Caption: Category ID;
	Enrichments    []*objects.Enrichment       `protobuf:"bytes,2,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                       // Caption: Enrichments;
	Cloud          *objects.Cloud              `protobuf:"bytes,3,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                   // Caption: Cloud; Profile: cloud;
	ClassName      string                      `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                          // Caption: Class;
	Device         *objects.Device             `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 // Caption: Device;
	StatusId       enums.SYSTEM_STATUS_ID      `protobuf:"varint,6,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_STATUS_ID" json:"status_id,omitempty"`                      // Caption: Status ID;
	EndTime        int64                       `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	StatusDetail   string                      `protobuf:"bytes,8,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                 // Caption: Status Details;
	Duration       int32                       `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                            // Caption: Duration;
	Malware        []*objects.Malware          `protobuf:"bytes,10,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                              // Caption: Malware; Profile: security_control;
	Count          int32                       `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	Metadata       *objects.Metadata           `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	Severity       string                      `protobuf:"bytes,13,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	Time           int64                       `protobuf:"varint,14,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
	StatusCode     string                      `protobuf:"bytes,15,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
	TypeName       string                      `protobuf:"bytes,16,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	Attacks        []*objects.Attack           `protobuf:"bytes,17,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                              // Caption: Attacks; Profile: security_control;
	StartTime      int64                       `protobuf:"varint,18,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                        // Caption: Start Time;
	Observables    []*objects.Observable       `protobuf:"bytes,19,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	CategoryName   string                      `protobuf:"bytes,20,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	SeverityId     enums.SYSTEM_SEVERITY_ID    `protobuf:"varint,21,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	TimezoneOffset int32                       `protobuf:"varint,22,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                         // Caption: Timezone Offset;
	Disposition    string                      `protobuf:"bytes,23,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                      // Caption: Disposition; Profile: security_control;
	Status         string                      `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	Api            *objects.Api                `protobuf:"bytes,25,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Profile: cloud; Caption: API Details;
	Message        string                      `protobuf:"bytes,26,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	ActivityId     enums.SYSTEM_ACTIVITY_ID    `protobuf:"varint,27,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	Actor          *objects.Actor              `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                  // Caption: Actor;
	DispositionId  enums.SYSTEM_DISPOSITION_ID `protobuf:"varint,29,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	ActivityName   string                      `protobuf:"bytes,30,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	ClassUid       enums.SYSTEM_CLASS_UID      `protobuf:"varint,31,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	TypeUid        enums.SYSTEM_TYPE_UID       `protobuf:"varint,32,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SYSTEM_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	RawData        string                      `protobuf:"bytes,33,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	Unmapped       *objects.Object             `protobuf:"bytes,34,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                            // Caption: Unmapped Data;
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{0}
}

func (x *System) GetCategoryUid() enums.SYSTEM_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SYSTEM_CATEGORY_UID(0)
}

func (x *System) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *System) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *System) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *System) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *System) GetStatusId() enums.SYSTEM_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SYSTEM_STATUS_ID(0)
}

func (x *System) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *System) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *System) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *System) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *System) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *System) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *System) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *System) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *System) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *System) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *System) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *System) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *System) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *System) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *System) GetSeverityId() enums.SYSTEM_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SYSTEM_SEVERITY_ID(0)
}

func (x *System) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *System) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *System) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *System) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *System) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *System) GetActivityId() enums.SYSTEM_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SYSTEM_ACTIVITY_ID(0)
}

func (x *System) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *System) GetDispositionId() enums.SYSTEM_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.SYSTEM_DISPOSITION_ID(0)
}

func (x *System) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *System) GetClassUid() enums.SYSTEM_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SYSTEM_CLASS_UID(0)
}

func (x *System) GetTypeUid() enums.SYSTEM_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SYSTEM_TYPE_UID(0)
}

func (x *System) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *System) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

// Event: system
// Event UID: 4
// URL: https://schema.ocsf.io/1.0.0/classes/memory_activity
type MemoryActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disposition          string                               `protobuf:"bytes,1,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                               // Caption: Disposition; Profile: security_control;
	CategoryUid          enums.MEMORY_ACTIVITY_CATEGORY_UID   `protobuf:"varint,2,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Malware              []*objects.Malware                   `protobuf:"bytes,3,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                       // Caption: Malware; Profile: security_control;
	TimezoneOffset       int32                                `protobuf:"varint,4,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                  // Caption: Timezone Offset;
	Severity             string                               `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                     // Caption: Severity;
	ActualPermissions    int32                                `protobuf:"varint,6,opt,name=actual_permissions,json=actualPermissions,proto3" json:"actual_permissions,omitempty"`                                                         // Caption: Actual Permissions;
	DispositionId        enums.MEMORY_ACTIVITY_DISPOSITION_ID `protobuf:"varint,7,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Profile: security_control; Caption: Disposition ID;
	Unmapped             *objects.Object                      `protobuf:"bytes,8,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                     // Caption: Unmapped Data;
	Enrichments          []*objects.Enrichment                `protobuf:"bytes,9,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                               // Caption: Enrichments;
	Actor                *objects.Actor                       `protobuf:"bytes,10,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                          // Caption: Actor;
	Time                 int64                                `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	StatusCode           string                               `protobuf:"bytes,12,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	SeverityId           enums.MEMORY_ACTIVITY_SEVERITY_ID    `protobuf:"varint,13,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`            // Caption: Severity ID;
	Api                  *objects.Api                         `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	Device               *objects.Device                      `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`                                                                                                        // Caption: Device;
	Metadata             *objects.Metadata                    `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	Attacks              []*objects.Attack                    `protobuf:"bytes,17,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: Attacks; Profile: security_control;
	Size                 int64                                `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`                                                                                                           // Caption: Size;
	StartTime            int64                                `protobuf:"varint,19,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                // Caption: Start Time;
	CategoryName         string                               `protobuf:"bytes,20,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	TypeUid              enums.MEMORY_ACTIVITY_TYPE_UID       `protobuf:"varint,21,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                        // Caption: Type ID;
	ActivityId           enums.MEMORY_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,22,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`            // Caption: Activity ID;
	Status               string                               `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Message              string                               `protobuf:"bytes,24,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	ActivityName         string                               `protobuf:"bytes,25,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	EndTime              int64                                `protobuf:"varint,26,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	Count                int32                                `protobuf:"varint,27,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	StatusDetail         string                               `protobuf:"bytes,28,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	Duration             int32                                `protobuf:"varint,29,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Process              *objects.Process                     `protobuf:"bytes,30,opt,name=process,proto3" json:"process,omitempty"`                                                                                                      // Caption: Process;
	RawData              string                               `protobuf:"bytes,31,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	Cloud                *objects.Cloud                       `protobuf:"bytes,32,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Profile: cloud; Caption: Cloud;
	ClassName            string                               `protobuf:"bytes,33,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Observables          []*objects.Observable                `protobuf:"bytes,34,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	TypeName             string                               `protobuf:"bytes,35,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                    // Caption: Type Name;
	BaseAddress          string                               `protobuf:"bytes,36,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`                                                                           // Caption: Base Address;
	RequestedPermissions int32                                `protobuf:"varint,37,opt,name=requested_permissions,json=requestedPermissions,proto3" json:"requested_permissions,omitempty"`                                               // Caption: Requested Permissions;
	ClassUid             enums.MEMORY_ACTIVITY_CLASS_UID      `protobuf:"varint,38,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                    // Caption: Class ID;
	StatusId             enums.MEMORY_ACTIVITY_STATUS_ID      `protobuf:"varint,39,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                    // Caption: Status ID;
}

func (x *MemoryActivity) Reset() {
	*x = MemoryActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryActivity) ProtoMessage() {}

func (x *MemoryActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryActivity.ProtoReflect.Descriptor instead.
func (*MemoryActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{1}
}

func (x *MemoryActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *MemoryActivity) GetCategoryUid() enums.MEMORY_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.MEMORY_ACTIVITY_CATEGORY_UID(0)
}

func (x *MemoryActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *MemoryActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *MemoryActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *MemoryActivity) GetActualPermissions() int32 {
	if x != nil {
		return x.ActualPermissions
	}
	return 0
}

func (x *MemoryActivity) GetDispositionId() enums.MEMORY_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.MEMORY_ACTIVITY_DISPOSITION_ID(0)
}

func (x *MemoryActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *MemoryActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *MemoryActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *MemoryActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MemoryActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *MemoryActivity) GetSeverityId() enums.MEMORY_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.MEMORY_ACTIVITY_SEVERITY_ID(0)
}

func (x *MemoryActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *MemoryActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MemoryActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MemoryActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *MemoryActivity) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MemoryActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MemoryActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *MemoryActivity) GetTypeUid() enums.MEMORY_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.MEMORY_ACTIVITY_TYPE_UID(0)
}

func (x *MemoryActivity) GetActivityId() enums.MEMORY_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.MEMORY_ACTIVITY_ACTIVITY_ID(0)
}

func (x *MemoryActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MemoryActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MemoryActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *MemoryActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MemoryActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MemoryActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *MemoryActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MemoryActivity) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *MemoryActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *MemoryActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *MemoryActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *MemoryActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *MemoryActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *MemoryActivity) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *MemoryActivity) GetRequestedPermissions() int32 {
	if x != nil {
		return x.RequestedPermissions
	}
	return 0
}

func (x *MemoryActivity) GetClassUid() enums.MEMORY_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.MEMORY_ACTIVITY_CLASS_UID(0)
}

func (x *MemoryActivity) GetStatusId() enums.MEMORY_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.MEMORY_ACTIVITY_STATUS_ID(0)
}

// Event: system
// Event UID: 2
// URL: https://schema.ocsf.io/1.0.0/classes/registry_value_activity
type RegistryValueActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device         *objects.Device                              `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                  // Caption: Device;
	Count          int32                                        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                   // Caption: Count;
	SeverityId     enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID    `protobuf:"varint,3,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`              // Caption: Severity ID;
	Enrichments    []*objects.Enrichment                        `protobuf:"bytes,4,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                        // Caption: Enrichments;
	CategoryUid    enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID   `protobuf:"varint,5,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`          // Caption: Category ID;
	ClassName      string                                       `protobuf:"bytes,6,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                           // Caption: Class;
	ActivityId     enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	StatusCode     string                                       `protobuf:"bytes,8,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                        // Caption: Status Code;
	Observables    []*objects.Observable                        `protobuf:"bytes,9,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                        // Caption: Observables;
	Attacks        []*objects.Attack                            `protobuf:"bytes,10,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                               // Caption: Attacks; Profile: security_control;
	TypeUid        enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID       `protobuf:"varint,11,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	RegValue       *objects.RegistryValue                       `protobuf:"bytes,12,opt,name=reg_value,json=regValue,proto3" json:"reg_value,omitempty"`                                                                                             // Caption: Registry Value;
	StatusDetail   string                                       `protobuf:"bytes,13,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                 // Caption: Status Details;
	CategoryName   string                                       `protobuf:"bytes,14,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                 // Caption: Category;
	Message        string                                       `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`                                                                                                               // Caption: Message;
	ActivityName   string                                       `protobuf:"bytes,16,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                 // Caption: Activity;
	Time           int64                                        `protobuf:"varint,17,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                    // Caption: Event Time;
	StartTime      int64                                        `protobuf:"varint,18,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                         // Caption: Start Time;
	Status         string                                       `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                 // Caption: Status;
	RawData        string                                       `protobuf:"bytes,20,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                // Caption: Raw Data;
	PrevRegValue   *objects.RegistryValue                       `protobuf:"bytes,21,opt,name=prev_reg_value,json=prevRegValue,proto3" json:"prev_reg_value,omitempty"`                                                                               // Caption: Previous Registry Value;
	Metadata       *objects.Metadata                            `protobuf:"bytes,22,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                             // Caption: Metadata;
	TypeName       string                                       `protobuf:"bytes,23,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                             // Caption: Type Name;
	TimezoneOffset int32                                        `protobuf:"varint,24,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                          // Caption: Timezone Offset;
	Api            *objects.Api                                 `protobuf:"bytes,25,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                       // Caption: API Details; Profile: cloud;
	Actor          *objects.Actor                               `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                   // Caption: Actor;
	StatusId       enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID      `protobuf:"varint,27,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Malware        []*objects.Malware                           `protobuf:"bytes,28,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                               // Caption: Malware; Profile: security_control;
	EndTime        int64                                        `protobuf:"varint,29,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                               // Caption: End Time;
	Unmapped       *objects.Object                              `protobuf:"bytes,30,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                             // Caption: Unmapped Data;
	Disposition    string                                       `protobuf:"bytes,31,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                       // Profile: security_control; Caption: Disposition;
	DispositionId  enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID `protobuf:"varint,32,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	ClassUid       enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID      `protobuf:"varint,33,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	Cloud          *objects.Cloud                               `protobuf:"bytes,34,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                   // Caption: Cloud; Profile: cloud;
	Severity       string                                       `protobuf:"bytes,35,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                             // Caption: Severity;
	Duration       int32                                        `protobuf:"varint,36,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                            // Caption: Duration;
}

func (x *RegistryValueActivity) Reset() {
	*x = RegistryValueActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryValueActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryValueActivity) ProtoMessage() {}

func (x *RegistryValueActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryValueActivity.ProtoReflect.Descriptor instead.
func (*RegistryValueActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{2}
}

func (x *RegistryValueActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RegistryValueActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryValueActivity) GetSeverityId() enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID(0)
}

func (x *RegistryValueActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryValueActivity) GetCategoryUid() enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID(0)
}

func (x *RegistryValueActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryValueActivity) GetActivityId() enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *RegistryValueActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryValueActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryValueActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *RegistryValueActivity) GetTypeUid() enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID(0)
}

func (x *RegistryValueActivity) GetRegValue() *objects.RegistryValue {
	if x != nil {
		return x.RegValue
	}
	return nil
}

func (x *RegistryValueActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryValueActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryValueActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryValueActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryValueActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RegistryValueActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RegistryValueActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryValueActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RegistryValueActivity) GetPrevRegValue() *objects.RegistryValue {
	if x != nil {
		return x.PrevRegValue
	}
	return nil
}

func (x *RegistryValueActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryValueActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryValueActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryValueActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryValueActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryValueActivity) GetStatusId() enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID(0)
}

func (x *RegistryValueActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *RegistryValueActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryValueActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryValueActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *RegistryValueActivity) GetDispositionId() enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID(0)
}

func (x *RegistryValueActivity) GetClassUid() enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID(0)
}

func (x *RegistryValueActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryValueActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryValueActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Event: system
// Event UID: 1
// URL: https://schema.ocsf.io/1.0.0/classes/file_activity
type FileActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionUid  string                             `protobuf:"bytes,1,opt,name=connection_uid,json=connectionUid,proto3" json:"connection_uid,omitempty"`                                                                     // Caption: Connection Identifier;
	RawData        string                             `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	EndTime        int64                              `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	FileResult     *objects.File                      `protobuf:"bytes,4,opt,name=file_result,json=fileResult,proto3" json:"file_result,omitempty"`                                                                              // Caption: File Result;
	Component      string                             `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`                                                                                                  // Caption: Component;
	Actor          *objects.Actor                     `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                          // Caption: Actor;
	Unmapped       *objects.Object                    `protobuf:"bytes,7,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	StatusId       enums.FILE_ACTIVITY_STATUS_ID      `protobuf:"varint,8,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                      // Caption: Status ID;
	StatusCode     string                             `protobuf:"bytes,9,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	StatusDetail   string                             `protobuf:"bytes,10,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	Severity       string                             `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                   // Caption: Severity;
	Duration       int32                              `protobuf:"varint,12,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	Count          int32                              `protobuf:"varint,13,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	ActivityId     enums.FILE_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,14,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	Cloud          *objects.Cloud                     `protobuf:"bytes,15,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Profile: cloud; Caption: Cloud;
	Time           int64                              `protobuf:"varint,16,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
	TimezoneOffset int32                              `protobuf:"varint,17,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                // Caption: Timezone Offset;
	Attacks        []*objects.Attack                  `protobuf:"bytes,18,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                     // Profile: security_control; Caption: Attacks;
	StartTime      int64                              `protobuf:"varint,19,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	Disposition    string                             `protobuf:"bytes,20,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Caption: Disposition; Profile: security_control;
	AccessMask     int32                              `protobuf:"varint,21,opt,name=access_mask,json=accessMask,proto3" json:"access_mask,omitempty"`                                                                            // Caption: Access Mask;
	ActivityName   string                             `protobuf:"bytes,22,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	Message        string                             `protobuf:"bytes,23,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	File           *objects.File                      `protobuf:"bytes,24,opt,name=file,proto3" json:"file,omitempty"`                                                                                                           // Caption: File;
	CreateMask     string                             `protobuf:"bytes,25,opt,name=create_mask,json=createMask,proto3" json:"create_mask,omitempty"`                                                                             // Caption: Create Mask;
	TypeUid        enums.FILE_ACTIVITY_TYPE_UID       `protobuf:"varint,26,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	DispositionId  enums.FILE_ACTIVITY_DISPOSITION_ID `protobuf:"varint,27,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Device         *objects.Device                    `protobuf:"bytes,28,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device;
	CategoryName   string                             `protobuf:"bytes,29,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                       // Caption: Category;
	FileDiff       string                             `protobuf:"bytes,30,opt,name=file_diff,json=fileDiff,proto3" json:"file_diff,omitempty"`                                                                                   // Caption: File Diff;
	CategoryUid    enums.FILE_ACTIVITY_CATEGORY_UID   `protobuf:"varint,31,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Metadata       *objects.Metadata                  `protobuf:"bytes,32,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	Observables    []*objects.Observable              `protobuf:"bytes,33,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	SeverityId     enums.FILE_ACTIVITY_SEVERITY_ID    `protobuf:"varint,34,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	Api            *objects.Api                       `protobuf:"bytes,35,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Caption: API Details; Profile: cloud;
	Status         string                             `protobuf:"bytes,36,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // Caption: Status;
	ClassUid       enums.FILE_ACTIVITY_CLASS_UID      `protobuf:"varint,37,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	Enrichments    []*objects.Enrichment              `protobuf:"bytes,38,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	ClassName      string                             `protobuf:"bytes,39,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
	Malware        []*objects.Malware                 `protobuf:"bytes,40,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Caption: Malware; Profile: security_control;
	TypeName       string                             `protobuf:"bytes,41,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
}

func (x *FileActivity) Reset() {
	*x = FileActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileActivity) ProtoMessage() {}

func (x *FileActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileActivity.ProtoReflect.Descriptor instead.
func (*FileActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{3}
}

func (x *FileActivity) GetConnectionUid() string {
	if x != nil {
		return x.ConnectionUid
	}
	return ""
}

func (x *FileActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *FileActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FileActivity) GetFileResult() *objects.File {
	if x != nil {
		return x.FileResult
	}
	return nil
}

func (x *FileActivity) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *FileActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FileActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *FileActivity) GetStatusId() enums.FILE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FILE_ACTIVITY_STATUS_ID(0)
}

func (x *FileActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *FileActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *FileActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *FileActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FileActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FileActivity) GetActivityId() enums.FILE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FILE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *FileActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *FileActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FileActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *FileActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *FileActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FileActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *FileActivity) GetAccessMask() int32 {
	if x != nil {
		return x.AccessMask
	}
	return 0
}

func (x *FileActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *FileActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FileActivity) GetFile() *objects.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileActivity) GetCreateMask() string {
	if x != nil {
		return x.CreateMask
	}
	return ""
}

func (x *FileActivity) GetTypeUid() enums.FILE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.FILE_ACTIVITY_TYPE_UID(0)
}

func (x *FileActivity) GetDispositionId() enums.FILE_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.FILE_ACTIVITY_DISPOSITION_ID(0)
}

func (x *FileActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *FileActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *FileActivity) GetFileDiff() string {
	if x != nil {
		return x.FileDiff
	}
	return ""
}

func (x *FileActivity) GetCategoryUid() enums.FILE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FILE_ACTIVITY_CATEGORY_UID(0)
}

func (x *FileActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *FileActivity) GetSeverityId() enums.FILE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FILE_ACTIVITY_SEVERITY_ID(0)
}

func (x *FileActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *FileActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileActivity) GetClassUid() enums.FILE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FILE_ACTIVITY_CLASS_UID(0)
}

func (x *FileActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *FileActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FileActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *FileActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

// Event: system
// Event UID: 7
// URL: https://schema.ocsf.io/1.0.0/classes/process_activity
type ProcessActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusId             enums.PROCESS_ACTIVITY_STATUS_ID         `protobuf:"varint,1,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                                 // Caption: Status ID;
	Severity             string                                   `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                                  // Caption: Severity;
	Time                 int64                                    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                         // Caption: Event Time;
	Attacks              []*objects.Attack                        `protobuf:"bytes,4,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                                    // Caption: Attacks; Profile: security_control;
	Disposition          string                                   `protobuf:"bytes,5,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                            // Caption: Disposition; Profile: security_control;
	DispositionId        enums.PROCESS_ACTIVITY_DISPOSITION_ID    `protobuf:"varint,6,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"`             // Caption: Disposition ID; Profile: security_control;
	Cloud                *objects.Cloud                           `protobuf:"bytes,7,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                        // Caption: Cloud; Profile: cloud;
	Device               *objects.Device                          `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                      // Caption: Device;
	SeverityId           enums.PROCESS_ACTIVITY_SEVERITY_ID       `protobuf:"varint,9,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`                         // Caption: Severity ID;
	TypeName             string                                   `protobuf:"bytes,10,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                                 // Caption: Type Name;
	Unmapped             *objects.Object                          `protobuf:"bytes,11,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                                 // Caption: Unmapped Data;
	Module               *objects.Module                          `protobuf:"bytes,12,opt,name=module,proto3" json:"module,omitempty"`                                                                                                                     // Caption: Module;
	RequestedPermissions int32                                    `protobuf:"varint,13,opt,name=requested_permissions,json=requestedPermissions,proto3" json:"requested_permissions,omitempty"`                                                            // Caption: Requested Permissions;
	Api                  *objects.Api                             `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                           // Caption: API Details; Profile: cloud;
	Message              string                                   `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                   // Caption: Message;
	ClassUid             enums.PROCESS_ACTIVITY_CLASS_UID         `protobuf:"varint,16,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                                // Caption: Class ID;
	TimezoneOffset       int32                                    `protobuf:"varint,17,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                              // Caption: Timezone Offset;
	ActivityName         string                                   `protobuf:"bytes,18,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                     // Caption: Activity;
	Duration             int32                                    `protobuf:"varint,19,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                                // Caption: Duration;
	StatusCode           string                                   `protobuf:"bytes,20,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                           // Caption: Status Code;
	Actor                *objects.Actor                           `protobuf:"bytes,21,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                       // Caption: Actor;
	Process              *objects.Process                         `protobuf:"bytes,22,opt,name=process,proto3" json:"process,omitempty"`                                                                                                                   // Caption: Process;
	ActivityId           enums.PROCESS_ACTIVITY_ACTIVITY_ID       `protobuf:"varint,23,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`                        // Caption: Activity ID;
	ActualPermissions    int32                                    `protobuf:"varint,24,opt,name=actual_permissions,json=actualPermissions,proto3" json:"actual_permissions,omitempty"`                                                                     // Caption: Actual Permissions;
	StatusDetail         string                                   `protobuf:"bytes,25,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                     // Caption: Status Details;
	InjectionTypeId      enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID `protobuf:"varint,26,opt,name=injection_type_id,json=injectionTypeId,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID" json:"injection_type_id,omitempty"` // Caption: Injection Type ID;
	InjectionType        string                                   `protobuf:"bytes,27,opt,name=injection_type,json=injectionType,proto3" json:"injection_type,omitempty"`                                                                                  // Caption: Injection Type;
	ClassName            string                                   `protobuf:"bytes,28,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                              // Caption: Class;
	Metadata             *objects.Metadata                        `protobuf:"bytes,29,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                                 // Caption: Metadata;
	Malware              []*objects.Malware                       `protobuf:"bytes,30,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                                   // Caption: Malware; Profile: security_control;
	Count                int32                                    `protobuf:"varint,31,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                      // Caption: Count;
	StartTime            int64                                    `protobuf:"varint,32,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                             // Caption: Start Time;
	CategoryName         string                                   `protobuf:"bytes,33,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                     // Caption: Category;
	RawData              string                                   `protobuf:"bytes,34,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                                    // Caption: Raw Data;
	CategoryUid          enums.PROCESS_ACTIVITY_CATEGORY_UID      `protobuf:"varint,35,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`                    // Caption: Category ID;
	Enrichments          []*objects.Enrichment                    `protobuf:"bytes,36,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                           // Caption: Enrichments;
	EndTime              int64                                    `protobuf:"varint,37,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                                   // Caption: End Time;
	Status               string                                   `protobuf:"bytes,38,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                     // Caption: Status;
	TypeUid              enums.PROCESS_ACTIVITY_TYPE_UID          `protobuf:"varint,39,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                                    // Caption: Type ID;
	Observables          []*objects.Observable                    `protobuf:"bytes,40,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                           // Caption: Observables;
	ExitCode             int32                                    `protobuf:"varint,41,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`                                                                                                // Caption: Exit Code;
}

func (x *ProcessActivity) Reset() {
	*x = ProcessActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessActivity) ProtoMessage() {}

func (x *ProcessActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessActivity.ProtoReflect.Descriptor instead.
func (*ProcessActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessActivity) GetStatusId() enums.PROCESS_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.PROCESS_ACTIVITY_STATUS_ID(0)
}

func (x *ProcessActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ProcessActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ProcessActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *ProcessActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *ProcessActivity) GetDispositionId() enums.PROCESS_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.PROCESS_ACTIVITY_DISPOSITION_ID(0)
}

func (x *ProcessActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ProcessActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ProcessActivity) GetSeverityId() enums.PROCESS_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.PROCESS_ACTIVITY_SEVERITY_ID(0)
}

func (x *ProcessActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ProcessActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ProcessActivity) GetModule() *objects.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ProcessActivity) GetRequestedPermissions() int32 {
	if x != nil {
		return x.RequestedPermissions
	}
	return 0
}

func (x *ProcessActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ProcessActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessActivity) GetClassUid() enums.PROCESS_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.PROCESS_ACTIVITY_CLASS_UID(0)
}

func (x *ProcessActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ProcessActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ProcessActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ProcessActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ProcessActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ProcessActivity) GetProcess() *objects.Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessActivity) GetActivityId() enums.PROCESS_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.PROCESS_ACTIVITY_ACTIVITY_ID(0)
}

func (x *ProcessActivity) GetActualPermissions() int32 {
	if x != nil {
		return x.ActualPermissions
	}
	return 0
}

func (x *ProcessActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ProcessActivity) GetInjectionTypeId() enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID {
	if x != nil {
		return x.InjectionTypeId
	}
	return enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID(0)
}

func (x *ProcessActivity) GetInjectionType() string {
	if x != nil {
		return x.InjectionType
	}
	return ""
}

func (x *ProcessActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ProcessActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *ProcessActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProcessActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProcessActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ProcessActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ProcessActivity) GetCategoryUid() enums.PROCESS_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.PROCESS_ACTIVITY_CATEGORY_UID(0)
}

func (x *ProcessActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ProcessActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProcessActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProcessActivity) GetTypeUid() enums.PROCESS_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.PROCESS_ACTIVITY_TYPE_UID(0)
}

func (x *ProcessActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ProcessActivity) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

// URL: https://schema.ocsf.io/1.0.0/classes/kernel_extension
// Event: system
// Event UID: 2
type KernelExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityId     enums.KERNEL_EXTENSION_SEVERITY_ID    `protobuf:"varint,1,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_SEVERITY_ID" json:"severity_id,omitempty"`              // Caption: Severity ID;
	TimezoneOffset int32                                 `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                    // Caption: Timezone Offset;
	Metadata       *objects.Metadata                     `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                       // Caption: Metadata;
	Time           int64                                 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`                                                                                                              // Caption: Event Time;
	StatusId       enums.KERNEL_EXTENSION_STATUS_ID      `protobuf:"varint,5,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_STATUS_ID" json:"status_id,omitempty"`                      // Caption: Status ID;
	StatusCode     string                                `protobuf:"bytes,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                 // Caption: Status Code;
	Attacks        []*objects.Attack                     `protobuf:"bytes,7,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                         // Caption: Attacks; Profile: security_control;
	Status         string                                `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                                                                                                           // Caption: Status;
	ClassUid       enums.KERNEL_EXTENSION_CLASS_UID      `protobuf:"varint,9,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CLASS_UID" json:"class_uid,omitempty"`                      // Caption: Class ID;
	Unmapped       *objects.Object                       `protobuf:"bytes,10,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                      // Caption: Unmapped Data;
	TypeName       string                                `protobuf:"bytes,11,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                      // Caption: Type Name;
	Api            *objects.Api                          `protobuf:"bytes,12,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                // Caption: API Details; Profile: cloud;
	Enrichments    []*objects.Enrichment                 `protobuf:"bytes,13,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                // Caption: Enrichments;
	Malware        []*objects.Malware                    `protobuf:"bytes,14,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                        // Caption: Malware; Profile: security_control;
	Cloud          *objects.Cloud                        `protobuf:"bytes,15,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                            // Profile: cloud; Caption: Cloud;
	ClassName      string                                `protobuf:"bytes,16,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                   // Caption: Class;
	Count          int32                                 `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`                                                                                                           // Caption: Count;
	CategoryName   string                                `protobuf:"bytes,18,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                          // Caption: Category;
	Actor          *objects.Actor                        `protobuf:"bytes,19,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                            // Caption: Actor;
	CategoryUid    enums.KERNEL_EXTENSION_CATEGORY_UID   `protobuf:"varint,20,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	StatusDetail   string                                `protobuf:"bytes,21,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                          // Caption: Status Details;
	Duration       int32                                 `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                     // Caption: Duration;
	Message        string                                `protobuf:"bytes,23,opt,name=message,proto3" json:"message,omitempty"`                                                                                                        // Caption: Message;
	ActivityName   string                                `protobuf:"bytes,24,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                          // Caption: Activity;
	RawData        string                                `protobuf:"bytes,25,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                         // Caption: Raw Data;
	StartTime      int64                                 `protobuf:"varint,26,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                  // Caption: Start Time;
	ActivityId     enums.KERNEL_EXTENSION_ACTIVITY_ID    `protobuf:"varint,27,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	EndTime        int64                                 `protobuf:"varint,28,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                        // Caption: End Time;
	Device         *objects.Device                       `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`                                                                                                          // Caption: Device;
	Disposition    string                                `protobuf:"bytes,30,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                // Caption: Disposition; Profile: security_control;
	DispositionId  enums.KERNEL_EXTENSION_DISPOSITION_ID `protobuf:"varint,31,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	TypeUid        enums.KERNEL_EXTENSION_TYPE_UID       `protobuf:"varint,32,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Observables    []*objects.Observable                 `protobuf:"bytes,33,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                // Caption: Observables;
	Driver         *objects.KernelDriver                 `protobuf:"bytes,34,opt,name=driver,proto3" json:"driver,omitempty"`                                                                                                          // Caption: Kernel Driver;
	Severity       string                                `protobuf:"bytes,35,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                      // Caption: Severity;
}

func (x *KernelExtension) Reset() {
	*x = KernelExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelExtension) ProtoMessage() {}

func (x *KernelExtension) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelExtension.ProtoReflect.Descriptor instead.
func (*KernelExtension) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{5}
}

func (x *KernelExtension) GetSeverityId() enums.KERNEL_EXTENSION_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.KERNEL_EXTENSION_SEVERITY_ID(0)
}

func (x *KernelExtension) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *KernelExtension) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KernelExtension) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KernelExtension) GetStatusId() enums.KERNEL_EXTENSION_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.KERNEL_EXTENSION_STATUS_ID(0)
}

func (x *KernelExtension) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *KernelExtension) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *KernelExtension) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KernelExtension) GetClassUid() enums.KERNEL_EXTENSION_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.KERNEL_EXTENSION_CLASS_UID(0)
}

func (x *KernelExtension) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *KernelExtension) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *KernelExtension) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *KernelExtension) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *KernelExtension) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *KernelExtension) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *KernelExtension) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *KernelExtension) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KernelExtension) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *KernelExtension) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *KernelExtension) GetCategoryUid() enums.KERNEL_EXTENSION_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.KERNEL_EXTENSION_CATEGORY_UID(0)
}

func (x *KernelExtension) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *KernelExtension) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *KernelExtension) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KernelExtension) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *KernelExtension) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *KernelExtension) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KernelExtension) GetActivityId() enums.KERNEL_EXTENSION_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.KERNEL_EXTENSION_ACTIVITY_ID(0)
}

func (x *KernelExtension) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KernelExtension) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *KernelExtension) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *KernelExtension) GetDispositionId() enums.KERNEL_EXTENSION_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.KERNEL_EXTENSION_DISPOSITION_ID(0)
}

func (x *KernelExtension) GetTypeUid() enums.KERNEL_EXTENSION_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.KERNEL_EXTENSION_TYPE_UID(0)
}

func (x *KernelExtension) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *KernelExtension) GetDriver() *objects.KernelDriver {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *KernelExtension) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

// Event: system
// Event UID: 3
// URL: https://schema.ocsf.io/1.0.0/classes/kernel_activity
type KernelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kernel         *objects.Kernel                      `protobuf:"bytes,1,opt,name=kernel,proto3" json:"kernel,omitempty"`                                                                                                          // Caption: Kernel;
	Actor          *objects.Actor                       `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                            // Caption: Actor;
	Observables    []*objects.Observable                `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                // Caption: Observables;
	Message        string                               `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                                                                                                        // Caption: Message;
	Time           int64                                `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                                                                                             // Caption: Event Time;
	EndTime        int64                                `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                        // Caption: End Time;
	Device         *objects.Device                      `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`                                                                                                          // Caption: Device;
	ActivityId     enums.KERNEL_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,8,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	Severity       string                               `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                      // Caption: Severity;
	Duration       int32                                `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                    // Caption: Duration;
	Count          int32                                `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`                                                                                                          // Caption: Count;
	CategoryName   string                               `protobuf:"bytes,12,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                         // Caption: Category;
	SeverityId     enums.KERNEL_ACTIVITY_SEVERITY_ID    `protobuf:"varint,13,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	RawData        string                               `protobuf:"bytes,14,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                        // Caption: Raw Data;
	ClassName      string                               `protobuf:"bytes,15,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                  // Caption: Class;
	Disposition    string                               `protobuf:"bytes,16,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                               // Caption: Disposition; Profile: security_control;
	DispositionId  enums.KERNEL_ACTIVITY_DISPOSITION_ID `protobuf:"varint,17,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	StatusCode     string                               `protobuf:"bytes,18,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                               // Caption: Status Code;
	StartTime      int64                                `protobuf:"varint,19,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // Caption: Start Time;
	Api            *objects.Api                         `protobuf:"bytes,20,opt,name=api,proto3" json:"api,omitempty"`                                                                                                               // Caption: API Details; Profile: cloud;
	ClassUid       enums.KERNEL_ACTIVITY_CLASS_UID      `protobuf:"varint,21,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	CategoryUid    enums.KERNEL_ACTIVITY_CATEGORY_UID   `protobuf:"varint,22,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Malware        []*objects.Malware                   `protobuf:"bytes,23,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                       // Caption: Malware; Profile: security_control;
	Metadata       *objects.Metadata                    `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                     // Caption: Metadata;
	TimezoneOffset int32                                `protobuf:"varint,25,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                  // Caption: Timezone Offset;
	Status         string                               `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`                                                                                                         // Caption: Status;
	Attacks        []*objects.Attack                    `protobuf:"bytes,27,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                       // Caption: Attacks; Profile: security_control;
	StatusDetail   string                               `protobuf:"bytes,28,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                         // Caption: Status Details;
	TypeName       string                               `protobuf:"bytes,29,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	ActivityName   string                               `protobuf:"bytes,30,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                         // Caption: Activity;
	TypeUid        enums.KERNEL_ACTIVITY_TYPE_UID       `protobuf:"varint,31,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Unmapped       *objects.Object                      `protobuf:"bytes,32,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                     // Caption: Unmapped Data;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,33,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                               // Caption: Enrichments;
	Cloud          *objects.Cloud                       `protobuf:"bytes,34,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                           // Caption: Cloud; Profile: cloud;
	StatusId       enums.KERNEL_ACTIVITY_STATUS_ID      `protobuf:"varint,35,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
}

func (x *KernelActivity) Reset() {
	*x = KernelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelActivity) ProtoMessage() {}

func (x *KernelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelActivity.ProtoReflect.Descriptor instead.
func (*KernelActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{6}
}

func (x *KernelActivity) GetKernel() *objects.Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *KernelActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *KernelActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *KernelActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KernelActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KernelActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KernelActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *KernelActivity) GetActivityId() enums.KERNEL_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.KERNEL_ACTIVITY_ACTIVITY_ID(0)
}

func (x *KernelActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *KernelActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *KernelActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *KernelActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *KernelActivity) GetSeverityId() enums.KERNEL_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.KERNEL_ACTIVITY_SEVERITY_ID(0)
}

func (x *KernelActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *KernelActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *KernelActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *KernelActivity) GetDispositionId() enums.KERNEL_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.KERNEL_ACTIVITY_DISPOSITION_ID(0)
}

func (x *KernelActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *KernelActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KernelActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *KernelActivity) GetClassUid() enums.KERNEL_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.KERNEL_ACTIVITY_CLASS_UID(0)
}

func (x *KernelActivity) GetCategoryUid() enums.KERNEL_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.KERNEL_ACTIVITY_CATEGORY_UID(0)
}

func (x *KernelActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *KernelActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KernelActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *KernelActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KernelActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *KernelActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *KernelActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *KernelActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *KernelActivity) GetTypeUid() enums.KERNEL_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.KERNEL_ACTIVITY_TYPE_UID(0)
}

func (x *KernelActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *KernelActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *KernelActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *KernelActivity) GetStatusId() enums.KERNEL_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.KERNEL_ACTIVITY_STATUS_ID(0)
}

// Event: system
// Event UID: 6
// URL: https://schema.ocsf.io/1.0.0/classes/scheduled_job_activity
type ScheduledJobActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode     string                                      `protobuf:"bytes,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                       // Caption: Status Code;
	StatusDetail   string                                      `protobuf:"bytes,2,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                                 // Caption: Status Details;
	Duration       int32                                       `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                            // Caption: Duration;
	Disposition    string                                      `protobuf:"bytes,4,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                       // Caption: Disposition; Profile: security_control;
	ActivityName   string                                      `protobuf:"bytes,5,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                                 // Caption: Activity;
	Malware        []*objects.Malware                          `protobuf:"bytes,6,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                               // Caption: Malware; Profile: security_control;
	TimezoneOffset int32                                       `protobuf:"varint,7,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                          // Caption: Timezone Offset;
	CategoryName   string                                      `protobuf:"bytes,8,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                                 // Caption: Category;
	Job            *objects.Job                                `protobuf:"bytes,9,opt,name=job,proto3" json:"job,omitempty"`                                                                                                                       // Caption: Job;
	Message        string                                      `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`                                                                                                              // Caption: Message;
	ClassUid       enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID      `protobuf:"varint,11,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	Enrichments    []*objects.Enrichment                       `protobuf:"bytes,12,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                      // Caption: Enrichments;
	ClassName      string                                      `protobuf:"bytes,13,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                         // Caption: Class;
	Actor          *objects.Actor                              `protobuf:"bytes,14,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                  // Caption: Actor;
	RawData        string                                      `protobuf:"bytes,15,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                               // Caption: Raw Data;
	Metadata       *objects.Metadata                           `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                            // Caption: Metadata;
	Status         string                                      `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                // Caption: Status;
	StatusId       enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID      `protobuf:"varint,18,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	CategoryUid    enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID   `protobuf:"varint,19,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	EndTime        int64                                       `protobuf:"varint,20,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                              // Caption: End Time;
	Time           int64                                       `protobuf:"varint,21,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                   // Caption: Event Time;
	Count          int32                                       `protobuf:"varint,22,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                 // Caption: Count;
	Severity       string                                      `protobuf:"bytes,23,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                            // Caption: Severity;
	TypeName       string                                      `protobuf:"bytes,24,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                            // Caption: Type Name;
	Attacks        []*objects.Attack                           `protobuf:"bytes,25,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                              // Caption: Attacks; Profile: security_control;
	DispositionId  enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID `protobuf:"varint,26,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Observables    []*objects.Observable                       `protobuf:"bytes,27,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                      // Caption: Observables;
	StartTime      int64                                       `protobuf:"varint,28,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                        // Caption: Start Time;
	Unmapped       *objects.Object                             `protobuf:"bytes,29,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                            // Caption: Unmapped Data;
	ActivityId     enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,30,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	TypeUid        enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID       `protobuf:"varint,31,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Cloud          *objects.Cloud                              `protobuf:"bytes,32,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                  // Caption: Cloud; Profile: cloud;
	Device         *objects.Device                             `protobuf:"bytes,33,opt,name=device,proto3" json:"device,omitempty"`                                                                                                                // Caption: Device;
	SeverityId     enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID    `protobuf:"varint,34,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	Api            *objects.Api                                `protobuf:"bytes,35,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                      // Profile: cloud; Caption: API Details;
}

func (x *ScheduledJobActivity) Reset() {
	*x = ScheduledJobActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledJobActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledJobActivity) ProtoMessage() {}

func (x *ScheduledJobActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledJobActivity.ProtoReflect.Descriptor instead.
func (*ScheduledJobActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{7}
}

func (x *ScheduledJobActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ScheduledJobActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ScheduledJobActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ScheduledJobActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *ScheduledJobActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ScheduledJobActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *ScheduledJobActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ScheduledJobActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ScheduledJobActivity) GetJob() *objects.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *ScheduledJobActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ScheduledJobActivity) GetClassUid() enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID(0)
}

func (x *ScheduledJobActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ScheduledJobActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ScheduledJobActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ScheduledJobActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ScheduledJobActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScheduledJobActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ScheduledJobActivity) GetStatusId() enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID(0)
}

func (x *ScheduledJobActivity) GetCategoryUid() enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID(0)
}

func (x *ScheduledJobActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ScheduledJobActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ScheduledJobActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ScheduledJobActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ScheduledJobActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ScheduledJobActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *ScheduledJobActivity) GetDispositionId() enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID(0)
}

func (x *ScheduledJobActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ScheduledJobActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScheduledJobActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ScheduledJobActivity) GetActivityId() enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID(0)
}

func (x *ScheduledJobActivity) GetTypeUid() enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID(0)
}

func (x *ScheduledJobActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ScheduledJobActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ScheduledJobActivity) GetSeverityId() enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID(0)
}

func (x *ScheduledJobActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

// Event: system
// Event UID: 1
// URL: https://schema.ocsf.io/1.0.0/classes/registry_key_activity
type RegistryKeyActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenMask       int32                                      `protobuf:"varint,1,opt,name=open_mask,json=openMask,proto3" json:"open_mask,omitempty"`                                                                                           // Caption: Open Mask;
	Time           int64                                      `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                   // Caption: Event Time;
	CreateMask     string                                     `protobuf:"bytes,3,opt,name=create_mask,json=createMask,proto3" json:"create_mask,omitempty"`                                                                                      // Caption: Create Mask;
	PrevRegKey     *objects.RegistryKey                       `protobuf:"bytes,4,opt,name=prev_reg_key,json=prevRegKey,proto3" json:"prev_reg_key,omitempty"`                                                                                    // Caption: Previous Registry Key;
	Duration       int32                                      `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                           // Caption: Duration;
	Disposition    string                                     `protobuf:"bytes,6,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                      // Caption: Disposition; Profile: security_control;
	Observables    []*objects.Observable                      `protobuf:"bytes,7,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                      // Caption: Observables;
	Status         string                                     `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                                                                                                                // Caption: Status;
	RawData        string                                     `protobuf:"bytes,9,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                               // Caption: Raw Data;
	AccessMask     int32                                      `protobuf:"varint,10,opt,name=access_mask,json=accessMask,proto3" json:"access_mask,omitempty"`                                                                                    // Caption: Access Mask;
	Malware        []*objects.Malware                         `protobuf:"bytes,11,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                             // Profile: security_control; Caption: Malware;
	Severity       string                                     `protobuf:"bytes,12,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                           // Caption: Severity;
	StatusCode     string                                     `protobuf:"bytes,13,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                     // Caption: Status Code;
	StartTime      int64                                      `protobuf:"varint,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                       // Caption: Start Time;
	ActivityId     enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	StatusDetail   string                                     `protobuf:"bytes,16,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                               // Caption: Status Details;
	Message        string                                     `protobuf:"bytes,17,opt,name=message,proto3" json:"message,omitempty"`                                                                                                             // Caption: Message;
	Enrichments    []*objects.Enrichment                      `protobuf:"bytes,18,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                     // Caption: Enrichments;
	StatusId       enums.REGISTRY_KEY_ACTIVITY_STATUS_ID      `protobuf:"varint,19,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	RegKey         *objects.RegistryKey                       `protobuf:"bytes,20,opt,name=reg_key,json=regKey,proto3" json:"reg_key,omitempty"`                                                                                                 // Caption: Registry Key;
	Count          int32                                      `protobuf:"varint,21,opt,name=count,proto3" json:"count,omitempty"`                                                                                                                // Caption: Count;
	Cloud          *objects.Cloud                             `protobuf:"bytes,22,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                                 // Caption: Cloud; Profile: cloud;
	ActivityName   string                                     `protobuf:"bytes,23,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                               // Caption: Activity;
	ClassUid       enums.REGISTRY_KEY_ACTIVITY_CLASS_UID      `protobuf:"varint,24,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	Device         *objects.Device                            `protobuf:"bytes,25,opt,name=device,proto3" json:"device,omitempty"`                                                                                                               // Caption: Device;
	EndTime        int64                                      `protobuf:"varint,26,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                             // Caption: End Time;
	Metadata       *objects.Metadata                          `protobuf:"bytes,27,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                           // Caption: Metadata;
	Attacks        []*objects.Attack                          `protobuf:"bytes,28,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                             // Caption: Attacks; Profile: security_control;
	CategoryName   string                                     `protobuf:"bytes,29,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                               // Caption: Category;
	TypeName       string                                     `protobuf:"bytes,30,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                           // Caption: Type Name;
	DispositionId  enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID `protobuf:"varint,31,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Unmapped       *objects.Object                            `protobuf:"bytes,32,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                           // Caption: Unmapped Data;
	CategoryUid    enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID   `protobuf:"varint,33,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	ClassName      string                                     `protobuf:"bytes,34,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                        // Caption: Class;
	Actor          *objects.Actor                             `protobuf:"bytes,35,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                 // Caption: Actor;
	SeverityId     enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID    `protobuf:"varint,36,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	TimezoneOffset int32                                      `protobuf:"varint,37,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                        // Caption: Timezone Offset;
	Api            *objects.Api                               `protobuf:"bytes,38,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                     // Caption: API Details; Profile: cloud;
	TypeUid        enums.REGISTRY_KEY_ACTIVITY_TYPE_UID       `protobuf:"varint,39,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
}

func (x *RegistryKeyActivity) Reset() {
	*x = RegistryKeyActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryKeyActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryKeyActivity) ProtoMessage() {}

func (x *RegistryKeyActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryKeyActivity.ProtoReflect.Descriptor instead.
func (*RegistryKeyActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{8}
}

func (x *RegistryKeyActivity) GetOpenMask() int32 {
	if x != nil {
		return x.OpenMask
	}
	return 0
}

func (x *RegistryKeyActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RegistryKeyActivity) GetCreateMask() string {
	if x != nil {
		return x.CreateMask
	}
	return ""
}

func (x *RegistryKeyActivity) GetPrevRegKey() *objects.RegistryKey {
	if x != nil {
		return x.PrevRegKey
	}
	return nil
}

func (x *RegistryKeyActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegistryKeyActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *RegistryKeyActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RegistryKeyActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RegistryKeyActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RegistryKeyActivity) GetAccessMask() int32 {
	if x != nil {
		return x.AccessMask
	}
	return 0
}

func (x *RegistryKeyActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *RegistryKeyActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RegistryKeyActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RegistryKeyActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RegistryKeyActivity) GetActivityId() enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID(0)
}

func (x *RegistryKeyActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RegistryKeyActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistryKeyActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RegistryKeyActivity) GetStatusId() enums.REGISTRY_KEY_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.REGISTRY_KEY_ACTIVITY_STATUS_ID(0)
}

func (x *RegistryKeyActivity) GetRegKey() *objects.RegistryKey {
	if x != nil {
		return x.RegKey
	}
	return nil
}

func (x *RegistryKeyActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RegistryKeyActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *RegistryKeyActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RegistryKeyActivity) GetClassUid() enums.REGISTRY_KEY_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.REGISTRY_KEY_ACTIVITY_CLASS_UID(0)
}

func (x *RegistryKeyActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RegistryKeyActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RegistryKeyActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegistryKeyActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *RegistryKeyActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RegistryKeyActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RegistryKeyActivity) GetDispositionId() enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID(0)
}

func (x *RegistryKeyActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RegistryKeyActivity) GetCategoryUid() enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID(0)
}

func (x *RegistryKeyActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RegistryKeyActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RegistryKeyActivity) GetSeverityId() enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID(0)
}

func (x *RegistryKeyActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RegistryKeyActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RegistryKeyActivity) GetTypeUid() enums.REGISTRY_KEY_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.REGISTRY_KEY_ACTIVITY_TYPE_UID(0)
}

// Event: system
// Event UID: 3
// URL: https://schema.ocsf.io/1.0.0/classes/resource_activity
type ResourceActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId     enums.RESOURCE_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	TypeUid        enums.RESOURCE_ACTIVITY_TYPE_UID       `protobuf:"varint,2,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                          // Caption: Type ID;
	Severity       string                                 `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                        // Caption: Severity;
	TimezoneOffset int32                                  `protobuf:"varint,4,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                     // Caption: Timezone Offset;
	Attacks        []*objects.Attack                      `protobuf:"bytes,5,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                          // Caption: Attacks; Profile: security_control;
	StartTime      int64                                  `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                    // Caption: Start Time;
	CategoryUid    enums.RESOURCE_ACTIVITY_CATEGORY_UID   `protobuf:"varint,7,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`          // Caption: Category ID;
	ClassUid       enums.RESOURCE_ACTIVITY_CLASS_UID      `protobuf:"varint,8,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                      // Caption: Class ID;
	Count          int32                                  `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`                                                                                                             // Caption: Count;
	Api            *objects.Api                           `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                 // Caption: API Details; Profile: cloud;
	ActivityName   string                                 `protobuf:"bytes,11,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                           // Caption: Activity;
	Enrichments    []*objects.Enrichment                  `protobuf:"bytes,12,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                 // Caption: Enrichments;
	Cloud          *objects.Cloud                         `protobuf:"bytes,13,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                             // Caption: Cloud; Profile: cloud;
	ClassName      string                                 `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                    // Caption: Class;
	StatusCode     string                                 `protobuf:"bytes,15,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                 // Caption: Status Code;
	TypeName       string                                 `protobuf:"bytes,16,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                       // Caption: Type Name;
	Status         string                                 `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`                                                                                                           // Caption: Status;
	Actor          *objects.Actor                         `protobuf:"bytes,18,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                             // Caption: Actor;
	EndTime        int64                                  `protobuf:"varint,19,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                         // Caption: End Time;
	Time           int64                                  `protobuf:"varint,20,opt,name=time,proto3" json:"time,omitempty"`                                                                                                              // Caption: Event Time;
	Duration       int32                                  `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                      // Caption: Duration;
	Observables    []*objects.Observable                  `protobuf:"bytes,22,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                 // Caption: Observables;
	CategoryName   string                                 `protobuf:"bytes,23,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                           // Caption: Category;
	Disposition    string                                 `protobuf:"bytes,24,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                 // Caption: Disposition; Profile: security_control;
	Unmapped       *objects.Object                        `protobuf:"bytes,25,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                       // Caption: Unmapped Data;
	Malware        []*objects.Malware                     `protobuf:"bytes,26,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                         // Caption: Malware; Profile: security_control;
	DispositionId  enums.RESOURCE_ACTIVITY_DISPOSITION_ID `protobuf:"varint,27,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	RawData        string                                 `protobuf:"bytes,28,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                          // Caption: Raw Data;
	Device         *objects.Device                        `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`                                                                                                           // Caption: Device;
	StatusId       enums.RESOURCE_ACTIVITY_STATUS_ID      `protobuf:"varint,30,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Message        string                                 `protobuf:"bytes,31,opt,name=message,proto3" json:"message,omitempty"`                                                                                                         // Caption: Message;
	WinResource    *objects.WinResource                   `protobuf:"bytes,32,opt,name=win_resource,json=winResource,proto3" json:"win_resource,omitempty"`                                                                              // Caption: Windows Resource;
	StatusDetail   string                                 `protobuf:"bytes,33,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                           // Caption: Status Details;
	Metadata       *objects.Metadata                      `protobuf:"bytes,34,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                       // Caption: Metadata;
	SeverityId     enums.RESOURCE_ACTIVITY_SEVERITY_ID    `protobuf:"varint,35,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
}

func (x *ResourceActivity) Reset() {
	*x = ResourceActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceActivity) ProtoMessage() {}

func (x *ResourceActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceActivity.ProtoReflect.Descriptor instead.
func (*ResourceActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceActivity) GetActivityId() enums.RESOURCE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.RESOURCE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *ResourceActivity) GetTypeUid() enums.RESOURCE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.RESOURCE_ACTIVITY_TYPE_UID(0)
}

func (x *ResourceActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ResourceActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ResourceActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *ResourceActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ResourceActivity) GetCategoryUid() enums.RESOURCE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.RESOURCE_ACTIVITY_CATEGORY_UID(0)
}

func (x *ResourceActivity) GetClassUid() enums.RESOURCE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.RESOURCE_ACTIVITY_CLASS_UID(0)
}

func (x *ResourceActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResourceActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ResourceActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ResourceActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ResourceActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ResourceActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ResourceActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ResourceActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ResourceActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResourceActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ResourceActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ResourceActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ResourceActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ResourceActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ResourceActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ResourceActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *ResourceActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ResourceActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *ResourceActivity) GetDispositionId() enums.RESOURCE_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.RESOURCE_ACTIVITY_DISPOSITION_ID(0)
}

func (x *ResourceActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ResourceActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ResourceActivity) GetStatusId() enums.RESOURCE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.RESOURCE_ACTIVITY_STATUS_ID(0)
}

func (x *ResourceActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResourceActivity) GetWinResource() *objects.WinResource {
	if x != nil {
		return x.WinResource
	}
	return nil
}

func (x *ResourceActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ResourceActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceActivity) GetSeverityId() enums.RESOURCE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.RESOURCE_ACTIVITY_SEVERITY_ID(0)
}

// Event UID: 5
// URL: https://schema.ocsf.io/1.0.0/classes/module_activity
// Event: system
type ModuleActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUid        enums.MODULE_ACTIVITY_TYPE_UID       `protobuf:"varint,1,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                          // Caption: Type ID;
	Unmapped       *objects.Object                      `protobuf:"bytes,2,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                      // Caption: Unmapped Data;
	EndTime        int64                                `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                        // Caption: End Time;
	Module         *objects.Module                      `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`                                                                                                          // Caption: Module;
	StatusDetail   string                               `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                          // Caption: Status Details;
	Count          int32                                `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                                                                                           // Caption: Count;
	CategoryName   string                               `protobuf:"bytes,7,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                          // Caption: Category;
	StatusId       enums.MODULE_ACTIVITY_STATUS_ID      `protobuf:"varint,8,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                      // Caption: Status ID;
	Malware        []*objects.Malware                   `protobuf:"bytes,9,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                        // Profile: security_control; Caption: Malware;
	Time           int64                                `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`                                                                                                            // Caption: Event Time;
	ClassUid       enums.MODULE_ACTIVITY_CLASS_UID      `protobuf:"varint,11,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	CategoryUid    enums.MODULE_ACTIVITY_CATEGORY_UID   `protobuf:"varint,12,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Enrichments    []*objects.Enrichment                `protobuf:"bytes,13,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                               // Caption: Enrichments;
	ClassName      string                               `protobuf:"bytes,14,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                  // Caption: Class;
	Device         *objects.Device                      `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`                                                                                                         // Caption: Device;
	StatusCode     string                               `protobuf:"bytes,16,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                               // Caption: Status Code;
	Api            *objects.Api                         `protobuf:"bytes,17,opt,name=api,proto3" json:"api,omitempty"`                                                                                                               // Caption: API Details; Profile: cloud;
	Message        string                               `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                                       // Caption: Message;
	ActivityName   string                               `protobuf:"bytes,19,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                         // Caption: Activity;
	Severity       string                               `protobuf:"bytes,20,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                     // Caption: Severity;
	Attacks        []*objects.Attack                    `protobuf:"bytes,21,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                       // Caption: Attacks; Profile: security_control;
	Observables    []*objects.Observable                `protobuf:"bytes,22,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                               // Caption: Observables;
	Cloud          *objects.Cloud                       `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                           // Caption: Cloud; Profile: cloud;
	TimezoneOffset int32                                `protobuf:"varint,24,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                  // Caption: Timezone Offset;
	StartTime      int64                                `protobuf:"varint,25,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // Caption: Start Time;
	Disposition    string                               `protobuf:"bytes,26,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                               // Caption: Disposition; Profile: security_control;
	Status         string                               `protobuf:"bytes,27,opt,name=status,proto3" json:"status,omitempty"`                                                                                                         // Caption: Status;
	Actor          *objects.Actor                       `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                           // Caption: Actor;
	Duration       int32                                `protobuf:"varint,29,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                    // Caption: Duration;
	Metadata       *objects.Metadata                    `protobuf:"bytes,30,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                     // Caption: Metadata;
	RawData        string                               `protobuf:"bytes,31,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                        // Caption: Raw Data;
	ActivityId     enums.MODULE_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,32,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	TypeName       string                               `protobuf:"bytes,33,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	SeverityId     enums.MODULE_ACTIVITY_SEVERITY_ID    `protobuf:"varint,34,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	DispositionId  enums.MODULE_ACTIVITY_DISPOSITION_ID `protobuf:"varint,35,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
}

func (x *ModuleActivity) Reset() {
	*x = ModuleActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleActivity) ProtoMessage() {}

func (x *ModuleActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_system_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleActivity.ProtoReflect.Descriptor instead.
func (*ModuleActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP(), []int{10}
}

func (x *ModuleActivity) GetTypeUid() enums.MODULE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.MODULE_ACTIVITY_TYPE_UID(0)
}

func (x *ModuleActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *ModuleActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ModuleActivity) GetModule() *objects.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ModuleActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *ModuleActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModuleActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ModuleActivity) GetStatusId() enums.MODULE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.MODULE_ACTIVITY_STATUS_ID(0)
}

func (x *ModuleActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *ModuleActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ModuleActivity) GetClassUid() enums.MODULE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.MODULE_ACTIVITY_CLASS_UID(0)
}

func (x *ModuleActivity) GetCategoryUid() enums.MODULE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.MODULE_ACTIVITY_CATEGORY_UID(0)
}

func (x *ModuleActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *ModuleActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ModuleActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ModuleActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ModuleActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ModuleActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModuleActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ModuleActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ModuleActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *ModuleActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *ModuleActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *ModuleActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *ModuleActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ModuleActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *ModuleActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ModuleActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ModuleActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ModuleActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ModuleActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *ModuleActivity) GetActivityId() enums.MODULE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.MODULE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *ModuleActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ModuleActivity) GetSeverityId() enums.MODULE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.MODULE_ACTIVITY_SEVERITY_ID(0)
}

func (x *ModuleActivity) GetDispositionId() enums.MODULE_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.MODULE_ACTIVITY_DISPOSITION_ID(0)
}

var File_ocsf_v1_0_0_events_system_system_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_system_system_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x1a, 0x2b, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x87, 0x0d, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x57,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x54, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0xa1, 0x0f,
	0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x66, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x22, 0x98, 0x0f, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x68, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x52, 0x65, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6e, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x0f, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x52,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x64, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x10, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x58, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x6f, 0x0a, 0x11,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0f, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x0e, 0x0a, 0x0f,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x55,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x83, 0x0e, 0x0a, 0x0e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52,
	0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x57, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x57, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0xb1, 0x0e, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x64, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0xdb, 0x0f, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x52, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x63, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6c, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x5a, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x22, 0xa3, 0x0e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x83, 0x0e,
	0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x60, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0xee, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73,
	0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xa2, 0x02, 0x04, 0x4f, 0x56, 0x45, 0x53, 0xaa, 0x02, 0x17,
	0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xca, 0x02, 0x17, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56,
	0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0xe2, 0x02, 0x23, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a,
	0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_system_system_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_system_system_proto_rawDescData = file_ocsf_v1_0_0_events_system_system_proto_rawDesc
)

func file_ocsf_v1_0_0_events_system_system_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_system_system_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_system_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_system_system_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_system_system_proto_rawDescData
}

var file_ocsf_v1_0_0_events_system_system_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_ocsf_v1_0_0_events_system_system_proto_goTypes = []interface{}{
	(*System)(nil),                                    // 0: ocsf.v1_0_0.events.system.System
	(*MemoryActivity)(nil),                            // 1: ocsf.v1_0_0.events.system.MemoryActivity
	(*RegistryValueActivity)(nil),                     // 2: ocsf.v1_0_0.events.system.RegistryValueActivity
	(*FileActivity)(nil),                              // 3: ocsf.v1_0_0.events.system.FileActivity
	(*ProcessActivity)(nil),                           // 4: ocsf.v1_0_0.events.system.ProcessActivity
	(*KernelExtension)(nil),                           // 5: ocsf.v1_0_0.events.system.KernelExtension
	(*KernelActivity)(nil),                            // 6: ocsf.v1_0_0.events.system.KernelActivity
	(*ScheduledJobActivity)(nil),                      // 7: ocsf.v1_0_0.events.system.ScheduledJobActivity
	(*RegistryKeyActivity)(nil),                       // 8: ocsf.v1_0_0.events.system.RegistryKeyActivity
	(*ResourceActivity)(nil),                          // 9: ocsf.v1_0_0.events.system.ResourceActivity
	(*ModuleActivity)(nil),                            // 10: ocsf.v1_0_0.events.system.ModuleActivity
	(enums.SYSTEM_CATEGORY_UID)(0),                    // 11: ocsf.v1_0_0.events.system.enums.SYSTEM_CATEGORY_UID
	(*objects.Enrichment)(nil),                        // 12: ocsf.v1_0_0.objects.Enrichment
	(*objects.Cloud)(nil),                             // 13: ocsf.v1_0_0.objects.Cloud
	(*objects.Device)(nil),                            // 14: ocsf.v1_0_0.objects.Device
	(enums.SYSTEM_STATUS_ID)(0),                       // 15: ocsf.v1_0_0.events.system.enums.SYSTEM_STATUS_ID
	(*objects.Malware)(nil),                           // 16: ocsf.v1_0_0.objects.Malware
	(*objects.Metadata)(nil),                          // 17: ocsf.v1_0_0.objects.Metadata
	(*objects.Attack)(nil),                            // 18: ocsf.v1_0_0.objects.Attack
	(*objects.Observable)(nil),                        // 19: ocsf.v1_0_0.objects.Observable
	(enums.SYSTEM_SEVERITY_ID)(0),                     // 20: ocsf.v1_0_0.events.system.enums.SYSTEM_SEVERITY_ID
	(*objects.Api)(nil),                               // 21: ocsf.v1_0_0.objects.Api
	(enums.SYSTEM_ACTIVITY_ID)(0),                     // 22: ocsf.v1_0_0.events.system.enums.SYSTEM_ACTIVITY_ID
	(*objects.Actor)(nil),                             // 23: ocsf.v1_0_0.objects.Actor
	(enums.SYSTEM_DISPOSITION_ID)(0),                  // 24: ocsf.v1_0_0.events.system.enums.SYSTEM_DISPOSITION_ID
	(enums.SYSTEM_CLASS_UID)(0),                       // 25: ocsf.v1_0_0.events.system.enums.SYSTEM_CLASS_UID
	(enums.SYSTEM_TYPE_UID)(0),                        // 26: ocsf.v1_0_0.events.system.enums.SYSTEM_TYPE_UID
	(*objects.Object)(nil),                            // 27: ocsf.v1_0_0.objects.Object
	(enums.MEMORY_ACTIVITY_CATEGORY_UID)(0),           // 28: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CATEGORY_UID
	(enums.MEMORY_ACTIVITY_DISPOSITION_ID)(0),         // 29: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_DISPOSITION_ID
	(enums.MEMORY_ACTIVITY_SEVERITY_ID)(0),            // 30: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_SEVERITY_ID
	(enums.MEMORY_ACTIVITY_TYPE_UID)(0),               // 31: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_TYPE_UID
	(enums.MEMORY_ACTIVITY_ACTIVITY_ID)(0),            // 32: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_ACTIVITY_ID
	(*objects.Process)(nil),                           // 33: ocsf.v1_0_0.objects.Process
	(enums.MEMORY_ACTIVITY_CLASS_UID)(0),              // 34: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CLASS_UID
	(enums.MEMORY_ACTIVITY_STATUS_ID)(0),              // 35: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_STATUS_ID
	(enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID)(0),    // 36: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID
	(enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID)(0),   // 37: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID
	(enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID)(0),    // 38: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID
	(enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID)(0),       // 39: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID
	(*objects.RegistryValue)(nil),                     // 40: ocsf.v1_0_0.objects.RegistryValue
	(enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID)(0),      // 41: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID
	(enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID)(0), // 42: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID
	(enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID)(0),      // 43: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID
	(*objects.File)(nil),                              // 44: ocsf.v1_0_0.objects.File
	(enums.FILE_ACTIVITY_STATUS_ID)(0),                // 45: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_STATUS_ID
	(enums.FILE_ACTIVITY_ACTIVITY_ID)(0),              // 46: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_ACTIVITY_ID
	(enums.FILE_ACTIVITY_TYPE_UID)(0),                 // 47: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_TYPE_UID
	(enums.FILE_ACTIVITY_DISPOSITION_ID)(0),           // 48: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_DISPOSITION_ID
	(enums.FILE_ACTIVITY_CATEGORY_UID)(0),             // 49: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CATEGORY_UID
	(enums.FILE_ACTIVITY_SEVERITY_ID)(0),              // 50: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_SEVERITY_ID
	(enums.FILE_ACTIVITY_CLASS_UID)(0),                // 51: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CLASS_UID
	(enums.PROCESS_ACTIVITY_STATUS_ID)(0),             // 52: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_STATUS_ID
	(enums.PROCESS_ACTIVITY_DISPOSITION_ID)(0),        // 53: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_DISPOSITION_ID
	(enums.PROCESS_ACTIVITY_SEVERITY_ID)(0),           // 54: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_SEVERITY_ID
	(*objects.Module)(nil),                            // 55: ocsf.v1_0_0.objects.Module
	(enums.PROCESS_ACTIVITY_CLASS_UID)(0),             // 56: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CLASS_UID
	(enums.PROCESS_ACTIVITY_ACTIVITY_ID)(0),           // 57: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_ACTIVITY_ID
	(enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID)(0),     // 58: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID
	(enums.PROCESS_ACTIVITY_CATEGORY_UID)(0),          // 59: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CATEGORY_UID
	(enums.PROCESS_ACTIVITY_TYPE_UID)(0),              // 60: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_TYPE_UID
	(enums.KERNEL_EXTENSION_SEVERITY_ID)(0),           // 61: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_SEVERITY_ID
	(enums.KERNEL_EXTENSION_STATUS_ID)(0),             // 62: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_STATUS_ID
	(enums.KERNEL_EXTENSION_CLASS_UID)(0),             // 63: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CLASS_UID
	(enums.KERNEL_EXTENSION_CATEGORY_UID)(0),          // 64: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CATEGORY_UID
	(enums.KERNEL_EXTENSION_ACTIVITY_ID)(0),           // 65: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_ACTIVITY_ID
	(enums.KERNEL_EXTENSION_DISPOSITION_ID)(0),        // 66: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_DISPOSITION_ID
	(enums.KERNEL_EXTENSION_TYPE_UID)(0),              // 67: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_TYPE_UID
	(*objects.KernelDriver)(nil),                      // 68: ocsf.v1_0_0.objects.KernelDriver
	(*objects.Kernel)(nil),                            // 69: ocsf.v1_0_0.objects.Kernel
	(enums.KERNEL_ACTIVITY_ACTIVITY_ID)(0),            // 70: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_ACTIVITY_ID
	(enums.KERNEL_ACTIVITY_SEVERITY_ID)(0),            // 71: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_SEVERITY_ID
	(enums.KERNEL_ACTIVITY_DISPOSITION_ID)(0),         // 72: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_DISPOSITION_ID
	(enums.KERNEL_ACTIVITY_CLASS_UID)(0),              // 73: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CLASS_UID
	(enums.KERNEL_ACTIVITY_CATEGORY_UID)(0),           // 74: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CATEGORY_UID
	(enums.KERNEL_ACTIVITY_TYPE_UID)(0),               // 75: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_TYPE_UID
	(enums.KERNEL_ACTIVITY_STATUS_ID)(0),              // 76: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_STATUS_ID
	(*objects.Job)(nil),                               // 77: ocsf.v1_0_0.objects.Job
	(enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID)(0),       // 78: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID
	(enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID)(0),       // 79: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID
	(enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID)(0),    // 80: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID
	(enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID)(0),  // 81: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID
	(enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID)(0),     // 82: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID
	(enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID)(0),        // 83: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID
	(enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID)(0),     // 84: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID
	(*objects.RegistryKey)(nil),                       // 85: ocsf.v1_0_0.objects.RegistryKey
	(enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID)(0),      // 86: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID
	(enums.REGISTRY_KEY_ACTIVITY_STATUS_ID)(0),        // 87: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_STATUS_ID
	(enums.REGISTRY_KEY_ACTIVITY_CLASS_UID)(0),        // 88: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CLASS_UID
	(enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID)(0),   // 89: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID
	(enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID)(0),     // 90: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID
	(enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID)(0),      // 91: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID
	(enums.REGISTRY_KEY_ACTIVITY_TYPE_UID)(0),         // 92: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_TYPE_UID
	(enums.RESOURCE_ACTIVITY_ACTIVITY_ID)(0),          // 93: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_ACTIVITY_ID
	(enums.RESOURCE_ACTIVITY_TYPE_UID)(0),             // 94: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_TYPE_UID
	(enums.RESOURCE_ACTIVITY_CATEGORY_UID)(0),         // 95: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CATEGORY_UID
	(enums.RESOURCE_ACTIVITY_CLASS_UID)(0),            // 96: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CLASS_UID
	(enums.RESOURCE_ACTIVITY_DISPOSITION_ID)(0),       // 97: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_DISPOSITION_ID
	(enums.RESOURCE_ACTIVITY_STATUS_ID)(0),            // 98: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_STATUS_ID
	(*objects.WinResource)(nil),                       // 99: ocsf.v1_0_0.objects.WinResource
	(enums.RESOURCE_ACTIVITY_SEVERITY_ID)(0),          // 100: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_SEVERITY_ID
	(enums.MODULE_ACTIVITY_TYPE_UID)(0),               // 101: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_TYPE_UID
	(enums.MODULE_ACTIVITY_STATUS_ID)(0),              // 102: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_STATUS_ID
	(enums.MODULE_ACTIVITY_CLASS_UID)(0),              // 103: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CLASS_UID
	(enums.MODULE_ACTIVITY_CATEGORY_UID)(0),           // 104: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CATEGORY_UID
	(enums.MODULE_ACTIVITY_ACTIVITY_ID)(0),            // 105: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_ACTIVITY_ID
	(enums.MODULE_ACTIVITY_SEVERITY_ID)(0),            // 106: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_SEVERITY_ID
	(enums.MODULE_ACTIVITY_DISPOSITION_ID)(0),         // 107: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_DISPOSITION_ID
}
var file_ocsf_v1_0_0_events_system_system_proto_depIdxs = []int32{
	11,  // 0: ocsf.v1_0_0.events.system.System.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_CATEGORY_UID
	12,  // 1: ocsf.v1_0_0.events.system.System.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	13,  // 2: ocsf.v1_0_0.events.system.System.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	14,  // 3: ocsf.v1_0_0.events.system.System.device:type_name -> ocsf.v1_0_0.objects.Device
	15,  // 4: ocsf.v1_0_0.events.system.System.status_id:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_STATUS_ID
	16,  // 5: ocsf.v1_0_0.events.system.System.malware:type_name -> ocsf.v1_0_0.objects.Malware
	17,  // 6: ocsf.v1_0_0.events.system.System.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	18,  // 7: ocsf.v1_0_0.events.system.System.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	19,  // 8: ocsf.v1_0_0.events.system.System.observables:type_name -> ocsf.v1_0_0.objects.Observable
	20,  // 9: ocsf.v1_0_0.events.system.System.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_SEVERITY_ID
	21,  // 10: ocsf.v1_0_0.events.system.System.api:type_name -> ocsf.v1_0_0.objects.Api
	22,  // 11: ocsf.v1_0_0.events.system.System.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_ACTIVITY_ID
	23,  // 12: ocsf.v1_0_0.events.system.System.actor:type_name -> ocsf.v1_0_0.objects.Actor
	24,  // 13: ocsf.v1_0_0.events.system.System.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_DISPOSITION_ID
	25,  // 14: ocsf.v1_0_0.events.system.System.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_CLASS_UID
	26,  // 15: ocsf.v1_0_0.events.system.System.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.SYSTEM_TYPE_UID
	27,  // 16: ocsf.v1_0_0.events.system.System.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	28,  // 17: ocsf.v1_0_0.events.system.MemoryActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CATEGORY_UID
	16,  // 18: ocsf.v1_0_0.events.system.MemoryActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	29,  // 19: ocsf.v1_0_0.events.system.MemoryActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_DISPOSITION_ID
	27,  // 20: ocsf.v1_0_0.events.system.MemoryActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	12,  // 21: ocsf.v1_0_0.events.system.MemoryActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	23,  // 22: ocsf.v1_0_0.events.system.MemoryActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	30,  // 23: ocsf.v1_0_0.events.system.MemoryActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_SEVERITY_ID
	21,  // 24: ocsf.v1_0_0.events.system.MemoryActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	14,  // 25: ocsf.v1_0_0.events.system.MemoryActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	17,  // 26: ocsf.v1_0_0.events.system.MemoryActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	18,  // 27: ocsf.v1_0_0.events.system.MemoryActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	31,  // 28: ocsf.v1_0_0.events.system.MemoryActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_TYPE_UID
	32,  // 29: ocsf.v1_0_0.events.system.MemoryActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_ACTIVITY_ID
	33,  // 30: ocsf.v1_0_0.events.system.MemoryActivity.process:type_name -> ocsf.v1_0_0.objects.Process
	13,  // 31: ocsf.v1_0_0.events.system.MemoryActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	19,  // 32: ocsf.v1_0_0.events.system.MemoryActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	34,  // 33: ocsf.v1_0_0.events.system.MemoryActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CLASS_UID
	35,  // 34: ocsf.v1_0_0.events.system.MemoryActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_STATUS_ID
	14,  // 35: ocsf.v1_0_0.events.system.RegistryValueActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	36,  // 36: ocsf.v1_0_0.events.system.RegistryValueActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID
	12,  // 37: ocsf.v1_0_0.events.system.RegistryValueActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	37,  // 38: ocsf.v1_0_0.events.system.RegistryValueActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID
	38,  // 39: ocsf.v1_0_0.events.system.RegistryValueActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID
	19,  // 40: ocsf.v1_0_0.events.system.RegistryValueActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	18,  // 41: ocsf.v1_0_0.events.system.RegistryValueActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	39,  // 42: ocsf.v1_0_0.events.system.RegistryValueActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID
	40,  // 43: ocsf.v1_0_0.events.system.RegistryValueActivity.reg_value:type_name -> ocsf.v1_0_0.objects.RegistryValue
	40,  // 44: ocsf.v1_0_0.events.system.RegistryValueActivity.prev_reg_value:type_name -> ocsf.v1_0_0.objects.RegistryValue
	17,  // 45: ocsf.v1_0_0.events.system.RegistryValueActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	21,  // 46: ocsf.v1_0_0.events.system.RegistryValueActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	23,  // 47: ocsf.v1_0_0.events.system.RegistryValueActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	41,  // 48: ocsf.v1_0_0.events.system.RegistryValueActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID
	16,  // 49: ocsf.v1_0_0.events.system.RegistryValueActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	27,  // 50: ocsf.v1_0_0.events.system.RegistryValueActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	42,  // 51: ocsf.v1_0_0.events.system.RegistryValueActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID
	43,  // 52: ocsf.v1_0_0.events.system.RegistryValueActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID
	13,  // 53: ocsf.v1_0_0.events.system.RegistryValueActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	44,  // 54: ocsf.v1_0_0.events.system.FileActivity.file_result:type_name -> ocsf.v1_0_0.objects.File
	23,  // 55: ocsf.v1_0_0.events.system.FileActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	27,  // 56: ocsf.v1_0_0.events.system.FileActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	45,  // 57: ocsf.v1_0_0.events.system.FileActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_STATUS_ID
	46,  // 58: ocsf.v1_0_0.events.system.FileActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_ACTIVITY_ID
	13,  // 59: ocsf.v1_0_0.events.system.FileActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	18,  // 60: ocsf.v1_0_0.events.system.FileActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	44,  // 61: ocsf.v1_0_0.events.system.FileActivity.file:type_name -> ocsf.v1_0_0.objects.File
	47,  // 62: ocsf.v1_0_0.events.system.FileActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_TYPE_UID
	48,  // 63: ocsf.v1_0_0.events.system.FileActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_DISPOSITION_ID
	14,  // 64: ocsf.v1_0_0.events.system.FileActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	49,  // 65: ocsf.v1_0_0.events.system.FileActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CATEGORY_UID
	17,  // 66: ocsf.v1_0_0.events.system.FileActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	19,  // 67: ocsf.v1_0_0.events.system.FileActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	50,  // 68: ocsf.v1_0_0.events.system.FileActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_SEVERITY_ID
	21,  // 69: ocsf.v1_0_0.events.system.FileActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	51,  // 70: ocsf.v1_0_0.events.system.FileActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CLASS_UID
	12,  // 71: ocsf.v1_0_0.events.system.FileActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	16,  // 72: ocsf.v1_0_0.events.system.FileActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	52,  // 73: ocsf.v1_0_0.events.system.ProcessActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_STATUS_ID
	18,  // 74: ocsf.v1_0_0.events.system.ProcessActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	53,  // 75: ocsf.v1_0_0.events.system.ProcessActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_DISPOSITION_ID
	13,  // 76: ocsf.v1_0_0.events.system.ProcessActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	14,  // 77: ocsf.v1_0_0.events.system.ProcessActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	54,  // 78: ocsf.v1_0_0.events.system.ProcessActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_SEVERITY_ID
	27,  // 79: ocsf.v1_0_0.events.system.ProcessActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	55,  // 80: ocsf.v1_0_0.events.system.ProcessActivity.module:type_name -> ocsf.v1_0_0.objects.Module
	21,  // 81: ocsf.v1_0_0.events.system.ProcessActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	56,  // 82: ocsf.v1_0_0.events.system.ProcessActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CLASS_UID
	23,  // 83: ocsf.v1_0_0.events.system.ProcessActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	33,  // 84: ocsf.v1_0_0.events.system.ProcessActivity.process:type_name -> ocsf.v1_0_0.objects.Process
	57,  // 85: ocsf.v1_0_0.events.system.ProcessActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_ACTIVITY_ID
	58,  // 86: ocsf.v1_0_0.events.system.ProcessActivity.injection_type_id:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID
	17,  // 87: ocsf.v1_0_0.events.system.ProcessActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	16,  // 88: ocsf.v1_0_0.events.system.ProcessActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	59,  // 89: ocsf.v1_0_0.events.system.ProcessActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CATEGORY_UID
	12,  // 90: ocsf.v1_0_0.events.system.ProcessActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	60,  // 91: ocsf.v1_0_0.events.system.ProcessActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_TYPE_UID
	19,  // 92: ocsf.v1_0_0.events.system.ProcessActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	61,  // 93: ocsf.v1_0_0.events.system.KernelExtension.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_SEVERITY_ID
	17,  // 94: ocsf.v1_0_0.events.system.KernelExtension.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	62,  // 95: ocsf.v1_0_0.events.system.KernelExtension.status_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_STATUS_ID
	18,  // 96: ocsf.v1_0_0.events.system.KernelExtension.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	63,  // 97: ocsf.v1_0_0.events.system.KernelExtension.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CLASS_UID
	27,  // 98: ocsf.v1_0_0.events.system.KernelExtension.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	21,  // 99: ocsf.v1_0_0.events.system.KernelExtension.api:type_name -> ocsf.v1_0_0.objects.Api
	12,  // 100: ocsf.v1_0_0.events.system.KernelExtension.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	16,  // 101: ocsf.v1_0_0.events.system.KernelExtension.malware:type_name -> ocsf.v1_0_0.objects.Malware
	13,  // 102: ocsf.v1_0_0.events.system.KernelExtension.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 103: ocsf.v1_0_0.events.system.KernelExtension.actor:type_name -> ocsf.v1_0_0.objects.Actor
	64,  // 104: ocsf.v1_0_0.events.system.KernelExtension.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CATEGORY_UID
	65,  // 105: ocsf.v1_0_0.events.system.KernelExtension.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_ACTIVITY_ID
	14,  // 106: ocsf.v1_0_0.events.system.KernelExtension.device:type_name -> ocsf.v1_0_0.objects.Device
	66,  // 107: ocsf.v1_0_0.events.system.KernelExtension.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_DISPOSITION_ID
	67,  // 108: ocsf.v1_0_0.events.system.KernelExtension.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_TYPE_UID
	19,  // 109: ocsf.v1_0_0.events.system.KernelExtension.observables:type_name -> ocsf.v1_0_0.objects.Observable
	68,  // 110: ocsf.v1_0_0.events.system.KernelExtension.driver:type_name -> ocsf.v1_0_0.objects.KernelDriver
	69,  // 111: ocsf.v1_0_0.events.system.KernelActivity.kernel:type_name -> ocsf.v1_0_0.objects.Kernel
	23,  // 112: ocsf.v1_0_0.events.system.KernelActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	19,  // 113: ocsf.v1_0_0.events.system.KernelActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	14,  // 114: ocsf.v1_0_0.events.system.KernelActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	70,  // 115: ocsf.v1_0_0.events.system.KernelActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_ACTIVITY_ID
	71,  // 116: ocsf.v1_0_0.events.system.KernelActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_SEVERITY_ID
	72,  // 117: ocsf.v1_0_0.events.system.KernelActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_DISPOSITION_ID
	21,  // 118: ocsf.v1_0_0.events.system.KernelActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	73,  // 119: ocsf.v1_0_0.events.system.KernelActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CLASS_UID
	74,  // 120: ocsf.v1_0_0.events.system.KernelActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CATEGORY_UID
	16,  // 121: ocsf.v1_0_0.events.system.KernelActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	17,  // 122: ocsf.v1_0_0.events.system.KernelActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	18,  // 123: ocsf.v1_0_0.events.system.KernelActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	75,  // 124: ocsf.v1_0_0.events.system.KernelActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_TYPE_UID
	27,  // 125: ocsf.v1_0_0.events.system.KernelActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	12,  // 126: ocsf.v1_0_0.events.system.KernelActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	13,  // 127: ocsf.v1_0_0.events.system.KernelActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	76,  // 128: ocsf.v1_0_0.events.system.KernelActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_STATUS_ID
	16,  // 129: ocsf.v1_0_0.events.system.ScheduledJobActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	77,  // 130: ocsf.v1_0_0.events.system.ScheduledJobActivity.job:type_name -> ocsf.v1_0_0.objects.Job
	78,  // 131: ocsf.v1_0_0.events.system.ScheduledJobActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID
	12,  // 132: ocsf.v1_0_0.events.system.ScheduledJobActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	23,  // 133: ocsf.v1_0_0.events.system.ScheduledJobActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	17,  // 134: ocsf.v1_0_0.events.system.ScheduledJobActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	79,  // 135: ocsf.v1_0_0.events.system.ScheduledJobActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID
	80,  // 136: ocsf.v1_0_0.events.system.ScheduledJobActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID
	18,  // 137: ocsf.v1_0_0.events.system.ScheduledJobActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	81,  // 138: ocsf.v1_0_0.events.system.ScheduledJobActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID
	19,  // 139: ocsf.v1_0_0.events.system.ScheduledJobActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	27,  // 140: ocsf.v1_0_0.events.system.ScheduledJobActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	82,  // 141: ocsf.v1_0_0.events.system.ScheduledJobActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID
	83,  // 142: ocsf.v1_0_0.events.system.ScheduledJobActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID
	13,  // 143: ocsf.v1_0_0.events.system.ScheduledJobActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	14,  // 144: ocsf.v1_0_0.events.system.ScheduledJobActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	84,  // 145: ocsf.v1_0_0.events.system.ScheduledJobActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID
	21,  // 146: ocsf.v1_0_0.events.system.ScheduledJobActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	85,  // 147: ocsf.v1_0_0.events.system.RegistryKeyActivity.prev_reg_key:type_name -> ocsf.v1_0_0.objects.RegistryKey
	19,  // 148: ocsf.v1_0_0.events.system.RegistryKeyActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	16,  // 149: ocsf.v1_0_0.events.system.RegistryKeyActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	86,  // 150: ocsf.v1_0_0.events.system.RegistryKeyActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID
	12,  // 151: ocsf.v1_0_0.events.system.RegistryKeyActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	87,  // 152: ocsf.v1_0_0.events.system.RegistryKeyActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_STATUS_ID
	85,  // 153: ocsf.v1_0_0.events.system.RegistryKeyActivity.reg_key:type_name -> ocsf.v1_0_0.objects.RegistryKey
	13,  // 154: ocsf.v1_0_0.events.system.RegistryKeyActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	88,  // 155: ocsf.v1_0_0.events.system.RegistryKeyActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CLASS_UID
	14,  // 156: ocsf.v1_0_0.events.system.RegistryKeyActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	17,  // 157: ocsf.v1_0_0.events.system.RegistryKeyActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	18,  // 158: ocsf.v1_0_0.events.system.RegistryKeyActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	89,  // 159: ocsf.v1_0_0.events.system.RegistryKeyActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID
	27,  // 160: ocsf.v1_0_0.events.system.RegistryKeyActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	90,  // 161: ocsf.v1_0_0.events.system.RegistryKeyActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID
	23,  // 162: ocsf.v1_0_0.events.system.RegistryKeyActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	91,  // 163: ocsf.v1_0_0.events.system.RegistryKeyActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID
	21,  // 164: ocsf.v1_0_0.events.system.RegistryKeyActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	92,  // 165: ocsf.v1_0_0.events.system.RegistryKeyActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_TYPE_UID
	93,  // 166: ocsf.v1_0_0.events.system.ResourceActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_ACTIVITY_ID
	94,  // 167: ocsf.v1_0_0.events.system.ResourceActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_TYPE_UID
	18,  // 168: ocsf.v1_0_0.events.system.ResourceActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	95,  // 169: ocsf.v1_0_0.events.system.ResourceActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CATEGORY_UID
	96,  // 170: ocsf.v1_0_0.events.system.ResourceActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CLASS_UID
	21,  // 171: ocsf.v1_0_0.events.system.ResourceActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	12,  // 172: ocsf.v1_0_0.events.system.ResourceActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	13,  // 173: ocsf.v1_0_0.events.system.ResourceActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 174: ocsf.v1_0_0.events.system.ResourceActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	19,  // 175: ocsf.v1_0_0.events.system.ResourceActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	27,  // 176: ocsf.v1_0_0.events.system.ResourceActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	16,  // 177: ocsf.v1_0_0.events.system.ResourceActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	97,  // 178: ocsf.v1_0_0.events.system.ResourceActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_DISPOSITION_ID
	14,  // 179: ocsf.v1_0_0.events.system.ResourceActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	98,  // 180: ocsf.v1_0_0.events.system.ResourceActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_STATUS_ID
	99,  // 181: ocsf.v1_0_0.events.system.ResourceActivity.win_resource:type_name -> ocsf.v1_0_0.objects.WinResource
	17,  // 182: ocsf.v1_0_0.events.system.ResourceActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	100, // 183: ocsf.v1_0_0.events.system.ResourceActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_SEVERITY_ID
	101, // 184: ocsf.v1_0_0.events.system.ModuleActivity.type_uid:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_TYPE_UID
	27,  // 185: ocsf.v1_0_0.events.system.ModuleActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	55,  // 186: ocsf.v1_0_0.events.system.ModuleActivity.module:type_name -> ocsf.v1_0_0.objects.Module
	102, // 187: ocsf.v1_0_0.events.system.ModuleActivity.status_id:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_STATUS_ID
	16,  // 188: ocsf.v1_0_0.events.system.ModuleActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	103, // 189: ocsf.v1_0_0.events.system.ModuleActivity.class_uid:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CLASS_UID
	104, // 190: ocsf.v1_0_0.events.system.ModuleActivity.category_uid:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CATEGORY_UID
	12,  // 191: ocsf.v1_0_0.events.system.ModuleActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	14,  // 192: ocsf.v1_0_0.events.system.ModuleActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	21,  // 193: ocsf.v1_0_0.events.system.ModuleActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	18,  // 194: ocsf.v1_0_0.events.system.ModuleActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	19,  // 195: ocsf.v1_0_0.events.system.ModuleActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	13,  // 196: ocsf.v1_0_0.events.system.ModuleActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 197: ocsf.v1_0_0.events.system.ModuleActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	17,  // 198: ocsf.v1_0_0.events.system.ModuleActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	105, // 199: ocsf.v1_0_0.events.system.ModuleActivity.activity_id:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_ACTIVITY_ID
	106, // 200: ocsf.v1_0_0.events.system.ModuleActivity.severity_id:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_SEVERITY_ID
	107, // 201: ocsf.v1_0_0.events.system.ModuleActivity.disposition_id:type_name -> ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_DISPOSITION_ID
	202, // [202:202] is the sub-list for method output_type
	202, // [202:202] is the sub-list for method input_type
	202, // [202:202] is the sub-list for extension type_name
	202, // [202:202] is the sub-list for extension extendee
	0,   // [0:202] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_system_system_proto_init() }
func file_ocsf_v1_0_0_events_system_system_proto_init() {
	if File_ocsf_v1_0_0_events_system_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryValueActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledJobActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryKeyActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_system_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_system_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_system_system_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_system_system_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_0_0_events_system_system_proto_msgTypes,
	}.Build()
	File_ocsf_v1_0_0_events_system_system_proto = out.File
	file_ocsf_v1_0_0_events_system_system_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_system_system_proto_goTypes = nil
	file_ocsf_v1_0_0_events_system_system_proto_depIdxs = nil
}
