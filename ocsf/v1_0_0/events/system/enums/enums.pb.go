// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/system/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SYSTEM_STATUS_ID int32

const (
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_UNKNOWN SYSTEM_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_FAILURE SYSTEM_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_OTHER   SYSTEM_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	SYSTEM_STATUS_ID_SYSTEM_STATUS_ID_SUCCESS SYSTEM_STATUS_ID = 3 // EnumValue: 1; Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_STATUS_ID.
var (
	SYSTEM_STATUS_ID_name = map[int32]string{
		0: "SYSTEM_STATUS_ID_UNKNOWN",
		1: "SYSTEM_STATUS_ID_FAILURE",
		2: "SYSTEM_STATUS_ID_OTHER",
		3: "SYSTEM_STATUS_ID_SUCCESS",
	}
	SYSTEM_STATUS_ID_value = map[string]int32{
		"SYSTEM_STATUS_ID_UNKNOWN": 0,
		"SYSTEM_STATUS_ID_FAILURE": 1,
		"SYSTEM_STATUS_ID_OTHER":   2,
		"SYSTEM_STATUS_ID_SUCCESS": 3,
	}
)

func (x SYSTEM_STATUS_ID) Enum() *SYSTEM_STATUS_ID {
	p := new(SYSTEM_STATUS_ID)
	*p = x
	return p
}

func (x SYSTEM_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[0].Descriptor()
}

func (SYSTEM_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[0]
}

func (x SYSTEM_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_STATUS_ID.Descriptor instead.
func (SYSTEM_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{0}
}

type SYSTEM_CLASS_UID int32

const (
	SYSTEM_CLASS_UID_SYSTEM_CLASS_UID_UNKNOWN         SYSTEM_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SYSTEM_CLASS_UID_SYSTEM_CLASS_UID_SYSTEM_ACTIVITY SYSTEM_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1000;
)

// Enum value maps for SYSTEM_CLASS_UID.
var (
	SYSTEM_CLASS_UID_name = map[int32]string{
		0: "SYSTEM_CLASS_UID_UNKNOWN",
		1: "SYSTEM_CLASS_UID_SYSTEM_ACTIVITY",
	}
	SYSTEM_CLASS_UID_value = map[string]int32{
		"SYSTEM_CLASS_UID_UNKNOWN":         0,
		"SYSTEM_CLASS_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x SYSTEM_CLASS_UID) Enum() *SYSTEM_CLASS_UID {
	p := new(SYSTEM_CLASS_UID)
	*p = x
	return p
}

func (x SYSTEM_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[1].Descriptor()
}

func (SYSTEM_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[1]
}

func (x SYSTEM_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_CLASS_UID.Descriptor instead.
func (SYSTEM_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{1}
}

type REGISTRY_VALUE_ACTIVITY_STATUS_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN REGISTRY_VALUE_ACTIVITY_STATUS_ID = 0 // EnumValue: 0; Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE REGISTRY_VALUE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER   REGISTRY_VALUE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS REGISTRY_VALUE_ACTIVITY_STATUS_ID = 3 // EnumValue: 1; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_STATUS_ID.
var (
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE",
		2: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER",
		3: "REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	REGISTRY_VALUE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_OTHER":   2,
		"REGISTRY_VALUE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) Enum() *REGISTRY_VALUE_ACTIVITY_STATUS_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[2].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[2]
}

func (x REGISTRY_VALUE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_STATUS_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{2}
}

type RESOURCE_ACTIVITY_CATEGORY_UID int32

const (
	RESOURCE_ACTIVITY_CATEGORY_UID_RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN         RESOURCE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	RESOURCE_ACTIVITY_CATEGORY_UID_RESOURCE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY RESOURCE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for RESOURCE_ACTIVITY_CATEGORY_UID.
var (
	RESOURCE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	RESOURCE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"RESOURCE_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"RESOURCE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x RESOURCE_ACTIVITY_CATEGORY_UID) Enum() *RESOURCE_ACTIVITY_CATEGORY_UID {
	p := new(RESOURCE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[3].Descriptor()
}

func (RESOURCE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[3]
}

func (x RESOURCE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (RESOURCE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{3}
}

type RESOURCE_ACTIVITY_CLASS_UID int32

const (
	RESOURCE_ACTIVITY_CLASS_UID_RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN                   RESOURCE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	RESOURCE_ACTIVITY_CLASS_UID_RESOURCE_ACTIVITY_CLASS_UID_WINDOWS_RESOURCE_ACTIVITY RESOURCE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1003;
)

// Enum value maps for RESOURCE_ACTIVITY_CLASS_UID.
var (
	RESOURCE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_CLASS_UID_WINDOWS_RESOURCE_ACTIVITY",
	}
	RESOURCE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"RESOURCE_ACTIVITY_CLASS_UID_UNKNOWN":                   0,
		"RESOURCE_ACTIVITY_CLASS_UID_WINDOWS_RESOURCE_ACTIVITY": 1,
	}
)

func (x RESOURCE_ACTIVITY_CLASS_UID) Enum() *RESOURCE_ACTIVITY_CLASS_UID {
	p := new(RESOURCE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[4].Descriptor()
}

func (RESOURCE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[4]
}

func (x RESOURCE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_CLASS_UID.Descriptor instead.
func (RESOURCE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{4}
}

type REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_DELETE  REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 1 // EnumValue: 4; Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_GET     REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_MODIFY  REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER   REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 99;
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_SET     REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID.
var (
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_DELETE",
		2: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_GET",
		3: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_MODIFY",
		4: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER",
		5: "REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_SET",
	}
	REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_DELETE":  1,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_GET":     2,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_MODIFY":  3,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_OTHER":   4,
		"REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID_SET":     5,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Enum() *REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[5].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[5]
}

func (x REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{5}
}

type KERNEL_ACTIVITY_STATUS_ID int32

const (
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_UNKNOWN KERNEL_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_FAILURE KERNEL_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_OTHER   KERNEL_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	KERNEL_ACTIVITY_STATUS_ID_KERNEL_ACTIVITY_STATUS_ID_SUCCESS KERNEL_ACTIVITY_STATUS_ID = 3 // EnumValue: 1; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_STATUS_ID.
var (
	KERNEL_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_STATUS_ID_FAILURE",
		2: "KERNEL_ACTIVITY_STATUS_ID_OTHER",
		3: "KERNEL_ACTIVITY_STATUS_ID_SUCCESS",
	}
	KERNEL_ACTIVITY_STATUS_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"KERNEL_ACTIVITY_STATUS_ID_FAILURE": 1,
		"KERNEL_ACTIVITY_STATUS_ID_OTHER":   2,
		"KERNEL_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x KERNEL_ACTIVITY_STATUS_ID) Enum() *KERNEL_ACTIVITY_STATUS_ID {
	p := new(KERNEL_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[6].Descriptor()
}

func (KERNEL_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[6]
}

func (x KERNEL_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_STATUS_ID.Descriptor instead.
func (KERNEL_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{6}
}

type KERNEL_EXTENSION_DISPOSITION_ID int32

const (
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN             KERNEL_EXTENSION_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED             KERNEL_EXTENSION_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_APPROVED            KERNEL_EXTENSION_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED             KERNEL_EXTENSION_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED           KERNEL_EXTENSION_DISPOSITION_ID = 4  // EnumValue: 11; Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION       KERNEL_EXTENSION_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DELAYED             KERNEL_EXTENSION_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DELETED             KERNEL_EXTENSION_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DETECTED            KERNEL_EXTENSION_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_DROPPED             KERNEL_EXTENSION_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED          KERNEL_EXTENSION_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED            KERNEL_EXTENSION_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_LOGGED              KERNEL_EXTENSION_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION           KERNEL_EXTENSION_DISPOSITION_ID = 13 // EnumValue: 16; Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_OTHER               KERNEL_EXTENSION_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED KERNEL_EXTENSION_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED         KERNEL_EXTENSION_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_RESTORED            KERNEL_EXTENSION_DISPOSITION_ID = 17 // EnumValue: 9; Type: OCSF_VALUE;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_TAGGED              KERNEL_EXTENSION_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	KERNEL_EXTENSION_DISPOSITION_ID_KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED         KERNEL_EXTENSION_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for KERNEL_EXTENSION_DISPOSITION_ID.
var (
	KERNEL_EXTENSION_DISPOSITION_ID_name = map[int32]string{
		0:  "KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN",
		1:  "KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED",
		2:  "KERNEL_EXTENSION_DISPOSITION_ID_APPROVED",
		3:  "KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED",
		4:  "KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED",
		5:  "KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "KERNEL_EXTENSION_DISPOSITION_ID_DELAYED",
		7:  "KERNEL_EXTENSION_DISPOSITION_ID_DELETED",
		8:  "KERNEL_EXTENSION_DISPOSITION_ID_DETECTED",
		9:  "KERNEL_EXTENSION_DISPOSITION_ID_DROPPED",
		10: "KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED",
		11: "KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED",
		12: "KERNEL_EXTENSION_DISPOSITION_ID_LOGGED",
		13: "KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION",
		14: "KERNEL_EXTENSION_DISPOSITION_ID_OTHER",
		15: "KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED",
		17: "KERNEL_EXTENSION_DISPOSITION_ID_RESTORED",
		18: "KERNEL_EXTENSION_DISPOSITION_ID_TAGGED",
		19: "KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED",
	}
	KERNEL_EXTENSION_DISPOSITION_ID_value = map[string]int32{
		"KERNEL_EXTENSION_DISPOSITION_ID_UNKNOWN":             0,
		"KERNEL_EXTENSION_DISPOSITION_ID_ALLOWED":             1,
		"KERNEL_EXTENSION_DISPOSITION_ID_APPROVED":            2,
		"KERNEL_EXTENSION_DISPOSITION_ID_BLOCKED":             3,
		"KERNEL_EXTENSION_DISPOSITION_ID_CORRECTED":           4,
		"KERNEL_EXTENSION_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"KERNEL_EXTENSION_DISPOSITION_ID_DELAYED":             6,
		"KERNEL_EXTENSION_DISPOSITION_ID_DELETED":             7,
		"KERNEL_EXTENSION_DISPOSITION_ID_DETECTED":            8,
		"KERNEL_EXTENSION_DISPOSITION_ID_DROPPED":             9,
		"KERNEL_EXTENSION_DISPOSITION_ID_EXONERATED":          10,
		"KERNEL_EXTENSION_DISPOSITION_ID_ISOLATED":            11,
		"KERNEL_EXTENSION_DISPOSITION_ID_LOGGED":              12,
		"KERNEL_EXTENSION_DISPOSITION_ID_NO_ACTION":           13,
		"KERNEL_EXTENSION_DISPOSITION_ID_OTHER":               14,
		"KERNEL_EXTENSION_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"KERNEL_EXTENSION_DISPOSITION_ID_QUARANTINED":         16,
		"KERNEL_EXTENSION_DISPOSITION_ID_RESTORED":            17,
		"KERNEL_EXTENSION_DISPOSITION_ID_TAGGED":              18,
		"KERNEL_EXTENSION_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x KERNEL_EXTENSION_DISPOSITION_ID) Enum() *KERNEL_EXTENSION_DISPOSITION_ID {
	p := new(KERNEL_EXTENSION_DISPOSITION_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[7].Descriptor()
}

func (KERNEL_EXTENSION_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[7]
}

func (x KERNEL_EXTENSION_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_DISPOSITION_ID.Descriptor instead.
func (KERNEL_EXTENSION_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{7}
}

type PROCESS_ACTIVITY_STATUS_ID int32

const (
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_UNKNOWN PROCESS_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_FAILURE PROCESS_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_OTHER   PROCESS_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	PROCESS_ACTIVITY_STATUS_ID_PROCESS_ACTIVITY_STATUS_ID_SUCCESS PROCESS_ACTIVITY_STATUS_ID = 3 // EnumValue: 1; Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_STATUS_ID.
var (
	PROCESS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_STATUS_ID_FAILURE",
		2: "PROCESS_ACTIVITY_STATUS_ID_OTHER",
		3: "PROCESS_ACTIVITY_STATUS_ID_SUCCESS",
	}
	PROCESS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"PROCESS_ACTIVITY_STATUS_ID_FAILURE": 1,
		"PROCESS_ACTIVITY_STATUS_ID_OTHER":   2,
		"PROCESS_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x PROCESS_ACTIVITY_STATUS_ID) Enum() *PROCESS_ACTIVITY_STATUS_ID {
	p := new(PROCESS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[8].Descriptor()
}

func (PROCESS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[8]
}

func (x PROCESS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_STATUS_ID.Descriptor instead.
func (PROCESS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{8}
}

type PROCESS_ACTIVITY_DISPOSITION_ID int32

const (
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN             PROCESS_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED             PROCESS_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED            PROCESS_ACTIVITY_DISPOSITION_ID = 2  // EnumValue: 8; Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED             PROCESS_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED           PROCESS_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       PROCESS_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED             PROCESS_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DELETED             PROCESS_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED            PROCESS_ACTIVITY_DISPOSITION_ID = 8  // EnumValue: 15; Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED             PROCESS_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED          PROCESS_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED            PROCESS_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED              PROCESS_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION           PROCESS_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_OTHER               PROCESS_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED PROCESS_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED         PROCESS_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED            PROCESS_ACTIVITY_DISPOSITION_ID = 17 // EnumValue: 9; Type: OCSF_VALUE;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED              PROCESS_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	PROCESS_ACTIVITY_DISPOSITION_ID_PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED         PROCESS_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for PROCESS_ACTIVITY_DISPOSITION_ID.
var (
	PROCESS_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "PROCESS_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "PROCESS_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	PROCESS_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"PROCESS_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"PROCESS_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"PROCESS_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"PROCESS_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"PROCESS_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"PROCESS_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"PROCESS_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"PROCESS_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"PROCESS_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"PROCESS_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"PROCESS_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"PROCESS_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"PROCESS_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"PROCESS_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"PROCESS_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"PROCESS_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x PROCESS_ACTIVITY_DISPOSITION_ID) Enum() *PROCESS_ACTIVITY_DISPOSITION_ID {
	p := new(PROCESS_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[9].Descriptor()
}

func (PROCESS_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[9]
}

func (x PROCESS_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (PROCESS_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{9}
}

type REGISTRY_VALUE_ACTIVITY_CATEGORY_UID int32

const (
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN         REGISTRY_VALUE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY REGISTRY_VALUE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_CATEGORY_UID.
var (
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"REGISTRY_VALUE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Enum() *REGISTRY_VALUE_ACTIVITY_CATEGORY_UID {
	p := new(REGISTRY_VALUE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[10].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[10]
}

func (x REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{10}
}

type PROCESS_ACTIVITY_CATEGORY_UID int32

const (
	PROCESS_ACTIVITY_CATEGORY_UID_PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN         PROCESS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_ACTIVITY_CATEGORY_UID_PROCESS_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY PROCESS_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for PROCESS_ACTIVITY_CATEGORY_UID.
var (
	PROCESS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "PROCESS_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	PROCESS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"PROCESS_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"PROCESS_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x PROCESS_ACTIVITY_CATEGORY_UID) Enum() *PROCESS_ACTIVITY_CATEGORY_UID {
	p := new(PROCESS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[11].Descriptor()
}

func (PROCESS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[11]
}

func (x PROCESS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (PROCESS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{11}
}

type MODULE_ACTIVITY_DISPOSITION_ID int32

const (
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN             MODULE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED             MODULE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_APPROVED            MODULE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED             MODULE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED           MODULE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       MODULE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DELAYED             MODULE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DELETED             MODULE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DETECTED            MODULE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_DROPPED             MODULE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED          MODULE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED            MODULE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_LOGGED              MODULE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION           MODULE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_OTHER               MODULE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED MODULE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED         MODULE_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 3; Type: OCSF_VALUE;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_RESTORED            MODULE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_TAGGED              MODULE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	MODULE_ACTIVITY_DISPOSITION_ID_MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         MODULE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for MODULE_ACTIVITY_DISPOSITION_ID.
var (
	MODULE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "MODULE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "MODULE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "MODULE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "MODULE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "MODULE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "MODULE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "MODULE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "MODULE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "MODULE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	MODULE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"MODULE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"MODULE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"MODULE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"MODULE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"MODULE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"MODULE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"MODULE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"MODULE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"MODULE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"MODULE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"MODULE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"MODULE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"MODULE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"MODULE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"MODULE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"MODULE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"MODULE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"MODULE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"MODULE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"MODULE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x MODULE_ACTIVITY_DISPOSITION_ID) Enum() *MODULE_ACTIVITY_DISPOSITION_ID {
	p := new(MODULE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[12].Descriptor()
}

func (MODULE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[12]
}

func (x MODULE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (MODULE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{12}
}

type SCHEDULED_JOB_ACTIVITY_SEVERITY_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN       SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL      SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL         SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH          SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW           SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM        SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER         SCHEDULED_JOB_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_SEVERITY_ID.
var (
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL",
		3: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH",
		4: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW",
		6: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_LOW":           5,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"SCHEDULED_JOB_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Enum() *SCHEDULED_JOB_ACTIVITY_SEVERITY_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[13].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[13]
}

func (x SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{13}
}

type KERNEL_ACTIVITY_CATEGORY_UID int32

const (
	KERNEL_ACTIVITY_CATEGORY_UID_KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN         KERNEL_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_ACTIVITY_CATEGORY_UID_KERNEL_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY KERNEL_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for KERNEL_ACTIVITY_CATEGORY_UID.
var (
	KERNEL_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "KERNEL_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	KERNEL_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"KERNEL_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"KERNEL_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x KERNEL_ACTIVITY_CATEGORY_UID) Enum() *KERNEL_ACTIVITY_CATEGORY_UID {
	p := new(KERNEL_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[14].Descriptor()
}

func (KERNEL_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[14]
}

func (x KERNEL_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (KERNEL_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{14}
}

type FILE_ACTIVITY_TYPE_UID int32

const (
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNKNOWN        FILE_ACTIVITY_TYPE_UID = 0  // Type: OCSF_VALUE; EnumValue: 100100;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_CREATE         FILE_ACTIVITY_TYPE_UID = 1  // Type: OCSF_VALUE; EnumValue: 100101;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DECRYPT        FILE_ACTIVITY_TYPE_UID = 2  // Type: OCSF_VALUE; EnumValue: 100111;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DELETE         FILE_ACTIVITY_TYPE_UID = 3  // Type: OCSF_VALUE; EnumValue: 100104;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_ENCRYPT        FILE_ACTIVITY_TYPE_UID = 4  // Type: OCSF_VALUE; EnumValue: 100110;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_ATTRIBUTES FILE_ACTIVITY_TYPE_UID = 5  // Type: OCSF_VALUE; EnumValue: 100108;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_SECURITY   FILE_ACTIVITY_TYPE_UID = 6  // Type: OCSF_VALUE; EnumValue: 100109;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_MOUNT          FILE_ACTIVITY_TYPE_UID = 7  // Type: OCSF_VALUE; EnumValue: 100112;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OPEN           FILE_ACTIVITY_TYPE_UID = 8  // Type: OCSF_VALUE; EnumValue: 100114;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OTHER          FILE_ACTIVITY_TYPE_UID = 9  // Type: OCSF_VALUE; EnumValue: 100199;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_READ           FILE_ACTIVITY_TYPE_UID = 10 // Type: OCSF_VALUE; EnumValue: 100102;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_RENAME         FILE_ACTIVITY_TYPE_UID = 11 // Type: OCSF_VALUE; EnumValue: 100105;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_ATTRIBUTES FILE_ACTIVITY_TYPE_UID = 12 // Type: OCSF_VALUE; EnumValue: 100106;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_SECURITY   FILE_ACTIVITY_TYPE_UID = 13 // Type: OCSF_VALUE; EnumValue: 100107;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNMOUNT        FILE_ACTIVITY_TYPE_UID = 14 // Type: OCSF_VALUE; EnumValue: 100113;
	FILE_ACTIVITY_TYPE_UID_FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UPDATE         FILE_ACTIVITY_TYPE_UID = 15 // Type: OCSF_VALUE; EnumValue: 100103;
)

// Enum value maps for FILE_ACTIVITY_TYPE_UID.
var (
	FILE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNKNOWN",
		1:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_CREATE",
		2:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DECRYPT",
		3:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DELETE",
		4:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_ENCRYPT",
		5:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_ATTRIBUTES",
		6:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_SECURITY",
		7:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_MOUNT",
		8:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OPEN",
		9:  "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OTHER",
		10: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_READ",
		11: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_RENAME",
		12: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_ATTRIBUTES",
		13: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_SECURITY",
		14: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNMOUNT",
		15: "FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UPDATE",
	}
	FILE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNKNOWN":        0,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_CREATE":         1,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DECRYPT":        2,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_DELETE":         3,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_ENCRYPT":        4,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_ATTRIBUTES": 5,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_GET_SECURITY":   6,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_MOUNT":          7,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OPEN":           8,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_OTHER":          9,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_READ":           10,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_RENAME":         11,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_ATTRIBUTES": 12,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_SET_SECURITY":   13,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UNMOUNT":        14,
		"FILE_ACTIVITY_TYPE_UID_FILE_SYSTEM_ACTIVITY_UPDATE":         15,
	}
)

func (x FILE_ACTIVITY_TYPE_UID) Enum() *FILE_ACTIVITY_TYPE_UID {
	p := new(FILE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[15].Descriptor()
}

func (FILE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[15]
}

func (x FILE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_TYPE_UID.Descriptor instead.
func (FILE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{15}
}

type KERNEL_ACTIVITY_ACTIVITY_ID int32

const (
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN KERNEL_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_CREATE  KERNEL_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_DELETE  KERNEL_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_INVOKE  KERNEL_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_OTHER   KERNEL_ACTIVITY_ACTIVITY_ID = 4 // EnumValue: 99; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_ACTIVITY_ID_KERNEL_ACTIVITY_ACTIVITY_ID_READ    KERNEL_ACTIVITY_ACTIVITY_ID = 5 // EnumValue: 2; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_ACTIVITY_ACTIVITY_ID.
var (
	KERNEL_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_ACTIVITY_ID_CREATE",
		2: "KERNEL_ACTIVITY_ACTIVITY_ID_DELETE",
		3: "KERNEL_ACTIVITY_ACTIVITY_ID_INVOKE",
		4: "KERNEL_ACTIVITY_ACTIVITY_ID_OTHER",
		5: "KERNEL_ACTIVITY_ACTIVITY_ID_READ",
	}
	KERNEL_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"KERNEL_ACTIVITY_ACTIVITY_ID_CREATE":  1,
		"KERNEL_ACTIVITY_ACTIVITY_ID_DELETE":  2,
		"KERNEL_ACTIVITY_ACTIVITY_ID_INVOKE":  3,
		"KERNEL_ACTIVITY_ACTIVITY_ID_OTHER":   4,
		"KERNEL_ACTIVITY_ACTIVITY_ID_READ":    5,
	}
)

func (x KERNEL_ACTIVITY_ACTIVITY_ID) Enum() *KERNEL_ACTIVITY_ACTIVITY_ID {
	p := new(KERNEL_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[16].Descriptor()
}

func (KERNEL_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[16]
}

func (x KERNEL_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (KERNEL_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{16}
}

type FILE_ACTIVITY_DISPOSITION_ID int32

const (
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN             FILE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_ALLOWED             FILE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_APPROVED            FILE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_BLOCKED             FILE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_CORRECTED           FILE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       FILE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DELAYED             FILE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DELETED             FILE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DETECTED            FILE_ACTIVITY_DISPOSITION_ID = 8  // EnumValue: 15; Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_DROPPED             FILE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_EXONERATED          FILE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_ISOLATED            FILE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_LOGGED              FILE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION           FILE_ACTIVITY_DISPOSITION_ID = 13 // EnumValue: 16; Type: OCSF_VALUE;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_OTHER               FILE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED FILE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED         FILE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_RESTORED            FILE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_TAGGED              FILE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	FILE_ACTIVITY_DISPOSITION_ID_FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         FILE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for FILE_ACTIVITY_DISPOSITION_ID.
var (
	FILE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "FILE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "FILE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "FILE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "FILE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "FILE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "FILE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "FILE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "FILE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "FILE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "FILE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "FILE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "FILE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "FILE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "FILE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	FILE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"FILE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"FILE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"FILE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"FILE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"FILE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"FILE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"FILE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"FILE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"FILE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"FILE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"FILE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"FILE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"FILE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"FILE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"FILE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"FILE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"FILE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"FILE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"FILE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"FILE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x FILE_ACTIVITY_DISPOSITION_ID) Enum() *FILE_ACTIVITY_DISPOSITION_ID {
	p := new(FILE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[17].Descriptor()
}

func (FILE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[17]
}

func (x FILE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (FILE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{17}
}

type MODULE_ACTIVITY_CLASS_UID int32

const (
	MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY_CLASS_UID_UNKNOWN         MODULE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY MODULE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1005;
)

// Enum value maps for MODULE_ACTIVITY_CLASS_UID.
var (
	MODULE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "MODULE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY",
	}
	MODULE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"MODULE_ACTIVITY_CLASS_UID_UNKNOWN":         0,
		"MODULE_ACTIVITY_CLASS_UID_MODULE_ACTIVITY": 1,
	}
)

func (x MODULE_ACTIVITY_CLASS_UID) Enum() *MODULE_ACTIVITY_CLASS_UID {
	p := new(MODULE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[18].Descriptor()
}

func (MODULE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[18]
}

func (x MODULE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_CLASS_UID.Descriptor instead.
func (MODULE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{18}
}

type KERNEL_EXTENSION_STATUS_ID int32

const (
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_UNKNOWN KERNEL_EXTENSION_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_FAILURE KERNEL_EXTENSION_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_OTHER   KERNEL_EXTENSION_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	KERNEL_EXTENSION_STATUS_ID_KERNEL_EXTENSION_STATUS_ID_SUCCESS KERNEL_EXTENSION_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for KERNEL_EXTENSION_STATUS_ID.
var (
	KERNEL_EXTENSION_STATUS_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_STATUS_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_STATUS_ID_FAILURE",
		2: "KERNEL_EXTENSION_STATUS_ID_OTHER",
		3: "KERNEL_EXTENSION_STATUS_ID_SUCCESS",
	}
	KERNEL_EXTENSION_STATUS_ID_value = map[string]int32{
		"KERNEL_EXTENSION_STATUS_ID_UNKNOWN": 0,
		"KERNEL_EXTENSION_STATUS_ID_FAILURE": 1,
		"KERNEL_EXTENSION_STATUS_ID_OTHER":   2,
		"KERNEL_EXTENSION_STATUS_ID_SUCCESS": 3,
	}
)

func (x KERNEL_EXTENSION_STATUS_ID) Enum() *KERNEL_EXTENSION_STATUS_ID {
	p := new(KERNEL_EXTENSION_STATUS_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[19].Descriptor()
}

func (KERNEL_EXTENSION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[19]
}

func (x KERNEL_EXTENSION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_STATUS_ID.Descriptor instead.
func (KERNEL_EXTENSION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{19}
}

type SCHEDULED_JOB_ACTIVITY_TYPE_UID int32

const (
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UNKNOWN SCHEDULED_JOB_ACTIVITY_TYPE_UID = 0 // EnumValue: 100600; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_CREATE  SCHEDULED_JOB_ACTIVITY_TYPE_UID = 1 // EnumValue: 100601; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DELETE  SCHEDULED_JOB_ACTIVITY_TYPE_UID = 2 // EnumValue: 100603; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DISABLE SCHEDULED_JOB_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100605;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_ENABLE  SCHEDULED_JOB_ACTIVITY_TYPE_UID = 4 // Type: OCSF_VALUE; EnumValue: 100604;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_OTHER   SCHEDULED_JOB_ACTIVITY_TYPE_UID = 5 // Type: OCSF_VALUE; EnumValue: 100699;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_START   SCHEDULED_JOB_ACTIVITY_TYPE_UID = 6 // Type: OCSF_VALUE; EnumValue: 100606;
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UPDATE  SCHEDULED_JOB_ACTIVITY_TYPE_UID = 7 // Type: OCSF_VALUE; EnumValue: 100602;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_TYPE_UID.
var (
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_CREATE",
		2: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DELETE",
		3: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DISABLE",
		4: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_ENABLE",
		5: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_OTHER",
		6: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_START",
		7: "SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UPDATE",
	}
	SCHEDULED_JOB_ACTIVITY_TYPE_UID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UNKNOWN": 0,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_CREATE":  1,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DELETE":  2,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_DISABLE": 3,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_ENABLE":  4,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_OTHER":   5,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_START":   6,
		"SCHEDULED_JOB_ACTIVITY_TYPE_UID_SCHEDULED_JOB_ACTIVITY_UPDATE":  7,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_TYPE_UID) Enum() *SCHEDULED_JOB_ACTIVITY_TYPE_UID {
	p := new(SCHEDULED_JOB_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[20].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[20]
}

func (x SCHEDULED_JOB_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_TYPE_UID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{20}
}

type MEMORY_ACTIVITY_DISPOSITION_ID int32

const (
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN             MEMORY_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED             MEMORY_ACTIVITY_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED            MEMORY_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED             MEMORY_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED           MEMORY_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       MEMORY_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED             MEMORY_ACTIVITY_DISPOSITION_ID = 6  // EnumValue: 14; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DELETED             MEMORY_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED            MEMORY_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED             MEMORY_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED          MEMORY_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED            MEMORY_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED              MEMORY_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION           MEMORY_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_OTHER               MEMORY_ACTIVITY_DISPOSITION_ID = 14 // EnumValue: 99; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED MEMORY_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED         MEMORY_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 3; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED            MEMORY_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED              MEMORY_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	MEMORY_ACTIVITY_DISPOSITION_ID_MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED         MEMORY_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for MEMORY_ACTIVITY_DISPOSITION_ID.
var (
	MEMORY_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "MEMORY_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "MEMORY_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	MEMORY_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"MEMORY_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"MEMORY_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"MEMORY_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"MEMORY_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"MEMORY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"MEMORY_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"MEMORY_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"MEMORY_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"MEMORY_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"MEMORY_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"MEMORY_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"MEMORY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"MEMORY_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"MEMORY_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"MEMORY_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"MEMORY_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x MEMORY_ACTIVITY_DISPOSITION_ID) Enum() *MEMORY_ACTIVITY_DISPOSITION_ID {
	p := new(MEMORY_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[21].Descriptor()
}

func (MEMORY_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[21]
}

func (x MEMORY_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (MEMORY_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{21}
}

type PROCESS_ACTIVITY_TYPE_UID int32

const (
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_UNKNOWN     PROCESS_ACTIVITY_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100700;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_INJECT      PROCESS_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100704;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_LAUNCH      PROCESS_ACTIVITY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100701;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OPEN        PROCESS_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100703;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OTHER       PROCESS_ACTIVITY_TYPE_UID = 4 // Type: OCSF_VALUE; EnumValue: 100799;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_SET_USER_ID PROCESS_ACTIVITY_TYPE_UID = 5 // Type: OCSF_VALUE; EnumValue: 100705;
	PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TERMINATE   PROCESS_ACTIVITY_TYPE_UID = 6 // Type: OCSF_VALUE; EnumValue: 100702;
)

// Enum value maps for PROCESS_ACTIVITY_TYPE_UID.
var (
	PROCESS_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_UNKNOWN",
		1: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_INJECT",
		2: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_LAUNCH",
		3: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OPEN",
		4: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OTHER",
		5: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_SET_USER_ID",
		6: "PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TERMINATE",
	}
	PROCESS_ACTIVITY_TYPE_UID_value = map[string]int32{
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_UNKNOWN":     0,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_INJECT":      1,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_LAUNCH":      2,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OPEN":        3,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_OTHER":       4,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_SET_USER_ID": 5,
		"PROCESS_ACTIVITY_TYPE_UID_PROCESS_ACTIVITY_TERMINATE":   6,
	}
)

func (x PROCESS_ACTIVITY_TYPE_UID) Enum() *PROCESS_ACTIVITY_TYPE_UID {
	p := new(PROCESS_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[22].Descriptor()
}

func (PROCESS_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[22]
}

func (x PROCESS_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_TYPE_UID.Descriptor instead.
func (PROCESS_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{22}
}

type KERNEL_EXTENSION_ACTIVITY_ID int32

const (
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN KERNEL_EXTENSION_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_LOAD    KERNEL_EXTENSION_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_OTHER   KERNEL_EXTENSION_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	KERNEL_EXTENSION_ACTIVITY_ID_KERNEL_EXTENSION_ACTIVITY_ID_UNLOAD  KERNEL_EXTENSION_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for KERNEL_EXTENSION_ACTIVITY_ID.
var (
	KERNEL_EXTENSION_ACTIVITY_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_ACTIVITY_ID_LOAD",
		2: "KERNEL_EXTENSION_ACTIVITY_ID_OTHER",
		3: "KERNEL_EXTENSION_ACTIVITY_ID_UNLOAD",
	}
	KERNEL_EXTENSION_ACTIVITY_ID_value = map[string]int32{
		"KERNEL_EXTENSION_ACTIVITY_ID_UNKNOWN": 0,
		"KERNEL_EXTENSION_ACTIVITY_ID_LOAD":    1,
		"KERNEL_EXTENSION_ACTIVITY_ID_OTHER":   2,
		"KERNEL_EXTENSION_ACTIVITY_ID_UNLOAD":  3,
	}
)

func (x KERNEL_EXTENSION_ACTIVITY_ID) Enum() *KERNEL_EXTENSION_ACTIVITY_ID {
	p := new(KERNEL_EXTENSION_ACTIVITY_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[23].Descriptor()
}

func (KERNEL_EXTENSION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[23]
}

func (x KERNEL_EXTENSION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_ACTIVITY_ID.Descriptor instead.
func (KERNEL_EXTENSION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{23}
}

type REGISTRY_KEY_ACTIVITY_DISPOSITION_ID int32

const (
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 2  // EnumValue: 8; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 3  // EnumValue: 2; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED           REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED             REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED          REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED              REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION           REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER               REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 14 // EnumValue: 99; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED         REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED            REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED              REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED         REGISTRY_KEY_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_DISPOSITION_ID.
var (
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"REGISTRY_KEY_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Enum() *REGISTRY_KEY_ACTIVITY_DISPOSITION_ID {
	p := new(REGISTRY_KEY_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[24].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[24]
}

func (x REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{24}
}

type KERNEL_ACTIVITY_DISPOSITION_ID int32

const (
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN             KERNEL_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED             KERNEL_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED            KERNEL_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED             KERNEL_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED           KERNEL_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       KERNEL_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED             KERNEL_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DELETED             KERNEL_ACTIVITY_DISPOSITION_ID = 7  // EnumValue: 5; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED            KERNEL_ACTIVITY_DISPOSITION_ID = 8  // EnumValue: 15; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED             KERNEL_ACTIVITY_DISPOSITION_ID = 9  // EnumValue: 6; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED          KERNEL_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED            KERNEL_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED              KERNEL_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION           KERNEL_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_OTHER               KERNEL_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED KERNEL_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED         KERNEL_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED            KERNEL_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED              KERNEL_ACTIVITY_DISPOSITION_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_DISPOSITION_ID_KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED         KERNEL_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for KERNEL_ACTIVITY_DISPOSITION_ID.
var (
	KERNEL_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "KERNEL_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "KERNEL_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	KERNEL_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"KERNEL_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"KERNEL_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"KERNEL_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"KERNEL_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"KERNEL_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"KERNEL_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"KERNEL_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"KERNEL_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"KERNEL_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"KERNEL_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"KERNEL_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"KERNEL_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"KERNEL_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"KERNEL_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"KERNEL_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"KERNEL_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x KERNEL_ACTIVITY_DISPOSITION_ID) Enum() *KERNEL_ACTIVITY_DISPOSITION_ID {
	p := new(KERNEL_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[25].Descriptor()
}

func (KERNEL_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[25]
}

func (x KERNEL_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (KERNEL_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{25}
}

type KERNEL_ACTIVITY_SEVERITY_ID int32

const (
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN       KERNEL_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL      KERNEL_ACTIVITY_SEVERITY_ID = 1 // EnumValue: 5; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_FATAL         KERNEL_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_HIGH          KERNEL_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL KERNEL_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_LOW           KERNEL_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM        KERNEL_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	KERNEL_ACTIVITY_SEVERITY_ID_KERNEL_ACTIVITY_SEVERITY_ID_OTHER         KERNEL_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_ACTIVITY_SEVERITY_ID.
var (
	KERNEL_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "KERNEL_ACTIVITY_SEVERITY_ID_FATAL",
		3: "KERNEL_ACTIVITY_SEVERITY_ID_HIGH",
		4: "KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "KERNEL_ACTIVITY_SEVERITY_ID_LOW",
		6: "KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "KERNEL_ACTIVITY_SEVERITY_ID_OTHER",
	}
	KERNEL_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"KERNEL_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"KERNEL_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"KERNEL_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"KERNEL_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"KERNEL_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"KERNEL_ACTIVITY_SEVERITY_ID_LOW":           5,
		"KERNEL_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"KERNEL_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x KERNEL_ACTIVITY_SEVERITY_ID) Enum() *KERNEL_ACTIVITY_SEVERITY_ID {
	p := new(KERNEL_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[26].Descriptor()
}

func (KERNEL_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[26]
}

func (x KERNEL_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (KERNEL_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{26}
}

type SYSTEM_DISPOSITION_ID int32

const (
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_UNKNOWN             SYSTEM_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_ALLOWED             SYSTEM_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_APPROVED            SYSTEM_DISPOSITION_ID = 2  // EnumValue: 8; Type: OCSF_VALUE;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_BLOCKED             SYSTEM_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_CORRECTED           SYSTEM_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_CUSTOM_ACTION       SYSTEM_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DELAYED             SYSTEM_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DELETED             SYSTEM_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DETECTED            SYSTEM_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_DROPPED             SYSTEM_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_EXONERATED          SYSTEM_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_ISOLATED            SYSTEM_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_LOGGED              SYSTEM_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_NO_ACTION           SYSTEM_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_OTHER               SYSTEM_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED SYSTEM_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_QUARANTINED         SYSTEM_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_RESTORED            SYSTEM_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_TAGGED              SYSTEM_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	SYSTEM_DISPOSITION_ID_SYSTEM_DISPOSITION_ID_UNCORRECTED         SYSTEM_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for SYSTEM_DISPOSITION_ID.
var (
	SYSTEM_DISPOSITION_ID_name = map[int32]string{
		0:  "SYSTEM_DISPOSITION_ID_UNKNOWN",
		1:  "SYSTEM_DISPOSITION_ID_ALLOWED",
		2:  "SYSTEM_DISPOSITION_ID_APPROVED",
		3:  "SYSTEM_DISPOSITION_ID_BLOCKED",
		4:  "SYSTEM_DISPOSITION_ID_CORRECTED",
		5:  "SYSTEM_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SYSTEM_DISPOSITION_ID_DELAYED",
		7:  "SYSTEM_DISPOSITION_ID_DELETED",
		8:  "SYSTEM_DISPOSITION_ID_DETECTED",
		9:  "SYSTEM_DISPOSITION_ID_DROPPED",
		10: "SYSTEM_DISPOSITION_ID_EXONERATED",
		11: "SYSTEM_DISPOSITION_ID_ISOLATED",
		12: "SYSTEM_DISPOSITION_ID_LOGGED",
		13: "SYSTEM_DISPOSITION_ID_NO_ACTION",
		14: "SYSTEM_DISPOSITION_ID_OTHER",
		15: "SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SYSTEM_DISPOSITION_ID_QUARANTINED",
		17: "SYSTEM_DISPOSITION_ID_RESTORED",
		18: "SYSTEM_DISPOSITION_ID_TAGGED",
		19: "SYSTEM_DISPOSITION_ID_UNCORRECTED",
	}
	SYSTEM_DISPOSITION_ID_value = map[string]int32{
		"SYSTEM_DISPOSITION_ID_UNKNOWN":             0,
		"SYSTEM_DISPOSITION_ID_ALLOWED":             1,
		"SYSTEM_DISPOSITION_ID_APPROVED":            2,
		"SYSTEM_DISPOSITION_ID_BLOCKED":             3,
		"SYSTEM_DISPOSITION_ID_CORRECTED":           4,
		"SYSTEM_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SYSTEM_DISPOSITION_ID_DELAYED":             6,
		"SYSTEM_DISPOSITION_ID_DELETED":             7,
		"SYSTEM_DISPOSITION_ID_DETECTED":            8,
		"SYSTEM_DISPOSITION_ID_DROPPED":             9,
		"SYSTEM_DISPOSITION_ID_EXONERATED":          10,
		"SYSTEM_DISPOSITION_ID_ISOLATED":            11,
		"SYSTEM_DISPOSITION_ID_LOGGED":              12,
		"SYSTEM_DISPOSITION_ID_NO_ACTION":           13,
		"SYSTEM_DISPOSITION_ID_OTHER":               14,
		"SYSTEM_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SYSTEM_DISPOSITION_ID_QUARANTINED":         16,
		"SYSTEM_DISPOSITION_ID_RESTORED":            17,
		"SYSTEM_DISPOSITION_ID_TAGGED":              18,
		"SYSTEM_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SYSTEM_DISPOSITION_ID) Enum() *SYSTEM_DISPOSITION_ID {
	p := new(SYSTEM_DISPOSITION_ID)
	*p = x
	return p
}

func (x SYSTEM_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[27].Descriptor()
}

func (SYSTEM_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[27]
}

func (x SYSTEM_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_DISPOSITION_ID.Descriptor instead.
func (SYSTEM_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{27}
}

type SYSTEM_TYPE_UID int32

const (
	SYSTEM_TYPE_UID_SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_UNKNOWN SYSTEM_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100000;
	SYSTEM_TYPE_UID_SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_OTHER   SYSTEM_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100099;
)

// Enum value maps for SYSTEM_TYPE_UID.
var (
	SYSTEM_TYPE_UID_name = map[int32]string{
		0: "SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_UNKNOWN",
		1: "SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_OTHER",
	}
	SYSTEM_TYPE_UID_value = map[string]int32{
		"SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_UNKNOWN": 0,
		"SYSTEM_TYPE_UID_SYSTEM_ACTIVITY_OTHER":   1,
	}
)

func (x SYSTEM_TYPE_UID) Enum() *SYSTEM_TYPE_UID {
	p := new(SYSTEM_TYPE_UID)
	*p = x
	return p
}

func (x SYSTEM_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[28].Descriptor()
}

func (SYSTEM_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[28]
}

func (x SYSTEM_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_TYPE_UID.Descriptor instead.
func (SYSTEM_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{28}
}

type KERNEL_EXTENSION_CLASS_UID int32

const (
	KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_CLASS_UID_UNKNOWN                   KERNEL_EXTENSION_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_ACTIVITY KERNEL_EXTENSION_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1002;
)

// Enum value maps for KERNEL_EXTENSION_CLASS_UID.
var (
	KERNEL_EXTENSION_CLASS_UID_name = map[int32]string{
		0: "KERNEL_EXTENSION_CLASS_UID_UNKNOWN",
		1: "KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_ACTIVITY",
	}
	KERNEL_EXTENSION_CLASS_UID_value = map[string]int32{
		"KERNEL_EXTENSION_CLASS_UID_UNKNOWN":                   0,
		"KERNEL_EXTENSION_CLASS_UID_KERNEL_EXTENSION_ACTIVITY": 1,
	}
)

func (x KERNEL_EXTENSION_CLASS_UID) Enum() *KERNEL_EXTENSION_CLASS_UID {
	p := new(KERNEL_EXTENSION_CLASS_UID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[29].Descriptor()
}

func (KERNEL_EXTENSION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[29]
}

func (x KERNEL_EXTENSION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_CLASS_UID.Descriptor instead.
func (KERNEL_EXTENSION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{29}
}

type REGISTRY_VALUE_ACTIVITY_CLASS_UID int32

const (
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN                 REGISTRY_VALUE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY REGISTRY_VALUE_ACTIVITY_CLASS_UID = 1 // EnumValue: 1002; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_CLASS_UID.
var (
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY",
	}
	REGISTRY_VALUE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_CLASS_UID_UNKNOWN":                 0,
		"REGISTRY_VALUE_ACTIVITY_CLASS_UID_REGISTRY_VALUE_ACTIVITY": 1,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) Enum() *REGISTRY_VALUE_ACTIVITY_CLASS_UID {
	p := new(REGISTRY_VALUE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[30].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[30]
}

func (x REGISTRY_VALUE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_CLASS_UID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{30}
}

type SYSTEM_CATEGORY_UID int32

const (
	SYSTEM_CATEGORY_UID_SYSTEM_CATEGORY_UID_UNKNOWN         SYSTEM_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SYSTEM_CATEGORY_UID_SYSTEM_CATEGORY_UID_SYSTEM_ACTIVITY SYSTEM_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for SYSTEM_CATEGORY_UID.
var (
	SYSTEM_CATEGORY_UID_name = map[int32]string{
		0: "SYSTEM_CATEGORY_UID_UNKNOWN",
		1: "SYSTEM_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	SYSTEM_CATEGORY_UID_value = map[string]int32{
		"SYSTEM_CATEGORY_UID_UNKNOWN":         0,
		"SYSTEM_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x SYSTEM_CATEGORY_UID) Enum() *SYSTEM_CATEGORY_UID {
	p := new(SYSTEM_CATEGORY_UID)
	*p = x
	return p
}

func (x SYSTEM_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[31].Descriptor()
}

func (SYSTEM_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[31]
}

func (x SYSTEM_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_CATEGORY_UID.Descriptor instead.
func (SYSTEM_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{31}
}

type MEMORY_ACTIVITY_TYPE_UID int32

const (
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_UNKNOWN         MEMORY_ACTIVITY_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100400;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ALLOCATE_PAGE   MEMORY_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100401;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_BUFFER_OVERFLOW MEMORY_ACTIVITY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100404;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DELETE_PAGE     MEMORY_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100403;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DISABLE_DEP     MEMORY_ACTIVITY_TYPE_UID = 4 // Type: OCSF_VALUE; EnumValue: 100405;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ENABLE_DEP      MEMORY_ACTIVITY_TYPE_UID = 5 // EnumValue: 100406; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_MODIFY_PAGE     MEMORY_ACTIVITY_TYPE_UID = 6 // Type: OCSF_VALUE; EnumValue: 100402;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_OTHER           MEMORY_ACTIVITY_TYPE_UID = 7 // Type: OCSF_VALUE; EnumValue: 100499;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_READ            MEMORY_ACTIVITY_TYPE_UID = 8 // EnumValue: 100407; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_WRITE           MEMORY_ACTIVITY_TYPE_UID = 9 // Type: OCSF_VALUE; EnumValue: 100408;
)

// Enum value maps for MEMORY_ACTIVITY_TYPE_UID.
var (
	MEMORY_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_UNKNOWN",
		1: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ALLOCATE_PAGE",
		2: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_BUFFER_OVERFLOW",
		3: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DELETE_PAGE",
		4: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DISABLE_DEP",
		5: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ENABLE_DEP",
		6: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_MODIFY_PAGE",
		7: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_OTHER",
		8: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_READ",
		9: "MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_WRITE",
	}
	MEMORY_ACTIVITY_TYPE_UID_value = map[string]int32{
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_UNKNOWN":         0,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ALLOCATE_PAGE":   1,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_BUFFER_OVERFLOW": 2,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DELETE_PAGE":     3,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_DISABLE_DEP":     4,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_ENABLE_DEP":      5,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_MODIFY_PAGE":     6,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_OTHER":           7,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_READ":            8,
		"MEMORY_ACTIVITY_TYPE_UID_MEMORY_ACTIVITY_WRITE":           9,
	}
)

func (x MEMORY_ACTIVITY_TYPE_UID) Enum() *MEMORY_ACTIVITY_TYPE_UID {
	p := new(MEMORY_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[32].Descriptor()
}

func (MEMORY_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[32]
}

func (x MEMORY_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_TYPE_UID.Descriptor instead.
func (MEMORY_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{32}
}

type MEMORY_ACTIVITY_CLASS_UID int32

const (
	MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY_CLASS_UID_UNKNOWN         MEMORY_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY MEMORY_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1004;
)

// Enum value maps for MEMORY_ACTIVITY_CLASS_UID.
var (
	MEMORY_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY",
	}
	MEMORY_ACTIVITY_CLASS_UID_value = map[string]int32{
		"MEMORY_ACTIVITY_CLASS_UID_UNKNOWN":         0,
		"MEMORY_ACTIVITY_CLASS_UID_MEMORY_ACTIVITY": 1,
	}
)

func (x MEMORY_ACTIVITY_CLASS_UID) Enum() *MEMORY_ACTIVITY_CLASS_UID {
	p := new(MEMORY_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[33].Descriptor()
}

func (MEMORY_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[33]
}

func (x MEMORY_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_CLASS_UID.Descriptor instead.
func (MEMORY_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{33}
}

type REGISTRY_KEY_ACTIVITY_TYPE_UID int32

const (
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_UNKNOWN                            REGISTRY_KEY_ACTIVITY_TYPE_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_CREATE       REGISTRY_KEY_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100101;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_DELETE       REGISTRY_KEY_ACTIVITY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100104;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_EXPORT       REGISTRY_KEY_ACTIVITY_TYPE_UID = 3 // EnumValue: 100109; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_IMPORT       REGISTRY_KEY_ACTIVITY_TYPE_UID = 4 // EnumValue: 100108; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_MODIFY       REGISTRY_KEY_ACTIVITY_TYPE_UID = 5 // EnumValue: 100103; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_READ         REGISTRY_KEY_ACTIVITY_TYPE_UID = 6 // Type: OCSF_VALUE; EnumValue: 100102;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RENAME       REGISTRY_KEY_ACTIVITY_TYPE_UID = 7 // Type: OCSF_VALUE; EnumValue: 100105;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RESTORE      REGISTRY_KEY_ACTIVITY_TYPE_UID = 8 // Type: OCSF_VALUE; EnumValue: 100107;
	REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_SET_SECURITY REGISTRY_KEY_ACTIVITY_TYPE_UID = 9 // Type: OCSF_VALUE; EnumValue: 100106;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_TYPE_UID.
var (
	REGISTRY_KEY_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_TYPE_UID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_CREATE",
		2: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_DELETE",
		3: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_EXPORT",
		4: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_IMPORT",
		5: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_MODIFY",
		6: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_READ",
		7: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RENAME",
		8: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RESTORE",
		9: "REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_SET_SECURITY",
	}
	REGISTRY_KEY_ACTIVITY_TYPE_UID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_UNKNOWN":                            0,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_CREATE":       1,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_DELETE":       2,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_EXPORT":       3,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_IMPORT":       4,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_MODIFY":       5,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_READ":         6,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RENAME":       7,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_RESTORE":      8,
		"REGISTRY_KEY_ACTIVITY_TYPE_UID_REGISTRY_KEY_ACTIVITY_SET_SECURITY": 9,
	}
)

func (x REGISTRY_KEY_ACTIVITY_TYPE_UID) Enum() *REGISTRY_KEY_ACTIVITY_TYPE_UID {
	p := new(REGISTRY_KEY_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[34].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[34]
}

func (x REGISTRY_KEY_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_TYPE_UID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{34}
}

type MODULE_ACTIVITY_CATEGORY_UID int32

const (
	MODULE_ACTIVITY_CATEGORY_UID_MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN         MODULE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	MODULE_ACTIVITY_CATEGORY_UID_MODULE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY MODULE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for MODULE_ACTIVITY_CATEGORY_UID.
var (
	MODULE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "MODULE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	MODULE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"MODULE_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"MODULE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x MODULE_ACTIVITY_CATEGORY_UID) Enum() *MODULE_ACTIVITY_CATEGORY_UID {
	p := new(MODULE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[35].Descriptor()
}

func (MODULE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[35]
}

func (x MODULE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (MODULE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{35}
}

type FILE_ACTIVITY_SEVERITY_ID int32

const (
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_UNKNOWN       FILE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_CRITICAL      FILE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_FATAL         FILE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_HIGH          FILE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL FILE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_LOW           FILE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_MEDIUM        FILE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	FILE_ACTIVITY_SEVERITY_ID_FILE_ACTIVITY_SEVERITY_ID_OTHER         FILE_ACTIVITY_SEVERITY_ID = 7 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for FILE_ACTIVITY_SEVERITY_ID.
var (
	FILE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "FILE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "FILE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "FILE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "FILE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "FILE_ACTIVITY_SEVERITY_ID_LOW",
		6: "FILE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "FILE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	FILE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"FILE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"FILE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"FILE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"FILE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"FILE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"FILE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"FILE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"FILE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x FILE_ACTIVITY_SEVERITY_ID) Enum() *FILE_ACTIVITY_SEVERITY_ID {
	p := new(FILE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[36].Descriptor()
}

func (FILE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[36]
}

func (x FILE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (FILE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{36}
}

type REGISTRY_KEY_ACTIVITY_CATEGORY_UID int32

const (
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN         REGISTRY_KEY_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_REGISTRY_KEY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY REGISTRY_KEY_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_CATEGORY_UID.
var (
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	REGISTRY_KEY_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"REGISTRY_KEY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Enum() *REGISTRY_KEY_ACTIVITY_CATEGORY_UID {
	p := new(REGISTRY_KEY_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[37].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[37]
}

func (x REGISTRY_KEY_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{37}
}

type KERNEL_ACTIVITY_TYPE_UID int32

const (
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_UNKNOWN KERNEL_ACTIVITY_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100300;
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_CREATE  KERNEL_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100301;
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_DELETE  KERNEL_ACTIVITY_TYPE_UID = 2 // EnumValue: 100303; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_INVOKE  KERNEL_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100304;
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_OTHER   KERNEL_ACTIVITY_TYPE_UID = 4 // EnumValue: 100399; Type: OCSF_VALUE;
	KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_READ    KERNEL_ACTIVITY_TYPE_UID = 5 // Type: OCSF_VALUE; EnumValue: 100302;
)

// Enum value maps for KERNEL_ACTIVITY_TYPE_UID.
var (
	KERNEL_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_UNKNOWN",
		1: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_CREATE",
		2: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_DELETE",
		3: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_INVOKE",
		4: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_OTHER",
		5: "KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_READ",
	}
	KERNEL_ACTIVITY_TYPE_UID_value = map[string]int32{
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_UNKNOWN": 0,
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_CREATE":  1,
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_DELETE":  2,
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_INVOKE":  3,
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_OTHER":   4,
		"KERNEL_ACTIVITY_TYPE_UID_KERNEL_ACTIVITY_READ":    5,
	}
)

func (x KERNEL_ACTIVITY_TYPE_UID) Enum() *KERNEL_ACTIVITY_TYPE_UID {
	p := new(KERNEL_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[38].Descriptor()
}

func (KERNEL_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[38]
}

func (x KERNEL_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_TYPE_UID.Descriptor instead.
func (KERNEL_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{38}
}

type MODULE_ACTIVITY_TYPE_UID int32

const (
	MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNKNOWN MODULE_ACTIVITY_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100500;
	MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_LOAD    MODULE_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100501;
	MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_OTHER   MODULE_ACTIVITY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100599;
	MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNLOAD  MODULE_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100502;
)

// Enum value maps for MODULE_ACTIVITY_TYPE_UID.
var (
	MODULE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNKNOWN",
		1: "MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_LOAD",
		2: "MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_OTHER",
		3: "MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNLOAD",
	}
	MODULE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNKNOWN": 0,
		"MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_LOAD":    1,
		"MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_OTHER":   2,
		"MODULE_ACTIVITY_TYPE_UID_MODULE_ACTIVITY_UNLOAD":  3,
	}
)

func (x MODULE_ACTIVITY_TYPE_UID) Enum() *MODULE_ACTIVITY_TYPE_UID {
	p := new(MODULE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[39].Descriptor()
}

func (MODULE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[39]
}

func (x MODULE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_TYPE_UID.Descriptor instead.
func (MODULE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{39}
}

type RESOURCE_ACTIVITY_TYPE_UID int32

const (
	RESOURCE_ACTIVITY_TYPE_UID_RESOURCE_ACTIVITY_TYPE_UID_UNKNOWN                          RESOURCE_ACTIVITY_TYPE_UID = 0 // Type: NON_OCSF_VALUE;
	RESOURCE_ACTIVITY_TYPE_UID_RESOURCE_ACTIVITY_TYPE_UID_WINDOWS_RESOURCE_ACTIVITY_ACCESS RESOURCE_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100301;
)

// Enum value maps for RESOURCE_ACTIVITY_TYPE_UID.
var (
	RESOURCE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_TYPE_UID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_TYPE_UID_WINDOWS_RESOURCE_ACTIVITY_ACCESS",
	}
	RESOURCE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"RESOURCE_ACTIVITY_TYPE_UID_UNKNOWN":                          0,
		"RESOURCE_ACTIVITY_TYPE_UID_WINDOWS_RESOURCE_ACTIVITY_ACCESS": 1,
	}
)

func (x RESOURCE_ACTIVITY_TYPE_UID) Enum() *RESOURCE_ACTIVITY_TYPE_UID {
	p := new(RESOURCE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[40].Descriptor()
}

func (RESOURCE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[40]
}

func (x RESOURCE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_TYPE_UID.Descriptor instead.
func (RESOURCE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{40}
}

type REGISTRY_KEY_ACTIVITY_STATUS_ID int32

const (
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN REGISTRY_KEY_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE REGISTRY_KEY_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER   REGISTRY_KEY_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	REGISTRY_KEY_ACTIVITY_STATUS_ID_REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS REGISTRY_KEY_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_STATUS_ID.
var (
	REGISTRY_KEY_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE",
		2: "REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER",
		3: "REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS",
	}
	REGISTRY_KEY_ACTIVITY_STATUS_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_FAILURE": 1,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_OTHER":   2,
		"REGISTRY_KEY_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) Enum() *REGISTRY_KEY_ACTIVITY_STATUS_ID {
	p := new(REGISTRY_KEY_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[41].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[41]
}

func (x REGISTRY_KEY_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_STATUS_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{41}
}

type KERNEL_EXTENSION_SEVERITY_ID int32

const (
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN       KERNEL_EXTENSION_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_CRITICAL      KERNEL_EXTENSION_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_FATAL         KERNEL_EXTENSION_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_HIGH          KERNEL_EXTENSION_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL KERNEL_EXTENSION_SEVERITY_ID = 4 // EnumValue: 1; Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_LOW           KERNEL_EXTENSION_SEVERITY_ID = 5 // EnumValue: 2; Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_MEDIUM        KERNEL_EXTENSION_SEVERITY_ID = 6 // EnumValue: 3; Type: OCSF_VALUE;
	KERNEL_EXTENSION_SEVERITY_ID_KERNEL_EXTENSION_SEVERITY_ID_OTHER         KERNEL_EXTENSION_SEVERITY_ID = 7 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_SEVERITY_ID.
var (
	KERNEL_EXTENSION_SEVERITY_ID_name = map[int32]string{
		0: "KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN",
		1: "KERNEL_EXTENSION_SEVERITY_ID_CRITICAL",
		2: "KERNEL_EXTENSION_SEVERITY_ID_FATAL",
		3: "KERNEL_EXTENSION_SEVERITY_ID_HIGH",
		4: "KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL",
		5: "KERNEL_EXTENSION_SEVERITY_ID_LOW",
		6: "KERNEL_EXTENSION_SEVERITY_ID_MEDIUM",
		7: "KERNEL_EXTENSION_SEVERITY_ID_OTHER",
	}
	KERNEL_EXTENSION_SEVERITY_ID_value = map[string]int32{
		"KERNEL_EXTENSION_SEVERITY_ID_UNKNOWN":       0,
		"KERNEL_EXTENSION_SEVERITY_ID_CRITICAL":      1,
		"KERNEL_EXTENSION_SEVERITY_ID_FATAL":         2,
		"KERNEL_EXTENSION_SEVERITY_ID_HIGH":          3,
		"KERNEL_EXTENSION_SEVERITY_ID_INFORMATIONAL": 4,
		"KERNEL_EXTENSION_SEVERITY_ID_LOW":           5,
		"KERNEL_EXTENSION_SEVERITY_ID_MEDIUM":        6,
		"KERNEL_EXTENSION_SEVERITY_ID_OTHER":         7,
	}
)

func (x KERNEL_EXTENSION_SEVERITY_ID) Enum() *KERNEL_EXTENSION_SEVERITY_ID {
	p := new(KERNEL_EXTENSION_SEVERITY_ID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[42].Descriptor()
}

func (KERNEL_EXTENSION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[42]
}

func (x KERNEL_EXTENSION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_SEVERITY_ID.Descriptor instead.
func (KERNEL_EXTENSION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{42}
}

type FILE_ACTIVITY_STATUS_ID int32

const (
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_UNKNOWN FILE_ACTIVITY_STATUS_ID = 0 // EnumValue: 0; Type: OCSF_VALUE;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_FAILURE FILE_ACTIVITY_STATUS_ID = 1 // EnumValue: 2; Type: OCSF_VALUE;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_OTHER   FILE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	FILE_ACTIVITY_STATUS_ID_FILE_ACTIVITY_STATUS_ID_SUCCESS FILE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for FILE_ACTIVITY_STATUS_ID.
var (
	FILE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "FILE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "FILE_ACTIVITY_STATUS_ID_FAILURE",
		2: "FILE_ACTIVITY_STATUS_ID_OTHER",
		3: "FILE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	FILE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"FILE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"FILE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"FILE_ACTIVITY_STATUS_ID_OTHER":   2,
		"FILE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x FILE_ACTIVITY_STATUS_ID) Enum() *FILE_ACTIVITY_STATUS_ID {
	p := new(FILE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[43].Descriptor()
}

func (FILE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[43]
}

func (x FILE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_STATUS_ID.Descriptor instead.
func (FILE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{43}
}

type SYSTEM_SEVERITY_ID int32

const (
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_UNKNOWN       SYSTEM_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_CRITICAL      SYSTEM_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_FATAL         SYSTEM_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_HIGH          SYSTEM_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_INFORMATIONAL SYSTEM_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_LOW           SYSTEM_SEVERITY_ID = 5 // EnumValue: 2; Type: OCSF_VALUE;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_MEDIUM        SYSTEM_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	SYSTEM_SEVERITY_ID_SYSTEM_SEVERITY_ID_OTHER         SYSTEM_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SYSTEM_SEVERITY_ID.
var (
	SYSTEM_SEVERITY_ID_name = map[int32]string{
		0: "SYSTEM_SEVERITY_ID_UNKNOWN",
		1: "SYSTEM_SEVERITY_ID_CRITICAL",
		2: "SYSTEM_SEVERITY_ID_FATAL",
		3: "SYSTEM_SEVERITY_ID_HIGH",
		4: "SYSTEM_SEVERITY_ID_INFORMATIONAL",
		5: "SYSTEM_SEVERITY_ID_LOW",
		6: "SYSTEM_SEVERITY_ID_MEDIUM",
		7: "SYSTEM_SEVERITY_ID_OTHER",
	}
	SYSTEM_SEVERITY_ID_value = map[string]int32{
		"SYSTEM_SEVERITY_ID_UNKNOWN":       0,
		"SYSTEM_SEVERITY_ID_CRITICAL":      1,
		"SYSTEM_SEVERITY_ID_FATAL":         2,
		"SYSTEM_SEVERITY_ID_HIGH":          3,
		"SYSTEM_SEVERITY_ID_INFORMATIONAL": 4,
		"SYSTEM_SEVERITY_ID_LOW":           5,
		"SYSTEM_SEVERITY_ID_MEDIUM":        6,
		"SYSTEM_SEVERITY_ID_OTHER":         7,
	}
)

func (x SYSTEM_SEVERITY_ID) Enum() *SYSTEM_SEVERITY_ID {
	p := new(SYSTEM_SEVERITY_ID)
	*p = x
	return p
}

func (x SYSTEM_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[44].Descriptor()
}

func (SYSTEM_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[44]
}

func (x SYSTEM_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_SEVERITY_ID.Descriptor instead.
func (SYSTEM_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{44}
}

type REGISTRY_VALUE_ACTIVITY_TYPE_UID int32

const (
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_TYPE_UID_UNKNOWN                        REGISTRY_VALUE_ACTIVITY_TYPE_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_DELETE REGISTRY_VALUE_ACTIVITY_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100204;
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_GET    REGISTRY_VALUE_ACTIVITY_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100201;
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_MODIFY REGISTRY_VALUE_ACTIVITY_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100203;
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_SET    REGISTRY_VALUE_ACTIVITY_TYPE_UID = 4 // Type: OCSF_VALUE; EnumValue: 100202;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_TYPE_UID.
var (
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_TYPE_UID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_DELETE",
		2: "REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_GET",
		3: "REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_MODIFY",
		4: "REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_SET",
	}
	REGISTRY_VALUE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_TYPE_UID_UNKNOWN":                        0,
		"REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_DELETE": 1,
		"REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_GET":    2,
		"REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_MODIFY": 3,
		"REGISTRY_VALUE_ACTIVITY_TYPE_UID_REGISTRY_VALUE_ACTIVITY_SET":    4,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_TYPE_UID) Enum() *REGISTRY_VALUE_ACTIVITY_TYPE_UID {
	p := new(REGISTRY_VALUE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[45].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[45]
}

func (x REGISTRY_VALUE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_TYPE_UID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{45}
}

type FILE_ACTIVITY_ACTIVITY_ID int32

const (
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN        FILE_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_CREATE         FILE_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_DECRYPT        FILE_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 11;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_DELETE         FILE_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_ENCRYPT        FILE_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 10;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_GET_ATTRIBUTES FILE_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 8;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_GET_SECURITY   FILE_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 9;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_MOUNT          FILE_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 12;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_OPEN           FILE_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 14;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_OTHER          FILE_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 99;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_READ           FILE_ACTIVITY_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 2;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_RENAME         FILE_ACTIVITY_ACTIVITY_ID = 11 // Type: OCSF_VALUE; EnumValue: 5;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_SET_ATTRIBUTES FILE_ACTIVITY_ACTIVITY_ID = 12 // EnumValue: 6; Type: OCSF_VALUE;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_SET_SECURITY   FILE_ACTIVITY_ACTIVITY_ID = 13 // EnumValue: 7; Type: OCSF_VALUE;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_UNMOUNT        FILE_ACTIVITY_ACTIVITY_ID = 14 // Type: OCSF_VALUE; EnumValue: 13;
	FILE_ACTIVITY_ACTIVITY_ID_FILE_ACTIVITY_ACTIVITY_ID_UPDATE         FILE_ACTIVITY_ACTIVITY_ID = 15 // Type: OCSF_VALUE; EnumValue: 3;
)

// Enum value maps for FILE_ACTIVITY_ACTIVITY_ID.
var (
	FILE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "FILE_ACTIVITY_ACTIVITY_ID_CREATE",
		2:  "FILE_ACTIVITY_ACTIVITY_ID_DECRYPT",
		3:  "FILE_ACTIVITY_ACTIVITY_ID_DELETE",
		4:  "FILE_ACTIVITY_ACTIVITY_ID_ENCRYPT",
		5:  "FILE_ACTIVITY_ACTIVITY_ID_GET_ATTRIBUTES",
		6:  "FILE_ACTIVITY_ACTIVITY_ID_GET_SECURITY",
		7:  "FILE_ACTIVITY_ACTIVITY_ID_MOUNT",
		8:  "FILE_ACTIVITY_ACTIVITY_ID_OPEN",
		9:  "FILE_ACTIVITY_ACTIVITY_ID_OTHER",
		10: "FILE_ACTIVITY_ACTIVITY_ID_READ",
		11: "FILE_ACTIVITY_ACTIVITY_ID_RENAME",
		12: "FILE_ACTIVITY_ACTIVITY_ID_SET_ATTRIBUTES",
		13: "FILE_ACTIVITY_ACTIVITY_ID_SET_SECURITY",
		14: "FILE_ACTIVITY_ACTIVITY_ID_UNMOUNT",
		15: "FILE_ACTIVITY_ACTIVITY_ID_UPDATE",
	}
	FILE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"FILE_ACTIVITY_ACTIVITY_ID_UNKNOWN":        0,
		"FILE_ACTIVITY_ACTIVITY_ID_CREATE":         1,
		"FILE_ACTIVITY_ACTIVITY_ID_DECRYPT":        2,
		"FILE_ACTIVITY_ACTIVITY_ID_DELETE":         3,
		"FILE_ACTIVITY_ACTIVITY_ID_ENCRYPT":        4,
		"FILE_ACTIVITY_ACTIVITY_ID_GET_ATTRIBUTES": 5,
		"FILE_ACTIVITY_ACTIVITY_ID_GET_SECURITY":   6,
		"FILE_ACTIVITY_ACTIVITY_ID_MOUNT":          7,
		"FILE_ACTIVITY_ACTIVITY_ID_OPEN":           8,
		"FILE_ACTIVITY_ACTIVITY_ID_OTHER":          9,
		"FILE_ACTIVITY_ACTIVITY_ID_READ":           10,
		"FILE_ACTIVITY_ACTIVITY_ID_RENAME":         11,
		"FILE_ACTIVITY_ACTIVITY_ID_SET_ATTRIBUTES": 12,
		"FILE_ACTIVITY_ACTIVITY_ID_SET_SECURITY":   13,
		"FILE_ACTIVITY_ACTIVITY_ID_UNMOUNT":        14,
		"FILE_ACTIVITY_ACTIVITY_ID_UPDATE":         15,
	}
)

func (x FILE_ACTIVITY_ACTIVITY_ID) Enum() *FILE_ACTIVITY_ACTIVITY_ID {
	p := new(FILE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[46].Descriptor()
}

func (FILE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[46]
}

func (x FILE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (FILE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{46}
}

type SYSTEM_ACTIVITY_ID int32

const (
	SYSTEM_ACTIVITY_ID_SYSTEM_ACTIVITY_ID_UNKNOWN SYSTEM_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SYSTEM_ACTIVITY_ID_SYSTEM_ACTIVITY_ID_OTHER   SYSTEM_ACTIVITY_ID = 1 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SYSTEM_ACTIVITY_ID.
var (
	SYSTEM_ACTIVITY_ID_name = map[int32]string{
		0: "SYSTEM_ACTIVITY_ID_UNKNOWN",
		1: "SYSTEM_ACTIVITY_ID_OTHER",
	}
	SYSTEM_ACTIVITY_ID_value = map[string]int32{
		"SYSTEM_ACTIVITY_ID_UNKNOWN": 0,
		"SYSTEM_ACTIVITY_ID_OTHER":   1,
	}
)

func (x SYSTEM_ACTIVITY_ID) Enum() *SYSTEM_ACTIVITY_ID {
	p := new(SYSTEM_ACTIVITY_ID)
	*p = x
	return p
}

func (x SYSTEM_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SYSTEM_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[47].Descriptor()
}

func (SYSTEM_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[47]
}

func (x SYSTEM_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SYSTEM_ACTIVITY_ID.Descriptor instead.
func (SYSTEM_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{47}
}

type RESOURCE_ACTIVITY_DISPOSITION_ID int32

const (
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN             RESOURCE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED             RESOURCE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED            RESOURCE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED             RESOURCE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED           RESOURCE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       RESOURCE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED             RESOURCE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED             RESOURCE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED            RESOURCE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED             RESOURCE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED          RESOURCE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED            RESOURCE_ACTIVITY_DISPOSITION_ID = 11 // EnumValue: 4; Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED              RESOURCE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION           RESOURCE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER               RESOURCE_ACTIVITY_DISPOSITION_ID = 14 // EnumValue: 99; Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED RESOURCE_ACTIVITY_DISPOSITION_ID = 15 // EnumValue: 12; Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED         RESOURCE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 3;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED            RESOURCE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED              RESOURCE_ACTIVITY_DISPOSITION_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_DISPOSITION_ID_RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         RESOURCE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for RESOURCE_ACTIVITY_DISPOSITION_ID.
var (
	RESOURCE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	RESOURCE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"RESOURCE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) Enum() *RESOURCE_ACTIVITY_DISPOSITION_ID {
	p := new(RESOURCE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[48].Descriptor()
}

func (RESOURCE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[48]
}

func (x RESOURCE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{48}
}

type MODULE_ACTIVITY_SEVERITY_ID int32

const (
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN       MODULE_ACTIVITY_SEVERITY_ID = 0 // EnumValue: 0; Type: OCSF_VALUE;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_CRITICAL      MODULE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_FATAL         MODULE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_HIGH          MODULE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL MODULE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_LOW           MODULE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_MEDIUM        MODULE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	MODULE_ACTIVITY_SEVERITY_ID_MODULE_ACTIVITY_SEVERITY_ID_OTHER         MODULE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_ACTIVITY_SEVERITY_ID.
var (
	MODULE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "MODULE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "MODULE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "MODULE_ACTIVITY_SEVERITY_ID_LOW",
		6: "MODULE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "MODULE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	MODULE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"MODULE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"MODULE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"MODULE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"MODULE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"MODULE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"MODULE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"MODULE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"MODULE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x MODULE_ACTIVITY_SEVERITY_ID) Enum() *MODULE_ACTIVITY_SEVERITY_ID {
	p := new(MODULE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[49].Descriptor()
}

func (MODULE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[49]
}

func (x MODULE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (MODULE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{49}
}

type SCHEDULED_JOB_ACTIVITY_CATEGORY_UID int32

const (
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN         SCHEDULED_JOB_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY SCHEDULED_JOB_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_CATEGORY_UID.
var (
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"SCHEDULED_JOB_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Enum() *SCHEDULED_JOB_ACTIVITY_CATEGORY_UID {
	p := new(SCHEDULED_JOB_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[50].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[50]
}

func (x SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{50}
}

type REGISTRY_KEY_ACTIVITY_ACTIVITY_ID int32

const (
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN      REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_CREATE       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_DELETE       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_EXPORT       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 9;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_IMPORT       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 8;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_MODIFY       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER        REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 6  // EnumValue: 99; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_READ         REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RENAME       REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RESTORE      REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 7;
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_SET_SECURITY REGISTRY_KEY_ACTIVITY_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_ACTIVITY_ID.
var (
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_CREATE",
		2:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_DELETE",
		3:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_EXPORT",
		4:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_IMPORT",
		5:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_MODIFY",
		6:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER",
		7:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_READ",
		8:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RENAME",
		9:  "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RESTORE",
		10: "REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_SET_SECURITY",
	}
	REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_UNKNOWN":      0,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_CREATE":       1,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_DELETE":       2,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_EXPORT":       3,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_IMPORT":       4,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_MODIFY":       5,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_OTHER":        6,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_READ":         7,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RENAME":       8,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_RESTORE":      9,
		"REGISTRY_KEY_ACTIVITY_ACTIVITY_ID_SET_SECURITY": 10,
	}
)

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Enum() *REGISTRY_KEY_ACTIVITY_ACTIVITY_ID {
	p := new(REGISTRY_KEY_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[51].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[51]
}

func (x REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{51}
}

type SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED           SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 6  // EnumValue: 14; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 7  // EnumValue: 5; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED             SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED          SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 10 // EnumValue: 10; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 11 // EnumValue: 4; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED              SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION           SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER               SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED         SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 3; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED            SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED              SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED         SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID.
var (
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Enum() *SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[52].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[52]
}

func (x SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{52}
}

type MEMORY_ACTIVITY_ACTIVITY_ID int32

const (
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN         MEMORY_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_ALLOCATE_PAGE   MEMORY_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_BUFFER_OVERFLOW MEMORY_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 4;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_DELETE_PAGE     MEMORY_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_DISABLE_DEP     MEMORY_ACTIVITY_ACTIVITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 5;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_ENABLE_DEP      MEMORY_ACTIVITY_ACTIVITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 6;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_MODIFY_PAGE     MEMORY_ACTIVITY_ACTIVITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 2;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_OTHER           MEMORY_ACTIVITY_ACTIVITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_READ            MEMORY_ACTIVITY_ACTIVITY_ID = 8 // EnumValue: 7; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_ACTIVITY_ID_MEMORY_ACTIVITY_ACTIVITY_ID_WRITE           MEMORY_ACTIVITY_ACTIVITY_ID = 9 // Type: OCSF_VALUE; EnumValue: 8;
)

// Enum value maps for MEMORY_ACTIVITY_ACTIVITY_ID.
var (
	MEMORY_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_ACTIVITY_ID_ALLOCATE_PAGE",
		2: "MEMORY_ACTIVITY_ACTIVITY_ID_BUFFER_OVERFLOW",
		3: "MEMORY_ACTIVITY_ACTIVITY_ID_DELETE_PAGE",
		4: "MEMORY_ACTIVITY_ACTIVITY_ID_DISABLE_DEP",
		5: "MEMORY_ACTIVITY_ACTIVITY_ID_ENABLE_DEP",
		6: "MEMORY_ACTIVITY_ACTIVITY_ID_MODIFY_PAGE",
		7: "MEMORY_ACTIVITY_ACTIVITY_ID_OTHER",
		8: "MEMORY_ACTIVITY_ACTIVITY_ID_READ",
		9: "MEMORY_ACTIVITY_ACTIVITY_ID_WRITE",
	}
	MEMORY_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_ACTIVITY_ID_UNKNOWN":         0,
		"MEMORY_ACTIVITY_ACTIVITY_ID_ALLOCATE_PAGE":   1,
		"MEMORY_ACTIVITY_ACTIVITY_ID_BUFFER_OVERFLOW": 2,
		"MEMORY_ACTIVITY_ACTIVITY_ID_DELETE_PAGE":     3,
		"MEMORY_ACTIVITY_ACTIVITY_ID_DISABLE_DEP":     4,
		"MEMORY_ACTIVITY_ACTIVITY_ID_ENABLE_DEP":      5,
		"MEMORY_ACTIVITY_ACTIVITY_ID_MODIFY_PAGE":     6,
		"MEMORY_ACTIVITY_ACTIVITY_ID_OTHER":           7,
		"MEMORY_ACTIVITY_ACTIVITY_ID_READ":            8,
		"MEMORY_ACTIVITY_ACTIVITY_ID_WRITE":           9,
	}
)

func (x MEMORY_ACTIVITY_ACTIVITY_ID) Enum() *MEMORY_ACTIVITY_ACTIVITY_ID {
	p := new(MEMORY_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[53].Descriptor()
}

func (MEMORY_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[53]
}

func (x MEMORY_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (MEMORY_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{53}
}

type PROCESS_ACTIVITY_CLASS_UID int32

const (
	PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY_CLASS_UID_UNKNOWN          PROCESS_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY PROCESS_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1007;
)

// Enum value maps for PROCESS_ACTIVITY_CLASS_UID.
var (
	PROCESS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY",
	}
	PROCESS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"PROCESS_ACTIVITY_CLASS_UID_UNKNOWN":          0,
		"PROCESS_ACTIVITY_CLASS_UID_PROCESS_ACTIVITY": 1,
	}
)

func (x PROCESS_ACTIVITY_CLASS_UID) Enum() *PROCESS_ACTIVITY_CLASS_UID {
	p := new(PROCESS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[54].Descriptor()
}

func (PROCESS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[54]
}

func (x PROCESS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_CLASS_UID.Descriptor instead.
func (PROCESS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{54}
}

type RESOURCE_ACTIVITY_ACTIVITY_ID int32

const (
	RESOURCE_ACTIVITY_ACTIVITY_ID_RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN RESOURCE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	RESOURCE_ACTIVITY_ACTIVITY_ID_RESOURCE_ACTIVITY_ACTIVITY_ID_ACCESS  RESOURCE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	RESOURCE_ACTIVITY_ACTIVITY_ID_RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER   RESOURCE_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RESOURCE_ACTIVITY_ACTIVITY_ID.
var (
	RESOURCE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_ACTIVITY_ID_ACCESS",
		2: "RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	RESOURCE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"RESOURCE_ACTIVITY_ACTIVITY_ID_ACCESS":  1,
		"RESOURCE_ACTIVITY_ACTIVITY_ID_OTHER":   2,
	}
)

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) Enum() *RESOURCE_ACTIVITY_ACTIVITY_ID {
	p := new(RESOURCE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[55].Descriptor()
}

func (RESOURCE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[55]
}

func (x RESOURCE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{55}
}

type SCHEDULED_JOB_ACTIVITY_CLASS_UID int32

const (
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN                SCHEDULED_JOB_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY SCHEDULED_JOB_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1006;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_CLASS_UID.
var (
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY",
	}
	SCHEDULED_JOB_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_CLASS_UID_UNKNOWN":                0,
		"SCHEDULED_JOB_ACTIVITY_CLASS_UID_SCHEDULED_JOB_ACTIVITY": 1,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) Enum() *SCHEDULED_JOB_ACTIVITY_CLASS_UID {
	p := new(SCHEDULED_JOB_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[56].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[56]
}

func (x SCHEDULED_JOB_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_CLASS_UID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{56}
}

type RESOURCE_ACTIVITY_SEVERITY_ID int32

const (
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN       RESOURCE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL      RESOURCE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_FATAL         RESOURCE_ACTIVITY_SEVERITY_ID = 2 // EnumValue: 6; Type: OCSF_VALUE;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_HIGH          RESOURCE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL RESOURCE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_LOW           RESOURCE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM        RESOURCE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	RESOURCE_ACTIVITY_SEVERITY_ID_RESOURCE_ACTIVITY_SEVERITY_ID_OTHER         RESOURCE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for RESOURCE_ACTIVITY_SEVERITY_ID.
var (
	RESOURCE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "RESOURCE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "RESOURCE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "RESOURCE_ACTIVITY_SEVERITY_ID_LOW",
		6: "RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "RESOURCE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	RESOURCE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"RESOURCE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"RESOURCE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"RESOURCE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"RESOURCE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"RESOURCE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"RESOURCE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"RESOURCE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x RESOURCE_ACTIVITY_SEVERITY_ID) Enum() *RESOURCE_ACTIVITY_SEVERITY_ID {
	p := new(RESOURCE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[57].Descriptor()
}

func (RESOURCE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[57]
}

func (x RESOURCE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{57}
}

type KERNEL_ACTIVITY_CLASS_UID int32

const (
	KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY_CLASS_UID_UNKNOWN         KERNEL_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY KERNEL_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1003;
)

// Enum value maps for KERNEL_ACTIVITY_CLASS_UID.
var (
	KERNEL_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "KERNEL_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY",
	}
	KERNEL_ACTIVITY_CLASS_UID_value = map[string]int32{
		"KERNEL_ACTIVITY_CLASS_UID_UNKNOWN":         0,
		"KERNEL_ACTIVITY_CLASS_UID_KERNEL_ACTIVITY": 1,
	}
)

func (x KERNEL_ACTIVITY_CLASS_UID) Enum() *KERNEL_ACTIVITY_CLASS_UID {
	p := new(KERNEL_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x KERNEL_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[58].Descriptor()
}

func (KERNEL_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[58]
}

func (x KERNEL_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_ACTIVITY_CLASS_UID.Descriptor instead.
func (KERNEL_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{58}
}

type MODULE_ACTIVITY_ACTIVITY_ID int32

const (
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN MODULE_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_LOAD    MODULE_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_OTHER   MODULE_ACTIVITY_ACTIVITY_ID = 2 // EnumValue: 99; Type: OCSF_VALUE;
	MODULE_ACTIVITY_ACTIVITY_ID_MODULE_ACTIVITY_ACTIVITY_ID_UNLOAD  MODULE_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for MODULE_ACTIVITY_ACTIVITY_ID.
var (
	MODULE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_ACTIVITY_ID_LOAD",
		2: "MODULE_ACTIVITY_ACTIVITY_ID_OTHER",
		3: "MODULE_ACTIVITY_ACTIVITY_ID_UNLOAD",
	}
	MODULE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"MODULE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"MODULE_ACTIVITY_ACTIVITY_ID_LOAD":    1,
		"MODULE_ACTIVITY_ACTIVITY_ID_OTHER":   2,
		"MODULE_ACTIVITY_ACTIVITY_ID_UNLOAD":  3,
	}
)

func (x MODULE_ACTIVITY_ACTIVITY_ID) Enum() *MODULE_ACTIVITY_ACTIVITY_ID {
	p := new(MODULE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[59].Descriptor()
}

func (MODULE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[59]
}

func (x MODULE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (MODULE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{59}
}

type FILE_ACTIVITY_CLASS_UID int32

const (
	FILE_ACTIVITY_CLASS_UID_FILE_ACTIVITY_CLASS_UID_UNKNOWN              FILE_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_ACTIVITY_CLASS_UID_FILE_ACTIVITY_CLASS_UID_FILE_SYSTEM_ACTIVITY FILE_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1001;
)

// Enum value maps for FILE_ACTIVITY_CLASS_UID.
var (
	FILE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "FILE_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "FILE_ACTIVITY_CLASS_UID_FILE_SYSTEM_ACTIVITY",
	}
	FILE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"FILE_ACTIVITY_CLASS_UID_UNKNOWN":              0,
		"FILE_ACTIVITY_CLASS_UID_FILE_SYSTEM_ACTIVITY": 1,
	}
)

func (x FILE_ACTIVITY_CLASS_UID) Enum() *FILE_ACTIVITY_CLASS_UID {
	p := new(FILE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[60].Descriptor()
}

func (FILE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[60]
}

func (x FILE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_CLASS_UID.Descriptor instead.
func (FILE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{60}
}

type KERNEL_EXTENSION_TYPE_UID int32

const (
	KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNKNOWN KERNEL_EXTENSION_TYPE_UID = 0 // Type: OCSF_VALUE; EnumValue: 100200;
	KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_LOAD    KERNEL_EXTENSION_TYPE_UID = 1 // Type: OCSF_VALUE; EnumValue: 100201;
	KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_OTHER   KERNEL_EXTENSION_TYPE_UID = 2 // Type: OCSF_VALUE; EnumValue: 100299;
	KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNLOAD  KERNEL_EXTENSION_TYPE_UID = 3 // Type: OCSF_VALUE; EnumValue: 100202;
)

// Enum value maps for KERNEL_EXTENSION_TYPE_UID.
var (
	KERNEL_EXTENSION_TYPE_UID_name = map[int32]string{
		0: "KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNKNOWN",
		1: "KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_LOAD",
		2: "KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_OTHER",
		3: "KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNLOAD",
	}
	KERNEL_EXTENSION_TYPE_UID_value = map[string]int32{
		"KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNKNOWN": 0,
		"KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_LOAD":    1,
		"KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_OTHER":   2,
		"KERNEL_EXTENSION_TYPE_UID_KERNEL_EXTENSION_ACTIVITY_UNLOAD":  3,
	}
)

func (x KERNEL_EXTENSION_TYPE_UID) Enum() *KERNEL_EXTENSION_TYPE_UID {
	p := new(KERNEL_EXTENSION_TYPE_UID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[61].Descriptor()
}

func (KERNEL_EXTENSION_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[61]
}

func (x KERNEL_EXTENSION_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_TYPE_UID.Descriptor instead.
func (KERNEL_EXTENSION_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{61}
}

type SCHEDULED_JOB_ACTIVITY_STATUS_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN SCHEDULED_JOB_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE SCHEDULED_JOB_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER   SCHEDULED_JOB_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS SCHEDULED_JOB_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_STATUS_ID.
var (
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE",
		2: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER",
		3: "SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS",
	}
	SCHEDULED_JOB_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_FAILURE": 1,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_OTHER":   2,
		"SCHEDULED_JOB_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) Enum() *SCHEDULED_JOB_ACTIVITY_STATUS_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[62].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[62]
}

func (x SCHEDULED_JOB_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_STATUS_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{62}
}

type PROCESS_ACTIVITY_INJECTION_TYPE_ID int32

const (
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN       PROCESS_ACTIVITY_INJECTION_TYPE_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY  PROCESS_ACTIVITY_INJECTION_TYPE_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER         PROCESS_ACTIVITY_INJECTION_TYPE_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD PROCESS_ACTIVITY_INJECTION_TYPE_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for PROCESS_ACTIVITY_INJECTION_TYPE_ID.
var (
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY",
		2: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER",
		3: "PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD",
	}
	PROCESS_ACTIVITY_INJECTION_TYPE_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_UNKNOWN":       0,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_LOAD_LIBRARY":  1,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_OTHER":         2,
		"PROCESS_ACTIVITY_INJECTION_TYPE_ID_REMOTE_THREAD": 3,
	}
)

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) Enum() *PROCESS_ACTIVITY_INJECTION_TYPE_ID {
	p := new(PROCESS_ACTIVITY_INJECTION_TYPE_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[63].Descriptor()
}

func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[63]
}

func (x PROCESS_ACTIVITY_INJECTION_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_INJECTION_TYPE_ID.Descriptor instead.
func (PROCESS_ACTIVITY_INJECTION_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{63}
}

type REGISTRY_KEY_ACTIVITY_SEVERITY_ID int32

const (
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN       REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 0 // EnumValue: 0; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL      REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL         REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH          REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 3 // EnumValue: 4; Type: OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW           REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM        REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER         REGISTRY_KEY_ACTIVITY_SEVERITY_ID = 7 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_SEVERITY_ID.
var (
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL",
		3: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH",
		4: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW",
		6: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER",
	}
	REGISTRY_KEY_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_LOW":           5,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"REGISTRY_KEY_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Enum() *REGISTRY_KEY_ACTIVITY_SEVERITY_ID {
	p := new(REGISTRY_KEY_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[64].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[64]
}

func (x REGISTRY_KEY_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{64}
}

type RESOURCE_ACTIVITY_STATUS_ID int32

const (
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN RESOURCE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_FAILURE RESOURCE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_OTHER   RESOURCE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	RESOURCE_ACTIVITY_STATUS_ID_RESOURCE_ACTIVITY_STATUS_ID_SUCCESS RESOURCE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for RESOURCE_ACTIVITY_STATUS_ID.
var (
	RESOURCE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "RESOURCE_ACTIVITY_STATUS_ID_FAILURE",
		2: "RESOURCE_ACTIVITY_STATUS_ID_OTHER",
		3: "RESOURCE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	RESOURCE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"RESOURCE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"RESOURCE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"RESOURCE_ACTIVITY_STATUS_ID_OTHER":   2,
		"RESOURCE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x RESOURCE_ACTIVITY_STATUS_ID) Enum() *RESOURCE_ACTIVITY_STATUS_ID {
	p := new(RESOURCE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x RESOURCE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RESOURCE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[65].Descriptor()
}

func (RESOURCE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[65]
}

func (x RESOURCE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RESOURCE_ACTIVITY_STATUS_ID.Descriptor instead.
func (RESOURCE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{65}
}

type SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID int32

const (
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 0 // EnumValue: 0; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_CREATE  SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 1 // EnumValue: 1; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DELETE  SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 3;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DISABLE SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 5;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_ENABLE  SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER   SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 5 // EnumValue: 99; Type: OCSF_VALUE;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_START   SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 6;
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UPDATE  SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 2;
)

// Enum value maps for SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID.
var (
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_CREATE",
		2: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DELETE",
		3: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DISABLE",
		4: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_ENABLE",
		5: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER",
		6: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_START",
		7: "SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UPDATE",
	}
	SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_CREATE":  1,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DELETE":  2,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_DISABLE": 3,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_ENABLE":  4,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_OTHER":   5,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_START":   6,
		"SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID_UPDATE":  7,
	}
)

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Enum() *SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID {
	p := new(SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[66].Descriptor()
}

func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[66]
}

func (x SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{66}
}

type MEMORY_ACTIVITY_SEVERITY_ID int32

const (
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN       MEMORY_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL      MEMORY_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_FATAL         MEMORY_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_HIGH          MEMORY_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL MEMORY_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_LOW           MEMORY_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM        MEMORY_ACTIVITY_SEVERITY_ID = 6 // EnumValue: 3; Type: OCSF_VALUE;
	MEMORY_ACTIVITY_SEVERITY_ID_MEMORY_ACTIVITY_SEVERITY_ID_OTHER         MEMORY_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MEMORY_ACTIVITY_SEVERITY_ID.
var (
	MEMORY_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "MEMORY_ACTIVITY_SEVERITY_ID_FATAL",
		3: "MEMORY_ACTIVITY_SEVERITY_ID_HIGH",
		4: "MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "MEMORY_ACTIVITY_SEVERITY_ID_LOW",
		6: "MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "MEMORY_ACTIVITY_SEVERITY_ID_OTHER",
	}
	MEMORY_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"MEMORY_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"MEMORY_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"MEMORY_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"MEMORY_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"MEMORY_ACTIVITY_SEVERITY_ID_LOW":           5,
		"MEMORY_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"MEMORY_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x MEMORY_ACTIVITY_SEVERITY_ID) Enum() *MEMORY_ACTIVITY_SEVERITY_ID {
	p := new(MEMORY_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[67].Descriptor()
}

func (MEMORY_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[67]
}

func (x MEMORY_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (MEMORY_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{67}
}

type MEMORY_ACTIVITY_STATUS_ID int32

const (
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_UNKNOWN MEMORY_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_FAILURE MEMORY_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_OTHER   MEMORY_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	MEMORY_ACTIVITY_STATUS_ID_MEMORY_ACTIVITY_STATUS_ID_SUCCESS MEMORY_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for MEMORY_ACTIVITY_STATUS_ID.
var (
	MEMORY_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "MEMORY_ACTIVITY_STATUS_ID_FAILURE",
		2: "MEMORY_ACTIVITY_STATUS_ID_OTHER",
		3: "MEMORY_ACTIVITY_STATUS_ID_SUCCESS",
	}
	MEMORY_ACTIVITY_STATUS_ID_value = map[string]int32{
		"MEMORY_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"MEMORY_ACTIVITY_STATUS_ID_FAILURE": 1,
		"MEMORY_ACTIVITY_STATUS_ID_OTHER":   2,
		"MEMORY_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x MEMORY_ACTIVITY_STATUS_ID) Enum() *MEMORY_ACTIVITY_STATUS_ID {
	p := new(MEMORY_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[68].Descriptor()
}

func (MEMORY_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[68]
}

func (x MEMORY_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_STATUS_ID.Descriptor instead.
func (MEMORY_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{68}
}

type REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 8;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED           REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 11;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 7;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 14;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 15;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED             REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED          REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED              REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 17;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION           REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 16;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER               REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 99;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 12;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED         REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 16 // EnumValue: 3; Type: OCSF_VALUE;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED            REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 9;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED              REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 13;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID.
var (
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED",
		3:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		4:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		5:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		6:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED",
		7:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED",
		8:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED",
		9:  "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED",
		10: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		12: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED",
		13: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		14: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER",
		15: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		16: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		17: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED",
		18: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
	}
	REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_APPROVED":            2,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_BLOCKED":             3,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CORRECTED":           4,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       5,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELAYED":             6,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DELETED":             7,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DETECTED":            8,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_DROPPED":             9,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_ISOLATED":            11,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_LOGGED":              12,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           13,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_OTHER":               14,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 15,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         16,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_RESTORED":            17,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         19,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Enum() *REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[69].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[69]
}

func (x REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{69}
}

type MODULE_ACTIVITY_STATUS_ID int32

const (
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_UNKNOWN MODULE_ACTIVITY_STATUS_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_FAILURE MODULE_ACTIVITY_STATUS_ID = 1 // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_OTHER   MODULE_ACTIVITY_STATUS_ID = 2 // Type: OCSF_VALUE; EnumValue: 99;
	MODULE_ACTIVITY_STATUS_ID_MODULE_ACTIVITY_STATUS_ID_SUCCESS MODULE_ACTIVITY_STATUS_ID = 3 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for MODULE_ACTIVITY_STATUS_ID.
var (
	MODULE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0: "MODULE_ACTIVITY_STATUS_ID_UNKNOWN",
		1: "MODULE_ACTIVITY_STATUS_ID_FAILURE",
		2: "MODULE_ACTIVITY_STATUS_ID_OTHER",
		3: "MODULE_ACTIVITY_STATUS_ID_SUCCESS",
	}
	MODULE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"MODULE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"MODULE_ACTIVITY_STATUS_ID_FAILURE": 1,
		"MODULE_ACTIVITY_STATUS_ID_OTHER":   2,
		"MODULE_ACTIVITY_STATUS_ID_SUCCESS": 3,
	}
)

func (x MODULE_ACTIVITY_STATUS_ID) Enum() *MODULE_ACTIVITY_STATUS_ID {
	p := new(MODULE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x MODULE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[70].Descriptor()
}

func (MODULE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[70]
}

func (x MODULE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_ACTIVITY_STATUS_ID.Descriptor instead.
func (MODULE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{70}
}

type PROCESS_ACTIVITY_ACTIVITY_ID int32

const (
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN     PROCESS_ACTIVITY_ACTIVITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_INJECT      PROCESS_ACTIVITY_ACTIVITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_LAUNCH      PROCESS_ACTIVITY_ACTIVITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_OPEN        PROCESS_ACTIVITY_ACTIVITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_OTHER       PROCESS_ACTIVITY_ACTIVITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 99;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_SET_USER_ID PROCESS_ACTIVITY_ACTIVITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_ACTIVITY_ACTIVITY_ID_PROCESS_ACTIVITY_ACTIVITY_ID_TERMINATE   PROCESS_ACTIVITY_ACTIVITY_ID = 6 // EnumValue: 2; Type: OCSF_VALUE;
)

// Enum value maps for PROCESS_ACTIVITY_ACTIVITY_ID.
var (
	PROCESS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_ACTIVITY_ID_INJECT",
		2: "PROCESS_ACTIVITY_ACTIVITY_ID_LAUNCH",
		3: "PROCESS_ACTIVITY_ACTIVITY_ID_OPEN",
		4: "PROCESS_ACTIVITY_ACTIVITY_ID_OTHER",
		5: "PROCESS_ACTIVITY_ACTIVITY_ID_SET_USER_ID",
		6: "PROCESS_ACTIVITY_ACTIVITY_ID_TERMINATE",
	}
	PROCESS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN":     0,
		"PROCESS_ACTIVITY_ACTIVITY_ID_INJECT":      1,
		"PROCESS_ACTIVITY_ACTIVITY_ID_LAUNCH":      2,
		"PROCESS_ACTIVITY_ACTIVITY_ID_OPEN":        3,
		"PROCESS_ACTIVITY_ACTIVITY_ID_OTHER":       4,
		"PROCESS_ACTIVITY_ACTIVITY_ID_SET_USER_ID": 5,
		"PROCESS_ACTIVITY_ACTIVITY_ID_TERMINATE":   6,
	}
)

func (x PROCESS_ACTIVITY_ACTIVITY_ID) Enum() *PROCESS_ACTIVITY_ACTIVITY_ID {
	p := new(PROCESS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[71].Descriptor()
}

func (PROCESS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[71]
}

func (x PROCESS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (PROCESS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{71}
}

type MEMORY_ACTIVITY_CATEGORY_UID int32

const (
	MEMORY_ACTIVITY_CATEGORY_UID_MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN         MEMORY_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	MEMORY_ACTIVITY_CATEGORY_UID_MEMORY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY MEMORY_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for MEMORY_ACTIVITY_CATEGORY_UID.
var (
	MEMORY_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "MEMORY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	MEMORY_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"MEMORY_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"MEMORY_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x MEMORY_ACTIVITY_CATEGORY_UID) Enum() *MEMORY_ACTIVITY_CATEGORY_UID {
	p := new(MEMORY_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x MEMORY_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MEMORY_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[72].Descriptor()
}

func (MEMORY_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[72]
}

func (x MEMORY_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MEMORY_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (MEMORY_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{72}
}

type REGISTRY_KEY_ACTIVITY_CLASS_UID int32

const (
	REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN               REGISTRY_KEY_ACTIVITY_CLASS_UID = 0 // Type: NON_OCSF_VALUE;
	REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY REGISTRY_KEY_ACTIVITY_CLASS_UID = 1 // Type: OCSF_VALUE; EnumValue: 1001;
)

// Enum value maps for REGISTRY_KEY_ACTIVITY_CLASS_UID.
var (
	REGISTRY_KEY_ACTIVITY_CLASS_UID_name = map[int32]string{
		0: "REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN",
		1: "REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY",
	}
	REGISTRY_KEY_ACTIVITY_CLASS_UID_value = map[string]int32{
		"REGISTRY_KEY_ACTIVITY_CLASS_UID_UNKNOWN":               0,
		"REGISTRY_KEY_ACTIVITY_CLASS_UID_REGISTRY_KEY_ACTIVITY": 1,
	}
)

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) Enum() *REGISTRY_KEY_ACTIVITY_CLASS_UID {
	p := new(REGISTRY_KEY_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_KEY_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[73].Descriptor()
}

func (REGISTRY_KEY_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[73]
}

func (x REGISTRY_KEY_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_KEY_ACTIVITY_CLASS_UID.Descriptor instead.
func (REGISTRY_KEY_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{73}
}

type REGISTRY_VALUE_ACTIVITY_SEVERITY_ID int32

const (
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN       REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL      REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL         REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 2 // Type: OCSF_VALUE; EnumValue: 6;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH          REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW           REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM        REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 6 // Type: OCSF_VALUE; EnumValue: 3;
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER         REGISTRY_VALUE_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REGISTRY_VALUE_ACTIVITY_SEVERITY_ID.
var (
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL",
		3: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH",
		4: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW",
		6: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_LOW":           5,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"REGISTRY_VALUE_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Enum() *REGISTRY_VALUE_ACTIVITY_SEVERITY_ID {
	p := new(REGISTRY_VALUE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[74].Descriptor()
}

func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[74]
}

func (x REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REGISTRY_VALUE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (REGISTRY_VALUE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{74}
}

type FILE_ACTIVITY_CATEGORY_UID int32

const (
	FILE_ACTIVITY_CATEGORY_UID_FILE_ACTIVITY_CATEGORY_UID_UNKNOWN         FILE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_ACTIVITY_CATEGORY_UID_FILE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY FILE_ACTIVITY_CATEGORY_UID = 1 // Type: OCSF_VALUE; EnumValue: 1;
)

// Enum value maps for FILE_ACTIVITY_CATEGORY_UID.
var (
	FILE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "FILE_ACTIVITY_CATEGORY_UID_UNKNOWN",
		1: "FILE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	FILE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"FILE_ACTIVITY_CATEGORY_UID_UNKNOWN":         0,
		"FILE_ACTIVITY_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x FILE_ACTIVITY_CATEGORY_UID) Enum() *FILE_ACTIVITY_CATEGORY_UID {
	p := new(FILE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x FILE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[75].Descriptor()
}

func (FILE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[75]
}

func (x FILE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (FILE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{75}
}

type PROCESS_ACTIVITY_SEVERITY_ID int32

const (
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN       PROCESS_ACTIVITY_SEVERITY_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL      PROCESS_ACTIVITY_SEVERITY_ID = 1 // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_FATAL         PROCESS_ACTIVITY_SEVERITY_ID = 2 // EnumValue: 6; Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_HIGH          PROCESS_ACTIVITY_SEVERITY_ID = 3 // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL PROCESS_ACTIVITY_SEVERITY_ID = 4 // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_LOW           PROCESS_ACTIVITY_SEVERITY_ID = 5 // Type: OCSF_VALUE; EnumValue: 2;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM        PROCESS_ACTIVITY_SEVERITY_ID = 6 // EnumValue: 3; Type: OCSF_VALUE;
	PROCESS_ACTIVITY_SEVERITY_ID_PROCESS_ACTIVITY_SEVERITY_ID_OTHER         PROCESS_ACTIVITY_SEVERITY_ID = 7 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_ACTIVITY_SEVERITY_ID.
var (
	PROCESS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0: "PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1: "PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL",
		2: "PROCESS_ACTIVITY_SEVERITY_ID_FATAL",
		3: "PROCESS_ACTIVITY_SEVERITY_ID_HIGH",
		4: "PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		5: "PROCESS_ACTIVITY_SEVERITY_ID_LOW",
		6: "PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM",
		7: "PROCESS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	PROCESS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"PROCESS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"PROCESS_ACTIVITY_SEVERITY_ID_CRITICAL":      1,
		"PROCESS_ACTIVITY_SEVERITY_ID_FATAL":         2,
		"PROCESS_ACTIVITY_SEVERITY_ID_HIGH":          3,
		"PROCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 4,
		"PROCESS_ACTIVITY_SEVERITY_ID_LOW":           5,
		"PROCESS_ACTIVITY_SEVERITY_ID_MEDIUM":        6,
		"PROCESS_ACTIVITY_SEVERITY_ID_OTHER":         7,
	}
)

func (x PROCESS_ACTIVITY_SEVERITY_ID) Enum() *PROCESS_ACTIVITY_SEVERITY_ID {
	p := new(PROCESS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x PROCESS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[76].Descriptor()
}

func (PROCESS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[76]
}

func (x PROCESS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (PROCESS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{76}
}

type KERNEL_EXTENSION_CATEGORY_UID int32

const (
	KERNEL_EXTENSION_CATEGORY_UID_KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN         KERNEL_EXTENSION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	KERNEL_EXTENSION_CATEGORY_UID_KERNEL_EXTENSION_CATEGORY_UID_SYSTEM_ACTIVITY KERNEL_EXTENSION_CATEGORY_UID = 1 // EnumValue: 1; Type: OCSF_VALUE;
)

// Enum value maps for KERNEL_EXTENSION_CATEGORY_UID.
var (
	KERNEL_EXTENSION_CATEGORY_UID_name = map[int32]string{
		0: "KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN",
		1: "KERNEL_EXTENSION_CATEGORY_UID_SYSTEM_ACTIVITY",
	}
	KERNEL_EXTENSION_CATEGORY_UID_value = map[string]int32{
		"KERNEL_EXTENSION_CATEGORY_UID_UNKNOWN":         0,
		"KERNEL_EXTENSION_CATEGORY_UID_SYSTEM_ACTIVITY": 1,
	}
)

func (x KERNEL_EXTENSION_CATEGORY_UID) Enum() *KERNEL_EXTENSION_CATEGORY_UID {
	p := new(KERNEL_EXTENSION_CATEGORY_UID)
	*p = x
	return p
}

func (x KERNEL_EXTENSION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_EXTENSION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[77].Descriptor()
}

func (KERNEL_EXTENSION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes[77]
}

func (x KERNEL_EXTENSION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_EXTENSION_CATEGORY_UID.Descriptor instead.
func (KERNEL_EXTENSION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP(), []int{77}
}

var File_ocsf_v1_0_0_events_system_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0x88,
	0x01, 0x0a, 0x10, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x10, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x01, 0x2a, 0xdd, 0x01, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x2a, 0x80, 0x01, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x2a, 0x81, 0x01, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x39, 0x0a,
	0x35, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xbf, 0x02, 0x0a, 0x23, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x05, 0x2a, 0xb5, 0x01, 0x0a, 0x19, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x2a, 0xc6, 0x07, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b,
	0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b,
	0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x2f, 0x0a, 0x2b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2a,
	0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xba, 0x01, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xc6, 0x07, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a,
	0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x13, 0x2a, 0x92, 0x01, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x7d, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xb1, 0x07, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a,
	0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12,
	0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x9f, 0x03, 0x0a, 0x22, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x2b, 0x0a, 0x27, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2d,
	0x0a, 0x29, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x7a, 0x0a, 0x1c, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xb2, 0x07, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x04, 0x12, 0x3e, 0x0a,
	0x3a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x3c, 0x0a,
	0x38, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x35, 0x0a, 0x31, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x34, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x3e, 0x0a,
	0x3a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x3c, 0x0a,
	0x38, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x37, 0x0a, 0x33, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x2a, 0x8b, 0x02, 0x0a,
	0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a,
	0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x05, 0x2a, 0x87, 0x07, 0x0a, 0x1c, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x34,
	0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x2a, 0x71, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xba, 0x01, 0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0xb9, 0x04, 0x0a, 0x1f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x3d,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x41, 0x0a, 0x3d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x41, 0x0a, 0x3d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x40, 0x0a, 0x3c, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x40, 0x0a, 0x3c, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x06, 0x12, 0x41, 0x0a,
	0x3d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07,
	0x2a, 0xb1, 0x07, 0x0a, 0x1e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51,
	0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x2a, 0xa2, 0x03, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x34, 0x0a,
	0x30, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x3a, 0x0a, 0x36, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x38, 0x0a, 0x34, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0xc0, 0x01, 0x0a, 0x1c, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x2a, 0xaf, 0x08, 0x0a,
	0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x32,
	0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x31,
	0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d,
	0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e,
	0x12, 0x3c, 0x0a, 0x38, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x34,
	0x0a, 0x30, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xb1,
	0x07, 0x0a, 0x1e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2a,
	0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x13, 0x2a, 0xe0, 0x02, 0x0a, 0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x25,
	0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xf4, 0x05, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0x69, 0x0a, 0x0f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x27, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x7e, 0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x38, 0x0a,
	0x34, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x91, 0x01, 0x0a, 0x21, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3d, 0x0a, 0x39,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x5f, 0x0a, 0x13, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xcc, 0x04, 0x0a,
	0x18, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x3a, 0x0a, 0x36, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x10, 0x04, 0x12, 0x37, 0x0a,
	0x33, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x10, 0x05, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x09, 0x2a, 0x71, 0x0a, 0x19, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x9a,
	0x05, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3f, 0x0a,
	0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x3f,
	0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x3f, 0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03,
	0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x04, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x10, 0x05, 0x12, 0x3d, 0x0a, 0x39, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x06, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x07, 0x12, 0x40, 0x0a, 0x3c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x08, 0x12, 0x45, 0x0a, 0x41, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x09, 0x2a, 0x7a, 0x0a, 0x1c, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x8c, 0x01, 0x0a, 0x22, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xd6, 0x02, 0x0a, 0x18, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x33, 0x0a, 0x2f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x05,
	0x2a, 0xec, 0x01, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x30, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x2a,
	0x85, 0x01, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x2a, 0xd3, 0x01, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xe9, 0x02,
	0x0a, 0x1c, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x24, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xab, 0x01, 0x0a, 0x17, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x8f, 0x02, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xde, 0x02, 0x0a, 0x20, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x3f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x40, 0x0a, 0x3c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x43, 0x0a, 0x3f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x40, 0x0a, 0x3c, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x95, 0x05, 0x0a, 0x19, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x0f, 0x2a, 0x52, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xdb, 0x07, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x38, 0x0a, 0x34, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x2a, 0xe0, 0x02, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x8f, 0x01, 0x0a, 0x23, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x37, 0x0a, 0x33, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xa2, 0x04, 0x0a, 0x21, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a,
	0x28, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x09, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x2a, 0xc4,
	0x08, 0x0a, 0x25, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32,
	0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x31, 0x0a,
	0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x34, 0x0a, 0x30, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x30, 0x0a, 0x2c,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x12, 0x12, 0x35,
	0x0a, 0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xcd, 0x03, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d,
	0x0a, 0x29, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x2f, 0x0a,
	0x2b, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x45, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x09, 0x2a, 0x75, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x9d, 0x01, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a,
	0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x3b, 0x0a, 0x37, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0xf2, 0x02, 0x0a,
	0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x07, 0x2a, 0x71, 0x0a, 0x19, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x21, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x2a, 0xbb, 0x01, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x03, 0x2a, 0x70, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x2a, 0x99, 0x02, 0x0a, 0x19, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x3f, 0x0a, 0x3b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x01, 0x12, 0x3d, 0x0a, 0x39, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x3e, 0x0a, 0x3a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x4b, 0x45,
	0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03,
	0x2a, 0xd8, 0x01, 0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xed, 0x01, 0x0a, 0x22,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x96, 0x03, 0x0a, 0x21,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x29,
	0x0a, 0x25, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x07, 0x2a, 0xbf, 0x01, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x9c, 0x03, 0x0a, 0x22, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x29, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x07, 0x2a, 0xe0, 0x02, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0xb5, 0x01, 0x0a, 0x19, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0xd9, 0x08, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x38, 0x0a, 0x34, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x35, 0x0a,
	0x31, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x3e, 0x0a, 0x3a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51,
	0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x33, 0x0a, 0x2f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x36, 0x0a, 0x32, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x2a, 0xb5, 0x01, 0x0a,
	0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x2a, 0xc3, 0x02, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x7a, 0x0a, 0x1c, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x89, 0x01, 0x0a, 0x1f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0x01, 0x2a, 0xa8, 0x03, 0x0a, 0x23, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2d, 0x0a,
	0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x2d,
	0x0a, 0x29, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x74, 0x0a,
	0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x2a, 0xe9, 0x02, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a,
	0x7d, 0x0a, 0x1d, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4b,
	0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x42, 0x93,
	0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73,
	0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f,
	0x56, 0x45, 0x53, 0x45, 0xaa, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0xca, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30,
	0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x29, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30,
	0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x21, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30, 0x3a, 0x3a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x3a, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescData = file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDesc
)

func file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDescData
}

var file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 78)
var file_ocsf_v1_0_0_events_system_enums_enums_proto_goTypes = []interface{}{
	(SYSTEM_STATUS_ID)(0),                       // 0: ocsf.v1_0_0.events.system.enums.SYSTEM_STATUS_ID
	(SYSTEM_CLASS_UID)(0),                       // 1: ocsf.v1_0_0.events.system.enums.SYSTEM_CLASS_UID
	(REGISTRY_VALUE_ACTIVITY_STATUS_ID)(0),      // 2: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_STATUS_ID
	(RESOURCE_ACTIVITY_CATEGORY_UID)(0),         // 3: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CATEGORY_UID
	(RESOURCE_ACTIVITY_CLASS_UID)(0),            // 4: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_CLASS_UID
	(REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID)(0),    // 5: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_ACTIVITY_ID
	(KERNEL_ACTIVITY_STATUS_ID)(0),              // 6: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_STATUS_ID
	(KERNEL_EXTENSION_DISPOSITION_ID)(0),        // 7: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_DISPOSITION_ID
	(PROCESS_ACTIVITY_STATUS_ID)(0),             // 8: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_STATUS_ID
	(PROCESS_ACTIVITY_DISPOSITION_ID)(0),        // 9: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_DISPOSITION_ID
	(REGISTRY_VALUE_ACTIVITY_CATEGORY_UID)(0),   // 10: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CATEGORY_UID
	(PROCESS_ACTIVITY_CATEGORY_UID)(0),          // 11: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CATEGORY_UID
	(MODULE_ACTIVITY_DISPOSITION_ID)(0),         // 12: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_DISPOSITION_ID
	(SCHEDULED_JOB_ACTIVITY_SEVERITY_ID)(0),     // 13: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_SEVERITY_ID
	(KERNEL_ACTIVITY_CATEGORY_UID)(0),           // 14: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CATEGORY_UID
	(FILE_ACTIVITY_TYPE_UID)(0),                 // 15: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_TYPE_UID
	(KERNEL_ACTIVITY_ACTIVITY_ID)(0),            // 16: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_ACTIVITY_ID
	(FILE_ACTIVITY_DISPOSITION_ID)(0),           // 17: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_DISPOSITION_ID
	(MODULE_ACTIVITY_CLASS_UID)(0),              // 18: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CLASS_UID
	(KERNEL_EXTENSION_STATUS_ID)(0),             // 19: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_STATUS_ID
	(SCHEDULED_JOB_ACTIVITY_TYPE_UID)(0),        // 20: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_TYPE_UID
	(MEMORY_ACTIVITY_DISPOSITION_ID)(0),         // 21: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_DISPOSITION_ID
	(PROCESS_ACTIVITY_TYPE_UID)(0),              // 22: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_TYPE_UID
	(KERNEL_EXTENSION_ACTIVITY_ID)(0),           // 23: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_ACTIVITY_ID
	(REGISTRY_KEY_ACTIVITY_DISPOSITION_ID)(0),   // 24: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_DISPOSITION_ID
	(KERNEL_ACTIVITY_DISPOSITION_ID)(0),         // 25: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_DISPOSITION_ID
	(KERNEL_ACTIVITY_SEVERITY_ID)(0),            // 26: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_SEVERITY_ID
	(SYSTEM_DISPOSITION_ID)(0),                  // 27: ocsf.v1_0_0.events.system.enums.SYSTEM_DISPOSITION_ID
	(SYSTEM_TYPE_UID)(0),                        // 28: ocsf.v1_0_0.events.system.enums.SYSTEM_TYPE_UID
	(KERNEL_EXTENSION_CLASS_UID)(0),             // 29: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CLASS_UID
	(REGISTRY_VALUE_ACTIVITY_CLASS_UID)(0),      // 30: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_CLASS_UID
	(SYSTEM_CATEGORY_UID)(0),                    // 31: ocsf.v1_0_0.events.system.enums.SYSTEM_CATEGORY_UID
	(MEMORY_ACTIVITY_TYPE_UID)(0),               // 32: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_TYPE_UID
	(MEMORY_ACTIVITY_CLASS_UID)(0),              // 33: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CLASS_UID
	(REGISTRY_KEY_ACTIVITY_TYPE_UID)(0),         // 34: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_TYPE_UID
	(MODULE_ACTIVITY_CATEGORY_UID)(0),           // 35: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_CATEGORY_UID
	(FILE_ACTIVITY_SEVERITY_ID)(0),              // 36: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_SEVERITY_ID
	(REGISTRY_KEY_ACTIVITY_CATEGORY_UID)(0),     // 37: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CATEGORY_UID
	(KERNEL_ACTIVITY_TYPE_UID)(0),               // 38: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_TYPE_UID
	(MODULE_ACTIVITY_TYPE_UID)(0),               // 39: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_TYPE_UID
	(RESOURCE_ACTIVITY_TYPE_UID)(0),             // 40: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_TYPE_UID
	(REGISTRY_KEY_ACTIVITY_STATUS_ID)(0),        // 41: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_STATUS_ID
	(KERNEL_EXTENSION_SEVERITY_ID)(0),           // 42: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_SEVERITY_ID
	(FILE_ACTIVITY_STATUS_ID)(0),                // 43: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_STATUS_ID
	(SYSTEM_SEVERITY_ID)(0),                     // 44: ocsf.v1_0_0.events.system.enums.SYSTEM_SEVERITY_ID
	(REGISTRY_VALUE_ACTIVITY_TYPE_UID)(0),       // 45: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_TYPE_UID
	(FILE_ACTIVITY_ACTIVITY_ID)(0),              // 46: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_ACTIVITY_ID
	(SYSTEM_ACTIVITY_ID)(0),                     // 47: ocsf.v1_0_0.events.system.enums.SYSTEM_ACTIVITY_ID
	(RESOURCE_ACTIVITY_DISPOSITION_ID)(0),       // 48: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_DISPOSITION_ID
	(MODULE_ACTIVITY_SEVERITY_ID)(0),            // 49: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_SEVERITY_ID
	(SCHEDULED_JOB_ACTIVITY_CATEGORY_UID)(0),    // 50: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CATEGORY_UID
	(REGISTRY_KEY_ACTIVITY_ACTIVITY_ID)(0),      // 51: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_ACTIVITY_ID
	(SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID)(0),  // 52: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_DISPOSITION_ID
	(MEMORY_ACTIVITY_ACTIVITY_ID)(0),            // 53: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_ACTIVITY_ID
	(PROCESS_ACTIVITY_CLASS_UID)(0),             // 54: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_CLASS_UID
	(RESOURCE_ACTIVITY_ACTIVITY_ID)(0),          // 55: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_ACTIVITY_ID
	(SCHEDULED_JOB_ACTIVITY_CLASS_UID)(0),       // 56: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_CLASS_UID
	(RESOURCE_ACTIVITY_SEVERITY_ID)(0),          // 57: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_SEVERITY_ID
	(KERNEL_ACTIVITY_CLASS_UID)(0),              // 58: ocsf.v1_0_0.events.system.enums.KERNEL_ACTIVITY_CLASS_UID
	(MODULE_ACTIVITY_ACTIVITY_ID)(0),            // 59: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_ACTIVITY_ID
	(FILE_ACTIVITY_CLASS_UID)(0),                // 60: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CLASS_UID
	(KERNEL_EXTENSION_TYPE_UID)(0),              // 61: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_TYPE_UID
	(SCHEDULED_JOB_ACTIVITY_STATUS_ID)(0),       // 62: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_STATUS_ID
	(PROCESS_ACTIVITY_INJECTION_TYPE_ID)(0),     // 63: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_INJECTION_TYPE_ID
	(REGISTRY_KEY_ACTIVITY_SEVERITY_ID)(0),      // 64: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_SEVERITY_ID
	(RESOURCE_ACTIVITY_STATUS_ID)(0),            // 65: ocsf.v1_0_0.events.system.enums.RESOURCE_ACTIVITY_STATUS_ID
	(SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID)(0),     // 66: ocsf.v1_0_0.events.system.enums.SCHEDULED_JOB_ACTIVITY_ACTIVITY_ID
	(MEMORY_ACTIVITY_SEVERITY_ID)(0),            // 67: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_SEVERITY_ID
	(MEMORY_ACTIVITY_STATUS_ID)(0),              // 68: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_STATUS_ID
	(REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID)(0), // 69: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_DISPOSITION_ID
	(MODULE_ACTIVITY_STATUS_ID)(0),              // 70: ocsf.v1_0_0.events.system.enums.MODULE_ACTIVITY_STATUS_ID
	(PROCESS_ACTIVITY_ACTIVITY_ID)(0),           // 71: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_ACTIVITY_ID
	(MEMORY_ACTIVITY_CATEGORY_UID)(0),           // 72: ocsf.v1_0_0.events.system.enums.MEMORY_ACTIVITY_CATEGORY_UID
	(REGISTRY_KEY_ACTIVITY_CLASS_UID)(0),        // 73: ocsf.v1_0_0.events.system.enums.REGISTRY_KEY_ACTIVITY_CLASS_UID
	(REGISTRY_VALUE_ACTIVITY_SEVERITY_ID)(0),    // 74: ocsf.v1_0_0.events.system.enums.REGISTRY_VALUE_ACTIVITY_SEVERITY_ID
	(FILE_ACTIVITY_CATEGORY_UID)(0),             // 75: ocsf.v1_0_0.events.system.enums.FILE_ACTIVITY_CATEGORY_UID
	(PROCESS_ACTIVITY_SEVERITY_ID)(0),           // 76: ocsf.v1_0_0.events.system.enums.PROCESS_ACTIVITY_SEVERITY_ID
	(KERNEL_EXTENSION_CATEGORY_UID)(0),          // 77: ocsf.v1_0_0.events.system.enums.KERNEL_EXTENSION_CATEGORY_UID
}
var file_ocsf_v1_0_0_events_system_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_system_enums_enums_proto_init() }
func file_ocsf_v1_0_0_events_system_enums_enums_proto_init() {
	if File_ocsf_v1_0_0_events_system_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDesc,
			NumEnums:      78,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_system_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_system_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_0_0_events_system_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_0_0_events_system_enums_enums_proto = out.File
	file_ocsf_v1_0_0_events_system_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_system_enums_enums_proto_goTypes = nil
	file_ocsf_v1_0_0_events_system_enums_enums_proto_depIdxs = nil
}
