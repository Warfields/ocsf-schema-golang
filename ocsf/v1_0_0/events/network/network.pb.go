// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_0_0/events/network/network.proto

package network

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/events/network/enums"
	objects "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event: network
// Event UID: 5
// URL: https://schema.ocsf.io/1.0.0/classes/rdp_activity
type RdpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities     []string                          `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`                                                                                            // Caption: Capabilities;
	RemoteDisplay    *objects.Display                  `protobuf:"bytes,2,opt,name=remote_display,json=remoteDisplay,proto3" json:"remote_display,omitempty"`                                                                     // Caption: Remote Display;
	ActivityName     string                            `protobuf:"bytes,3,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	Severity         string                            `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	Attacks          []*objects.Attack                 `protobuf:"bytes,5,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: Attacks; Profile: security_control;
	CategoryName     string                            `protobuf:"bytes,6,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	Disposition      string                            `protobuf:"bytes,7,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                              // Profile: security_control; Caption: Disposition;
	Metadata         *objects.Metadata                 `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	ClassUid         enums.RDP_ACTIVITY_CLASS_UID      `protobuf:"varint,9,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                      // Caption: Class ID;
	Time             int64                             `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
	Status           string                            `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // Caption: Status;
	TypeUid          enums.RDP_ACTIVITY_TYPE_UID       `protobuf:"varint,12,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	CertificateChain []string                          `protobuf:"bytes,13,rep,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`                                                           // Caption: Certificate Chain;
	Actor            *objects.Actor                    `protobuf:"bytes,14,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	Traffic          *objects.NetworkTraffic           `protobuf:"bytes,15,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	StatusDetail     string                            `protobuf:"bytes,16,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	SeverityId       enums.RDP_ACTIVITY_SEVERITY_ID    `protobuf:"varint,17,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	Message          string                            `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	Tls              *objects.Tls                      `protobuf:"bytes,19,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                             // Caption: TLS;
	Duration         int32                             `protobuf:"varint,20,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	Proxy            *objects.NetworkProxy             `protobuf:"bytes,21,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                         // Caption: Proxy;
	AppName          string                            `protobuf:"bytes,22,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	CategoryUid      enums.RDP_ACTIVITY_CATEGORY_UID   `protobuf:"varint,23,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	SrcEndpoint      *objects.NetworkEndpoint          `protobuf:"bytes,24,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	Device           *objects.Device                   `protobuf:"bytes,25,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device;
	Request          *objects.Request                  `protobuf:"bytes,26,opt,name=request,proto3" json:"request,omitempty"`                                                                                                     // Caption: API Request Details;
	DispositionId    enums.RDP_ACTIVITY_DISPOSITION_ID `protobuf:"varint,27,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Profile: security_control; Caption: Disposition ID;
	ConnectionInfo   *objects.NetworkConnectionInfo    `protobuf:"bytes,28,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	Count            int32                             `protobuf:"varint,29,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	ProtocolVer      string                            `protobuf:"bytes,30,opt,name=protocol_ver,json=protocolVer,proto3" json:"protocol_ver,omitempty"`                                                                          // Caption: Protocol Version;
	DstEndpoint      *objects.NetworkEndpoint          `protobuf:"bytes,31,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                          // Caption: Destination Endpoint;
	StatusId         enums.RDP_ACTIVITY_STATUS_ID      `protobuf:"varint,32,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	ActivityId       enums.RDP_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,33,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	IdentifierCookie string                            `protobuf:"bytes,34,opt,name=identifier_cookie,json=identifierCookie,proto3" json:"identifier_cookie,omitempty"`                                                           // Caption: Identifier Cookie;
	StartTime        int64                             `protobuf:"varint,35,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	TimezoneOffset   int32                             `protobuf:"varint,36,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                // Caption: Timezone Offset;
	EndTime          int64                             `protobuf:"varint,37,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	Api              *objects.Api                      `protobuf:"bytes,38,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Profile: cloud; Caption: API Details;
	StatusCode       string                            `protobuf:"bytes,39,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
	RawData          string                            `protobuf:"bytes,40,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	Unmapped         *objects.Object                   `protobuf:"bytes,41,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	Response         *objects.Response                 `protobuf:"bytes,42,opt,name=response,proto3" json:"response,omitempty"`                                                                                                   // Caption: API Response Details;
	Observables      []*objects.Observable             `protobuf:"bytes,43,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	Malware          []*objects.Malware                `protobuf:"bytes,44,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Caption: Malware; Profile: security_control;
	Enrichments      []*objects.Enrichment             `protobuf:"bytes,45,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	ClassName        string                            `protobuf:"bytes,46,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
	TypeName         string                            `protobuf:"bytes,47,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	Cloud            *objects.Cloud                    `protobuf:"bytes,48,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Caption: Cloud; Profile: cloud;
}

func (x *RdpActivity) Reset() {
	*x = RdpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdpActivity) ProtoMessage() {}

func (x *RdpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdpActivity.ProtoReflect.Descriptor instead.
func (*RdpActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{0}
}

func (x *RdpActivity) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *RdpActivity) GetRemoteDisplay() *objects.Display {
	if x != nil {
		return x.RemoteDisplay
	}
	return nil
}

func (x *RdpActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *RdpActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RdpActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *RdpActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *RdpActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *RdpActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RdpActivity) GetClassUid() enums.RDP_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.RDP_ACTIVITY_CLASS_UID(0)
}

func (x *RdpActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RdpActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RdpActivity) GetTypeUid() enums.RDP_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.RDP_ACTIVITY_TYPE_UID(0)
}

func (x *RdpActivity) GetCertificateChain() []string {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

func (x *RdpActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *RdpActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *RdpActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *RdpActivity) GetSeverityId() enums.RDP_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.RDP_ACTIVITY_SEVERITY_ID(0)
}

func (x *RdpActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RdpActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *RdpActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RdpActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *RdpActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RdpActivity) GetCategoryUid() enums.RDP_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.RDP_ACTIVITY_CATEGORY_UID(0)
}

func (x *RdpActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *RdpActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RdpActivity) GetRequest() *objects.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RdpActivity) GetDispositionId() enums.RDP_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.RDP_ACTIVITY_DISPOSITION_ID(0)
}

func (x *RdpActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *RdpActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RdpActivity) GetProtocolVer() string {
	if x != nil {
		return x.ProtocolVer
	}
	return ""
}

func (x *RdpActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *RdpActivity) GetStatusId() enums.RDP_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.RDP_ACTIVITY_STATUS_ID(0)
}

func (x *RdpActivity) GetActivityId() enums.RDP_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.RDP_ACTIVITY_ACTIVITY_ID(0)
}

func (x *RdpActivity) GetIdentifierCookie() string {
	if x != nil {
		return x.IdentifierCookie
	}
	return ""
}

func (x *RdpActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RdpActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *RdpActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RdpActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RdpActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *RdpActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *RdpActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *RdpActivity) GetResponse() *objects.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RdpActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *RdpActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *RdpActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *RdpActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *RdpActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *RdpActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

// Event UID: 10
// URL: https://schema.ocsf.io/1.0.0/classes/network_file_activity
// Event: network
type NetworkFileActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor          *objects.Actor                           `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                           // Caption: Actor;
	File           *objects.File                            `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`                                                                                                             // Caption: File;
	StatusDetail   string                                   `protobuf:"bytes,3,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                         // Caption: Status Details;
	TypeName       string                                   `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                     // Caption: Type Name;
	SrcEndpoint    *objects.NetworkEndpoint                 `protobuf:"bytes,5,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                            // Caption: Source Endpoint;
	Severity       string                                   `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                     // Caption: Severity;
	SeverityId     enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID  `protobuf:"varint,7,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`      // Caption: Severity ID;
	TimezoneOffset int32                                    `protobuf:"varint,8,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                  // Caption: Timezone Offset;
	StatusCode     string                                   `protobuf:"bytes,9,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                               // Caption: Status Code;
	ClassUid       enums.NETWORK_FILE_ACTIVITY_CLASS_UID    `protobuf:"varint,10,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`             // Caption: Class ID;
	TypeUid        enums.NETWORK_FILE_ACTIVITY_TYPE_UID     `protobuf:"varint,11,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                 // Caption: Type ID;
	Observables    []*objects.Observable                    `protobuf:"bytes,12,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	EndTime        int64                                    `protobuf:"varint,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	Api            *objects.Api                             `protobuf:"bytes,14,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Profile: cloud; Caption: API Details;
	Count          int32                                    `protobuf:"varint,15,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	StatusId       enums.NETWORK_FILE_ACTIVITY_STATUS_ID    `protobuf:"varint,16,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	StartTime      int64                                    `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                // Caption: Start Time;
	ActivityId     enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID  `protobuf:"varint,18,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`     // Caption: Activity ID;
	ClassName      string                                   `protobuf:"bytes,19,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Time           int64                                    `protobuf:"varint,20,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	CategoryName   string                                   `protobuf:"bytes,21,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	CategoryUid    enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID `protobuf:"varint,22,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	Duration       int32                                    `protobuf:"varint,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Metadata       *objects.Metadata                        `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	ExpirationTime int64                                    `protobuf:"varint,25,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`                                                                 // Caption: Expiration Time;
	Status         string                                   `protobuf:"bytes,26,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Cloud          *objects.Cloud                           `protobuf:"bytes,27,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	Unmapped       *objects.Object                          `protobuf:"bytes,28,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	RawData        string                                   `protobuf:"bytes,29,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	ActivityName   string                                   `protobuf:"bytes,30,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	Enrichments    []*objects.Enrichment                    `protobuf:"bytes,31,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	Message        string                                   `protobuf:"bytes,32,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
}

func (x *NetworkFileActivity) Reset() {
	*x = NetworkFileActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkFileActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkFileActivity) ProtoMessage() {}

func (x *NetworkFileActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkFileActivity.ProtoReflect.Descriptor instead.
func (*NetworkFileActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkFileActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *NetworkFileActivity) GetFile() *objects.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *NetworkFileActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *NetworkFileActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NetworkFileActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *NetworkFileActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *NetworkFileActivity) GetSeverityId() enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID(0)
}

func (x *NetworkFileActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *NetworkFileActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *NetworkFileActivity) GetClassUid() enums.NETWORK_FILE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.NETWORK_FILE_ACTIVITY_CLASS_UID(0)
}

func (x *NetworkFileActivity) GetTypeUid() enums.NETWORK_FILE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.NETWORK_FILE_ACTIVITY_TYPE_UID(0)
}

func (x *NetworkFileActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *NetworkFileActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NetworkFileActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *NetworkFileActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NetworkFileActivity) GetStatusId() enums.NETWORK_FILE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.NETWORK_FILE_ACTIVITY_STATUS_ID(0)
}

func (x *NetworkFileActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NetworkFileActivity) GetActivityId() enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *NetworkFileActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *NetworkFileActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworkFileActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *NetworkFileActivity) GetCategoryUid() enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID(0)
}

func (x *NetworkFileActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetworkFileActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkFileActivity) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *NetworkFileActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkFileActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *NetworkFileActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *NetworkFileActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *NetworkFileActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *NetworkFileActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *NetworkFileActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Event: network
// Event UID: 8
// URL: https://schema.ocsf.io/1.0.0/classes/ftp_activity
type FtpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unmapped         *objects.Object                   `protobuf:"bytes,1,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	Attacks          []*objects.Attack                 `protobuf:"bytes,2,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: Attacks; Profile: security_control;
	Enrichments      []*objects.Enrichment             `protobuf:"bytes,3,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	ClassUid         enums.FTP_ACTIVITY_CLASS_UID      `protobuf:"varint,4,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                      // Caption: Class ID;
	Duration         int32                             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Metadata         *objects.Metadata                 `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	Api              *objects.Api                      `protobuf:"bytes,7,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	TypeUid          enums.FTP_ACTIVITY_TYPE_UID       `protobuf:"varint,8,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                          // Caption: Type ID;
	DstEndpoint      *objects.NetworkEndpoint          `protobuf:"bytes,9,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                           // Caption: Destination Endpoint;
	Time             int64                             `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
	Severity         string                            `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                   // Caption: Severity;
	Malware          []*objects.Malware                `protobuf:"bytes,12,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Profile: security_control; Caption: Malware;
	DispositionId    enums.FTP_ACTIVITY_DISPOSITION_ID `protobuf:"varint,13,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Codes            []int32                           `protobuf:"varint,14,rep,packed,name=codes,proto3" json:"codes,omitempty"`                                                                                                 // Caption: Response Codes;
	ActivityName     string                            `protobuf:"bytes,15,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	AppName          string                            `protobuf:"bytes,16,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	TimezoneOffset   int32                             `protobuf:"varint,17,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                // Caption: Timezone Offset;
	ConnectionInfo   *objects.NetworkConnectionInfo    `protobuf:"bytes,18,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	ActivityId       enums.FTP_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,19,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	SrcEndpoint      *objects.NetworkEndpoint          `protobuf:"bytes,20,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	TypeName         string                            `protobuf:"bytes,21,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	Traffic          *objects.NetworkTraffic           `protobuf:"bytes,22,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	SeverityId       enums.FTP_ACTIVITY_SEVERITY_ID    `protobuf:"varint,23,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	StatusId         enums.FTP_ACTIVITY_STATUS_ID      `protobuf:"varint,24,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Status           string                            `protobuf:"bytes,25,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // Caption: Status;
	Count            int32                             `protobuf:"varint,26,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	Port             int32                             `protobuf:"varint,27,opt,name=port,proto3" json:"port,omitempty"`                                                                                                          // Caption: Port;
	Name             string                            `protobuf:"bytes,28,opt,name=name,proto3" json:"name,omitempty"`                                                                                                           // Caption: Name;
	Tls              *objects.Tls                      `protobuf:"bytes,29,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                             // Caption: TLS;
	CategoryUid      enums.FTP_ACTIVITY_CATEGORY_UID   `protobuf:"varint,30,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Observables      []*objects.Observable             `protobuf:"bytes,31,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	Type             string                            `protobuf:"bytes,32,opt,name=type,proto3" json:"type,omitempty"`                                                                                                           // Caption: Type;
	Device           *objects.Device                   `protobuf:"bytes,33,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device; Profile: host;
	StartTime        int64                             `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	Disposition      string                            `protobuf:"bytes,35,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Profile: security_control; Caption: Disposition;
	StatusDetail     string                            `protobuf:"bytes,36,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	EndTime          int64                             `protobuf:"varint,37,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	RawData          string                            `protobuf:"bytes,38,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	Cloud            *objects.Cloud                    `protobuf:"bytes,39,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Caption: Cloud; Profile: cloud;
	Proxy            *objects.NetworkProxy             `protobuf:"bytes,40,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                         // Caption: Proxy;
	Actor            *objects.Actor                    `protobuf:"bytes,41,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	ClassName        string                            `protobuf:"bytes,42,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
	CategoryName     string                            `protobuf:"bytes,43,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                       // Caption: Category;
	Command          string                            `protobuf:"bytes,44,opt,name=command,proto3" json:"command,omitempty"`                                                                                                     // Caption: Command;
	CommandResponses []string                          `protobuf:"bytes,45,rep,name=command_responses,json=commandResponses,proto3" json:"command_responses,omitempty"`                                                           // Caption: Command Responses;
	Message          string                            `protobuf:"bytes,46,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	StatusCode       string                            `protobuf:"bytes,47,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
}

func (x *FtpActivity) Reset() {
	*x = FtpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpActivity) ProtoMessage() {}

func (x *FtpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpActivity.ProtoReflect.Descriptor instead.
func (*FtpActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{2}
}

func (x *FtpActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *FtpActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *FtpActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *FtpActivity) GetClassUid() enums.FTP_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.FTP_ACTIVITY_CLASS_UID(0)
}

func (x *FtpActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FtpActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FtpActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *FtpActivity) GetTypeUid() enums.FTP_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.FTP_ACTIVITY_TYPE_UID(0)
}

func (x *FtpActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *FtpActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FtpActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *FtpActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *FtpActivity) GetDispositionId() enums.FTP_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.FTP_ACTIVITY_DISPOSITION_ID(0)
}

func (x *FtpActivity) GetCodes() []int32 {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *FtpActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *FtpActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FtpActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *FtpActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *FtpActivity) GetActivityId() enums.FTP_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.FTP_ACTIVITY_ACTIVITY_ID(0)
}

func (x *FtpActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *FtpActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FtpActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *FtpActivity) GetSeverityId() enums.FTP_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.FTP_ACTIVITY_SEVERITY_ID(0)
}

func (x *FtpActivity) GetStatusId() enums.FTP_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.FTP_ACTIVITY_STATUS_ID(0)
}

func (x *FtpActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FtpActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FtpActivity) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FtpActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FtpActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *FtpActivity) GetCategoryUid() enums.FTP_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.FTP_ACTIVITY_CATEGORY_UID(0)
}

func (x *FtpActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *FtpActivity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FtpActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *FtpActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FtpActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *FtpActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *FtpActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FtpActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *FtpActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *FtpActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *FtpActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FtpActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FtpActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *FtpActivity) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *FtpActivity) GetCommandResponses() []string {
	if x != nil {
		return x.CommandResponses
	}
	return nil
}

func (x *FtpActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FtpActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

// Event: network
// Event UID: 7
// URL: https://schema.ocsf.io/1.0.0/classes/ssh_activity
type SshActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVer    string                            `protobuf:"bytes,1,opt,name=protocol_ver,json=protocolVer,proto3" json:"protocol_ver,omitempty"`                                                                           // Caption: Protocol Version;
	Message        string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	Time           int64                             `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	Count          int32                             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,5,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	DstEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,6,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                           // Caption: Destination Endpoint;
	Api            *objects.Api                      `protobuf:"bytes,7,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
	Tls            *objects.Tls                      `protobuf:"bytes,8,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                              // Caption: TLS;
	StatusId       enums.SSH_ACTIVITY_STATUS_ID      `protobuf:"varint,9,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                      // Caption: Status ID;
	Proxy          *objects.NetworkProxy             `protobuf:"bytes,10,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                         // Caption: Proxy;
	Malware        []*objects.Malware                `protobuf:"bytes,11,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Caption: Malware; Profile: security_control;
	TimezoneOffset int32                             `protobuf:"varint,12,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                // Caption: Timezone Offset;
	Actor          *objects.Actor                    `protobuf:"bytes,13,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	SeverityId     enums.SSH_ACTIVITY_SEVERITY_ID    `protobuf:"varint,14,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	ActivityId     enums.SSH_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,15,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	TypeName       string                            `protobuf:"bytes,16,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	StatusCode     string                            `protobuf:"bytes,17,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
	RawData        string                            `protobuf:"bytes,18,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	Observables    []*objects.Observable             `protobuf:"bytes,19,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	Attacks        []*objects.Attack                 `protobuf:"bytes,20,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                     // Caption: Attacks; Profile: security_control;
	CategoryName   string                            `protobuf:"bytes,21,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                       // Caption: Category;
	ConnectionInfo *objects.NetworkConnectionInfo    `protobuf:"bytes,22,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	DispositionId  enums.SSH_ACTIVITY_DISPOSITION_ID `protobuf:"varint,23,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	EndTime        int64                             `protobuf:"varint,24,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	Metadata       *objects.Metadata                 `protobuf:"bytes,25,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	Cloud          *objects.Cloud                    `protobuf:"bytes,26,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Caption: Cloud; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,27,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	StartTime      int64                             `protobuf:"varint,28,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	ActivityName   string                            `protobuf:"bytes,29,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	Severity       string                            `protobuf:"bytes,30,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                   // Caption: Severity;
	ClassUid       enums.SSH_ACTIVITY_CLASS_UID      `protobuf:"varint,31,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	ClientHassh    *objects.Hassh                    `protobuf:"bytes,32,opt,name=client_hassh,json=clientHassh,proto3" json:"client_hassh,omitempty"`                                                                          // Caption: Client HASSH;
	ServerHassh    *objects.Hassh                    `protobuf:"bytes,33,opt,name=server_hassh,json=serverHassh,proto3" json:"server_hassh,omitempty"`                                                                          // Caption: Server HASSH;
	CategoryUid    enums.SSH_ACTIVITY_CATEGORY_UID   `protobuf:"varint,34,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Status         string                            `protobuf:"bytes,35,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // Caption: Status;
	AppName        string                            `protobuf:"bytes,36,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	Device         *objects.Device                   `protobuf:"bytes,37,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device; Profile: host;
	Duration       int32                             `protobuf:"varint,38,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	TypeUid        enums.SSH_ACTIVITY_TYPE_UID       `protobuf:"varint,39,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Disposition    string                            `protobuf:"bytes,40,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Caption: Disposition; Profile: security_control;
	Unmapped       *objects.Object                   `protobuf:"bytes,41,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	Traffic        *objects.NetworkTraffic           `protobuf:"bytes,42,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	StatusDetail   string                            `protobuf:"bytes,43,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	ClassName      string                            `protobuf:"bytes,44,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
}

func (x *SshActivity) Reset() {
	*x = SshActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshActivity) ProtoMessage() {}

func (x *SshActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshActivity.ProtoReflect.Descriptor instead.
func (*SshActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{3}
}

func (x *SshActivity) GetProtocolVer() string {
	if x != nil {
		return x.ProtocolVer
	}
	return ""
}

func (x *SshActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SshActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SshActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SshActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *SshActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *SshActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *SshActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *SshActivity) GetStatusId() enums.SSH_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SSH_ACTIVITY_STATUS_ID(0)
}

func (x *SshActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *SshActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *SshActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *SshActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *SshActivity) GetSeverityId() enums.SSH_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SSH_ACTIVITY_SEVERITY_ID(0)
}

func (x *SshActivity) GetActivityId() enums.SSH_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SSH_ACTIVITY_ACTIVITY_ID(0)
}

func (x *SshActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SshActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SshActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SshActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *SshActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *SshActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SshActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *SshActivity) GetDispositionId() enums.SSH_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.SSH_ACTIVITY_DISPOSITION_ID(0)
}

func (x *SshActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SshActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SshActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *SshActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *SshActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SshActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *SshActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SshActivity) GetClassUid() enums.SSH_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SSH_ACTIVITY_CLASS_UID(0)
}

func (x *SshActivity) GetClientHassh() *objects.Hassh {
	if x != nil {
		return x.ClientHassh
	}
	return nil
}

func (x *SshActivity) GetServerHassh() *objects.Hassh {
	if x != nil {
		return x.ServerHassh
	}
	return nil
}

func (x *SshActivity) GetCategoryUid() enums.SSH_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SSH_ACTIVITY_CATEGORY_UID(0)
}

func (x *SshActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SshActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *SshActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SshActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SshActivity) GetTypeUid() enums.SSH_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SSH_ACTIVITY_TYPE_UID(0)
}

func (x *SshActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *SshActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *SshActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *SshActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *SshActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

// Event: network
// Event UID: 11
// URL: https://schema.ocsf.io/1.0.0/classes/email_file_activity
type EmailFileActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassUid       enums.EMAIL_FILE_ACTIVITY_CLASS_UID      `protobuf:"varint,1,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	ActivityName   string                                   `protobuf:"bytes,2,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                              // Caption: Activity;
	Severity       string                                   `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                          // Caption: Severity;
	ClassName      string                                   `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                       // Caption: Class;
	Duration       int32                                    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                         // Caption: Duration;
	StatusId       enums.EMAIL_FILE_ACTIVITY_STATUS_ID      `protobuf:"varint,6,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Status         string                                   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                                                                                                              // Caption: Status;
	CategoryName   string                                   `protobuf:"bytes,8,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                              // Caption: Category;
	DispositionId  enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID `protobuf:"varint,9,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	Api            *objects.Api                             `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                   // Caption: API Details; Profile: cloud;
	Message        string                                   `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`                                                                                                           // Caption: Message;
	RawData        string                                   `protobuf:"bytes,12,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
	CategoryUid    enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID   `protobuf:"varint,13,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`        // Caption: Category ID;
	Enrichments    []*objects.Enrichment                    `protobuf:"bytes,14,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                   // Caption: Enrichments;
	File           *objects.File                            `protobuf:"bytes,15,opt,name=file,proto3" json:"file,omitempty"`                                                                                                                 // Caption: File;
	Device         *objects.Device                          `protobuf:"bytes,16,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	StartTime      int64                                    `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                     // Caption: Start Time;
	TimezoneOffset int32                                    `protobuf:"varint,18,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                      // Caption: Timezone Offset;
	Unmapped       *objects.Object                          `protobuf:"bytes,19,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	Actor          *objects.Actor                           `protobuf:"bytes,20,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                               // Caption: Actor; Profile: host;
	Count          int32                                    `protobuf:"varint,21,opt,name=count,proto3" json:"count,omitempty"`                                                                                                              // Caption: Count;
	StatusDetail   string                                   `protobuf:"bytes,22,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	StatusCode     string                                   `protobuf:"bytes,23,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	ActivityId     enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,24,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`            // Caption: Activity ID;
	Attacks        []*objects.Attack                        `protobuf:"bytes,25,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                           // Profile: security_control; Caption: Attacks;
	Disposition    string                                   `protobuf:"bytes,26,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                   // Caption: Disposition; Profile: security_control;
	TypeUid        enums.EMAIL_FILE_ACTIVITY_TYPE_UID       `protobuf:"varint,27,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                        // Caption: Type ID;
	Cloud          *objects.Cloud                           `protobuf:"bytes,28,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                               // Caption: Cloud; Profile: cloud;
	Malware        []*objects.Malware                       `protobuf:"bytes,29,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                           // Profile: security_control; Caption: Malware;
	Metadata       *objects.Metadata                        `protobuf:"bytes,30,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                         // Caption: Metadata;
	EndTime        int64                                    `protobuf:"varint,31,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                           // Caption: End Time;
	EmailUid       string                                   `protobuf:"bytes,32,opt,name=email_uid,json=emailUid,proto3" json:"email_uid,omitempty"`                                                                                         // Caption: Email UID;
	Observables    []*objects.Observable                    `protobuf:"bytes,33,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                   // Caption: Observables;
	SeverityId     enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID    `protobuf:"varint,34,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`            // Caption: Severity ID;
	TypeName       string                                   `protobuf:"bytes,35,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                         // Caption: Type Name;
	Time           int64                                    `protobuf:"varint,36,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                // Caption: Event Time;
}

func (x *EmailFileActivity) Reset() {
	*x = EmailFileActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailFileActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailFileActivity) ProtoMessage() {}

func (x *EmailFileActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailFileActivity.ProtoReflect.Descriptor instead.
func (*EmailFileActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{4}
}

func (x *EmailFileActivity) GetClassUid() enums.EMAIL_FILE_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.EMAIL_FILE_ACTIVITY_CLASS_UID(0)
}

func (x *EmailFileActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *EmailFileActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *EmailFileActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *EmailFileActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EmailFileActivity) GetStatusId() enums.EMAIL_FILE_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.EMAIL_FILE_ACTIVITY_STATUS_ID(0)
}

func (x *EmailFileActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EmailFileActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *EmailFileActivity) GetDispositionId() enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID(0)
}

func (x *EmailFileActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *EmailFileActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EmailFileActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *EmailFileActivity) GetCategoryUid() enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID(0)
}

func (x *EmailFileActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *EmailFileActivity) GetFile() *objects.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *EmailFileActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EmailFileActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EmailFileActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *EmailFileActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *EmailFileActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *EmailFileActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EmailFileActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *EmailFileActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *EmailFileActivity) GetActivityId() enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID(0)
}

func (x *EmailFileActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *EmailFileActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *EmailFileActivity) GetTypeUid() enums.EMAIL_FILE_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.EMAIL_FILE_ACTIVITY_TYPE_UID(0)
}

func (x *EmailFileActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *EmailFileActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *EmailFileActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EmailFileActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EmailFileActivity) GetEmailUid() string {
	if x != nil {
		return x.EmailUid
	}
	return ""
}

func (x *EmailFileActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *EmailFileActivity) GetSeverityId() enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID(0)
}

func (x *EmailFileActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EmailFileActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Event: network
// Event UID: 3
// URL: https://schema.ocsf.io/1.0.0/classes/dns_activity
type DnsActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId     enums.DNS_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	TimezoneOffset int32                             `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	SeverityId     enums.DNS_ACTIVITY_SEVERITY_ID    `protobuf:"varint,3,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`              // Caption: Severity ID;
	EndTime        int64                             `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                      // Caption: End Time;
	Proxy          *objects.NetworkProxy             `protobuf:"bytes,5,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                          // Caption: Proxy;
	StatusDetail   string                            `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	CategoryName   string                            `protobuf:"bytes,7,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	Status         string                            `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Severity       string                            `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	ResponseTime   int64                             `protobuf:"varint,10,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`                                                                      // Caption: Response Time;
	Malware        []*objects.Malware                `protobuf:"bytes,11,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Caption: Malware; Profile: security_control;
	Device         *objects.Device                   `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Profile: host; Caption: Device;
	Duration       int32                             `protobuf:"varint,13,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	Cloud          *objects.Cloud                    `protobuf:"bytes,14,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Caption: Cloud; Profile: cloud;
	StartTime      int64                             `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	ClassUid       enums.DNS_ACTIVITY_CLASS_UID      `protobuf:"varint,16,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	Count          int32                             `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	Query          *objects.DnsQuery                 `protobuf:"bytes,18,opt,name=query,proto3" json:"query,omitempty"`                                                                                                         // Caption: DNS Query;
	QueryTime      int64                             `protobuf:"varint,19,opt,name=query_time,json=queryTime,proto3" json:"query_time,omitempty"`                                                                               // Caption: Query Time;
	Rcode          string                            `protobuf:"bytes,20,opt,name=rcode,proto3" json:"rcode,omitempty"`                                                                                                         // Caption: Response Code;
	Attacks        []*objects.Attack                 `protobuf:"bytes,21,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                     // Caption: Attacks; Profile: security_control;
	Tls            *objects.Tls                      `protobuf:"bytes,22,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                             // Caption: TLS;
	SrcEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,23,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	Observables    []*objects.Observable             `protobuf:"bytes,24,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	ActivityName   string                            `protobuf:"bytes,25,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	ConnectionInfo *objects.NetworkConnectionInfo    `protobuf:"bytes,26,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	ClassName      string                            `protobuf:"bytes,27,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
	Message        string                            `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	Api            *objects.Api                      `protobuf:"bytes,29,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Profile: cloud; Caption: API Details;
	Unmapped       *objects.Object                   `protobuf:"bytes,30,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	TypeName       string                            `protobuf:"bytes,31,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	RcodeId        enums.DNS_ACTIVITY_RCODE_ID       `protobuf:"varint,32,opt,name=rcode_id,json=rcodeId,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_RCODE_ID" json:"rcode_id,omitempty"`                         // Caption: Response Code ID;
	DstEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,33,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                          // Caption: Destination Endpoint;
	Actor          *objects.Actor                    `protobuf:"bytes,34,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	AppName        string                            `protobuf:"bytes,35,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	DispositionId  enums.DNS_ACTIVITY_DISPOSITION_ID `protobuf:"varint,36,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	StatusCode     string                            `protobuf:"bytes,37,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,38,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	Traffic        *objects.NetworkTraffic           `protobuf:"bytes,39,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	Answers        []*objects.DnsAnswer              `protobuf:"bytes,40,rep,name=answers,proto3" json:"answers,omitempty"`                                                                                                     // Caption: DNS Answer;
	Disposition    string                            `protobuf:"bytes,41,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Caption: Disposition; Profile: security_control;
	CategoryUid    enums.DNS_ACTIVITY_CATEGORY_UID   `protobuf:"varint,42,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	RawData        string                            `protobuf:"bytes,43,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	TypeUid        enums.DNS_ACTIVITY_TYPE_UID       `protobuf:"varint,44,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Time           int64                             `protobuf:"varint,45,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
	Metadata       *objects.Metadata                 `protobuf:"bytes,46,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	StatusId       enums.DNS_ACTIVITY_STATUS_ID      `protobuf:"varint,47,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
}

func (x *DnsActivity) Reset() {
	*x = DnsActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsActivity) ProtoMessage() {}

func (x *DnsActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsActivity.ProtoReflect.Descriptor instead.
func (*DnsActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{5}
}

func (x *DnsActivity) GetActivityId() enums.DNS_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DNS_ACTIVITY_ACTIVITY_ID(0)
}

func (x *DnsActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DnsActivity) GetSeverityId() enums.DNS_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DNS_ACTIVITY_SEVERITY_ID(0)
}

func (x *DnsActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DnsActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *DnsActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DnsActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DnsActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DnsActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DnsActivity) GetResponseTime() int64 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

func (x *DnsActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *DnsActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DnsActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DnsActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DnsActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DnsActivity) GetClassUid() enums.DNS_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DNS_ACTIVITY_CLASS_UID(0)
}

func (x *DnsActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DnsActivity) GetQuery() *objects.DnsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DnsActivity) GetQueryTime() int64 {
	if x != nil {
		return x.QueryTime
	}
	return 0
}

func (x *DnsActivity) GetRcode() string {
	if x != nil {
		return x.Rcode
	}
	return ""
}

func (x *DnsActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *DnsActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *DnsActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *DnsActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DnsActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DnsActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *DnsActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DnsActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DnsActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DnsActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DnsActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DnsActivity) GetRcodeId() enums.DNS_ACTIVITY_RCODE_ID {
	if x != nil {
		return x.RcodeId
	}
	return enums.DNS_ACTIVITY_RCODE_ID(0)
}

func (x *DnsActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *DnsActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DnsActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DnsActivity) GetDispositionId() enums.DNS_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.DNS_ACTIVITY_DISPOSITION_ID(0)
}

func (x *DnsActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DnsActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DnsActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *DnsActivity) GetAnswers() []*objects.DnsAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *DnsActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *DnsActivity) GetCategoryUid() enums.DNS_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DNS_ACTIVITY_CATEGORY_UID(0)
}

func (x *DnsActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DnsActivity) GetTypeUid() enums.DNS_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DNS_ACTIVITY_TYPE_UID(0)
}

func (x *DnsActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DnsActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DnsActivity) GetStatusId() enums.DNS_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DNS_ACTIVITY_STATUS_ID(0)
}

// Event: network
// Event UID: 4
// URL: https://schema.ocsf.io/1.0.0/classes/dhcp_activity
type DhcpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcEndpoint    *objects.NetworkEndpoint         `protobuf:"bytes,1,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                    // Caption: Source Endpoint;
	EndTime        int64                            `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                               // Caption: End Time;
	Duration       int32                            `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                            // Caption: Duration;
	TypeUid        enums.DHCP_ACTIVITY_TYPE_UID     `protobuf:"varint,4,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                  // Caption: Type ID;
	ClassName      string                           `protobuf:"bytes,5,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                          // Caption: Class;
	ClassUid       enums.DHCP_ACTIVITY_CLASS_UID    `protobuf:"varint,6,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`              // Caption: Class ID;
	ActivityId     enums.DHCP_ACTIVITY_ACTIVITY_ID  `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`      // Caption: Activity ID;
	IsRenewal      bool                             `protobuf:"varint,8,opt,name=is_renewal,json=isRenewal,proto3" json:"is_renewal,omitempty"`                                                                         // Caption: Renewal;
	StatusDetail   string                           `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                 // Caption: Status Details;
	TimezoneOffset int32                            `protobuf:"varint,10,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                         // Caption: Timezone Offset;
	Metadata       *objects.Metadata                `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                            // Caption: Metadata;
	TypeName       string                           `protobuf:"bytes,12,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                            // Caption: Type Name;
	StatusCode     string                           `protobuf:"bytes,13,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                      // Caption: Status Code;
	StatusId       enums.DHCP_ACTIVITY_STATUS_ID    `protobuf:"varint,14,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`             // Caption: Status ID;
	Observables    []*objects.Observable            `protobuf:"bytes,15,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                      // Caption: Observables;
	Unmapped       *objects.Object                  `protobuf:"bytes,16,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                            // Caption: Unmapped Data;
	CategoryUid    enums.DHCP_ACTIVITY_CATEGORY_UID `protobuf:"varint,17,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"` // Caption: Category ID;
	RawData        string                           `protobuf:"bytes,18,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                               // Caption: Raw Data;
	DstEndpoint    *objects.NetworkEndpoint         `protobuf:"bytes,19,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                   // Caption: Destination Endpoint;
	Relay          *objects.NetworkInterface        `protobuf:"bytes,20,opt,name=relay,proto3" json:"relay,omitempty"`                                                                                                  // Caption: Relay;
	Message        string                           `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`                                                                                              // Caption: Message;
	ActivityName   string                           `protobuf:"bytes,22,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                // Caption: Activity;
	Cloud          *objects.Cloud                   `protobuf:"bytes,23,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                  // Caption: Cloud; Profile: cloud;
	Status         string                           `protobuf:"bytes,24,opt,name=status,proto3" json:"status,omitempty"`                                                                                                // Caption: Status;
	CategoryName   string                           `protobuf:"bytes,25,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                // Caption: Category;
	Enrichments    []*objects.Enrichment            `protobuf:"bytes,26,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                      // Caption: Enrichments;
	Api            *objects.Api                     `protobuf:"bytes,27,opt,name=api,proto3" json:"api,omitempty"`                                                                                                      // Profile: cloud; Caption: API Details;
	Actor          *objects.Actor                   `protobuf:"bytes,28,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                  // Caption: Actor; Profile: host;
	Device         *objects.Device                  `protobuf:"bytes,29,opt,name=device,proto3" json:"device,omitempty"`                                                                                                // Caption: Device; Profile: host;
	TransactionUid string                           `protobuf:"bytes,30,opt,name=transaction_uid,json=transactionUid,proto3" json:"transaction_uid,omitempty"`                                                          // Caption: Transaction UID;
	SeverityId     enums.DHCP_ACTIVITY_SEVERITY_ID  `protobuf:"varint,31,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`     // Caption: Severity ID;
	Count          int32                            `protobuf:"varint,32,opt,name=count,proto3" json:"count,omitempty"`                                                                                                 // Caption: Count;
	LeaseDur       int32                            `protobuf:"varint,33,opt,name=lease_dur,json=leaseDur,proto3" json:"lease_dur,omitempty"`                                                                           // Caption: Lease Duration;
	StartTime      int64                            `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                        // Caption: Start Time;
	Severity       string                           `protobuf:"bytes,35,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                            // Caption: Severity;
	Time           int64                            `protobuf:"varint,36,opt,name=time,proto3" json:"time,omitempty"`                                                                                                   // Caption: Event Time;
}

func (x *DhcpActivity) Reset() {
	*x = DhcpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpActivity) ProtoMessage() {}

func (x *DhcpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpActivity.ProtoReflect.Descriptor instead.
func (*DhcpActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{6}
}

func (x *DhcpActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *DhcpActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DhcpActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DhcpActivity) GetTypeUid() enums.DHCP_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.DHCP_ACTIVITY_TYPE_UID(0)
}

func (x *DhcpActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *DhcpActivity) GetClassUid() enums.DHCP_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.DHCP_ACTIVITY_CLASS_UID(0)
}

func (x *DhcpActivity) GetActivityId() enums.DHCP_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.DHCP_ACTIVITY_ACTIVITY_ID(0)
}

func (x *DhcpActivity) GetIsRenewal() bool {
	if x != nil {
		return x.IsRenewal
	}
	return false
}

func (x *DhcpActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DhcpActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *DhcpActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DhcpActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *DhcpActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *DhcpActivity) GetStatusId() enums.DHCP_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.DHCP_ACTIVITY_STATUS_ID(0)
}

func (x *DhcpActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *DhcpActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *DhcpActivity) GetCategoryUid() enums.DHCP_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.DHCP_ACTIVITY_CATEGORY_UID(0)
}

func (x *DhcpActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *DhcpActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *DhcpActivity) GetRelay() *objects.NetworkInterface {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *DhcpActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DhcpActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *DhcpActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *DhcpActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DhcpActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *DhcpActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *DhcpActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *DhcpActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *DhcpActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DhcpActivity) GetTransactionUid() string {
	if x != nil {
		return x.TransactionUid
	}
	return ""
}

func (x *DhcpActivity) GetSeverityId() enums.DHCP_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.DHCP_ACTIVITY_SEVERITY_ID(0)
}

func (x *DhcpActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DhcpActivity) GetLeaseDur() int32 {
	if x != nil {
		return x.LeaseDur
	}
	return 0
}

func (x *DhcpActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DhcpActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *DhcpActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Event: network
// Event UID: 12
// URL: https://schema.ocsf.io/1.0.0/classes/email_url_activity
type EmailUrlActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      int64                                   `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                      // Caption: Start Time;
	Enrichments    []*objects.Enrichment                   `protobuf:"bytes,2,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                    // Caption: Enrichments;
	Observables    []*objects.Observable                   `protobuf:"bytes,3,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                    // Caption: Observables;
	TypeName       string                                  `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                          // Caption: Type Name;
	ActivityId     enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,5,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	Url            *objects.Url                            `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`                                                                                                                    // Caption: URL;
	Actor          *objects.Actor                          `protobuf:"bytes,7,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                                // Caption: Actor; Profile: host;
	ClassName      string                                  `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                       // Caption: Class;
	EmailUid       string                                  `protobuf:"bytes,9,opt,name=email_uid,json=emailUid,proto3" json:"email_uid,omitempty"`                                                                                          // Caption: Email UID;
	Api            *objects.Api                            `protobuf:"bytes,10,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                   // Caption: API Details; Profile: cloud;
	Metadata       *objects.Metadata                       `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                         // Caption: Metadata;
	DispositionId  enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID `protobuf:"varint,12,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	RawData        string                                  `protobuf:"bytes,13,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                            // Caption: Raw Data;
	Status         string                                  `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`                                                                                                             // Caption: Status;
	TimezoneOffset int32                                   `protobuf:"varint,15,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                      // Caption: Timezone Offset;
	Malware        []*objects.Malware                      `protobuf:"bytes,16,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                           // Caption: Malware; Profile: security_control;
	Count          int32                                   `protobuf:"varint,17,opt,name=count,proto3" json:"count,omitempty"`                                                                                                              // Caption: Count;
	Severity       string                                  `protobuf:"bytes,18,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                         // Caption: Severity;
	StatusDetail   string                                  `protobuf:"bytes,19,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                             // Caption: Status Details;
	Cloud          *objects.Cloud                          `protobuf:"bytes,20,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                               // Caption: Cloud; Profile: cloud;
	CategoryUid    enums.EMAIL_URL_ACTIVITY_CATEGORY_UID   `protobuf:"varint,21,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	EndTime        int64                                   `protobuf:"varint,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                           // Caption: End Time;
	Device         *objects.Device                         `protobuf:"bytes,23,opt,name=device,proto3" json:"device,omitempty"`                                                                                                             // Caption: Device; Profile: host;
	Attacks        []*objects.Attack                       `protobuf:"bytes,24,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                           // Caption: Attacks; Profile: security_control;
	StatusId       enums.EMAIL_URL_ACTIVITY_STATUS_ID      `protobuf:"varint,25,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	StatusCode     string                                  `protobuf:"bytes,26,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                   // Caption: Status Code;
	Disposition    string                                  `protobuf:"bytes,27,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                   // Caption: Disposition; Profile: security_control;
	Unmapped       *objects.Object                         `protobuf:"bytes,28,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                         // Caption: Unmapped Data;
	Time           int64                                   `protobuf:"varint,29,opt,name=time,proto3" json:"time,omitempty"`                                                                                                                // Caption: Event Time;
	Message        string                                  `protobuf:"bytes,30,opt,name=message,proto3" json:"message,omitempty"`                                                                                                           // Caption: Message;
	ActivityName   string                                  `protobuf:"bytes,31,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                             // Caption: Activity;
	CategoryName   string                                  `protobuf:"bytes,32,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                             // Caption: Category;
	Duration       int32                                   `protobuf:"varint,33,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                        // Caption: Duration;
	ClassUid       enums.EMAIL_URL_ACTIVITY_CLASS_UID      `protobuf:"varint,34,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	TypeUid        enums.EMAIL_URL_ACTIVITY_TYPE_UID       `protobuf:"varint,35,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	SeverityId     enums.EMAIL_URL_ACTIVITY_SEVERITY_ID    `protobuf:"varint,36,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
}

func (x *EmailUrlActivity) Reset() {
	*x = EmailUrlActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailUrlActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailUrlActivity) ProtoMessage() {}

func (x *EmailUrlActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailUrlActivity.ProtoReflect.Descriptor instead.
func (*EmailUrlActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{7}
}

func (x *EmailUrlActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EmailUrlActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *EmailUrlActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *EmailUrlActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EmailUrlActivity) GetActivityId() enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID(0)
}

func (x *EmailUrlActivity) GetUrl() *objects.Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EmailUrlActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *EmailUrlActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *EmailUrlActivity) GetEmailUid() string {
	if x != nil {
		return x.EmailUid
	}
	return ""
}

func (x *EmailUrlActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *EmailUrlActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EmailUrlActivity) GetDispositionId() enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID(0)
}

func (x *EmailUrlActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *EmailUrlActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EmailUrlActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *EmailUrlActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *EmailUrlActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EmailUrlActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *EmailUrlActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *EmailUrlActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *EmailUrlActivity) GetCategoryUid() enums.EMAIL_URL_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.EMAIL_URL_ACTIVITY_CATEGORY_UID(0)
}

func (x *EmailUrlActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EmailUrlActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EmailUrlActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *EmailUrlActivity) GetStatusId() enums.EMAIL_URL_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.EMAIL_URL_ACTIVITY_STATUS_ID(0)
}

func (x *EmailUrlActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *EmailUrlActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *EmailUrlActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *EmailUrlActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *EmailUrlActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EmailUrlActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *EmailUrlActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *EmailUrlActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EmailUrlActivity) GetClassUid() enums.EMAIL_URL_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.EMAIL_URL_ACTIVITY_CLASS_UID(0)
}

func (x *EmailUrlActivity) GetTypeUid() enums.EMAIL_URL_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.EMAIL_URL_ACTIVITY_TYPE_UID(0)
}

func (x *EmailUrlActivity) GetSeverityId() enums.EMAIL_URL_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.EMAIL_URL_ACTIVITY_SEVERITY_ID(0)
}

// Event UID: 1
// URL: https://schema.ocsf.io/1.0.0/classes/network_activity
// Event: network
type NetworkActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstEndpoint    *objects.NetworkEndpoint              `protobuf:"bytes,1,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                               // Caption: Destination Endpoint;
	Disposition    string                                `protobuf:"bytes,2,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                                  // Caption: Disposition; Profile: security_control;
	ConnectionInfo *objects.NetworkConnectionInfo        `protobuf:"bytes,3,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                      // Caption: Connection Info;
	CategoryName   string                                `protobuf:"bytes,4,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                            // Caption: Category;
	Message        string                                `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                                                                                                          // Caption: Message;
	Time           int64                                 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                                               // Caption: Event Time;
	ActivityId     enums.NETWORK_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`              // Caption: Activity ID;
	Tls            *objects.Tls                          `protobuf:"bytes,8,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                                  // Caption: TLS;
	Device         *objects.Device                       `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`                                                                                                            // Caption: Device; Profile: host;
	CategoryUid    enums.NETWORK_ACTIVITY_CATEGORY_UID   `protobuf:"varint,10,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	SeverityId     enums.NETWORK_ACTIVITY_SEVERITY_ID    `protobuf:"varint,11,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
	EndTime        int64                                 `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                         // Caption: End Time;
	Duration       int32                                 `protobuf:"varint,13,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                      // Caption: Duration;
	Metadata       *objects.Metadata                     `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                       // Caption: Metadata;
	StatusId       enums.NETWORK_ACTIVITY_STATUS_ID      `protobuf:"varint,15,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Status         string                                `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`                                                                                                           // Caption: Status;
	TypeUid        enums.NETWORK_ACTIVITY_TYPE_UID       `protobuf:"varint,17,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	TypeName       string                                `protobuf:"bytes,18,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                       // Caption: Type Name;
	Cloud          *objects.Cloud                        `protobuf:"bytes,19,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                             // Caption: Cloud; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint              `protobuf:"bytes,20,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                              // Caption: Source Endpoint;
	StatusCode     string                                `protobuf:"bytes,21,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                                 // Caption: Status Code;
	RawData        string                                `protobuf:"bytes,22,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                          // Caption: Raw Data;
	Api            *objects.Api                          `protobuf:"bytes,23,opt,name=api,proto3" json:"api,omitempty"`                                                                                                                 // Caption: API Details; Profile: cloud;
	Count          int32                                 `protobuf:"varint,24,opt,name=count,proto3" json:"count,omitempty"`                                                                                                            // Caption: Count;
	Unmapped       *objects.Object                       `protobuf:"bytes,25,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                       // Caption: Unmapped Data;
	ActivityName   string                                `protobuf:"bytes,26,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                           // Caption: Activity;
	Severity       string                                `protobuf:"bytes,27,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                       // Caption: Severity;
	Attacks        []*objects.Attack                     `protobuf:"bytes,28,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                         // Caption: Attacks; Profile: security_control;
	Proxy          *objects.NetworkProxy                 `protobuf:"bytes,29,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                             // Caption: Proxy;
	Actor          *objects.Actor                        `protobuf:"bytes,30,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                             // Profile: host; Caption: Actor;
	Observables    []*objects.Observable                 `protobuf:"bytes,31,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                                 // Caption: Observables;
	StartTime      int64                                 `protobuf:"varint,32,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                   // Caption: Start Time;
	Malware        []*objects.Malware                    `protobuf:"bytes,33,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                         // Caption: Malware; Profile: security_control;
	Traffic        *objects.NetworkTraffic               `protobuf:"bytes,34,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                         // Caption: Traffic;
	Enrichments    []*objects.Enrichment                 `protobuf:"bytes,35,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                                 // Caption: Enrichments;
	ClassName      string                                `protobuf:"bytes,36,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                    // Caption: Class;
	AppName        string                                `protobuf:"bytes,37,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                          // Caption: Application Name;
	DispositionId  enums.NETWORK_ACTIVITY_DISPOSITION_ID `protobuf:"varint,38,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	ClassUid       enums.NETWORK_ACTIVITY_CLASS_UID      `protobuf:"varint,39,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	StatusDetail   string                                `protobuf:"bytes,40,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                           // Caption: Status Details;
	TimezoneOffset int32                                 `protobuf:"varint,41,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                    // Caption: Timezone Offset;
}

func (x *NetworkActivity) Reset() {
	*x = NetworkActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkActivity) ProtoMessage() {}

func (x *NetworkActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkActivity.ProtoReflect.Descriptor instead.
func (*NetworkActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *NetworkActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *NetworkActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *NetworkActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *NetworkActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NetworkActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworkActivity) GetActivityId() enums.NETWORK_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.NETWORK_ACTIVITY_ACTIVITY_ID(0)
}

func (x *NetworkActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *NetworkActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *NetworkActivity) GetCategoryUid() enums.NETWORK_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.NETWORK_ACTIVITY_CATEGORY_UID(0)
}

func (x *NetworkActivity) GetSeverityId() enums.NETWORK_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.NETWORK_ACTIVITY_SEVERITY_ID(0)
}

func (x *NetworkActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NetworkActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *NetworkActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkActivity) GetStatusId() enums.NETWORK_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.NETWORK_ACTIVITY_STATUS_ID(0)
}

func (x *NetworkActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkActivity) GetTypeUid() enums.NETWORK_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.NETWORK_ACTIVITY_TYPE_UID(0)
}

func (x *NetworkActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NetworkActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *NetworkActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *NetworkActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *NetworkActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *NetworkActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *NetworkActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NetworkActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *NetworkActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *NetworkActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *NetworkActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *NetworkActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *NetworkActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *NetworkActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *NetworkActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NetworkActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *NetworkActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *NetworkActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *NetworkActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *NetworkActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *NetworkActivity) GetDispositionId() enums.NETWORK_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.NETWORK_ACTIVITY_DISPOSITION_ID(0)
}

func (x *NetworkActivity) GetClassUid() enums.NETWORK_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.NETWORK_ACTIVITY_CLASS_UID(0)
}

func (x *NetworkActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *NetworkActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

// Event: network
// Event UID: 2
// URL: https://schema.ocsf.io/1.0.0/classes/http_activity
type HttpActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64                              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	HttpStatus     int32                              `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`                                                                             // Caption: HTTP Status;
	StatusId       enums.HTTP_ACTIVITY_STATUS_ID      `protobuf:"varint,3,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	DispositionId  enums.HTTP_ACTIVITY_DISPOSITION_ID `protobuf:"varint,4,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	TimezoneOffset int32                              `protobuf:"varint,5,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	StatusDetail   string                             `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                        // Caption: Status Details;
	DstEndpoint    *objects.NetworkEndpoint           `protobuf:"bytes,7,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                           // Caption: Destination Endpoint;
	RawData        string                             `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	Cloud          *objects.Cloud                     `protobuf:"bytes,9,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint           `protobuf:"bytes,10,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	Severity       string                             `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                   // Caption: Severity;
	Status         string                             `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // Caption: Status;
	Traffic        *objects.NetworkTraffic            `protobuf:"bytes,13,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	ClassUid       enums.HTTP_ACTIVITY_CLASS_UID      `protobuf:"varint,14,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                    // Caption: Class ID;
	Disposition    string                             `protobuf:"bytes,15,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Caption: Disposition; Profile: security_control;
	Message        string                             `protobuf:"bytes,16,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	HttpRequest    *objects.HttpRequest               `protobuf:"bytes,17,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty"`                                                                          // Caption: HTTP Request;
	Unmapped       *objects.Object                    `protobuf:"bytes,18,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	Proxy          *objects.NetworkProxy              `protobuf:"bytes,19,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                         // Caption: Proxy;
	Observables    []*objects.Observable              `protobuf:"bytes,20,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	Enrichments    []*objects.Enrichment              `protobuf:"bytes,21,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	Device         *objects.Device                    `protobuf:"bytes,22,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device; Profile: host;
	Api            *objects.Api                       `protobuf:"bytes,23,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Caption: API Details; Profile: cloud;
	Count          int32                              `protobuf:"varint,24,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	TypeName       string                             `protobuf:"bytes,25,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	Attacks        []*objects.Attack                  `protobuf:"bytes,26,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                     // Caption: Attacks; Profile: security_control;
	SeverityId     enums.HTTP_ACTIVITY_SEVERITY_ID    `protobuf:"varint,27,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`            // Caption: Severity ID;
	Duration       int32                              `protobuf:"varint,28,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	EndTime        int64                              `protobuf:"varint,29,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	AppName        string                             `protobuf:"bytes,30,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	ConnectionInfo *objects.NetworkConnectionInfo     `protobuf:"bytes,31,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	Actor          *objects.Actor                     `protobuf:"bytes,32,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	StartTime      int64                              `protobuf:"varint,33,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	ActivityName   string                             `protobuf:"bytes,34,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	CategoryName   string                             `protobuf:"bytes,35,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                       // Caption: Category;
	HttpResponse   *objects.HttpResponse              `protobuf:"bytes,36,opt,name=http_response,json=httpResponse,proto3" json:"http_response,omitempty"`                                                                       // Caption: HTTP Response;
	Metadata       *objects.Metadata                  `protobuf:"bytes,37,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	StatusCode     string                             `protobuf:"bytes,38,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                             // Caption: Status Code;
	TypeUid        enums.HTTP_ACTIVITY_TYPE_UID       `protobuf:"varint,39,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                        // Caption: Type ID;
	CategoryUid    enums.HTTP_ACTIVITY_CATEGORY_UID   `protobuf:"varint,40,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`        // Caption: Category ID;
	ActivityId     enums.HTTP_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,41,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`            // Caption: Activity ID;
	Malware        []*objects.Malware                 `protobuf:"bytes,42,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Caption: Malware; Profile: security_control;
	ClassName      string                             `protobuf:"bytes,43,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                // Caption: Class;
	Tls            *objects.Tls                       `protobuf:"bytes,44,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                             // Caption: TLS;
}

func (x *HttpActivity) Reset() {
	*x = HttpActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpActivity) ProtoMessage() {}

func (x *HttpActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpActivity.ProtoReflect.Descriptor instead.
func (*HttpActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{9}
}

func (x *HttpActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HttpActivity) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *HttpActivity) GetStatusId() enums.HTTP_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.HTTP_ACTIVITY_STATUS_ID(0)
}

func (x *HttpActivity) GetDispositionId() enums.HTTP_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.HTTP_ACTIVITY_DISPOSITION_ID(0)
}

func (x *HttpActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *HttpActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *HttpActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *HttpActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *HttpActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *HttpActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *HttpActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *HttpActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HttpActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *HttpActivity) GetClassUid() enums.HTTP_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.HTTP_ACTIVITY_CLASS_UID(0)
}

func (x *HttpActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *HttpActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HttpActivity) GetHttpRequest() *objects.HttpRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *HttpActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *HttpActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *HttpActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *HttpActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *HttpActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *HttpActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *HttpActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HttpActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *HttpActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *HttpActivity) GetSeverityId() enums.HTTP_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.HTTP_ACTIVITY_SEVERITY_ID(0)
}

func (x *HttpActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HttpActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *HttpActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *HttpActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *HttpActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *HttpActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HttpActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *HttpActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *HttpActivity) GetHttpResponse() *objects.HttpResponse {
	if x != nil {
		return x.HttpResponse
	}
	return nil
}

func (x *HttpActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HttpActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *HttpActivity) GetTypeUid() enums.HTTP_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.HTTP_ACTIVITY_TYPE_UID(0)
}

func (x *HttpActivity) GetCategoryUid() enums.HTTP_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.HTTP_ACTIVITY_CATEGORY_UID(0)
}

func (x *HttpActivity) GetActivityId() enums.HTTP_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.HTTP_ACTIVITY_ACTIVITY_ID(0)
}

func (x *HttpActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *HttpActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *HttpActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

// Event: network
// Event UID: 6
// URL: https://schema.ocsf.io/1.0.0/classes/smb_activity
type SmbActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string                            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	StatusCode     string                            `protobuf:"bytes,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                              // Caption: Status Code;
	TimezoneOffset int32                             `protobuf:"varint,3,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	ClassName      string                            `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	CategoryName   string                            `protobuf:"bytes,5,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                        // Caption: Category;
	DstEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,6,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                           // Caption: Destination Endpoint;
	Tls            *objects.Tls                      `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`                                                                                                              // Caption: TLS;
	ClientDialects []string                          `protobuf:"bytes,8,rep,name=client_dialects,json=clientDialects,proto3" json:"client_dialects,omitempty"`                                                                  // Caption: Client Dialects;
	Command        string                            `protobuf:"bytes,9,opt,name=command,proto3" json:"command,omitempty"`                                                                                                      // Caption: Command;
	ShareType      string                            `protobuf:"bytes,10,opt,name=share_type,json=shareType,proto3" json:"share_type,omitempty"`                                                                                // Caption: Share Type;
	Observables    []*objects.Observable             `protobuf:"bytes,11,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                             // Caption: Observables;
	AppName        string                            `protobuf:"bytes,12,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`                                                                                      // Caption: Application Name;
	Disposition    string                            `protobuf:"bytes,13,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                             // Caption: Disposition; Profile: security_control;
	Time           int64                             `protobuf:"varint,14,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          // Caption: Event Time;
	Share          string                            `protobuf:"bytes,15,opt,name=share,proto3" json:"share,omitempty"`                                                                                                         // Caption: Share;
	RawData        string                            `protobuf:"bytes,16,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                      // Caption: Raw Data;
	Malware        []*objects.Malware                `protobuf:"bytes,17,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                     // Profile: security_control; Caption: Malware;
	Traffic        *objects.NetworkTraffic           `protobuf:"bytes,18,opt,name=traffic,proto3" json:"traffic,omitempty"`                                                                                                     // Caption: Traffic;
	Device         *objects.Device                   `protobuf:"bytes,19,opt,name=device,proto3" json:"device,omitempty"`                                                                                                       // Caption: Device; Profile: host;
	TypeName       string                            `protobuf:"bytes,20,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                   // Caption: Type Name;
	DceRpc         *objects.DceRpc                   `protobuf:"bytes,21,opt,name=dce_rpc,json=dceRpc,proto3" json:"dce_rpc,omitempty"`                                                                                         // Caption: Distributed Computing Environment/Remote Procedure Call (DCE/RPC);
	Dialect        string                            `protobuf:"bytes,22,opt,name=dialect,proto3" json:"dialect,omitempty"`                                                                                                     // Caption: Dialect;
	EndTime        int64                             `protobuf:"varint,23,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                     // Caption: End Time;
	Metadata       *objects.Metadata                 `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                   // Caption: Metadata;
	Count          int32                             `protobuf:"varint,25,opt,name=count,proto3" json:"count,omitempty"`                                                                                                        // Caption: Count;
	DispositionId  enums.SMB_ACTIVITY_DISPOSITION_ID `protobuf:"varint,26,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	ClassUid       enums.SMB_ACTIVITY_CLASS_UID      `protobuf:"varint,27,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                     // Caption: Class ID;
	OpenType       string                            `protobuf:"bytes,28,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`                                                                                   // Caption: Open Type;
	StatusId       enums.SMB_ACTIVITY_STATUS_ID      `protobuf:"varint,29,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                     // Caption: Status ID;
	Api            *objects.Api                      `protobuf:"bytes,30,opt,name=api,proto3" json:"api,omitempty"`                                                                                                             // Caption: API Details; Profile: cloud;
	Actor          *objects.Actor                    `protobuf:"bytes,31,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                         // Caption: Actor; Profile: host;
	Enrichments    []*objects.Enrichment             `protobuf:"bytes,32,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                             // Caption: Enrichments;
	Response       *objects.Response                 `protobuf:"bytes,33,opt,name=response,proto3" json:"response,omitempty"`                                                                                                   // Caption: API Response Details;
	TreeUid        string                            `protobuf:"bytes,34,opt,name=tree_uid,json=treeUid,proto3" json:"tree_uid,omitempty"`                                                                                      // Caption: Tree UID;
	ActivityId     enums.SMB_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,35,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`             // Caption: Activity ID;
	ShareTypeId    enums.SMB_ACTIVITY_SHARE_TYPE_ID  `protobuf:"varint,36,opt,name=share_type_id,json=shareTypeId,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SHARE_TYPE_ID" json:"share_type_id,omitempty"`      // Caption: Share Type Id;
	TypeUid        enums.SMB_ACTIVITY_TYPE_UID       `protobuf:"varint,37,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                         // Caption: Type ID;
	Unmapped       *objects.Object                   `protobuf:"bytes,38,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                   // Caption: Unmapped Data;
	ActivityName   string                            `protobuf:"bytes,39,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                       // Caption: Activity;
	File           *objects.File                     `protobuf:"bytes,40,opt,name=file,proto3" json:"file,omitempty"`                                                                                                           // Caption: File;
	StatusDetail   string                            `protobuf:"bytes,41,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                       // Caption: Status Details;
	Cloud          *objects.Cloud                    `protobuf:"bytes,42,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                         // Caption: Cloud; Profile: cloud;
	SrcEndpoint    *objects.NetworkEndpoint          `protobuf:"bytes,43,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                          // Caption: Source Endpoint;
	StartTime      int64                             `protobuf:"varint,44,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                               // Caption: Start Time;
	Severity       string                            `protobuf:"bytes,45,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                   // Caption: Severity;
	Attacks        []*objects.Attack                 `protobuf:"bytes,46,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                     // Caption: Attacks; Profile: security_control;
	Proxy          *objects.NetworkProxy             `protobuf:"bytes,47,opt,name=proxy,proto3" json:"proxy,omitempty"`                                                                                                         // Caption: Proxy;
	ConnectionInfo *objects.NetworkConnectionInfo    `protobuf:"bytes,48,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                 // Caption: Connection Info;
	CategoryUid    enums.SMB_ACTIVITY_CATEGORY_UID   `protobuf:"varint,49,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`         // Caption: Category ID;
	Duration       int32                             `protobuf:"varint,50,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                  // Caption: Duration;
	Message        string                            `protobuf:"bytes,51,opt,name=message,proto3" json:"message,omitempty"`                                                                                                     // Caption: Message;
	SeverityId     enums.SMB_ACTIVITY_SEVERITY_ID    `protobuf:"varint,52,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`             // Caption: Severity ID;
}

func (x *SmbActivity) Reset() {
	*x = SmbActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmbActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmbActivity) ProtoMessage() {}

func (x *SmbActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmbActivity.ProtoReflect.Descriptor instead.
func (*SmbActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{10}
}

func (x *SmbActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SmbActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *SmbActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *SmbActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SmbActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SmbActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *SmbActivity) GetTls() *objects.Tls {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *SmbActivity) GetClientDialects() []string {
	if x != nil {
		return x.ClientDialects
	}
	return nil
}

func (x *SmbActivity) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SmbActivity) GetShareType() string {
	if x != nil {
		return x.ShareType
	}
	return ""
}

func (x *SmbActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *SmbActivity) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *SmbActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *SmbActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SmbActivity) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *SmbActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SmbActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *SmbActivity) GetTraffic() *objects.NetworkTraffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *SmbActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SmbActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SmbActivity) GetDceRpc() *objects.DceRpc {
	if x != nil {
		return x.DceRpc
	}
	return nil
}

func (x *SmbActivity) GetDialect() string {
	if x != nil {
		return x.Dialect
	}
	return ""
}

func (x *SmbActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SmbActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SmbActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SmbActivity) GetDispositionId() enums.SMB_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.SMB_ACTIVITY_DISPOSITION_ID(0)
}

func (x *SmbActivity) GetClassUid() enums.SMB_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.SMB_ACTIVITY_CLASS_UID(0)
}

func (x *SmbActivity) GetOpenType() string {
	if x != nil {
		return x.OpenType
	}
	return ""
}

func (x *SmbActivity) GetStatusId() enums.SMB_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.SMB_ACTIVITY_STATUS_ID(0)
}

func (x *SmbActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *SmbActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *SmbActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *SmbActivity) GetResponse() *objects.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SmbActivity) GetTreeUid() string {
	if x != nil {
		return x.TreeUid
	}
	return ""
}

func (x *SmbActivity) GetActivityId() enums.SMB_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.SMB_ACTIVITY_ACTIVITY_ID(0)
}

func (x *SmbActivity) GetShareTypeId() enums.SMB_ACTIVITY_SHARE_TYPE_ID {
	if x != nil {
		return x.ShareTypeId
	}
	return enums.SMB_ACTIVITY_SHARE_TYPE_ID(0)
}

func (x *SmbActivity) GetTypeUid() enums.SMB_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.SMB_ACTIVITY_TYPE_UID(0)
}

func (x *SmbActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *SmbActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *SmbActivity) GetFile() *objects.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SmbActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *SmbActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *SmbActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *SmbActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SmbActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *SmbActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *SmbActivity) GetProxy() *objects.NetworkProxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *SmbActivity) GetConnectionInfo() *objects.NetworkConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *SmbActivity) GetCategoryUid() enums.SMB_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.SMB_ACTIVITY_CATEGORY_UID(0)
}

func (x *SmbActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SmbActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SmbActivity) GetSeverityId() enums.SMB_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.SMB_ACTIVITY_SEVERITY_ID(0)
}

// Event: network
// Event UID: 9
// URL: https://schema.ocsf.io/1.0.0/classes/email_activity
type EmailActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disposition    string                              `protobuf:"bytes,1,opt,name=disposition,proto3" json:"disposition,omitempty"`                                                                                               // Caption: Disposition; Profile: security_control;
	DispositionId  enums.EMAIL_ACTIVITY_DISPOSITION_ID `protobuf:"varint,2,opt,name=disposition_id,json=dispositionId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DISPOSITION_ID" json:"disposition_id,omitempty"` // Caption: Disposition ID; Profile: security_control;
	DstEndpoint    *objects.NetworkEndpoint            `protobuf:"bytes,3,opt,name=dst_endpoint,json=dstEndpoint,proto3" json:"dst_endpoint,omitempty"`                                                                            // Caption: Destination Endpoint;
	Malware        []*objects.Malware                  `protobuf:"bytes,4,rep,name=malware,proto3" json:"malware,omitempty"`                                                                                                       // Profile: security_control; Caption: Malware;
	StatusCode     string                              `protobuf:"bytes,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                               // Caption: Status Code;
	SrcEndpoint    *objects.NetworkEndpoint            `protobuf:"bytes,6,opt,name=src_endpoint,json=srcEndpoint,proto3" json:"src_endpoint,omitempty"`                                                                            // Caption: Source Endpoint;
	StatusDetail   string                              `protobuf:"bytes,7,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`                                                                         // Caption: Status Details;
	EndTime        int64                               `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                       // Caption: End Time;
	CategoryName   string                              `protobuf:"bytes,9,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                                                                         // Caption: Category;
	Enrichments    []*objects.Enrichment               `protobuf:"bytes,10,rep,name=enrichments,proto3" json:"enrichments,omitempty"`                                                                                              // Caption: Enrichments;
	Email          *objects.Email                      `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`                                                                                                          // Caption: Email;
	Count          int32                               `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`                                                                                                         // Caption: Count;
	StatusId       enums.EMAIL_ACTIVITY_STATUS_ID      `protobuf:"varint,13,opt,name=status_id,json=statusId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_STATUS_ID" json:"status_id,omitempty"`                    // Caption: Status ID;
	Message        string                              `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`                                                                                                      // Caption: Message;
	TimezoneOffset int32                               `protobuf:"varint,15,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`                                                                 // Caption: Timezone Offset;
	Time           int64                               `protobuf:"varint,16,opt,name=time,proto3" json:"time,omitempty"`                                                                                                           // Caption: Event Time;
	Metadata       *objects.Metadata                   `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                                                    // Caption: Metadata;
	ActivityName   string                              `protobuf:"bytes,18,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`                                                                        // Caption: Activity;
	Severity       string                              `protobuf:"bytes,19,opt,name=severity,proto3" json:"severity,omitempty"`                                                                                                    // Caption: Severity;
	ClassUid       enums.EMAIL_ACTIVITY_CLASS_UID      `protobuf:"varint,20,opt,name=class_uid,json=classUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CLASS_UID" json:"class_uid,omitempty"`                    // Caption: Class ID;
	Attacks        []*objects.Attack                   `protobuf:"bytes,21,rep,name=attacks,proto3" json:"attacks,omitempty"`                                                                                                      // Caption: Attacks; Profile: security_control;
	TypeUid        enums.EMAIL_ACTIVITY_TYPE_UID       `protobuf:"varint,22,opt,name=type_uid,json=typeUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_TYPE_UID" json:"type_uid,omitempty"`                        // Caption: Type ID;
	Observables    []*objects.Observable               `protobuf:"bytes,23,rep,name=observables,proto3" json:"observables,omitempty"`                                                                                              // Caption: Observables;
	RawData        string                              `protobuf:"bytes,24,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`                                                                                       // Caption: Raw Data;
	DirectionId    enums.EMAIL_ACTIVITY_DIRECTION_ID   `protobuf:"varint,25,opt,name=direction_id,json=directionId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DIRECTION_ID" json:"direction_id,omitempty"`        // Caption: Direction ID;
	Actor          *objects.Actor                      `protobuf:"bytes,26,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                                          // Caption: Actor; Profile: host;
	SeverityId     enums.EMAIL_ACTIVITY_SEVERITY_ID    `protobuf:"varint,27,opt,name=severity_id,json=severityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_SEVERITY_ID" json:"severity_id,omitempty"`            // Caption: Severity ID;
	StartTime      int64                               `protobuf:"varint,28,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                // Caption: Start Time;
	Cloud          *objects.Cloud                      `protobuf:"bytes,29,opt,name=cloud,proto3" json:"cloud,omitempty"`                                                                                                          // Caption: Cloud; Profile: cloud;
	ClassName      string                              `protobuf:"bytes,30,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`                                                                                 // Caption: Class;
	Duration       int32                               `protobuf:"varint,31,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // Caption: Duration;
	Attempt        int32                               `protobuf:"varint,32,opt,name=attempt,proto3" json:"attempt,omitempty"`                                                                                                     // Caption: Attempt;
	SmtpHello      string                              `protobuf:"bytes,33,opt,name=smtp_hello,json=smtpHello,proto3" json:"smtp_hello,omitempty"`                                                                                 // Caption: SMTP Hello;
	EmailAuth      *objects.EmailAuth                  `protobuf:"bytes,34,opt,name=email_auth,json=emailAuth,proto3" json:"email_auth,omitempty"`                                                                                 // Caption: Email Authentication;
	TypeName       string                              `protobuf:"bytes,35,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`                                                                                    // Caption: Type Name;
	Status         string                              `protobuf:"bytes,36,opt,name=status,proto3" json:"status,omitempty"`                                                                                                        // Caption: Status;
	Direction      string                              `protobuf:"bytes,37,opt,name=direction,proto3" json:"direction,omitempty"`                                                                                                  // Caption: Direction;
	Banner         string                              `protobuf:"bytes,38,opt,name=banner,proto3" json:"banner,omitempty"`                                                                                                        // Caption: SMTP Banner;
	Device         *objects.Device                     `protobuf:"bytes,39,opt,name=device,proto3" json:"device,omitempty"`                                                                                                        // Profile: host; Caption: Device;
	ActivityId     enums.EMAIL_ACTIVITY_ACTIVITY_ID    `protobuf:"varint,40,opt,name=activity_id,json=activityId,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_ACTIVITY_ID" json:"activity_id,omitempty"`            // Caption: Activity ID;
	Unmapped       *objects.Object                     `protobuf:"bytes,41,opt,name=unmapped,proto3" json:"unmapped,omitempty"`                                                                                                    // Caption: Unmapped Data;
	CategoryUid    enums.EMAIL_ACTIVITY_CATEGORY_UID   `protobuf:"varint,42,opt,name=category_uid,json=categoryUid,proto3,enum=ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CATEGORY_UID" json:"category_uid,omitempty"`        // Caption: Category ID;
	Api            *objects.Api                        `protobuf:"bytes,43,opt,name=api,proto3" json:"api,omitempty"`                                                                                                              // Caption: API Details; Profile: cloud;
}

func (x *EmailActivity) Reset() {
	*x = EmailActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailActivity) ProtoMessage() {}

func (x *EmailActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_events_network_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailActivity.ProtoReflect.Descriptor instead.
func (*EmailActivity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP(), []int{11}
}

func (x *EmailActivity) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *EmailActivity) GetDispositionId() enums.EMAIL_ACTIVITY_DISPOSITION_ID {
	if x != nil {
		return x.DispositionId
	}
	return enums.EMAIL_ACTIVITY_DISPOSITION_ID(0)
}

func (x *EmailActivity) GetDstEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.DstEndpoint
	}
	return nil
}

func (x *EmailActivity) GetMalware() []*objects.Malware {
	if x != nil {
		return x.Malware
	}
	return nil
}

func (x *EmailActivity) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *EmailActivity) GetSrcEndpoint() *objects.NetworkEndpoint {
	if x != nil {
		return x.SrcEndpoint
	}
	return nil
}

func (x *EmailActivity) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *EmailActivity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EmailActivity) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *EmailActivity) GetEnrichments() []*objects.Enrichment {
	if x != nil {
		return x.Enrichments
	}
	return nil
}

func (x *EmailActivity) GetEmail() *objects.Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *EmailActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EmailActivity) GetStatusId() enums.EMAIL_ACTIVITY_STATUS_ID {
	if x != nil {
		return x.StatusId
	}
	return enums.EMAIL_ACTIVITY_STATUS_ID(0)
}

func (x *EmailActivity) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EmailActivity) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *EmailActivity) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *EmailActivity) GetMetadata() *objects.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EmailActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *EmailActivity) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *EmailActivity) GetClassUid() enums.EMAIL_ACTIVITY_CLASS_UID {
	if x != nil {
		return x.ClassUid
	}
	return enums.EMAIL_ACTIVITY_CLASS_UID(0)
}

func (x *EmailActivity) GetAttacks() []*objects.Attack {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *EmailActivity) GetTypeUid() enums.EMAIL_ACTIVITY_TYPE_UID {
	if x != nil {
		return x.TypeUid
	}
	return enums.EMAIL_ACTIVITY_TYPE_UID(0)
}

func (x *EmailActivity) GetObservables() []*objects.Observable {
	if x != nil {
		return x.Observables
	}
	return nil
}

func (x *EmailActivity) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *EmailActivity) GetDirectionId() enums.EMAIL_ACTIVITY_DIRECTION_ID {
	if x != nil {
		return x.DirectionId
	}
	return enums.EMAIL_ACTIVITY_DIRECTION_ID(0)
}

func (x *EmailActivity) GetActor() *objects.Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *EmailActivity) GetSeverityId() enums.EMAIL_ACTIVITY_SEVERITY_ID {
	if x != nil {
		return x.SeverityId
	}
	return enums.EMAIL_ACTIVITY_SEVERITY_ID(0)
}

func (x *EmailActivity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EmailActivity) GetCloud() *objects.Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *EmailActivity) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *EmailActivity) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EmailActivity) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *EmailActivity) GetSmtpHello() string {
	if x != nil {
		return x.SmtpHello
	}
	return ""
}

func (x *EmailActivity) GetEmailAuth() *objects.EmailAuth {
	if x != nil {
		return x.EmailAuth
	}
	return nil
}

func (x *EmailActivity) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *EmailActivity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EmailActivity) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *EmailActivity) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *EmailActivity) GetDevice() *objects.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EmailActivity) GetActivityId() enums.EMAIL_ACTIVITY_ACTIVITY_ID {
	if x != nil {
		return x.ActivityId
	}
	return enums.EMAIL_ACTIVITY_ACTIVITY_ID(0)
}

func (x *EmailActivity) GetUnmapped() *objects.Object {
	if x != nil {
		return x.Unmapped
	}
	return nil
}

func (x *EmailActivity) GetCategoryUid() enums.EMAIL_ACTIVITY_CATEGORY_UID {
	if x != nil {
		return x.CategoryUid
	}
	return enums.EMAIL_ACTIVITY_CATEGORY_UID(0)
}

func (x *EmailActivity) GetApi() *objects.Api {
	if x != nil {
		return x.Api
	}
	return nil
}

var File_ocsf_v1_0_0_events_network_network_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_events_network_network_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6f, 0x63, 0x73, 0x66, 0x2f,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x13, 0x0a, 0x0b, 0x52, 0x64, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x44, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54,
	0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x44, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0xf0, 0x0c, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73,
	0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc, 0x11, 0x0a, 0x0b, 0x46, 0x74,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x52, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x54,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x54, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x5e, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x12, 0x0a, 0x0b, 0x53, 0x73, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x73, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x73, 0x68, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x73, 0x68, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x73, 0x68, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc0, 0x0e, 0x0a, 0x11, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a,
	0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x80, 0x13, 0x0a, 0x0b, 0x44, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0x81, 0x0e, 0x0a, 0x0c, 0x44, 0x68, 0x63, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55,
	0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x0e, 0x0a, 0x10, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x64, 0x0a,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x52, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x61,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x52, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x83, 0x11, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x5f,
	0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x59, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x99, 0x12, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x22, 0xaf, 0x14, 0x0a, 0x0b, 0x53, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x64, 0x63, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x63, 0x65, 0x52, 0x70, 0x63, 0x52, 0x06, 0x64, 0x63,
	0x65, 0x52, 0x70, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x60, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x53, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x53, 0x4d, 0x42, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xa1, 0x11, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0b, 0x73, 0x72, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0c,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6d, 0x74, 0x70, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x42, 0xf5, 0x01, 0x0a, 0x1e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62,
	0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xa2,
	0x02, 0x04, 0x4f, 0x56, 0x45, 0x4e, 0xaa, 0x02, 0x18, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31,
	0x30, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0xca, 0x02, 0x18, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xe2, 0x02, 0x24, 0x4f,
	0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x30, 0x30,
	0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_events_network_network_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_events_network_network_proto_rawDescData = file_ocsf_v1_0_0_events_network_network_proto_rawDesc
)

func file_ocsf_v1_0_0_events_network_network_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_events_network_network_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_events_network_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_events_network_network_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_events_network_network_proto_rawDescData
}

var file_ocsf_v1_0_0_events_network_network_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ocsf_v1_0_0_events_network_network_proto_goTypes = []interface{}{
	(*RdpActivity)(nil),                           // 0: ocsf.v1_0_0.events.network.RdpActivity
	(*NetworkFileActivity)(nil),                   // 1: ocsf.v1_0_0.events.network.NetworkFileActivity
	(*FtpActivity)(nil),                           // 2: ocsf.v1_0_0.events.network.FtpActivity
	(*SshActivity)(nil),                           // 3: ocsf.v1_0_0.events.network.SshActivity
	(*EmailFileActivity)(nil),                     // 4: ocsf.v1_0_0.events.network.EmailFileActivity
	(*DnsActivity)(nil),                           // 5: ocsf.v1_0_0.events.network.DnsActivity
	(*DhcpActivity)(nil),                          // 6: ocsf.v1_0_0.events.network.DhcpActivity
	(*EmailUrlActivity)(nil),                      // 7: ocsf.v1_0_0.events.network.EmailUrlActivity
	(*NetworkActivity)(nil),                       // 8: ocsf.v1_0_0.events.network.NetworkActivity
	(*HttpActivity)(nil),                          // 9: ocsf.v1_0_0.events.network.HttpActivity
	(*SmbActivity)(nil),                           // 10: ocsf.v1_0_0.events.network.SmbActivity
	(*EmailActivity)(nil),                         // 11: ocsf.v1_0_0.events.network.EmailActivity
	(*objects.Display)(nil),                       // 12: ocsf.v1_0_0.objects.Display
	(*objects.Attack)(nil),                        // 13: ocsf.v1_0_0.objects.Attack
	(*objects.Metadata)(nil),                      // 14: ocsf.v1_0_0.objects.Metadata
	(enums.RDP_ACTIVITY_CLASS_UID)(0),             // 15: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CLASS_UID
	(enums.RDP_ACTIVITY_TYPE_UID)(0),              // 16: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_TYPE_UID
	(*objects.Actor)(nil),                         // 17: ocsf.v1_0_0.objects.Actor
	(*objects.NetworkTraffic)(nil),                // 18: ocsf.v1_0_0.objects.NetworkTraffic
	(enums.RDP_ACTIVITY_SEVERITY_ID)(0),           // 19: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_SEVERITY_ID
	(*objects.Tls)(nil),                           // 20: ocsf.v1_0_0.objects.Tls
	(*objects.NetworkProxy)(nil),                  // 21: ocsf.v1_0_0.objects.NetworkProxy
	(enums.RDP_ACTIVITY_CATEGORY_UID)(0),          // 22: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CATEGORY_UID
	(*objects.NetworkEndpoint)(nil),               // 23: ocsf.v1_0_0.objects.NetworkEndpoint
	(*objects.Device)(nil),                        // 24: ocsf.v1_0_0.objects.Device
	(*objects.Request)(nil),                       // 25: ocsf.v1_0_0.objects.Request
	(enums.RDP_ACTIVITY_DISPOSITION_ID)(0),        // 26: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_DISPOSITION_ID
	(*objects.NetworkConnectionInfo)(nil),         // 27: ocsf.v1_0_0.objects.NetworkConnectionInfo
	(enums.RDP_ACTIVITY_STATUS_ID)(0),             // 28: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_STATUS_ID
	(enums.RDP_ACTIVITY_ACTIVITY_ID)(0),           // 29: ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_ACTIVITY_ID
	(*objects.Api)(nil),                           // 30: ocsf.v1_0_0.objects.Api
	(*objects.Object)(nil),                        // 31: ocsf.v1_0_0.objects.Object
	(*objects.Response)(nil),                      // 32: ocsf.v1_0_0.objects.Response
	(*objects.Observable)(nil),                    // 33: ocsf.v1_0_0.objects.Observable
	(*objects.Malware)(nil),                       // 34: ocsf.v1_0_0.objects.Malware
	(*objects.Enrichment)(nil),                    // 35: ocsf.v1_0_0.objects.Enrichment
	(*objects.Cloud)(nil),                         // 36: ocsf.v1_0_0.objects.Cloud
	(*objects.File)(nil),                          // 37: ocsf.v1_0_0.objects.File
	(enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID)(0),  // 38: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID
	(enums.NETWORK_FILE_ACTIVITY_CLASS_UID)(0),    // 39: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CLASS_UID
	(enums.NETWORK_FILE_ACTIVITY_TYPE_UID)(0),     // 40: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_TYPE_UID
	(enums.NETWORK_FILE_ACTIVITY_STATUS_ID)(0),    // 41: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_STATUS_ID
	(enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID)(0),  // 42: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID
	(enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID)(0), // 43: ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID
	(enums.FTP_ACTIVITY_CLASS_UID)(0),             // 44: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CLASS_UID
	(enums.FTP_ACTIVITY_TYPE_UID)(0),              // 45: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_TYPE_UID
	(enums.FTP_ACTIVITY_DISPOSITION_ID)(0),        // 46: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_DISPOSITION_ID
	(enums.FTP_ACTIVITY_ACTIVITY_ID)(0),           // 47: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_ACTIVITY_ID
	(enums.FTP_ACTIVITY_SEVERITY_ID)(0),           // 48: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_SEVERITY_ID
	(enums.FTP_ACTIVITY_STATUS_ID)(0),             // 49: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_STATUS_ID
	(enums.FTP_ACTIVITY_CATEGORY_UID)(0),          // 50: ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CATEGORY_UID
	(enums.SSH_ACTIVITY_STATUS_ID)(0),             // 51: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_STATUS_ID
	(enums.SSH_ACTIVITY_SEVERITY_ID)(0),           // 52: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_SEVERITY_ID
	(enums.SSH_ACTIVITY_ACTIVITY_ID)(0),           // 53: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_ACTIVITY_ID
	(enums.SSH_ACTIVITY_DISPOSITION_ID)(0),        // 54: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_DISPOSITION_ID
	(enums.SSH_ACTIVITY_CLASS_UID)(0),             // 55: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CLASS_UID
	(*objects.Hassh)(nil),                         // 56: ocsf.v1_0_0.objects.Hassh
	(enums.SSH_ACTIVITY_CATEGORY_UID)(0),          // 57: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CATEGORY_UID
	(enums.SSH_ACTIVITY_TYPE_UID)(0),              // 58: ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_TYPE_UID
	(enums.EMAIL_FILE_ACTIVITY_CLASS_UID)(0),      // 59: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CLASS_UID
	(enums.EMAIL_FILE_ACTIVITY_STATUS_ID)(0),      // 60: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_STATUS_ID
	(enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID)(0), // 61: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID
	(enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID)(0),   // 62: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID
	(enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID)(0),    // 63: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID
	(enums.EMAIL_FILE_ACTIVITY_TYPE_UID)(0),       // 64: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_TYPE_UID
	(enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID)(0),    // 65: ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID
	(enums.DNS_ACTIVITY_ACTIVITY_ID)(0),           // 66: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_ACTIVITY_ID
	(enums.DNS_ACTIVITY_SEVERITY_ID)(0),           // 67: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_SEVERITY_ID
	(enums.DNS_ACTIVITY_CLASS_UID)(0),             // 68: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CLASS_UID
	(*objects.DnsQuery)(nil),                      // 69: ocsf.v1_0_0.objects.DnsQuery
	(enums.DNS_ACTIVITY_RCODE_ID)(0),              // 70: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_RCODE_ID
	(enums.DNS_ACTIVITY_DISPOSITION_ID)(0),        // 71: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_DISPOSITION_ID
	(*objects.DnsAnswer)(nil),                     // 72: ocsf.v1_0_0.objects.DnsAnswer
	(enums.DNS_ACTIVITY_CATEGORY_UID)(0),          // 73: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CATEGORY_UID
	(enums.DNS_ACTIVITY_TYPE_UID)(0),              // 74: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_TYPE_UID
	(enums.DNS_ACTIVITY_STATUS_ID)(0),             // 75: ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_STATUS_ID
	(enums.DHCP_ACTIVITY_TYPE_UID)(0),             // 76: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_TYPE_UID
	(enums.DHCP_ACTIVITY_CLASS_UID)(0),            // 77: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CLASS_UID
	(enums.DHCP_ACTIVITY_ACTIVITY_ID)(0),          // 78: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_ACTIVITY_ID
	(enums.DHCP_ACTIVITY_STATUS_ID)(0),            // 79: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_STATUS_ID
	(enums.DHCP_ACTIVITY_CATEGORY_UID)(0),         // 80: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CATEGORY_UID
	(*objects.NetworkInterface)(nil),              // 81: ocsf.v1_0_0.objects.NetworkInterface
	(enums.DHCP_ACTIVITY_SEVERITY_ID)(0),          // 82: ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_SEVERITY_ID
	(enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID)(0),     // 83: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID
	(*objects.Url)(nil),                           // 84: ocsf.v1_0_0.objects.Url
	(enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID)(0),  // 85: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID
	(enums.EMAIL_URL_ACTIVITY_CATEGORY_UID)(0),    // 86: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CATEGORY_UID
	(enums.EMAIL_URL_ACTIVITY_STATUS_ID)(0),       // 87: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_STATUS_ID
	(enums.EMAIL_URL_ACTIVITY_CLASS_UID)(0),       // 88: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CLASS_UID
	(enums.EMAIL_URL_ACTIVITY_TYPE_UID)(0),        // 89: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_TYPE_UID
	(enums.EMAIL_URL_ACTIVITY_SEVERITY_ID)(0),     // 90: ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_SEVERITY_ID
	(enums.NETWORK_ACTIVITY_ACTIVITY_ID)(0),       // 91: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_ACTIVITY_ID
	(enums.NETWORK_ACTIVITY_CATEGORY_UID)(0),      // 92: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CATEGORY_UID
	(enums.NETWORK_ACTIVITY_SEVERITY_ID)(0),       // 93: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_SEVERITY_ID
	(enums.NETWORK_ACTIVITY_STATUS_ID)(0),         // 94: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_STATUS_ID
	(enums.NETWORK_ACTIVITY_TYPE_UID)(0),          // 95: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_TYPE_UID
	(enums.NETWORK_ACTIVITY_DISPOSITION_ID)(0),    // 96: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_DISPOSITION_ID
	(enums.NETWORK_ACTIVITY_CLASS_UID)(0),         // 97: ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CLASS_UID
	(enums.HTTP_ACTIVITY_STATUS_ID)(0),            // 98: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_STATUS_ID
	(enums.HTTP_ACTIVITY_DISPOSITION_ID)(0),       // 99: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_DISPOSITION_ID
	(enums.HTTP_ACTIVITY_CLASS_UID)(0),            // 100: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CLASS_UID
	(*objects.HttpRequest)(nil),                   // 101: ocsf.v1_0_0.objects.HttpRequest
	(enums.HTTP_ACTIVITY_SEVERITY_ID)(0),          // 102: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_SEVERITY_ID
	(*objects.HttpResponse)(nil),                  // 103: ocsf.v1_0_0.objects.HttpResponse
	(enums.HTTP_ACTIVITY_TYPE_UID)(0),             // 104: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_TYPE_UID
	(enums.HTTP_ACTIVITY_CATEGORY_UID)(0),         // 105: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CATEGORY_UID
	(enums.HTTP_ACTIVITY_ACTIVITY_ID)(0),          // 106: ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_ACTIVITY_ID
	(*objects.DceRpc)(nil),                        // 107: ocsf.v1_0_0.objects.DceRpc
	(enums.SMB_ACTIVITY_DISPOSITION_ID)(0),        // 108: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_DISPOSITION_ID
	(enums.SMB_ACTIVITY_CLASS_UID)(0),             // 109: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CLASS_UID
	(enums.SMB_ACTIVITY_STATUS_ID)(0),             // 110: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_STATUS_ID
	(enums.SMB_ACTIVITY_ACTIVITY_ID)(0),           // 111: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_ACTIVITY_ID
	(enums.SMB_ACTIVITY_SHARE_TYPE_ID)(0),         // 112: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SHARE_TYPE_ID
	(enums.SMB_ACTIVITY_TYPE_UID)(0),              // 113: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_TYPE_UID
	(enums.SMB_ACTIVITY_CATEGORY_UID)(0),          // 114: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CATEGORY_UID
	(enums.SMB_ACTIVITY_SEVERITY_ID)(0),           // 115: ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SEVERITY_ID
	(enums.EMAIL_ACTIVITY_DISPOSITION_ID)(0),      // 116: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DISPOSITION_ID
	(*objects.Email)(nil),                         // 117: ocsf.v1_0_0.objects.Email
	(enums.EMAIL_ACTIVITY_STATUS_ID)(0),           // 118: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_STATUS_ID
	(enums.EMAIL_ACTIVITY_CLASS_UID)(0),           // 119: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CLASS_UID
	(enums.EMAIL_ACTIVITY_TYPE_UID)(0),            // 120: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_TYPE_UID
	(enums.EMAIL_ACTIVITY_DIRECTION_ID)(0),        // 121: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DIRECTION_ID
	(enums.EMAIL_ACTIVITY_SEVERITY_ID)(0),         // 122: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_SEVERITY_ID
	(*objects.EmailAuth)(nil),                     // 123: ocsf.v1_0_0.objects.EmailAuth
	(enums.EMAIL_ACTIVITY_ACTIVITY_ID)(0),         // 124: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_ACTIVITY_ID
	(enums.EMAIL_ACTIVITY_CATEGORY_UID)(0),        // 125: ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CATEGORY_UID
}
var file_ocsf_v1_0_0_events_network_network_proto_depIdxs = []int32{
	12,  // 0: ocsf.v1_0_0.events.network.RdpActivity.remote_display:type_name -> ocsf.v1_0_0.objects.Display
	13,  // 1: ocsf.v1_0_0.events.network.RdpActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	14,  // 2: ocsf.v1_0_0.events.network.RdpActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	15,  // 3: ocsf.v1_0_0.events.network.RdpActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CLASS_UID
	16,  // 4: ocsf.v1_0_0.events.network.RdpActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_TYPE_UID
	17,  // 5: ocsf.v1_0_0.events.network.RdpActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	18,  // 6: ocsf.v1_0_0.events.network.RdpActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	19,  // 7: ocsf.v1_0_0.events.network.RdpActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_SEVERITY_ID
	20,  // 8: ocsf.v1_0_0.events.network.RdpActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	21,  // 9: ocsf.v1_0_0.events.network.RdpActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	22,  // 10: ocsf.v1_0_0.events.network.RdpActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_CATEGORY_UID
	23,  // 11: ocsf.v1_0_0.events.network.RdpActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	24,  // 12: ocsf.v1_0_0.events.network.RdpActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	25,  // 13: ocsf.v1_0_0.events.network.RdpActivity.request:type_name -> ocsf.v1_0_0.objects.Request
	26,  // 14: ocsf.v1_0_0.events.network.RdpActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_DISPOSITION_ID
	27,  // 15: ocsf.v1_0_0.events.network.RdpActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	23,  // 16: ocsf.v1_0_0.events.network.RdpActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	28,  // 17: ocsf.v1_0_0.events.network.RdpActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_STATUS_ID
	29,  // 18: ocsf.v1_0_0.events.network.RdpActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.RDP_ACTIVITY_ACTIVITY_ID
	30,  // 19: ocsf.v1_0_0.events.network.RdpActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	31,  // 20: ocsf.v1_0_0.events.network.RdpActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	32,  // 21: ocsf.v1_0_0.events.network.RdpActivity.response:type_name -> ocsf.v1_0_0.objects.Response
	33,  // 22: ocsf.v1_0_0.events.network.RdpActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	34,  // 23: ocsf.v1_0_0.events.network.RdpActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	35,  // 24: ocsf.v1_0_0.events.network.RdpActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	36,  // 25: ocsf.v1_0_0.events.network.RdpActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	17,  // 26: ocsf.v1_0_0.events.network.NetworkFileActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	37,  // 27: ocsf.v1_0_0.events.network.NetworkFileActivity.file:type_name -> ocsf.v1_0_0.objects.File
	23,  // 28: ocsf.v1_0_0.events.network.NetworkFileActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	38,  // 29: ocsf.v1_0_0.events.network.NetworkFileActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_SEVERITY_ID
	39,  // 30: ocsf.v1_0_0.events.network.NetworkFileActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CLASS_UID
	40,  // 31: ocsf.v1_0_0.events.network.NetworkFileActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_TYPE_UID
	33,  // 32: ocsf.v1_0_0.events.network.NetworkFileActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	30,  // 33: ocsf.v1_0_0.events.network.NetworkFileActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	41,  // 34: ocsf.v1_0_0.events.network.NetworkFileActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_STATUS_ID
	42,  // 35: ocsf.v1_0_0.events.network.NetworkFileActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_ACTIVITY_ID
	43,  // 36: ocsf.v1_0_0.events.network.NetworkFileActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_FILE_ACTIVITY_CATEGORY_UID
	14,  // 37: ocsf.v1_0_0.events.network.NetworkFileActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	36,  // 38: ocsf.v1_0_0.events.network.NetworkFileActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	31,  // 39: ocsf.v1_0_0.events.network.NetworkFileActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	35,  // 40: ocsf.v1_0_0.events.network.NetworkFileActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	31,  // 41: ocsf.v1_0_0.events.network.FtpActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	13,  // 42: ocsf.v1_0_0.events.network.FtpActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	35,  // 43: ocsf.v1_0_0.events.network.FtpActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	44,  // 44: ocsf.v1_0_0.events.network.FtpActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CLASS_UID
	14,  // 45: ocsf.v1_0_0.events.network.FtpActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	30,  // 46: ocsf.v1_0_0.events.network.FtpActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	45,  // 47: ocsf.v1_0_0.events.network.FtpActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_TYPE_UID
	23,  // 48: ocsf.v1_0_0.events.network.FtpActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	34,  // 49: ocsf.v1_0_0.events.network.FtpActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	46,  // 50: ocsf.v1_0_0.events.network.FtpActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_DISPOSITION_ID
	27,  // 51: ocsf.v1_0_0.events.network.FtpActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	47,  // 52: ocsf.v1_0_0.events.network.FtpActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_ACTIVITY_ID
	23,  // 53: ocsf.v1_0_0.events.network.FtpActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	18,  // 54: ocsf.v1_0_0.events.network.FtpActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	48,  // 55: ocsf.v1_0_0.events.network.FtpActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_SEVERITY_ID
	49,  // 56: ocsf.v1_0_0.events.network.FtpActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_STATUS_ID
	20,  // 57: ocsf.v1_0_0.events.network.FtpActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	50,  // 58: ocsf.v1_0_0.events.network.FtpActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.FTP_ACTIVITY_CATEGORY_UID
	33,  // 59: ocsf.v1_0_0.events.network.FtpActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	24,  // 60: ocsf.v1_0_0.events.network.FtpActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	36,  // 61: ocsf.v1_0_0.events.network.FtpActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	21,  // 62: ocsf.v1_0_0.events.network.FtpActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	17,  // 63: ocsf.v1_0_0.events.network.FtpActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	35,  // 64: ocsf.v1_0_0.events.network.SshActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	23,  // 65: ocsf.v1_0_0.events.network.SshActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	30,  // 66: ocsf.v1_0_0.events.network.SshActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	20,  // 67: ocsf.v1_0_0.events.network.SshActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	51,  // 68: ocsf.v1_0_0.events.network.SshActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_STATUS_ID
	21,  // 69: ocsf.v1_0_0.events.network.SshActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	34,  // 70: ocsf.v1_0_0.events.network.SshActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	17,  // 71: ocsf.v1_0_0.events.network.SshActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	52,  // 72: ocsf.v1_0_0.events.network.SshActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_SEVERITY_ID
	53,  // 73: ocsf.v1_0_0.events.network.SshActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_ACTIVITY_ID
	33,  // 74: ocsf.v1_0_0.events.network.SshActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	13,  // 75: ocsf.v1_0_0.events.network.SshActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	27,  // 76: ocsf.v1_0_0.events.network.SshActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	54,  // 77: ocsf.v1_0_0.events.network.SshActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_DISPOSITION_ID
	14,  // 78: ocsf.v1_0_0.events.network.SshActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	36,  // 79: ocsf.v1_0_0.events.network.SshActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 80: ocsf.v1_0_0.events.network.SshActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	55,  // 81: ocsf.v1_0_0.events.network.SshActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CLASS_UID
	56,  // 82: ocsf.v1_0_0.events.network.SshActivity.client_hassh:type_name -> ocsf.v1_0_0.objects.Hassh
	56,  // 83: ocsf.v1_0_0.events.network.SshActivity.server_hassh:type_name -> ocsf.v1_0_0.objects.Hassh
	57,  // 84: ocsf.v1_0_0.events.network.SshActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_CATEGORY_UID
	24,  // 85: ocsf.v1_0_0.events.network.SshActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	58,  // 86: ocsf.v1_0_0.events.network.SshActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.SSH_ACTIVITY_TYPE_UID
	31,  // 87: ocsf.v1_0_0.events.network.SshActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	18,  // 88: ocsf.v1_0_0.events.network.SshActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	59,  // 89: ocsf.v1_0_0.events.network.EmailFileActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CLASS_UID
	60,  // 90: ocsf.v1_0_0.events.network.EmailFileActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_STATUS_ID
	61,  // 91: ocsf.v1_0_0.events.network.EmailFileActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_DISPOSITION_ID
	30,  // 92: ocsf.v1_0_0.events.network.EmailFileActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	62,  // 93: ocsf.v1_0_0.events.network.EmailFileActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_CATEGORY_UID
	35,  // 94: ocsf.v1_0_0.events.network.EmailFileActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	37,  // 95: ocsf.v1_0_0.events.network.EmailFileActivity.file:type_name -> ocsf.v1_0_0.objects.File
	24,  // 96: ocsf.v1_0_0.events.network.EmailFileActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	31,  // 97: ocsf.v1_0_0.events.network.EmailFileActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	17,  // 98: ocsf.v1_0_0.events.network.EmailFileActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	63,  // 99: ocsf.v1_0_0.events.network.EmailFileActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_ACTIVITY_ID
	13,  // 100: ocsf.v1_0_0.events.network.EmailFileActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	64,  // 101: ocsf.v1_0_0.events.network.EmailFileActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_TYPE_UID
	36,  // 102: ocsf.v1_0_0.events.network.EmailFileActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	34,  // 103: ocsf.v1_0_0.events.network.EmailFileActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	14,  // 104: ocsf.v1_0_0.events.network.EmailFileActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	33,  // 105: ocsf.v1_0_0.events.network.EmailFileActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	65,  // 106: ocsf.v1_0_0.events.network.EmailFileActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_FILE_ACTIVITY_SEVERITY_ID
	66,  // 107: ocsf.v1_0_0.events.network.DnsActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_ACTIVITY_ID
	67,  // 108: ocsf.v1_0_0.events.network.DnsActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_SEVERITY_ID
	21,  // 109: ocsf.v1_0_0.events.network.DnsActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	34,  // 110: ocsf.v1_0_0.events.network.DnsActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	24,  // 111: ocsf.v1_0_0.events.network.DnsActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	36,  // 112: ocsf.v1_0_0.events.network.DnsActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	68,  // 113: ocsf.v1_0_0.events.network.DnsActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CLASS_UID
	69,  // 114: ocsf.v1_0_0.events.network.DnsActivity.query:type_name -> ocsf.v1_0_0.objects.DnsQuery
	13,  // 115: ocsf.v1_0_0.events.network.DnsActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	20,  // 116: ocsf.v1_0_0.events.network.DnsActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	23,  // 117: ocsf.v1_0_0.events.network.DnsActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	33,  // 118: ocsf.v1_0_0.events.network.DnsActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	27,  // 119: ocsf.v1_0_0.events.network.DnsActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	30,  // 120: ocsf.v1_0_0.events.network.DnsActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	31,  // 121: ocsf.v1_0_0.events.network.DnsActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	70,  // 122: ocsf.v1_0_0.events.network.DnsActivity.rcode_id:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_RCODE_ID
	23,  // 123: ocsf.v1_0_0.events.network.DnsActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	17,  // 124: ocsf.v1_0_0.events.network.DnsActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	71,  // 125: ocsf.v1_0_0.events.network.DnsActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_DISPOSITION_ID
	35,  // 126: ocsf.v1_0_0.events.network.DnsActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	18,  // 127: ocsf.v1_0_0.events.network.DnsActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	72,  // 128: ocsf.v1_0_0.events.network.DnsActivity.answers:type_name -> ocsf.v1_0_0.objects.DnsAnswer
	73,  // 129: ocsf.v1_0_0.events.network.DnsActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_CATEGORY_UID
	74,  // 130: ocsf.v1_0_0.events.network.DnsActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_TYPE_UID
	14,  // 131: ocsf.v1_0_0.events.network.DnsActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	75,  // 132: ocsf.v1_0_0.events.network.DnsActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.DNS_ACTIVITY_STATUS_ID
	23,  // 133: ocsf.v1_0_0.events.network.DhcpActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	76,  // 134: ocsf.v1_0_0.events.network.DhcpActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_TYPE_UID
	77,  // 135: ocsf.v1_0_0.events.network.DhcpActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CLASS_UID
	78,  // 136: ocsf.v1_0_0.events.network.DhcpActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_ACTIVITY_ID
	14,  // 137: ocsf.v1_0_0.events.network.DhcpActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	79,  // 138: ocsf.v1_0_0.events.network.DhcpActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_STATUS_ID
	33,  // 139: ocsf.v1_0_0.events.network.DhcpActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	31,  // 140: ocsf.v1_0_0.events.network.DhcpActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	80,  // 141: ocsf.v1_0_0.events.network.DhcpActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_CATEGORY_UID
	23,  // 142: ocsf.v1_0_0.events.network.DhcpActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	81,  // 143: ocsf.v1_0_0.events.network.DhcpActivity.relay:type_name -> ocsf.v1_0_0.objects.NetworkInterface
	36,  // 144: ocsf.v1_0_0.events.network.DhcpActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	35,  // 145: ocsf.v1_0_0.events.network.DhcpActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	30,  // 146: ocsf.v1_0_0.events.network.DhcpActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	17,  // 147: ocsf.v1_0_0.events.network.DhcpActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	24,  // 148: ocsf.v1_0_0.events.network.DhcpActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	82,  // 149: ocsf.v1_0_0.events.network.DhcpActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.DHCP_ACTIVITY_SEVERITY_ID
	35,  // 150: ocsf.v1_0_0.events.network.EmailUrlActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	33,  // 151: ocsf.v1_0_0.events.network.EmailUrlActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	83,  // 152: ocsf.v1_0_0.events.network.EmailUrlActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_ACTIVITY_ID
	84,  // 153: ocsf.v1_0_0.events.network.EmailUrlActivity.url:type_name -> ocsf.v1_0_0.objects.Url
	17,  // 154: ocsf.v1_0_0.events.network.EmailUrlActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	30,  // 155: ocsf.v1_0_0.events.network.EmailUrlActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	14,  // 156: ocsf.v1_0_0.events.network.EmailUrlActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	85,  // 157: ocsf.v1_0_0.events.network.EmailUrlActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_DISPOSITION_ID
	34,  // 158: ocsf.v1_0_0.events.network.EmailUrlActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	36,  // 159: ocsf.v1_0_0.events.network.EmailUrlActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	86,  // 160: ocsf.v1_0_0.events.network.EmailUrlActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CATEGORY_UID
	24,  // 161: ocsf.v1_0_0.events.network.EmailUrlActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	13,  // 162: ocsf.v1_0_0.events.network.EmailUrlActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	87,  // 163: ocsf.v1_0_0.events.network.EmailUrlActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_STATUS_ID
	31,  // 164: ocsf.v1_0_0.events.network.EmailUrlActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	88,  // 165: ocsf.v1_0_0.events.network.EmailUrlActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_CLASS_UID
	89,  // 166: ocsf.v1_0_0.events.network.EmailUrlActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_TYPE_UID
	90,  // 167: ocsf.v1_0_0.events.network.EmailUrlActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_URL_ACTIVITY_SEVERITY_ID
	23,  // 168: ocsf.v1_0_0.events.network.NetworkActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	27,  // 169: ocsf.v1_0_0.events.network.NetworkActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	91,  // 170: ocsf.v1_0_0.events.network.NetworkActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_ACTIVITY_ID
	20,  // 171: ocsf.v1_0_0.events.network.NetworkActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	24,  // 172: ocsf.v1_0_0.events.network.NetworkActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	92,  // 173: ocsf.v1_0_0.events.network.NetworkActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CATEGORY_UID
	93,  // 174: ocsf.v1_0_0.events.network.NetworkActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_SEVERITY_ID
	14,  // 175: ocsf.v1_0_0.events.network.NetworkActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	94,  // 176: ocsf.v1_0_0.events.network.NetworkActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_STATUS_ID
	95,  // 177: ocsf.v1_0_0.events.network.NetworkActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_TYPE_UID
	36,  // 178: ocsf.v1_0_0.events.network.NetworkActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 179: ocsf.v1_0_0.events.network.NetworkActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	30,  // 180: ocsf.v1_0_0.events.network.NetworkActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	31,  // 181: ocsf.v1_0_0.events.network.NetworkActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	13,  // 182: ocsf.v1_0_0.events.network.NetworkActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	21,  // 183: ocsf.v1_0_0.events.network.NetworkActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	17,  // 184: ocsf.v1_0_0.events.network.NetworkActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	33,  // 185: ocsf.v1_0_0.events.network.NetworkActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	34,  // 186: ocsf.v1_0_0.events.network.NetworkActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	18,  // 187: ocsf.v1_0_0.events.network.NetworkActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	35,  // 188: ocsf.v1_0_0.events.network.NetworkActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	96,  // 189: ocsf.v1_0_0.events.network.NetworkActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_DISPOSITION_ID
	97,  // 190: ocsf.v1_0_0.events.network.NetworkActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.NETWORK_ACTIVITY_CLASS_UID
	98,  // 191: ocsf.v1_0_0.events.network.HttpActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_STATUS_ID
	99,  // 192: ocsf.v1_0_0.events.network.HttpActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_DISPOSITION_ID
	23,  // 193: ocsf.v1_0_0.events.network.HttpActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	36,  // 194: ocsf.v1_0_0.events.network.HttpActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 195: ocsf.v1_0_0.events.network.HttpActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	18,  // 196: ocsf.v1_0_0.events.network.HttpActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	100, // 197: ocsf.v1_0_0.events.network.HttpActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CLASS_UID
	101, // 198: ocsf.v1_0_0.events.network.HttpActivity.http_request:type_name -> ocsf.v1_0_0.objects.HttpRequest
	31,  // 199: ocsf.v1_0_0.events.network.HttpActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	21,  // 200: ocsf.v1_0_0.events.network.HttpActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	33,  // 201: ocsf.v1_0_0.events.network.HttpActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	35,  // 202: ocsf.v1_0_0.events.network.HttpActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	24,  // 203: ocsf.v1_0_0.events.network.HttpActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	30,  // 204: ocsf.v1_0_0.events.network.HttpActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	13,  // 205: ocsf.v1_0_0.events.network.HttpActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	102, // 206: ocsf.v1_0_0.events.network.HttpActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_SEVERITY_ID
	27,  // 207: ocsf.v1_0_0.events.network.HttpActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	17,  // 208: ocsf.v1_0_0.events.network.HttpActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	103, // 209: ocsf.v1_0_0.events.network.HttpActivity.http_response:type_name -> ocsf.v1_0_0.objects.HttpResponse
	14,  // 210: ocsf.v1_0_0.events.network.HttpActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	104, // 211: ocsf.v1_0_0.events.network.HttpActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_TYPE_UID
	105, // 212: ocsf.v1_0_0.events.network.HttpActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_CATEGORY_UID
	106, // 213: ocsf.v1_0_0.events.network.HttpActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.HTTP_ACTIVITY_ACTIVITY_ID
	34,  // 214: ocsf.v1_0_0.events.network.HttpActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	20,  // 215: ocsf.v1_0_0.events.network.HttpActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	23,  // 216: ocsf.v1_0_0.events.network.SmbActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	20,  // 217: ocsf.v1_0_0.events.network.SmbActivity.tls:type_name -> ocsf.v1_0_0.objects.Tls
	33,  // 218: ocsf.v1_0_0.events.network.SmbActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	34,  // 219: ocsf.v1_0_0.events.network.SmbActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	18,  // 220: ocsf.v1_0_0.events.network.SmbActivity.traffic:type_name -> ocsf.v1_0_0.objects.NetworkTraffic
	24,  // 221: ocsf.v1_0_0.events.network.SmbActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	107, // 222: ocsf.v1_0_0.events.network.SmbActivity.dce_rpc:type_name -> ocsf.v1_0_0.objects.DceRpc
	14,  // 223: ocsf.v1_0_0.events.network.SmbActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	108, // 224: ocsf.v1_0_0.events.network.SmbActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_DISPOSITION_ID
	109, // 225: ocsf.v1_0_0.events.network.SmbActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CLASS_UID
	110, // 226: ocsf.v1_0_0.events.network.SmbActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_STATUS_ID
	30,  // 227: ocsf.v1_0_0.events.network.SmbActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	17,  // 228: ocsf.v1_0_0.events.network.SmbActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	35,  // 229: ocsf.v1_0_0.events.network.SmbActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	32,  // 230: ocsf.v1_0_0.events.network.SmbActivity.response:type_name -> ocsf.v1_0_0.objects.Response
	111, // 231: ocsf.v1_0_0.events.network.SmbActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_ACTIVITY_ID
	112, // 232: ocsf.v1_0_0.events.network.SmbActivity.share_type_id:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SHARE_TYPE_ID
	113, // 233: ocsf.v1_0_0.events.network.SmbActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_TYPE_UID
	31,  // 234: ocsf.v1_0_0.events.network.SmbActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	37,  // 235: ocsf.v1_0_0.events.network.SmbActivity.file:type_name -> ocsf.v1_0_0.objects.File
	36,  // 236: ocsf.v1_0_0.events.network.SmbActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	23,  // 237: ocsf.v1_0_0.events.network.SmbActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	13,  // 238: ocsf.v1_0_0.events.network.SmbActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	21,  // 239: ocsf.v1_0_0.events.network.SmbActivity.proxy:type_name -> ocsf.v1_0_0.objects.NetworkProxy
	27,  // 240: ocsf.v1_0_0.events.network.SmbActivity.connection_info:type_name -> ocsf.v1_0_0.objects.NetworkConnectionInfo
	114, // 241: ocsf.v1_0_0.events.network.SmbActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_CATEGORY_UID
	115, // 242: ocsf.v1_0_0.events.network.SmbActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.SMB_ACTIVITY_SEVERITY_ID
	116, // 243: ocsf.v1_0_0.events.network.EmailActivity.disposition_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DISPOSITION_ID
	23,  // 244: ocsf.v1_0_0.events.network.EmailActivity.dst_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	34,  // 245: ocsf.v1_0_0.events.network.EmailActivity.malware:type_name -> ocsf.v1_0_0.objects.Malware
	23,  // 246: ocsf.v1_0_0.events.network.EmailActivity.src_endpoint:type_name -> ocsf.v1_0_0.objects.NetworkEndpoint
	35,  // 247: ocsf.v1_0_0.events.network.EmailActivity.enrichments:type_name -> ocsf.v1_0_0.objects.Enrichment
	117, // 248: ocsf.v1_0_0.events.network.EmailActivity.email:type_name -> ocsf.v1_0_0.objects.Email
	118, // 249: ocsf.v1_0_0.events.network.EmailActivity.status_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_STATUS_ID
	14,  // 250: ocsf.v1_0_0.events.network.EmailActivity.metadata:type_name -> ocsf.v1_0_0.objects.Metadata
	119, // 251: ocsf.v1_0_0.events.network.EmailActivity.class_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CLASS_UID
	13,  // 252: ocsf.v1_0_0.events.network.EmailActivity.attacks:type_name -> ocsf.v1_0_0.objects.Attack
	120, // 253: ocsf.v1_0_0.events.network.EmailActivity.type_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_TYPE_UID
	33,  // 254: ocsf.v1_0_0.events.network.EmailActivity.observables:type_name -> ocsf.v1_0_0.objects.Observable
	121, // 255: ocsf.v1_0_0.events.network.EmailActivity.direction_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_DIRECTION_ID
	17,  // 256: ocsf.v1_0_0.events.network.EmailActivity.actor:type_name -> ocsf.v1_0_0.objects.Actor
	122, // 257: ocsf.v1_0_0.events.network.EmailActivity.severity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_SEVERITY_ID
	36,  // 258: ocsf.v1_0_0.events.network.EmailActivity.cloud:type_name -> ocsf.v1_0_0.objects.Cloud
	123, // 259: ocsf.v1_0_0.events.network.EmailActivity.email_auth:type_name -> ocsf.v1_0_0.objects.EmailAuth
	24,  // 260: ocsf.v1_0_0.events.network.EmailActivity.device:type_name -> ocsf.v1_0_0.objects.Device
	124, // 261: ocsf.v1_0_0.events.network.EmailActivity.activity_id:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_ACTIVITY_ID
	31,  // 262: ocsf.v1_0_0.events.network.EmailActivity.unmapped:type_name -> ocsf.v1_0_0.objects.Object
	125, // 263: ocsf.v1_0_0.events.network.EmailActivity.category_uid:type_name -> ocsf.v1_0_0.events.network.enums.EMAIL_ACTIVITY_CATEGORY_UID
	30,  // 264: ocsf.v1_0_0.events.network.EmailActivity.api:type_name -> ocsf.v1_0_0.objects.Api
	265, // [265:265] is the sub-list for method output_type
	265, // [265:265] is the sub-list for method input_type
	265, // [265:265] is the sub-list for extension type_name
	265, // [265:265] is the sub-list for extension extendee
	0,   // [0:265] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_events_network_network_proto_init() }
func file_ocsf_v1_0_0_events_network_network_proto_init() {
	if File_ocsf_v1_0_0_events_network_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkFileActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailFileActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailUrlActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmbActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_events_network_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_events_network_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_events_network_network_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_events_network_network_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_0_0_events_network_network_proto_msgTypes,
	}.Build()
	File_ocsf_v1_0_0_events_network_network_proto = out.File
	file_ocsf_v1_0_0_events_network_network_proto_rawDesc = nil
	file_ocsf_v1_0_0_events_network_network_proto_goTypes = nil
	file_ocsf_v1_0_0_events_network_network_proto_depIdxs = nil
}
