// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ocsf/v1_0_0/objects/objects.proto

package objects

import (
	enums "github.com/valllabh/ocsf-schema-golang/ocsf/v1_0_0/objects/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
	Labels  []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`   // Caption: Labels;
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Service) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Service) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RpcInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckReason int32  `protobuf:"varint,1,opt,name=ack_reason,json=ackReason,proto3" json:"ack_reason,omitempty"` // Caption: Acknowledgement Reason;
	AckResult int32  `protobuf:"varint,2,opt,name=ack_result,json=ackResult,proto3" json:"ack_result,omitempty"` // Caption: Acknowledgement Result;
	Uuid      string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                             // Caption: UUID;
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                       // Caption: Version;
}

func (x *RpcInterface) Reset() {
	*x = RpcInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcInterface) ProtoMessage() {}

func (x *RpcInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcInterface.ProtoReflect.Descriptor instead.
func (*RpcInterface) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{1}
}

func (x *RpcInterface) GetAckReason() int32 {
	if x != nil {
		return x.AckReason
	}
	return 0
}

func (x *RpcInterface) GetAckResult() int32 {
	if x != nil {
		return x.AckResult
	}
	return 0
}

func (x *RpcInterface) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RpcInterface) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Cloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org        *Organization `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`                                 // Caption: Organization;
	ProjectUid string        `protobuf:"bytes,2,opt,name=project_uid,json=projectUid,proto3" json:"project_uid,omitempty"` // Caption: Project ID;
	Provider   string        `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`                       // Caption: Provider;
	Region     string        `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`                           // Caption: Region;
	Zone       string        `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`                               // Caption: Network Zone;
	Account    *Account      `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`                         // Caption: Account;
}

func (x *Cloud) Reset() {
	*x = Cloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cloud) ProtoMessage() {}

func (x *Cloud) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cloud.ProtoReflect.Descriptor instead.
func (*Cloud) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{2}
}

func (x *Cloud) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *Cloud) GetProjectUid() string {
	if x != nil {
		return x.ProjectUid
	}
	return ""
}

func (x *Cloud) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Cloud) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Cloud) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Cloud) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type Observable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                      // Caption: Name;
	Reputation *Reputation              `protobuf:"bytes,2,opt,name=reputation,proto3" json:"reputation,omitempty"`                                                          // Caption: Reputation Scores;
	Type       string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                      // Caption: Type;
	TypeId     enums.OBSERVABLE_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.OBSERVABLE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Value      string                   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                                                    // Caption: Value;
}

func (x *Observable) Reset() {
	*x = Observable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observable) ProtoMessage() {}

func (x *Observable) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observable.ProtoReflect.Descriptor instead.
func (*Observable) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{3}
}

func (x *Observable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Observable) GetReputation() *Reputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *Observable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Observable) GetTypeId() enums.OBSERVABLE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.OBSERVABLE_TYPE_ID(0)
}

func (x *Observable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                  // Caption: Name;
	User        *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                                                                  // Caption: User;
	CmdLine     string                 `protobuf:"bytes,3,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`                                                             // Caption: Command Line;
	NextRunTime int64                  `protobuf:"varint,4,opt,name=next_run_time,json=nextRunTime,proto3" json:"next_run_time,omitempty"`                                              // Caption: Next Run;
	LastRunTime int64                  `protobuf:"varint,5,opt,name=last_run_time,json=lastRunTime,proto3" json:"last_run_time,omitempty"`                                              // Caption: Last Run;
	RunState    string                 `protobuf:"bytes,6,opt,name=run_state,json=runState,proto3" json:"run_state,omitempty"`                                                          // Caption: Run State;
	CreatedTime int64                  `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                // Caption: Created Time;
	RunStateId  enums.JOB_RUN_STATE_ID `protobuf:"varint,8,opt,name=run_state_id,json=runStateId,proto3,enum=ocsf.v1_0_0.objects.enums.JOB_RUN_STATE_ID" json:"run_state_id,omitempty"` // Caption: Run State ID;
	Desc        string                 `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                  // Caption: Description;
	File        *File                  `protobuf:"bytes,10,opt,name=file,proto3" json:"file,omitempty"`                                                                                 // Caption: File;
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{4}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Job) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *Job) GetNextRunTime() int64 {
	if x != nil {
		return x.NextRunTime
	}
	return 0
}

func (x *Job) GetLastRunTime() int64 {
	if x != nil {
		return x.LastRunTime
	}
	return 0
}

func (x *Job) GetRunState() string {
	if x != nil {
		return x.RunState
	}
	return ""
}

func (x *Job) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Job) GetRunStateId() enums.JOB_RUN_STATE_ID {
	if x != nil {
		return x.RunStateId
	}
	return enums.JOB_RUN_STATE_ID(0)
}

func (x *Job) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Job) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type KeyboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyboardType    string `protobuf:"bytes,1,opt,name=keyboard_type,json=keyboardType,proto3" json:"keyboard_type,omitempty"`           // Caption: Keyboard Type;
	FunctionKeys    int32  `protobuf:"varint,2,opt,name=function_keys,json=functionKeys,proto3" json:"function_keys,omitempty"`          // Caption: Function Keys;
	Ime             string `protobuf:"bytes,3,opt,name=ime,proto3" json:"ime,omitempty"`                                                 // Caption: IME;
	KeyboardLayout  string `protobuf:"bytes,4,opt,name=keyboard_layout,json=keyboardLayout,proto3" json:"keyboard_layout,omitempty"`     // Caption: Keyboard Layout;
	KeyboardSubtype int32  `protobuf:"varint,5,opt,name=keyboard_subtype,json=keyboardSubtype,proto3" json:"keyboard_subtype,omitempty"` // Caption: Keyboard Subtype;
}

func (x *KeyboardInfo) Reset() {
	*x = KeyboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardInfo) ProtoMessage() {}

func (x *KeyboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardInfo.ProtoReflect.Descriptor instead.
func (*KeyboardInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{5}
}

func (x *KeyboardInfo) GetKeyboardType() string {
	if x != nil {
		return x.KeyboardType
	}
	return ""
}

func (x *KeyboardInfo) GetFunctionKeys() int32 {
	if x != nil {
		return x.FunctionKeys
	}
	return 0
}

func (x *KeyboardInfo) GetIme() string {
	if x != nil {
		return x.Ime
	}
	return ""
}

func (x *KeyboardInfo) GetKeyboardLayout() string {
	if x != nil {
		return x.KeyboardLayout
	}
	return ""
}

func (x *KeyboardInfo) GetKeyboardSubtype() int32 {
	if x != nil {
		return x.KeyboardSubtype
	}
	return 0
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Privileges []string `protobuf:"bytes,1,rep,name=privileges,proto3" json:"privileges,omitempty"` // Caption: Privileges;
	Type       string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`             // Caption: Type;
	Uid        string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`               // Caption: Unique ID;
	Desc       string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`             // Caption: Description;
	Name       string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`             // Caption: Name;
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{6}
}

func (x *Group) GetPrivileges() []string {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *Group) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Group) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Group) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer         string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`                                        // Caption: Issuer Details;
	Uid            string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                              // Caption: Unique ID;
	Uuid           string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`                                            // Caption: UUID;
	CreatedTime    int64  `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`          // Caption: Created Time;
	CredentialUid  string `protobuf:"bytes,5,opt,name=credential_uid,json=credentialUid,proto3" json:"credential_uid,omitempty"`     // Caption: User Credential ID;
	ExpirationTime int64  `protobuf:"varint,6,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // Caption: Expiration Time;
	IsRemote       bool   `protobuf:"varint,7,opt,name=is_remote,json=isRemote,proto3" json:"is_remote,omitempty"`                   // Caption: Remote;
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{7}
}

func (x *Session) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Session) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Session) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Session) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Session) GetCredentialUid() string {
	if x != nil {
		return x.CredentialUid
	}
	return ""
}

func (x *Session) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *Session) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remediation    *Remediation    `protobuf:"bytes,1,opt,name=remediation,proto3" json:"remediation,omitempty"`                              // Caption: Remediation;
	Uid            string          `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                              // Caption: Unique ID;
	RelatedEvents  []*RelatedEvent `protobuf:"bytes,3,rep,name=related_events,json=relatedEvents,proto3" json:"related_events,omitempty"`     // Caption: Related Events;
	Types          []string        `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`                                          // Caption: Types;
	FirstSeenTime  int64           `protobuf:"varint,5,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`  // Caption: First Seen;
	ModifiedTime   int64           `protobuf:"varint,6,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`       // Caption: Modified Time;
	Title          string          `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`                                          // Caption: Title;
	Desc           string          `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`                                            // Caption: Description;
	ProductUid     string          `protobuf:"bytes,9,opt,name=product_uid,json=productUid,proto3" json:"product_uid,omitempty"`              // Caption: Product Identifier;
	SrcUrl         string          `protobuf:"bytes,10,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                         // Caption: Source URL;
	LastSeenTime   int64           `protobuf:"varint,11,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`    // Caption: Last Seen;
	CreatedTime    int64           `protobuf:"varint,12,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`         // Caption: Created Time;
	SupportingData string          `protobuf:"bytes,13,opt,name=supporting_data,json=supportingData,proto3" json:"supporting_data,omitempty"` // Caption: Supporting Data;
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{8}
}

func (x *Finding) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

func (x *Finding) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Finding) GetRelatedEvents() []*RelatedEvent {
	if x != nil {
		return x.RelatedEvents
	}
	return nil
}

func (x *Finding) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Finding) GetFirstSeenTime() int64 {
	if x != nil {
		return x.FirstSeenTime
	}
	return 0
}

func (x *Finding) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Finding) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Finding) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Finding) GetProductUid() string {
	if x != nil {
		return x.ProductUid
	}
	return ""
}

func (x *Finding) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

func (x *Finding) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *Finding) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Finding) GetSupportingData() string {
	if x != nil {
		return x.SupportingData
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCode      string     `protobuf:"bytes,1,opt,name=event_code,json=eventCode,proto3" json:"event_code,omitempty"`                // Caption: Event Code;
	LogName        string     `protobuf:"bytes,2,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`                      // Caption: Log Name;
	OriginalTime   string     `protobuf:"bytes,3,opt,name=original_time,json=originalTime,proto3" json:"original_time,omitempty"`       // Caption: Original Time;
	Uid            string     `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                                             // Caption: Unique ID;
	ModifiedTime   int64      `protobuf:"varint,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`      // Caption: Modified Time;
	Product        *Product   `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`                                     // Caption: Product;
	CorrelationUid string     `protobuf:"bytes,7,opt,name=correlation_uid,json=correlationUid,proto3" json:"correlation_uid,omitempty"` // Caption: Correlation UID;
	Profiles       []string   `protobuf:"bytes,8,rep,name=profiles,proto3" json:"profiles,omitempty"`                                   // Caption: Profiles;
	Extension      *Extension `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`                                 // Caption: Schema Extension;
	LogVersion     string     `protobuf:"bytes,10,opt,name=log_version,json=logVersion,proto3" json:"log_version,omitempty"`            // Caption: Log Version;
	Sequence       int32      `protobuf:"varint,11,opt,name=sequence,proto3" json:"sequence,omitempty"`                                 // Caption: Sequence Number;
	LogProvider    string     `protobuf:"bytes,12,opt,name=log_provider,json=logProvider,proto3" json:"log_provider,omitempty"`         // Caption: Log Provider;
	Version        string     `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`                                    // Caption: Version;
	ProcessedTime  int64      `protobuf:"varint,14,opt,name=processed_time,json=processedTime,proto3" json:"processed_time,omitempty"`  // Caption: Processed Time;
	LoggedTime     int64      `protobuf:"varint,15,opt,name=logged_time,json=loggedTime,proto3" json:"logged_time,omitempty"`           // Caption: Logged Time;
	Labels         []string   `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty"`                                      // Caption: Labels;
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{9}
}

func (x *Metadata) GetEventCode() string {
	if x != nil {
		return x.EventCode
	}
	return ""
}

func (x *Metadata) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *Metadata) GetOriginalTime() string {
	if x != nil {
		return x.OriginalTime
	}
	return ""
}

func (x *Metadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Metadata) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Metadata) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Metadata) GetCorrelationUid() string {
	if x != nil {
		return x.CorrelationUid
	}
	return ""
}

func (x *Metadata) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Metadata) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Metadata) GetLogVersion() string {
	if x != nil {
		return x.LogVersion
	}
	return ""
}

func (x *Metadata) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Metadata) GetLogProvider() string {
	if x != nil {
		return x.LogProvider
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetProcessedTime() int64 {
	if x != nil {
		return x.ProcessedTime
	}
	return 0
}

func (x *Metadata) GetLoggedTime() int64 {
	if x != nil {
		return x.LoggedTime
	}
	return 0
}

func (x *Metadata) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`       // Caption: Unique ID;
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"` // Caption: Labels;
	Name   string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`     // Caption: Name;
	Path   string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`     // Caption: Path;
	Tag    string   `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`       // Caption: Image Tag;
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{10}
}

func (x *Image) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Image) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type Cve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedTime int64    `protobuf:"varint,1,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"` // Caption: Modified Time;
	CreatedTime  int64    `protobuf:"varint,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`    // Caption: Created Time;
	Uid          string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                                        // Caption: Unique ID;
	Product      *Product `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`                                // Caption: Product;
	Type         string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                      // Caption: Type;
	Cvss         *Cvss    `protobuf:"bytes,6,opt,name=cvss,proto3" json:"cvss,omitempty"`                                      // Caption: CVSS Score;
	CweUid       string   `protobuf:"bytes,7,opt,name=cwe_uid,json=cweUid,proto3" json:"cwe_uid,omitempty"`                    // Caption: CWE UID;
	CweUrl       string   `protobuf:"bytes,8,opt,name=cwe_url,json=cweUrl,proto3" json:"cwe_url,omitempty"`                    // Caption: CWE URL;
}

func (x *Cve) Reset() {
	*x = Cve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cve) ProtoMessage() {}

func (x *Cve) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cve.ProtoReflect.Descriptor instead.
func (*Cve) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{11}
}

func (x *Cve) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Cve) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Cve) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Cve) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Cve) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Cve) GetCvss() *Cvss {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *Cve) GetCweUid() string {
	if x != nil {
		return x.CweUid
	}
	return ""
}

func (x *Cve) GetCweUrl() string {
	if x != nil {
		return x.CweUrl
	}
	return ""
}

type EmailAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DmarcPolicy   string `protobuf:"bytes,1,opt,name=dmarc_policy,json=dmarcPolicy,proto3" json:"dmarc_policy,omitempty"`       // Caption: DMARC Policy;
	Spf           string `protobuf:"bytes,2,opt,name=spf,proto3" json:"spf,omitempty"`                                          // Caption: SPF Status;
	DkimDomain    string `protobuf:"bytes,3,opt,name=dkim_domain,json=dkimDomain,proto3" json:"dkim_domain,omitempty"`          // Caption: DKIM Domain;
	Dkim          string `protobuf:"bytes,4,opt,name=dkim,proto3" json:"dkim,omitempty"`                                        // Caption: DKIM Status;
	DkimSignature string `protobuf:"bytes,5,opt,name=dkim_signature,json=dkimSignature,proto3" json:"dkim_signature,omitempty"` // Caption: DKIM Signature;
	Dmarc         string `protobuf:"bytes,6,opt,name=dmarc,proto3" json:"dmarc,omitempty"`                                      // Caption: DMARC Status;
	DmarcOverride string `protobuf:"bytes,7,opt,name=dmarc_override,json=dmarcOverride,proto3" json:"dmarc_override,omitempty"` // Caption: DMARC Override;
}

func (x *EmailAuth) Reset() {
	*x = EmailAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAuth) ProtoMessage() {}

func (x *EmailAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAuth.ProtoReflect.Descriptor instead.
func (*EmailAuth) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{12}
}

func (x *EmailAuth) GetDmarcPolicy() string {
	if x != nil {
		return x.DmarcPolicy
	}
	return ""
}

func (x *EmailAuth) GetSpf() string {
	if x != nil {
		return x.Spf
	}
	return ""
}

func (x *EmailAuth) GetDkimDomain() string {
	if x != nil {
		return x.DkimDomain
	}
	return ""
}

func (x *EmailAuth) GetDkim() string {
	if x != nil {
		return x.Dkim
	}
	return ""
}

func (x *EmailAuth) GetDkimSignature() string {
	if x != nil {
		return x.DkimSignature
	}
	return ""
}

func (x *EmailAuth) GetDmarc() string {
	if x != nil {
		return x.Dmarc
	}
	return ""
}

func (x *EmailAuth) GetDmarcOverride() string {
	if x != nil {
		return x.DmarcOverride
	}
	return ""
}

type DeviceHwInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RamSize          int32         `protobuf:"varint,1,opt,name=ram_size,json=ramSize,proto3" json:"ram_size,omitempty"`                            // Caption: RAM Size;
	CpuCount         int32         `protobuf:"varint,2,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`                         // Caption: CPU Count;
	KeyboardInfo     *KeyboardInfo `protobuf:"bytes,3,opt,name=keyboard_info,json=keyboardInfo,proto3" json:"keyboard_info,omitempty"`              // Caption: Keyboard Information;
	SerialNumber     string        `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`              // Caption: Serial Number;
	CpuBits          int32         `protobuf:"varint,5,opt,name=cpu_bits,json=cpuBits,proto3" json:"cpu_bits,omitempty"`                            // Caption: CPU Bits;
	BiosDate         string        `protobuf:"bytes,6,opt,name=bios_date,json=biosDate,proto3" json:"bios_date,omitempty"`                          // Caption: BIOS Date;
	BiosVer          string        `protobuf:"bytes,7,opt,name=bios_ver,json=biosVer,proto3" json:"bios_ver,omitempty"`                             // Caption: BIOS Version;
	Chassis          string        `protobuf:"bytes,8,opt,name=chassis,proto3" json:"chassis,omitempty"`                                            // Caption: Chassis;
	DesktopDisplay   *Display      `protobuf:"bytes,9,opt,name=desktop_display,json=desktopDisplay,proto3" json:"desktop_display,omitempty"`        // Caption: Desktop Display;
	CpuCores         int32         `protobuf:"varint,10,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`                        // Caption: CPU Cores;
	CpuSpeed         int32         `protobuf:"varint,11,opt,name=cpu_speed,json=cpuSpeed,proto3" json:"cpu_speed,omitempty"`                        // Caption: Processor Speed;
	CpuType          string        `protobuf:"bytes,12,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type,omitempty"`                            // Caption: Processor Type;
	BiosManufacturer string        `protobuf:"bytes,13,opt,name=bios_manufacturer,json=biosManufacturer,proto3" json:"bios_manufacturer,omitempty"` // Caption: BIOS Manufacturer;
}

func (x *DeviceHwInfo) Reset() {
	*x = DeviceHwInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceHwInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceHwInfo) ProtoMessage() {}

func (x *DeviceHwInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceHwInfo.ProtoReflect.Descriptor instead.
func (*DeviceHwInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceHwInfo) GetRamSize() int32 {
	if x != nil {
		return x.RamSize
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *DeviceHwInfo) GetKeyboardInfo() *KeyboardInfo {
	if x != nil {
		return x.KeyboardInfo
	}
	return nil
}

func (x *DeviceHwInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DeviceHwInfo) GetCpuBits() int32 {
	if x != nil {
		return x.CpuBits
	}
	return 0
}

func (x *DeviceHwInfo) GetBiosDate() string {
	if x != nil {
		return x.BiosDate
	}
	return ""
}

func (x *DeviceHwInfo) GetBiosVer() string {
	if x != nil {
		return x.BiosVer
	}
	return ""
}

func (x *DeviceHwInfo) GetChassis() string {
	if x != nil {
		return x.Chassis
	}
	return ""
}

func (x *DeviceHwInfo) GetDesktopDisplay() *Display {
	if x != nil {
		return x.DesktopDisplay
	}
	return nil
}

func (x *DeviceHwInfo) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuSpeed() int32 {
	if x != nil {
		return x.CpuSpeed
	}
	return 0
}

func (x *DeviceHwInfo) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *DeviceHwInfo) GetBiosManufacturer() string {
	if x != nil {
		return x.BiosManufacturer
	}
	return ""
}

type CisControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
	Control string `protobuf:"bytes,2,opt,name=control,proto3" json:"control,omitempty"` // Caption: Control;
}

func (x *CisControl) Reset() {
	*x = CisControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CisControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CisControl) ProtoMessage() {}

func (x *CisControl) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CisControl.ProtoReflect.Descriptor instead.
func (*CisControl) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{14}
}

func (x *CisControl) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CisControl) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Caption: Name;
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Caption: Value;
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{15}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port         int32                    `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`                                                                                         // Caption: Port;
	QueryString  string                   `protobuf:"bytes,2,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`                                                         // Caption: HTTP Query String;
	Categories   []string                 `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`                                                                              // Caption: Website Categorization;
	CategoryIds  []enums.URL_CATEGORY_IDS `protobuf:"varint,4,rep,packed,name=category_ids,json=categoryIds,proto3,enum=ocsf.v1_0_0.objects.enums.URL_CATEGORY_IDS" json:"category_ids,omitempty"` // Caption: Website Categorization IDs;
	Path         string                   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                                                                                          // Caption: Path;
	ResourceType string                   `protobuf:"bytes,6,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`                                                      // Caption: Resource Type;
	Scheme       string                   `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`                                                                                      // Caption: Scheme;
	UrlString    string                   `protobuf:"bytes,8,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"`                                                               // Caption: URL String;
	Subdomain    string                   `protobuf:"bytes,9,opt,name=subdomain,proto3" json:"subdomain,omitempty"`                                                                                // Caption: Subdomain;
	Hostname     string                   `protobuf:"bytes,10,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                                 // Caption: Hostname;
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{16}
}

func (x *Url) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Url) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *Url) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Url) GetCategoryIds() []enums.URL_CATEGORY_IDS {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *Url) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Url) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Url) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Url) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

func (x *Url) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *Url) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime        int64                         `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                                           // Caption: Created Time;
	MimeType           string                        `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                                                     // Caption: MIME type;
	Version            string                        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                                                                                       // Caption: Version;
	AccessedTime       int64                         `protobuf:"varint,4,opt,name=accessed_time,json=accessedTime,proto3" json:"accessed_time,omitempty"`                                                                        // Caption: Accessed Time;
	Attributes         int32                         `protobuf:"varint,5,opt,name=attributes,proto3" json:"attributes,omitempty"`                                                                                                // Caption: Attributes;
	Owner              *User                         `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`                                                                                                           // Caption: Owner;
	Size               int64                         `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                                                                                            // Caption: Size;
	Path               string                        `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`                                                                                                             // Caption: Path;
	Signature          *DigitalSignature             `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`                                                                                                   // Caption: Digital Signature;
	Desc               string                        `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                                            // Caption: Description;
	IsSystem           bool                          `protobuf:"varint,11,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                                                                   // Caption: System;
	Creator            *User                         `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`                                                                                                      // Caption: Creator;
	Product            *Product                      `protobuf:"bytes,13,opt,name=product,proto3" json:"product,omitempty"`                                                                                                      // Caption: Product;
	ParentFolder       string                        `protobuf:"bytes,14,opt,name=parent_folder,json=parentFolder,proto3" json:"parent_folder,omitempty"`                                                                        // Caption: Parent Folder;
	Type               string                        `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`                                                                                                            // Caption: Type;
	CompanyName        string                        `protobuf:"bytes,16,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`                                                                           // Caption: Company Name;
	Name               string                        `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`                                                                                                            // Caption: Name;
	TypeId             enums.FILE_TYPE_ID            `protobuf:"varint,18,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.FILE_TYPE_ID" json:"type_id,omitempty"`                                             // Caption: Type ID;
	SecurityDescriptor string                        `protobuf:"bytes,19,opt,name=security_descriptor,json=securityDescriptor,proto3" json:"security_descriptor,omitempty"`                                                      // Caption: Security Descriptor;
	Hashes             []*Fingerprint                `protobuf:"bytes,20,rep,name=hashes,proto3" json:"hashes,omitempty"`                                                                                                        // Caption: Hashes;
	Uid                string                        `protobuf:"bytes,21,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                              // Caption: Unique ID;
	Modifier           *User                         `protobuf:"bytes,22,opt,name=modifier,proto3" json:"modifier,omitempty"`                                                                                                    // Caption: Modifier;
	Accessor           *User                         `protobuf:"bytes,23,opt,name=accessor,proto3" json:"accessor,omitempty"`                                                                                                    // Caption: Accessor;
	ConfidentialityId  enums.FILE_CONFIDENTIALITY_ID `protobuf:"varint,24,opt,name=confidentiality_id,json=confidentialityId,proto3,enum=ocsf.v1_0_0.objects.enums.FILE_CONFIDENTIALITY_ID" json:"confidentiality_id,omitempty"` // Caption: Confidentiality ID;
	Xattributes        *Object                       `protobuf:"bytes,25,opt,name=xattributes,proto3" json:"xattributes,omitempty"`                                                                                              // Caption: Extended Attributes;
	Confidentiality    string                        `protobuf:"bytes,26,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`                                                                                      // Caption: Confidentiality;
	ModifiedTime       int64                         `protobuf:"varint,27,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                                                       // Caption: Modified Time;
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{17}
}

func (x *File) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *File) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *File) GetAccessedTime() int64 {
	if x != nil {
		return x.AccessedTime
	}
	return 0
}

func (x *File) GetAttributes() int32 {
	if x != nil {
		return x.Attributes
	}
	return 0
}

func (x *File) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetSignature() *DigitalSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *File) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *File) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *File) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *File) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *File) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetTypeId() enums.FILE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.FILE_TYPE_ID(0)
}

func (x *File) GetSecurityDescriptor() string {
	if x != nil {
		return x.SecurityDescriptor
	}
	return ""
}

func (x *File) GetHashes() []*Fingerprint {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *File) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *File) GetModifier() *User {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *File) GetAccessor() *User {
	if x != nil {
		return x.Accessor
	}
	return nil
}

func (x *File) GetConfidentialityId() enums.FILE_CONFIDENTIALITY_ID {
	if x != nil {
		return x.ConfidentialityId
	}
	return enums.FILE_CONFIDENTIALITY_ID(0)
}

func (x *File) GetXattributes() *Object {
	if x != nil {
		return x.Xattributes
	}
	return nil
}

func (x *File) GetConfidentiality() string {
	if x != nil {
		return x.Confidentiality
	}
	return ""
}

func (x *File) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

type ResourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                            // Caption: Type;
	Uid            string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                              // Caption: Unique ID;
	Data           string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                            // Caption: Data;
	Labels         []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`                                        // Caption: Labels;
	Name           string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                            // Caption: Name;
	Region         string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`                                        // Caption: Region; Profile: cloud;
	Version        string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                      // Caption: Version;
	Group          *Group   `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`                                          // Caption: Group;
	Owner          *User    `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`                                          // Caption: Owner;
	CloudPartition string   `protobuf:"bytes,10,opt,name=cloud_partition,json=cloudPartition,proto3" json:"cloud_partition,omitempty"` // Caption: Cloud Partition; Profile: cloud;
	Criticality    string   `protobuf:"bytes,11,opt,name=criticality,proto3" json:"criticality,omitempty"`                             // Caption: Criticality;
}

func (x *ResourceDetails) Reset() {
	*x = ResourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDetails) ProtoMessage() {}

func (x *ResourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDetails.ProtoReflect.Descriptor instead.
func (*ResourceDetails) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceDetails) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ResourceDetails) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ResourceDetails) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ResourceDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResourceDetails) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ResourceDetails) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ResourceDetails) GetCloudPartition() string {
	if x != nil {
		return x.CloudPartition
	}
	return ""
}

func (x *ResourceDetails) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

type Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleFactor         int32 `protobuf:"varint,1,opt,name=scale_factor,json=scaleFactor,proto3" json:"scale_factor,omitempty"`                         // Caption: Scale Factor;
	ColorDepth          int32 `protobuf:"varint,2,opt,name=color_depth,json=colorDepth,proto3" json:"color_depth,omitempty"`                            // Caption: Color Depth;
	PhysicalHeight      int32 `protobuf:"varint,3,opt,name=physical_height,json=physicalHeight,proto3" json:"physical_height,omitempty"`                // Caption: Physical Height;
	PhysicalOrientation int32 `protobuf:"varint,4,opt,name=physical_orientation,json=physicalOrientation,proto3" json:"physical_orientation,omitempty"` // Caption: Physical Orientation;
	PhysicalWidth       int32 `protobuf:"varint,5,opt,name=physical_width,json=physicalWidth,proto3" json:"physical_width,omitempty"`                   // Caption: Physical Width;
}

func (x *Display) Reset() {
	*x = Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Display) ProtoMessage() {}

func (x *Display) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Display.ProtoReflect.Descriptor instead.
func (*Display) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{19}
}

func (x *Display) GetScaleFactor() int32 {
	if x != nil {
		return x.ScaleFactor
	}
	return 0
}

func (x *Display) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *Display) GetPhysicalHeight() int32 {
	if x != nil {
		return x.PhysicalHeight
	}
	return 0
}

func (x *Display) GetPhysicalOrientation() int32 {
	if x != nil {
		return x.PhysicalOrientation
	}
	return 0
}

func (x *Display) GetPhysicalWidth() int32 {
	if x != nil {
		return x.PhysicalWidth
	}
	return 0
}

type WebResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                            // Caption: Type;
	Uid       string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                              // Caption: Unique ID;
	UrlString string   `protobuf:"bytes,3,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"` // Caption: URL String;
	Data      string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                            // Caption: Data;
	Desc      string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`                            // Caption: Description;
	Labels    []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`                        // Caption: Labels;
	Name      string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                            // Caption: Name;
}

func (x *WebResource) Reset() {
	*x = WebResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebResource) ProtoMessage() {}

func (x *WebResource) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebResource.ProtoReflect.Descriptor instead.
func (*WebResource) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{20}
}

func (x *WebResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebResource) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WebResource) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

func (x *WebResource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *WebResource) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WebResource) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WebResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{21}
}

func (x *Extension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Extension) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Extension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                          `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                               // Caption: Unique ID;
	Ip           string                          `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                                                                                 // Caption: IP Address;
	Namespace    string                          `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                   // Caption: Namespace;
	Name         string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                             // Caption: Name;
	Type         string                          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                             // Caption: Type;
	SubnetPrefix int32                           `protobuf:"varint,6,opt,name=subnet_prefix,json=subnetPrefix,proto3" json:"subnet_prefix,omitempty"`                                        // Caption: Subnet Prefix Length;
	TypeId       enums.NETWORK_INTERFACE_TYPE_ID `protobuf:"varint,7,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.NETWORK_INTERFACE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Hostname     string                          `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                     // Caption: Hostname;
	Mac          string                          `protobuf:"bytes,9,opt,name=mac,proto3" json:"mac,omitempty"`                                                                               // Caption: MAC Address;
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkInterface) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkInterface) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkInterface) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkInterface) GetSubnetPrefix() int32 {
	if x != nil {
		return x.SubnetPrefix
	}
	return 0
}

func (x *NetworkInterface) GetTypeId() enums.NETWORK_INTERFACE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.NETWORK_INTERFACE_TYPE_ID(0)
}

func (x *NetworkInterface) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkInterface) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{23}
}

type Technique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`   // Caption: Unique ID;
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
}

func (x *Technique) Reset() {
	*x = Technique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Technique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Technique) ProtoMessage() {}

func (x *Technique) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Technique.ProtoReflect.Descriptor instead.
func (*Technique) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{24}
}

func (x *Technique) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Technique) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegistryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path               string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                                       // Caption: Path;
	SecurityDescriptor string `protobuf:"bytes,2,opt,name=security_descriptor,json=securityDescriptor,proto3" json:"security_descriptor,omitempty"` // Caption: Security Descriptor;
	IsSystem           bool   `protobuf:"varint,3,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                              // Caption: System;
	ModifiedTime       int64  `protobuf:"varint,4,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                  // Caption: Modified Time;
}

func (x *RegistryKey) Reset() {
	*x = RegistryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryKey) ProtoMessage() {}

func (x *RegistryKey) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryKey.ProtoReflect.Descriptor instead.
func (*RegistryKey) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{25}
}

func (x *RegistryKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegistryKey) GetSecurityDescriptor() string {
	if x != nil {
		return x.SecurityDescriptor
	}
	return ""
}

func (x *RegistryKey) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *RegistryKey) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                    // Caption: Response Code;
	Error        string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                                   // Caption: Error Code;
	ErrorMessage string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Caption: Error Message;
	Flags        []string `protobuf:"bytes,4,rep,name=flags,proto3" json:"flags,omitempty"`                                   // Caption: Flags;
	Message      string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                               // Caption: Message;
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{26}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Response) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Compliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirements []string `protobuf:"bytes,1,rep,name=requirements,proto3" json:"requirements,omitempty"`                     // Caption: Requirements;
	Status       string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                 // Caption: Status;
	StatusDetail string   `protobuf:"bytes,3,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"` // Caption: Status Details;
}

func (x *Compliance) Reset() {
	*x = Compliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compliance) ProtoMessage() {}

func (x *Compliance) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compliance.ProtoReflect.Descriptor instead.
func (*Compliance) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{27}
}

func (x *Compliance) GetRequirements() []string {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Compliance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Compliance) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File         *File                     `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`                                                                                     // Caption: File;
	FunctionName string                    `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`                                                 // Caption: Function Name;
	LoadType     string                    `protobuf:"bytes,3,opt,name=load_type,json=loadType,proto3" json:"load_type,omitempty"`                                                             // Caption: Load Type;
	LoadTypeId   enums.MODULE_LOAD_TYPE_ID `protobuf:"varint,4,opt,name=load_type_id,json=loadTypeId,proto3,enum=ocsf.v1_0_0.objects.enums.MODULE_LOAD_TYPE_ID" json:"load_type_id,omitempty"` // Caption: Load Type ID;
	StartAddress string                    `protobuf:"bytes,5,opt,name=start_address,json=startAddress,proto3" json:"start_address,omitempty"`                                                 // Caption: Start Address;
	Type         string                    `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                                                                     // Caption: Type;
	BaseAddress  string                    `protobuf:"bytes,7,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`                                                    // Caption: Base Address;
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{28}
}

func (x *Module) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Module) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Module) GetLoadType() string {
	if x != nil {
		return x.LoadType
	}
	return ""
}

func (x *Module) GetLoadTypeId() enums.MODULE_LOAD_TYPE_ID {
	if x != nil {
		return x.LoadTypeId
	}
	return enums.MODULE_LOAD_TYPE_ID(0)
}

func (x *Module) GetStartAddress() string {
	if x != nil {
		return x.StartAddress
	}
	return ""
}

func (x *Module) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Module) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

type Analytic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                    // Caption: Name;
	RelatedAnalytics []*Analytic            `protobuf:"bytes,2,rep,name=related_analytics,json=relatedAnalytics,proto3" json:"related_analytics,omitempty"`                    // Caption: Related Analytics;
	Type             string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                    // Caption: Type;
	TypeId           enums.ANALYTIC_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.ANALYTIC_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid              string                 `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`                                                                      // Caption: Unique ID;
	Version          string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                                                              // Caption: Version;
	Category         string                 `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`                                                            // Caption: Category;
	Desc             string                 `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`                                                                    // Caption: Description;
}

func (x *Analytic) Reset() {
	*x = Analytic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analytic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analytic) ProtoMessage() {}

func (x *Analytic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analytic.ProtoReflect.Descriptor instead.
func (*Analytic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{29}
}

func (x *Analytic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Analytic) GetRelatedAnalytics() []*Analytic {
	if x != nil {
		return x.RelatedAnalytics
	}
	return nil
}

func (x *Analytic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Analytic) GetTypeId() enums.ANALYTIC_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.ANALYTIC_TYPE_ID(0)
}

func (x *Analytic) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Analytic) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Analytic) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Analytic) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type Tls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                            // Caption: Version;
	KeyLength        int32           `protobuf:"varint,2,opt,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`                      // Caption: Key Length;
	Ja3Hash          *Fingerprint    `protobuf:"bytes,3,opt,name=ja3_hash,json=ja3Hash,proto3" json:"ja3_hash,omitempty"`                             // Caption: JA3 Hash;
	Sans             []*San          `protobuf:"bytes,4,rep,name=sans,proto3" json:"sans,omitempty"`                                                  // Caption: Subject Alternative Names;
	ClientCiphers    []string        `protobuf:"bytes,5,rep,name=client_ciphers,json=clientCiphers,proto3" json:"client_ciphers,omitempty"`           // Caption: Client Cipher Suites;
	Alert            int32           `protobuf:"varint,6,opt,name=alert,proto3" json:"alert,omitempty"`                                               // Caption: Client TLS Alert;
	Sni              string          `protobuf:"bytes,7,opt,name=sni,proto3" json:"sni,omitempty"`                                                    // Caption: Server Name Indication;
	HandshakeDur     int32           `protobuf:"varint,8,opt,name=handshake_dur,json=handshakeDur,proto3" json:"handshake_dur,omitempty"`             // Caption: Handshake Duration;
	Ja3SHash         *Fingerprint    `protobuf:"bytes,9,opt,name=ja3s_hash,json=ja3sHash,proto3" json:"ja3s_hash,omitempty"`                          // Caption: JA3S Hash;
	CertificateChain []string        `protobuf:"bytes,10,rep,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"` // Caption: Certificate Chain;
	Cipher           string          `protobuf:"bytes,11,opt,name=cipher,proto3" json:"cipher,omitempty"`                                             // Caption: Cipher Suite;
	ExtensionList    []*TlsExtension `protobuf:"bytes,12,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty"`          // Caption: Extension List;
	ServerCiphers    []string        `protobuf:"bytes,13,rep,name=server_ciphers,json=serverCiphers,proto3" json:"server_ciphers,omitempty"`          // Caption: Server Cipher Suites;
	Certificate      *Certificate    `protobuf:"bytes,14,opt,name=certificate,proto3" json:"certificate,omitempty"`                                   // Caption: Certificate;
}

func (x *Tls) Reset() {
	*x = Tls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tls) ProtoMessage() {}

func (x *Tls) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tls.ProtoReflect.Descriptor instead.
func (*Tls) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{30}
}

func (x *Tls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Tls) GetKeyLength() int32 {
	if x != nil {
		return x.KeyLength
	}
	return 0
}

func (x *Tls) GetJa3Hash() *Fingerprint {
	if x != nil {
		return x.Ja3Hash
	}
	return nil
}

func (x *Tls) GetSans() []*San {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *Tls) GetClientCiphers() []string {
	if x != nil {
		return x.ClientCiphers
	}
	return nil
}

func (x *Tls) GetAlert() int32 {
	if x != nil {
		return x.Alert
	}
	return 0
}

func (x *Tls) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

func (x *Tls) GetHandshakeDur() int32 {
	if x != nil {
		return x.HandshakeDur
	}
	return 0
}

func (x *Tls) GetJa3SHash() *Fingerprint {
	if x != nil {
		return x.Ja3SHash
	}
	return nil
}

func (x *Tls) GetCertificateChain() []string {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

func (x *Tls) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *Tls) GetExtensionList() []*TlsExtension {
	if x != nil {
		return x.ExtensionList
	}
	return nil
}

func (x *Tls) GetServerCiphers() []string {
	if x != nil {
		return x.ServerCiphers
	}
	return nil
}

func (x *Tls) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type TlsExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId enums.TLS_EXTENSION_TYPE_ID `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.TLS_EXTENSION_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Data   string                      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                                                         // Caption: Data;
	Type   string                      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                         // Caption: Type;
}

func (x *TlsExtension) Reset() {
	*x = TlsExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsExtension) ProtoMessage() {}

func (x *TlsExtension) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsExtension.ProtoReflect.Descriptor instead.
func (*TlsExtension) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{31}
}

func (x *TlsExtension) GetTypeId() enums.TLS_EXTENSION_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.TLS_EXTENSION_TYPE_ID(0)
}

func (x *TlsExtension) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TlsExtension) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                     // Caption: Unique ID;
	Name   string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                   // Caption: Name;
	Type   string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                   // Caption: Type;
	TypeId enums.ACCOUNT_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.ACCOUNT_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{32}
}

func (x *Account) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Account) GetTypeId() enums.ACCOUNT_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.ACCOUNT_TYPE_ID(0)
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision string  `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"` // Caption: Authorization Decision/Outcome;
	Policy   *Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`     // Caption: Policy;
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{33}
}

func (x *Authorization) GetDecision() string {
	if x != nil {
		return x.Decision
	}
	return ""
}

func (x *Authorization) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type NetworkTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes      int64 `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`                             // Caption: Total Bytes;
	BytesIn    int64 `protobuf:"varint,2,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`          // Caption: Bytes In;
	BytesOut   int64 `protobuf:"varint,3,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`       // Caption: Bytes Out;
	Packets    int64 `protobuf:"varint,4,opt,name=packets,proto3" json:"packets,omitempty"`                         // Caption: Total Packets;
	PacketsIn  int64 `protobuf:"varint,5,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`    // Caption: Packets In;
	PacketsOut int64 `protobuf:"varint,6,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"` // Caption: Packets Out;
}

func (x *NetworkTraffic) Reset() {
	*x = NetworkTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTraffic) ProtoMessage() {}

func (x *NetworkTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTraffic.ProtoReflect.Descriptor instead.
func (*NetworkTraffic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{34}
}

func (x *NetworkTraffic) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NetworkTraffic) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *NetworkTraffic) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *NetworkTraffic) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *NetworkTraffic) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *NetworkTraffic) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

type WinResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId  enums.WIN_RESOURCE_TYPE_ID `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.WIN_RESOURCE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Uid     string                     `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                                          // Caption: Unique ID;
	Labels  []string                   `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`                                                                    // Caption: Labels;
	Data    string                     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                                        // Caption: Data;
	Name    string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                                                        // Caption: Name;
	Details string                     `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`                                                                  // Caption: Details;
	SvcName string                     `protobuf:"bytes,7,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                                                   // Caption: Service Name;
	Type    string                     `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                                                        // Caption: Type;
}

func (x *WinResource) Reset() {
	*x = WinResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinResource) ProtoMessage() {}

func (x *WinResource) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinResource.ProtoReflect.Descriptor instead.
func (*WinResource) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{35}
}

func (x *WinResource) GetTypeId() enums.WIN_RESOURCE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.WIN_RESOURCE_TYPE_ID(0)
}

func (x *WinResource) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *WinResource) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WinResource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *WinResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinResource) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *WinResource) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *WinResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{36}
}

func (x *Feature) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Feature) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // Caption: Name;
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`         // Caption: Type;
	Uid      string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`           // Caption: Unique ID;
	Version  string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`   // Caption: Version;
	Category string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"` // Caption: Category;
	Desc     string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`         // Caption: Description;
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{37}
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Rule) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Rule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Rule) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Rule) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type Tactic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
	Uid  string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`   // Caption: Unique ID;
}

func (x *Tactic) Reset() {
	*x = Tactic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tactic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tactic) ProtoMessage() {}

func (x *Tactic) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tactic.ProtoReflect.Descriptor instead.
func (*Tactic) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{38}
}

func (x *Tactic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tactic) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Malware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string                             `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                                                                                                      // Caption: Path;
	Provider          string                             `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                              // Caption: Provider;
	Uid               string                             `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                        // Caption: Unique ID;
	ClassificationIds []enums.MALWARE_CLASSIFICATION_IDS `protobuf:"varint,4,rep,packed,name=classification_ids,json=classificationIds,proto3,enum=ocsf.v1_0_0.objects.enums.MALWARE_CLASSIFICATION_IDS" json:"classification_ids,omitempty"` // Caption: Classification IDs;
	Classifications   []string                           `protobuf:"bytes,5,rep,name=classifications,proto3" json:"classifications,omitempty"`                                                                                                // Caption: Classifications;
	Cves              []*Cve                             `protobuf:"bytes,6,rep,name=cves,proto3" json:"cves,omitempty"`                                                                                                                      // Caption: CVE List;
	Name              string                             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                      // Caption: Name;
}

func (x *Malware) Reset() {
	*x = Malware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Malware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Malware) ProtoMessage() {}

func (x *Malware) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Malware.ProtoReflect.Descriptor instead.
func (*Malware) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{39}
}

func (x *Malware) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Malware) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Malware) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Malware) GetClassificationIds() []enums.MALWARE_CLASSIFICATION_IDS {
	if x != nil {
		return x.ClassificationIds
	}
	return nil
}

func (x *Malware) GetClassifications() []string {
	if x != nil {
		return x.Classifications
	}
	return nil
}

func (x *Malware) GetCves() []*Cve {
	if x != nil {
		return x.Cves
	}
	return nil
}

func (x *Malware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type KernelDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"` // Caption: File;
}

func (x *KernelDriver) Reset() {
	*x = KernelDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelDriver) ProtoMessage() {}

func (x *KernelDriver) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelDriver.ProtoReflect.Descriptor instead.
func (*KernelDriver) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{40}
}

func (x *KernelDriver) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type Os struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpName  string           `protobuf:"bytes,1,opt,name=sp_name,json=spName,proto3" json:"sp_name,omitempty"`                                            // Caption: OS Service Pack;
	TypeId  enums.OS_TYPE_ID `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.OS_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Edition string           `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`                                                        // Caption: OS Edition;
	Lang    string           `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`                                                              // Caption: Language;
	SpVer   int32            `protobuf:"varint,5,opt,name=sp_ver,json=spVer,proto3" json:"sp_ver,omitempty"`                                              // Caption: OS Service Pack Version;
	Type    string           `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                                              // Caption: Type;
	Version string           `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                                        // Caption: Version;
	Build   string           `protobuf:"bytes,8,opt,name=build,proto3" json:"build,omitempty"`                                                            // Caption: OS Build;
	CpuBits int32            `protobuf:"varint,9,opt,name=cpu_bits,json=cpuBits,proto3" json:"cpu_bits,omitempty"`                                        // Caption: CPU Bits;
	Name    string           `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`                                                             // Caption: Name;
	Country string           `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`                                                       // Caption: Country;
}

func (x *Os) Reset() {
	*x = Os{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Os) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Os) ProtoMessage() {}

func (x *Os) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Os.ProtoReflect.Descriptor instead.
func (*Os) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{41}
}

func (x *Os) GetSpName() string {
	if x != nil {
		return x.SpName
	}
	return ""
}

func (x *Os) GetTypeId() enums.OS_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.OS_TYPE_ID(0)
}

func (x *Os) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Os) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Os) GetSpVer() int32 {
	if x != nil {
		return x.SpVer
	}
	return 0
}

func (x *Os) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Os) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Os) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Os) GetCpuBits() int32 {
	if x != nil {
		return x.CpuBits
	}
	return 0
}

func (x *Os) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Os) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type NetworkEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcName         string    `protobuf:"bytes,1,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                         // Caption: Service Name;
	Location        *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`                                      // Caption: Geo Location;
	Mac             string    `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`                                                // Caption: MAC Address;
	InstanceUid     string    `protobuf:"bytes,4,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`             // Caption: Instance ID;
	Name            string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                              // Caption: Name;
	VlanUid         string    `protobuf:"bytes,6,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                         // Caption: VLAN;
	IntermediateIps []string  `protobuf:"bytes,7,rep,name=intermediate_ips,json=intermediateIps,proto3" json:"intermediate_ips,omitempty"` // Caption: Intermediate IP Addresses;
	Uid             string    `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`                                                // Caption: Unique ID;
	Port            int32     `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`                                             // Caption: Port;
	InterfaceUid    string    `protobuf:"bytes,10,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`         // Caption: Network Interface ID;
	Domain          string    `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`                                         // Caption: Domain;
	InterfaceName   string    `protobuf:"bytes,12,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`      // Caption: Network Interface Name;
	VpcUid          string    `protobuf:"bytes,13,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                           // Caption: VPC UID;
	Hostname        string    `protobuf:"bytes,14,opt,name=hostname,proto3" json:"hostname,omitempty"`                                     // Caption: Hostname;
	SubnetUid       string    `protobuf:"bytes,15,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                  // Caption: Subnet UID;
	Ip              string    `protobuf:"bytes,16,opt,name=ip,proto3" json:"ip,omitempty"`                                                 // Caption: IP Address;
}

func (x *NetworkEndpoint) Reset() {
	*x = NetworkEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEndpoint) ProtoMessage() {}

func (x *NetworkEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEndpoint.ProtoReflect.Descriptor instead.
func (*NetworkEndpoint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{42}
}

func (x *NetworkEndpoint) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *NetworkEndpoint) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkEndpoint) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetworkEndpoint) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *NetworkEndpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkEndpoint) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *NetworkEndpoint) GetIntermediateIps() []string {
	if x != nil {
		return x.IntermediateIps
	}
	return nil
}

func (x *NetworkEndpoint) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkEndpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkEndpoint) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *NetworkEndpoint) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NetworkEndpoint) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkEndpoint) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *NetworkEndpoint) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkEndpoint) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *NetworkEndpoint) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image         *Image       `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                                      // Caption: Image;
	Runtime       string       `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`                                  // Caption: Runtime;
	Uid           string       `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                                          // Caption: Unique ID;
	Hash          *Fingerprint `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`                                        // Caption: Hash;
	NetworkDriver string       `protobuf:"bytes,5,opt,name=network_driver,json=networkDriver,proto3" json:"network_driver,omitempty"` // Caption: Network Driver;
	Name          string       `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                        // Caption: Name;
	Orchestrator  string       `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`                        // Caption: Orchestrator;
	PodUuid       string       `protobuf:"bytes,8,opt,name=pod_uuid,json=podUuid,proto3" json:"pod_uuid,omitempty"`                   // Caption: Pod UUID;
	Tag           string       `protobuf:"bytes,9,opt,name=tag,proto3" json:"tag,omitempty"`                                          // Caption: Image Tag;
	Size          int64        `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`                                      // Caption: Size;
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{43}
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Container) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Container) GetHash() *Fingerprint {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Container) GetNetworkDriver() string {
	if x != nil {
		return x.NetworkDriver
	}
	return ""
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetOrchestrator() string {
	if x != nil {
		return x.Orchestrator
	}
	return ""
}

func (x *Container) GetPodUuid() string {
	if x != nil {
		return x.PodUuid
	}
	return ""
}

func (x *Container) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Container) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddr     string             `protobuf:"bytes,1,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`                                      // Caption: Email Address;
	Groups        []*Group           `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`                                                             // Caption: Groups;
	Type          string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                 // Caption: Type;
	Uid           string             `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                                                                   // Caption: Unique ID;
	FullName      string             `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`                                         // Caption: Full Name;
	Org           *Organization      `protobuf:"bytes,6,opt,name=org,proto3" json:"org,omitempty"`                                                                   // Caption: Organization;
	CredentialUid string             `protobuf:"bytes,7,opt,name=credential_uid,json=credentialUid,proto3" json:"credential_uid,omitempty"`                          // Caption: User Credential ID;
	Domain        string             `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`                                                             // Caption: Domain;
	Name          string             `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                                 // Caption: Name;
	TypeId        enums.USER_TYPE_ID `protobuf:"varint,10,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.USER_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	UidAlt        string             `protobuf:"bytes,11,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                                              // Caption: Alternate ID;
	Account       *Account           `protobuf:"bytes,12,opt,name=account,proto3" json:"account,omitempty"`                                                          // Caption: Account;
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{44}
}

func (x *User) GetEmailAddr() string {
	if x != nil {
		return x.EmailAddr
	}
	return ""
}

func (x *User) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *User) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *User) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *User) GetCredentialUid() string {
	if x != nil {
		return x.CredentialUid
	}
	return ""
}

func (x *User) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetTypeId() enums.USER_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.USER_TYPE_ID(0)
}

func (x *User) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

func (x *User) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
	Uid     string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
	Desc    string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`       // Caption: Description;
	Group   *Group `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`     // Caption: Group;
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{45}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Policy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Policy) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Policy) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type Enrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"` // Caption: Provider;
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`         // Caption: Type;
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`       // Caption: Value;
	Data     string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`         // Caption: Data;
	Name     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`         // Caption: Name;
}

func (x *Enrichment) Reset() {
	*x = Enrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment) ProtoMessage() {}

func (x *Enrichment) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment.ProtoReflect.Descriptor instead.
func (*Enrichment) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{46}
}

func (x *Enrichment) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Enrichment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Enrichment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Enrichment) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Enrichment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DnsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode    string                    `protobuf:"bytes,1,opt,name=opcode,proto3" json:"opcode,omitempty"`                                                                         // Caption: DNS Opcode;
	OpcodeId  enums.DNS_QUERY_OPCODE_ID `protobuf:"varint,2,opt,name=opcode_id,json=opcodeId,proto3,enum=ocsf.v1_0_0.objects.enums.DNS_QUERY_OPCODE_ID" json:"opcode_id,omitempty"` // Caption: DNS Opcode ID;
	Class     string                    `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`                                                                           // Caption: Class;
	PacketUid int32                     `protobuf:"varint,4,opt,name=packet_uid,json=packetUid,proto3" json:"packet_uid,omitempty"`                                                 // Caption: Packet UID;
	Type      string                    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                             // Caption: Type;
	Hostname  string                    `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                     // Caption: Hostname;
}

func (x *DnsQuery) Reset() {
	*x = DnsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsQuery) ProtoMessage() {}

func (x *DnsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsQuery.ProtoReflect.Descriptor instead.
func (*DnsQuery) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{47}
}

func (x *DnsQuery) GetOpcode() string {
	if x != nil {
		return x.Opcode
	}
	return ""
}

func (x *DnsQuery) GetOpcodeId() enums.DNS_QUERY_OPCODE_ID {
	if x != nil {
		return x.OpcodeId
	}
	return enums.DNS_QUERY_OPCODE_ID(0)
}

func (x *DnsQuery) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *DnsQuery) GetPacketUid() int32 {
	if x != nil {
		return x.PacketUid
	}
	return 0
}

func (x *DnsQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsQuery) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type Fingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm   string                         `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`                                                                                 // Caption: Algorithm;
	AlgorithmId enums.FINGERPRINT_ALGORITHM_ID `protobuf:"varint,2,opt,name=algorithm_id,json=algorithmId,proto3,enum=ocsf.v1_0_0.objects.enums.FINGERPRINT_ALGORITHM_ID" json:"algorithm_id,omitempty"` // Caption: Algorithm ID;
	Value       string                         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                                                         // Caption: Value;
}

func (x *Fingerprint) Reset() {
	*x = Fingerprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fingerprint) ProtoMessage() {}

func (x *Fingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fingerprint.ProtoReflect.Descriptor instead.
func (*Fingerprint) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{48}
}

func (x *Fingerprint) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Fingerprint) GetAlgorithmId() enums.FINGERPRINT_ALGORITHM_ID {
	if x != nil {
		return x.AlgorithmId
	}
	return enums.FINGERPRINT_ALGORITHM_ID(0)
}

func (x *Fingerprint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlString  string   `protobuf:"bytes,1,opt,name=url_string,json=urlString,proto3" json:"url_string,omitempty"`    // Caption: URL String;
	VendorName string   `protobuf:"bytes,2,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"` // Caption: Vendor Name;
	Version    string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                         // Caption: Version;
	Feature    *Feature `protobuf:"bytes,4,opt,name=feature,proto3" json:"feature,omitempty"`                         // Caption: Feature;
	Lang       string   `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`                               // Caption: Language;
	Name       string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                               // Caption: Name;
	Path       string   `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`                               // Caption: Path;
	Uid        string   `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`                                 // Caption: Unique ID;
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{49}
}

func (x *Product) GetUrlString() string {
	if x != nil {
		return x.UrlString
	}
	return ""
}

func (x *Product) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Product) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *Product) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Product) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type NetworkProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanUid         string    `protobuf:"bytes,1,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                          // Caption: VLAN;
	SvcName         string    `protobuf:"bytes,2,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`                          // Caption: Service Name;
	InterfaceUid    string    `protobuf:"bytes,3,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`           // Caption: Network Interface ID;
	Domain          string    `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`                                           // Caption: Domain;
	SubnetUid       string    `protobuf:"bytes,5,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                    // Caption: Subnet UID;
	InstanceUid     string    `protobuf:"bytes,6,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`              // Caption: Instance ID;
	Name            string    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                               // Caption: Name;
	Port            int32     `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`                                              // Caption: Port;
	Uid             string    `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`                                                 // Caption: Unique ID;
	Mac             string    `protobuf:"bytes,10,opt,name=mac,proto3" json:"mac,omitempty"`                                                // Caption: MAC Address;
	Hostname        string    `protobuf:"bytes,11,opt,name=hostname,proto3" json:"hostname,omitempty"`                                      // Caption: Hostname;
	Location        *Location `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`                                      // Caption: Geo Location;
	IntermediateIps []string  `protobuf:"bytes,13,rep,name=intermediate_ips,json=intermediateIps,proto3" json:"intermediate_ips,omitempty"` // Caption: Intermediate IP Addresses;
	InterfaceName   string    `protobuf:"bytes,14,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`       // Caption: Network Interface Name;
	VpcUid          string    `protobuf:"bytes,15,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                            // Caption: VPC UID;
	Ip              string    `protobuf:"bytes,16,opt,name=ip,proto3" json:"ip,omitempty"`                                                  // Caption: IP Address;
}

func (x *NetworkProxy) Reset() {
	*x = NetworkProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProxy) ProtoMessage() {}

func (x *NetworkProxy) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProxy.ProtoReflect.Descriptor instead.
func (*NetworkProxy) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{50}
}

func (x *NetworkProxy) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *NetworkProxy) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *NetworkProxy) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *NetworkProxy) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NetworkProxy) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *NetworkProxy) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *NetworkProxy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkProxy) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkProxy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkProxy) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *NetworkProxy) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NetworkProxy) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NetworkProxy) GetIntermediateIps() []string {
	if x != nil {
		return x.IntermediateIps
	}
	return nil
}

func (x *NetworkProxy) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkProxy) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *NetworkProxy) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type San struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Caption: Type;
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
}

func (x *San) Reset() {
	*x = San{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *San) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*San) ProtoMessage() {}

func (x *San) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use San.ProtoReflect.Descriptor instead.
func (*San) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{51}
}

func (x *San) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *San) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XForwardedFor []string                       `protobuf:"bytes,1,rep,name=x_forwarded_for,json=xForwardedFor,proto3" json:"x_forwarded_for,omitempty"`                                               // Caption: X-Forwarded-For;
	Args          string                         `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`                                                                                        // Caption: HTTP Arguments;
	HttpHeaders   []*HttpHeader                  `protobuf:"bytes,3,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`                                                       // Caption: HTTP Headers;
	HttpMethod    enums.HTTP_REQUEST_HTTP_METHOD `protobuf:"varint,4,opt,name=http_method,json=httpMethod,proto3,enum=ocsf.v1_0_0.objects.enums.HTTP_REQUEST_HTTP_METHOD" json:"http_method,omitempty"` // Caption: HTTP Method;
	Referrer      string                         `protobuf:"bytes,5,opt,name=referrer,proto3" json:"referrer,omitempty"`                                                                                // Caption: HTTP Referrer;
	Url           *Url                           `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`                                                                                          // Caption: URL;
	Version       string                         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                                                                  // Caption: Version;
	Uid           string                         `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                          // Caption: Unique ID;
	UserAgent     string                         `protobuf:"bytes,9,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`                                                             // Caption: HTTP User-Agent;
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{52}
}

func (x *HttpRequest) GetXForwardedFor() []string {
	if x != nil {
		return x.XForwardedFor
	}
	return nil
}

func (x *HttpRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *HttpRequest) GetHttpHeaders() []*HttpHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *HttpRequest) GetHttpMethod() enums.HTTP_REQUEST_HTTP_METHOD {
	if x != nil {
		return x.HttpMethod
	}
	return enums.HTTP_REQUEST_HTTP_METHOD(0)
}

func (x *HttpRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *HttpRequest) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *HttpRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HttpRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *HttpRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Caption: Name;
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Caption: Value;
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{53}
}

func (x *HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid            int32                      `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`                                                                                        // Caption: Process ID;
	Uid            string                     `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                         // Caption: Unique ID;
	File           *File                      `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`                                                                                       // Caption: File;
	CreatedTime    int64                      `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                     // Caption: Created Time;
	IntegrityId    enums.PROCESS_INTEGRITY_ID `protobuf:"varint,5,opt,name=integrity_id,json=integrityId,proto3,enum=ocsf.v1_0_0.objects.enums.PROCESS_INTEGRITY_ID" json:"integrity_id,omitempty"` // Caption: Integrity Level;
	Auid           int32                      `protobuf:"varint,6,opt,name=auid,proto3" json:"auid,omitempty"`                                                                                      // Caption: Audit User ID; Profile: linux/linux_users;
	Lineage        []string                   `protobuf:"bytes,7,rep,name=lineage,proto3" json:"lineage,omitempty"`                                                                                 // Caption: Lineage;
	Integrity      string                     `protobuf:"bytes,8,opt,name=integrity,proto3" json:"integrity,omitempty"`                                                                             // Caption: Integrity;
	Euid           int32                      `protobuf:"varint,9,opt,name=euid,proto3" json:"euid,omitempty"`                                                                                      // Caption: Effective User ID; Profile: linux/linux_users;
	Group          *Group                     `protobuf:"bytes,10,opt,name=group,proto3" json:"group,omitempty"`                                                                                    // Profile: linux/linux_users; Caption: Group;
	Name           string                     `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`                                                                                      // Caption: Name;
	Egid           int32                      `protobuf:"varint,12,opt,name=egid,proto3" json:"egid,omitempty"`                                                                                     // Caption: Effective Group ID; Profile: linux/linux_users;
	Xattributes    *Object                    `protobuf:"bytes,13,opt,name=xattributes,proto3" json:"xattributes,omitempty"`                                                                        // Caption: Extended Attributes;
	NamespacePid   int32                      `protobuf:"varint,14,opt,name=namespace_pid,json=namespacePid,proto3" json:"namespace_pid,omitempty"`                                                 // Caption: Namespace PID; Profile: container;
	LoadedModules  []string                   `protobuf:"bytes,15,rep,name=loaded_modules,json=loadedModules,proto3" json:"loaded_modules,omitempty"`                                               // Caption: Loaded Modules;
	Container      *Container                 `protobuf:"bytes,16,opt,name=container,proto3" json:"container,omitempty"`                                                                            // Caption: Container; Profile: container;
	Session        *Session                   `protobuf:"bytes,17,opt,name=session,proto3" json:"session,omitempty"`                                                                                // Caption: Session;
	Sandbox        string                     `protobuf:"bytes,18,opt,name=sandbox,proto3" json:"sandbox,omitempty"`                                                                                // Caption: Sandbox;
	TerminatedTime int64                      `protobuf:"varint,19,opt,name=terminated_time,json=terminatedTime,proto3" json:"terminated_time,omitempty"`                                           // Caption: Terminated Time;
	Tid            int32                      `protobuf:"varint,20,opt,name=tid,proto3" json:"tid,omitempty"`                                                                                       // Caption: Thread ID;
	CmdLine        string                     `protobuf:"bytes,21,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`                                                                 // Caption: Command Line;
	ParentProcess  *Process                   `protobuf:"bytes,22,opt,name=parent_process,json=parentProcess,proto3" json:"parent_process,omitempty"`                                               // Caption: Parent Process;
	User           *User                      `protobuf:"bytes,23,opt,name=user,proto3" json:"user,omitempty"`                                                                                      // Caption: User;
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{54}
}

func (x *Process) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Process) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Process) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Process) GetIntegrityId() enums.PROCESS_INTEGRITY_ID {
	if x != nil {
		return x.IntegrityId
	}
	return enums.PROCESS_INTEGRITY_ID(0)
}

func (x *Process) GetAuid() int32 {
	if x != nil {
		return x.Auid
	}
	return 0
}

func (x *Process) GetLineage() []string {
	if x != nil {
		return x.Lineage
	}
	return nil
}

func (x *Process) GetIntegrity() string {
	if x != nil {
		return x.Integrity
	}
	return ""
}

func (x *Process) GetEuid() int32 {
	if x != nil {
		return x.Euid
	}
	return 0
}

func (x *Process) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetEgid() int32 {
	if x != nil {
		return x.Egid
	}
	return 0
}

func (x *Process) GetXattributes() *Object {
	if x != nil {
		return x.Xattributes
	}
	return nil
}

func (x *Process) GetNamespacePid() int32 {
	if x != nil {
		return x.NamespacePid
	}
	return 0
}

func (x *Process) GetLoadedModules() []string {
	if x != nil {
		return x.LoadedModules
	}
	return nil
}

func (x *Process) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Process) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Process) GetSandbox() string {
	if x != nil {
		return x.Sandbox
	}
	return ""
}

func (x *Process) GetTerminatedTime() int64 {
	if x != nil {
		return x.TerminatedTime
	}
	return 0
}

func (x *Process) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Process) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *Process) GetParentProcess() *Process {
	if x != nil {
		return x.ParentProcess
	}
	return nil
}

func (x *Process) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type Cvss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics      []*Metric        `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`                                        // Caption: Metrics;
	OverallScore float32          `protobuf:"fixed32,2,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`        // Caption: Overall Score;
	Severity     string           `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`                                      // Caption: Severity;
	VectorString string           `protobuf:"bytes,4,opt,name=vector_string,json=vectorString,proto3" json:"vector_string,omitempty"`          // Caption: Vector String;
	Version      string           `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`                                        // Caption: Version;
	BaseScore    float32          `protobuf:"fixed32,6,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`                 // Caption: Base Score;
	Depth        enums.CVSS_DEPTH `protobuf:"varint,7,opt,name=depth,proto3,enum=ocsf.v1_0_0.objects.enums.CVSS_DEPTH" json:"depth,omitempty"` // Caption: CVSS Depth;
}

func (x *Cvss) Reset() {
	*x = Cvss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cvss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cvss) ProtoMessage() {}

func (x *Cvss) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cvss.ProtoReflect.Descriptor instead.
func (*Cvss) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{55}
}

func (x *Cvss) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Cvss) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *Cvss) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Cvss) GetVectorString() string {
	if x != nil {
		return x.VectorString
	}
	return ""
}

func (x *Cvss) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cvss) GetBaseScore() float32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Cvss) GetDepth() enums.CVSS_DEPTH {
	if x != nil {
		return x.Depth
	}
	return enums.CVSS_DEPTH(0)
}

type DnsAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagIds   []enums.DNS_ANSWER_FLAG_IDS `protobuf:"varint,1,rep,packed,name=flag_ids,json=flagIds,proto3,enum=ocsf.v1_0_0.objects.enums.DNS_ANSWER_FLAG_IDS" json:"flag_ids,omitempty"` // Caption: Communication Flag IDs;
	Flags     []string                    `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`                                                                               // Caption: Flags;
	Rdata     string                      `protobuf:"bytes,3,opt,name=rdata,proto3" json:"rdata,omitempty"`                                                                               // Caption: DNS RData;
	Ttl       int32                       `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                                                  // Caption: TTL;
	Type      string                      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                                 // Caption: Type;
	PacketUid int32                       `protobuf:"varint,6,opt,name=packet_uid,json=packetUid,proto3" json:"packet_uid,omitempty"`                                                     // Caption: Packet UID;
	Class     string                      `protobuf:"bytes,7,opt,name=class,proto3" json:"class,omitempty"`                                                                               // Caption: Class;
}

func (x *DnsAnswer) Reset() {
	*x = DnsAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAnswer) ProtoMessage() {}

func (x *DnsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAnswer.ProtoReflect.Descriptor instead.
func (*DnsAnswer) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{56}
}

func (x *DnsAnswer) GetFlagIds() []enums.DNS_ANSWER_FLAG_IDS {
	if x != nil {
		return x.FlagIds
	}
	return nil
}

func (x *DnsAnswer) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DnsAnswer) GetRdata() string {
	if x != nil {
		return x.Rdata
	}
	return ""
}

func (x *DnsAnswer) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DnsAnswer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsAnswer) GetPacketUid() int32 {
	if x != nil {
		return x.PacketUid
	}
	return 0
}

func (x *DnsAnswer) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               string                     `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                            // Caption: Unique ID;
	Image             *Image                     `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                                                                                        // Caption: Image;
	Desc              string                     `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                          // Caption: Description;
	HwInfo            *DeviceHwInfo              `protobuf:"bytes,4,opt,name=hw_info,json=hwInfo,proto3" json:"hw_info,omitempty"`                                                                        // Caption: Hardware Info;
	Type              string                     `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                                          // Caption: Type;
	Groups            []*Group                   `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`                                                                                      // Caption: Groups;
	TypeId            enums.DEVICE_TYPE_ID       `protobuf:"varint,7,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.DEVICE_TYPE_ID" json:"type_id,omitempty"`                         // Caption: Type ID;
	CreatedTime       int64                      `protobuf:"varint,8,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                        // Caption: Created Time;
	Ip                string                     `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`                                                                                              // Caption: IP Address;
	RiskLevelId       enums.DEVICE_RISK_LEVEL_ID `protobuf:"varint,10,opt,name=risk_level_id,json=riskLevelId,proto3,enum=ocsf.v1_0_0.objects.enums.DEVICE_RISK_LEVEL_ID" json:"risk_level_id,omitempty"` // Caption: Risk Level ID;
	AutoscaleUid      string                     `protobuf:"bytes,11,opt,name=autoscale_uid,json=autoscaleUid,proto3" json:"autoscale_uid,omitempty"`                                                     // Caption: Autoscale UID;
	Location          *Location                  `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`                                                                                 // Caption: Geo Location;
	Imei              string                     `protobuf:"bytes,13,opt,name=imei,proto3" json:"imei,omitempty"`                                                                                         // Caption: IMEI;
	NetworkInterfaces []*NetworkInterface        `protobuf:"bytes,14,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`                                      // Caption: Network Interfaces;
	SubnetUid         string                     `protobuf:"bytes,15,opt,name=subnet_uid,json=subnetUid,proto3" json:"subnet_uid,omitempty"`                                                              // Caption: Subnet UID;
	UidAlt            string                     `protobuf:"bytes,16,opt,name=uid_alt,json=uidAlt,proto3" json:"uid_alt,omitempty"`                                                                       // Caption: Alternate ID;
	IsTrusted         bool                       `protobuf:"varint,17,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted,omitempty"`                                                             // Caption: Trusted Device;
	Domain            string                     `protobuf:"bytes,18,opt,name=domain,proto3" json:"domain,omitempty"`                                                                                     // Caption: Domain;
	FirstSeenTime     int64                      `protobuf:"varint,19,opt,name=first_seen_time,json=firstSeenTime,proto3" json:"first_seen_time,omitempty"`                                               // Caption: First Seen;
	IsPersonal        bool                       `protobuf:"varint,20,opt,name=is_personal,json=isPersonal,proto3" json:"is_personal,omitempty"`                                                          // Caption: Personal Device;
	Mac               string                     `protobuf:"bytes,21,opt,name=mac,proto3" json:"mac,omitempty"`                                                                                           // Caption: MAC Address;
	VlanUid           string                     `protobuf:"bytes,22,opt,name=vlan_uid,json=vlanUid,proto3" json:"vlan_uid,omitempty"`                                                                    // Caption: VLAN;
	VpcUid            string                     `protobuf:"bytes,23,opt,name=vpc_uid,json=vpcUid,proto3" json:"vpc_uid,omitempty"`                                                                       // Caption: VPC UID;
	IsManaged         bool                       `protobuf:"varint,24,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`                                                             // Caption: Managed Device;
	Hostname          string                     `protobuf:"bytes,25,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                                 // Caption: Hostname;
	InterfaceName     string                     `protobuf:"bytes,26,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`                                                  // Caption: Network Interface Name;
	Os                *Os                        `protobuf:"bytes,27,opt,name=os,proto3" json:"os,omitempty"`                                                                                             // Caption: OS;
	Hypervisor        string                     `protobuf:"bytes,28,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`                                                                             // Caption: Hypervisor;
	RiskScore         int32                      `protobuf:"varint,29,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`                                                             // Caption: Risk Score;
	ModifiedTime      int64                      `protobuf:"varint,30,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                                    // Caption: Modified Time;
	IsCompliant       bool                       `protobuf:"varint,31,opt,name=is_compliant,json=isCompliant,proto3" json:"is_compliant,omitempty"`                                                       // Caption: Compliant Device;
	InterfaceUid      string                     `protobuf:"bytes,32,opt,name=interface_uid,json=interfaceUid,proto3" json:"interface_uid,omitempty"`                                                     // Caption: Network Interface ID;
	Org               *Organization              `protobuf:"bytes,33,opt,name=org,proto3" json:"org,omitempty"`                                                                                           // Caption: Organization;
	InstanceUid       string                     `protobuf:"bytes,34,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`                                                        // Caption: Instance ID;
	Name              string                     `protobuf:"bytes,35,opt,name=name,proto3" json:"name,omitempty"`                                                                                         // Caption: Name;
	RiskLevel         string                     `protobuf:"bytes,36,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`                                                              // Caption: Risk Level;
	Region            string                     `protobuf:"bytes,37,opt,name=region,proto3" json:"region,omitempty"`                                                                                     // Caption: Region;
	LastSeenTime      int64                      `protobuf:"varint,38,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`                                                  // Caption: Last Seen;
	Subnet            string                     `protobuf:"bytes,39,opt,name=subnet,proto3" json:"subnet,omitempty"`                                                                                     // Caption: Subnet;
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{57}
}

func (x *Device) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Device) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Device) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Device) GetHwInfo() *DeviceHwInfo {
	if x != nil {
		return x.HwInfo
	}
	return nil
}

func (x *Device) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Device) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Device) GetTypeId() enums.DEVICE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.DEVICE_TYPE_ID(0)
}

func (x *Device) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Device) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Device) GetRiskLevelId() enums.DEVICE_RISK_LEVEL_ID {
	if x != nil {
		return x.RiskLevelId
	}
	return enums.DEVICE_RISK_LEVEL_ID(0)
}

func (x *Device) GetAutoscaleUid() string {
	if x != nil {
		return x.AutoscaleUid
	}
	return ""
}

func (x *Device) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *Device) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *Device) GetSubnetUid() string {
	if x != nil {
		return x.SubnetUid
	}
	return ""
}

func (x *Device) GetUidAlt() string {
	if x != nil {
		return x.UidAlt
	}
	return ""
}

func (x *Device) GetIsTrusted() bool {
	if x != nil {
		return x.IsTrusted
	}
	return false
}

func (x *Device) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Device) GetFirstSeenTime() int64 {
	if x != nil {
		return x.FirstSeenTime
	}
	return 0
}

func (x *Device) GetIsPersonal() bool {
	if x != nil {
		return x.IsPersonal
	}
	return false
}

func (x *Device) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Device) GetVlanUid() string {
	if x != nil {
		return x.VlanUid
	}
	return ""
}

func (x *Device) GetVpcUid() string {
	if x != nil {
		return x.VpcUid
	}
	return ""
}

func (x *Device) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Device) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Device) GetOs() *Os {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *Device) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *Device) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *Device) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

func (x *Device) GetIsCompliant() bool {
	if x != nil {
		return x.IsCompliant
	}
	return false
}

func (x *Device) GetInterfaceUid() string {
	if x != nil {
		return x.InterfaceUid
	}
	return ""
}

func (x *Device) GetOrg() *Organization {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *Device) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *Device) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Device) GetLastSeenTime() int64 {
	if x != nil {
		return x.LastSeenTime
	}
	return 0
}

func (x *Device) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

type CisBenchmarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule        *Rule        `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`               // Caption: Rule;
	Desc        string       `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`               // Caption: Description;
	Name        string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`               // Caption: Name;
	Remediation *Remediation `protobuf:"bytes,4,opt,name=remediation,proto3" json:"remediation,omitempty"` // Caption: Remediation;
}

func (x *CisBenchmarkResult) Reset() {
	*x = CisBenchmarkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CisBenchmarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CisBenchmarkResult) ProtoMessage() {}

func (x *CisBenchmarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CisBenchmarkResult.ProtoReflect.Descriptor instead.
func (*CisBenchmarkResult) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{58}
}

func (x *CisBenchmarkResult) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *CisBenchmarkResult) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CisBenchmarkResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CisBenchmarkResult) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

type RelatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductUid string `protobuf:"bytes,1,opt,name=product_uid,json=productUid,proto3" json:"product_uid,omitempty"` // Caption: Product Identifier;
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                               // Caption: Type;
	TypeUid    int32  `protobuf:"varint,3,opt,name=type_uid,json=typeUid,proto3" json:"type_uid,omitempty"`         // Caption: Type ID;
	Uid        string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                                 // Caption: Unique ID;
}

func (x *RelatedEvent) Reset() {
	*x = RelatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedEvent) ProtoMessage() {}

func (x *RelatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedEvent.ProtoReflect.Descriptor instead.
func (*RelatedEvent) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{59}
}

func (x *RelatedEvent) GetProductUid() string {
	if x != nil {
		return x.ProductUid
	}
	return ""
}

func (x *RelatedEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelatedEvent) GetTypeUid() int32 {
	if x != nil {
		return x.TypeUid
	}
	return 0
}

func (x *RelatedEvent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length      int32  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`                             // Caption: Response Length;
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                            // Caption: Message;
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                              // Caption: Status;
	Code        int32  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`                                 // Caption: Response Code;
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // Caption: HTTP Content Type;
	Latency     int32  `protobuf:"varint,6,opt,name=latency,proto3" json:"latency,omitempty"`                           // Caption: Latency;
}

func (x *HttpResponse) Reset() {
	*x = HttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponse) ProtoMessage() {}

func (x *HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{60}
}

func (x *HttpResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HttpResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HttpResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HttpResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HttpResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HttpResponse) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

type Reputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     string                    `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`                                                                        // Caption: Reputation Score;
	ScoreId   enums.REPUTATION_SCORE_ID `protobuf:"varint,2,opt,name=score_id,json=scoreId,proto3,enum=ocsf.v1_0_0.objects.enums.REPUTATION_SCORE_ID" json:"score_id,omitempty"` // Caption: Reputation Score ID;
	BaseScore float32                   `protobuf:"fixed32,3,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`                                             // Caption: Base Score;
	Provider  string                    `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`                                                                  // Caption: Provider;
}

func (x *Reputation) Reset() {
	*x = Reputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reputation) ProtoMessage() {}

func (x *Reputation) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reputation.ProtoReflect.Descriptor instead.
func (*Reputation) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{61}
}

func (x *Reputation) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Reputation) GetScoreId() enums.REPUTATION_SCORE_ID {
	if x != nil {
		return x.ScoreId
	}
	return enums.REPUTATION_SCORE_ID(0)
}

func (x *Reputation) GetBaseScore() float32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Reputation) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type Idp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Caption: Name;
	Uid  string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`   // Caption: Unique ID;
}

func (x *Idp) Reset() {
	*x = Idp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Idp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Idp) ProtoMessage() {}

func (x *Idp) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Idp.ProtoReflect.Descriptor instead.
func (*Idp) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{62}
}

func (x *Idp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Idp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type RegistryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                          // Caption: Name;
	Path         string                       `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                                          // Caption: Path;
	Type         string                       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                          // Caption: Type;
	TypeId       enums.REGISTRY_VALUE_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.REGISTRY_VALUE_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	Data         string                       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                                                          // Caption: Data;
	IsDefault    bool                         `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                                              // Caption: Default Value;
	IsSystem     bool                         `protobuf:"varint,7,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                                 // Caption: System;
	ModifiedTime int64                        `protobuf:"varint,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`                                     // Caption: Modified Time;
}

func (x *RegistryValue) Reset() {
	*x = RegistryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryValue) ProtoMessage() {}

func (x *RegistryValue) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryValue.ProtoReflect.Descriptor instead.
func (*RegistryValue) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{63}
}

func (x *RegistryValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegistryValue) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RegistryValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegistryValue) GetTypeId() enums.REGISTRY_VALUE_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.REGISTRY_VALUE_TYPE_ID(0)
}

func (x *RegistryValue) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RegistryValue) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *RegistryValue) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *RegistryValue) GetModifiedTime() int64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

type Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc       string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`                               // Caption: Description;
	KbArticles []string `protobuf:"bytes,2,rep,name=kb_articles,json=kbArticles,proto3" json:"kb_articles,omitempty"` // Caption: Knowledgebase Articles;
}

func (x *Remediation) Reset() {
	*x = Remediation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remediation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remediation) ProtoMessage() {}

func (x *Remediation) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remediation.ProtoReflect.Descriptor instead.
func (*Remediation) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{64}
}

func (x *Remediation) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Remediation) GetKbArticles() []string {
	if x != nil {
		return x.KbArticles
	}
	return nil
}

type Vulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName             string     `protobuf:"bytes,1,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                     // Caption: Vendor Name;
	FixAvailable           bool       `protobuf:"varint,2,opt,name=fix_available,json=fixAvailable,proto3" json:"fix_available,omitempty"`                              // Caption: Fix Availability;
	Packages               []*Package `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`                                                           // Caption: Software Packages;
	Desc                   string     `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`                                                                   // Caption: Description;
	KbArticles             []string   `protobuf:"bytes,5,rep,name=kb_articles,json=kbArticles,proto3" json:"kb_articles,omitempty"`                                     // Caption: Knowledgebase Articles;
	References             []string   `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`                                                       // Caption: References;
	Cve                    *Cve       `protobuf:"bytes,7,opt,name=cve,proto3" json:"cve,omitempty"`                                                                     // Caption: CVE;
	RelatedVulnerabilities []string   `protobuf:"bytes,8,rep,name=related_vulnerabilities,json=relatedVulnerabilities,proto3" json:"related_vulnerabilities,omitempty"` // Caption: Related Vulnerabilities;
	Severity               string     `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`                                                           // Caption: Severity;
	Title                  string     `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`                                                                // Caption: Title;
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{65}
}

func (x *Vulnerability) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Vulnerability) GetFixAvailable() bool {
	if x != nil {
		return x.FixAvailable
	}
	return false
}

func (x *Vulnerability) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *Vulnerability) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Vulnerability) GetKbArticles() []string {
	if x != nil {
		return x.KbArticles
	}
	return nil
}

func (x *Vulnerability) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Vulnerability) GetCve() *Cve {
	if x != nil {
		return x.Cve
	}
	return nil
}

func (x *Vulnerability) GetRelatedVulnerabilities() []string {
	if x != nil {
		return x.RelatedVulnerabilities
	}
	return nil
}

func (x *Vulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Vulnerability) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"` // Caption: Flags;
	Uid   string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`     // Caption: Unique ID;
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{66}
}

func (x *Request) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Request) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyTo        string   `protobuf:"bytes,1,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`                        // Caption: Reply To;
	SmtpFrom       string   `protobuf:"bytes,2,opt,name=smtp_from,json=smtpFrom,proto3" json:"smtp_from,omitempty"`                     // Caption: SMTP From;
	Subject        string   `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                                       // Caption: Subject Details;
	MessageUid     string   `protobuf:"bytes,4,opt,name=message_uid,json=messageUid,proto3" json:"message_uid,omitempty"`               // Caption: Message UID;
	XOriginatingIp []string `protobuf:"bytes,5,rep,name=x_originating_ip,json=xOriginatingIp,proto3" json:"x_originating_ip,omitempty"` // Caption: X-Originating-IP;
	SmtpTo         []string `protobuf:"bytes,6,rep,name=smtp_to,json=smtpTo,proto3" json:"smtp_to,omitempty"`                           // Caption: SMTP To;
	Size           int64    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                            // Caption: Size;
	To             []string `protobuf:"bytes,8,rep,name=to,proto3" json:"to,omitempty"`                                                 // Caption: To;
	From           string   `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`                                             // Caption: From;
	RawHeader      string   `protobuf:"bytes,10,opt,name=raw_header,json=rawHeader,proto3" json:"raw_header,omitempty"`                 // Caption: Raw Header;
	Uid            string   `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`                                              // Caption: Unique ID;
	DeliveredTo    string   `protobuf:"bytes,12,opt,name=delivered_to,json=deliveredTo,proto3" json:"delivered_to,omitempty"`           // Caption: Delivered To;
	Cc             []string `protobuf:"bytes,13,rep,name=cc,proto3" json:"cc,omitempty"`                                                // Caption: Cc;
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{67}
}

func (x *Email) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *Email) GetSmtpFrom() string {
	if x != nil {
		return x.SmtpFrom
	}
	return ""
}

func (x *Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Email) GetMessageUid() string {
	if x != nil {
		return x.MessageUid
	}
	return ""
}

func (x *Email) GetXOriginatingIp() []string {
	if x != nil {
		return x.XOriginatingIp
	}
	return nil
}

func (x *Email) GetSmtpTo() []string {
	if x != nil {
		return x.SmtpTo
	}
	return nil
}

func (x *Email) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Email) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Email) GetRawHeader() string {
	if x != nil {
		return x.RawHeader
	}
	return ""
}

func (x *Email) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Email) GetDeliveredTo() string {
	if x != nil {
		return x.DeliveredTo
	}
	return ""
}

func (x *Email) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region       string    `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`                                    // Caption: Region;
	Coordinates  []float32 `protobuf:"fixed32,2,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`                 // Caption: Coordinates;
	Desc         string    `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                        // Caption: Description;
	Isp          string    `protobuf:"bytes,4,opt,name=isp,proto3" json:"isp,omitempty"`                                          // Caption: ISP;
	City         string    `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`                                        // Caption: City;
	Continent    string    `protobuf:"bytes,6,opt,name=continent,proto3" json:"continent,omitempty"`                              // Caption: Continent;
	Country      string    `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`                                  // Caption: Country;
	IsOnPremises bool      `protobuf:"varint,8,opt,name=is_on_premises,json=isOnPremises,proto3" json:"is_on_premises,omitempty"` // Caption: On Premises;
	PostalCode   string    `protobuf:"bytes,9,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`          // Caption: Postal Code;
	Provider     string    `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`                               // Caption: Provider;
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{68}
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetCoordinates() []float32 {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Location) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Location) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Location) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetIsOnPremises() bool {
	if x != nil {
		return x.IsOnPremises
	}
	return false
}

func (x *Location) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Location) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type KillChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase   string                    `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`                                                                        // Caption: Kill Chain Phase;
	PhaseId enums.KILL_CHAIN_PHASE_ID `protobuf:"varint,2,opt,name=phase_id,json=phaseId,proto3,enum=ocsf.v1_0_0.objects.enums.KILL_CHAIN_PHASE_ID" json:"phase_id,omitempty"` // Caption: Kill Chain Phase ID;
}

func (x *KillChain) Reset() {
	*x = KillChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillChain) ProtoMessage() {}

func (x *KillChain) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillChain.ProtoReflect.Descriptor instead.
func (*KillChain) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{69}
}

func (x *KillChain) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *KillChain) GetPhaseId() enums.KILL_CHAIN_PHASE_ID {
	if x != nil {
		return x.PhaseId
	}
	return enums.KILL_CHAIN_PHASE_ID(0)
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime    int64          `protobuf:"varint,1,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`          // Caption: Created Time;
	ExpirationTime int64          `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"` // Caption: Expiration Time;
	Fingerprints   []*Fingerprint `protobuf:"bytes,3,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`                            // Caption: Fingerprints;
	Issuer         string         `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`                                        // Caption: Issuer Details;
	SerialNumber   string         `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`        // Caption: Serial Number;
	Subject        string         `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`                                      // Caption: Subject Details;
	Version        string         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                      // Caption: Version;
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{70}
}

func (x *Certificate) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Certificate) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *Certificate) GetFingerprints() []*Fingerprint {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Certificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Certificate) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License      string `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`           // Caption: Software License;
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                 // Caption: Name;
	Release      string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`           // Caption: Software Release Details;
	Version      string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`           // Caption: Version;
	Architecture string `protobuf:"bytes,5,opt,name=architecture,proto3" json:"architecture,omitempty"` // Caption: Architecture;
	Epoch        int32  `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`              // Caption: Epoch;
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{71}
}

func (x *Package) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Package) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type ManagedEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`       // Caption: Type;
	Uid     string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`         // Caption: Unique ID;
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // Caption: Version;
	Data    string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`       // Caption: Data;
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`       // Caption: Name;
}

func (x *ManagedEntity) Reset() {
	*x = ManagedEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedEntity) ProtoMessage() {}

func (x *ManagedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedEntity.ProtoReflect.Descriptor instead.
func (*ManagedEntity) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{72}
}

func (x *ManagedEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ManagedEntity) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ManagedEntity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ManagedEntity) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ManagedEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string               `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                                                  // Caption: Path;
	SystemCall string               `protobuf:"bytes,2,opt,name=system_call,json=systemCall,proto3" json:"system_call,omitempty"`                                    // Caption: System Call;
	Type       string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                  // Caption: Type;
	TypeId     enums.KERNEL_TYPE_ID `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3,enum=ocsf.v1_0_0.objects.enums.KERNEL_TYPE_ID" json:"type_id,omitempty"` // Caption: Type ID;
	IsSystem   bool                 `protobuf:"varint,5,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                         // Caption: System;
	Name       string               `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Caption: Name;
}

func (x *Kernel) Reset() {
	*x = Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel) ProtoMessage() {}

func (x *Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel.ProtoReflect.Descriptor instead.
func (*Kernel) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{73}
}

func (x *Kernel) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Kernel) GetSystemCall() string {
	if x != nil {
		return x.SystemCall
	}
	return ""
}

func (x *Kernel) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Kernel) GetTypeId() enums.KERNEL_TYPE_ID {
	if x != nil {
		return x.TypeId
	}
	return enums.KERNEL_TYPE_ID(0)
}

func (x *Kernel) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Kernel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *User            `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                            // Caption: User;
	Authorizations []*Authorization `protobuf:"bytes,2,rep,name=authorizations,proto3" json:"authorizations,omitempty"`        // Caption: Authorization Information;
	Idp            *Idp             `protobuf:"bytes,3,opt,name=idp,proto3" json:"idp,omitempty"`                              // Caption: Identity Provider;
	InvokedBy      string           `protobuf:"bytes,4,opt,name=invoked_by,json=invokedBy,proto3" json:"invoked_by,omitempty"` // Caption: Invoked by;
	Process        *Process         `protobuf:"bytes,5,opt,name=process,proto3" json:"process,omitempty"`                      // Caption: Process;
	Session        *Session         `protobuf:"bytes,6,opt,name=session,proto3" json:"session,omitempty"`                      // Caption: Session;
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{74}
}

func (x *Actor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Actor) GetAuthorizations() []*Authorization {
	if x != nil {
		return x.Authorizations
	}
	return nil
}

func (x *Actor) GetIdp() *Idp {
	if x != nil {
		return x.Idp
	}
	return nil
}

func (x *Actor) GetInvokedBy() string {
	if x != nil {
		return x.InvokedBy
	}
	return ""
}

func (x *Actor) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Actor) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type DigitalSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm    string                               `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`                                                                                       // Caption: Algorithm;
	AlgorithmId  enums.DIGITAL_SIGNATURE_ALGORITHM_ID `protobuf:"varint,2,opt,name=algorithm_id,json=algorithmId,proto3,enum=ocsf.v1_0_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID" json:"algorithm_id,omitempty"` // Caption: Algorithm ID;
	Certificate  *Certificate                         `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`                                                                                   // Caption: Certificate;
	CreatedTime  int64                                `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                                                               // Caption: Created Time;
	DeveloperUid string                               `protobuf:"bytes,5,opt,name=developer_uid,json=developerUid,proto3" json:"developer_uid,omitempty"`                                                             // Caption: Developer UID;
	Digest       *Fingerprint                         `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`                                                                                             // Caption: Message Digest;
}

func (x *DigitalSignature) Reset() {
	*x = DigitalSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalSignature) ProtoMessage() {}

func (x *DigitalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalSignature.ProtoReflect.Descriptor instead.
func (*DigitalSignature) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{75}
}

func (x *DigitalSignature) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DigitalSignature) GetAlgorithmId() enums.DIGITAL_SIGNATURE_ALGORITHM_ID {
	if x != nil {
		return x.AlgorithmId
	}
	return enums.DIGITAL_SIGNATURE_ALGORITHM_ID(0)
}

func (x *DigitalSignature) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *DigitalSignature) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DigitalSignature) GetDeveloperUid() string {
	if x != nil {
		return x.DeveloperUid
	}
	return ""
}

func (x *DigitalSignature) GetDigest() *Fingerprint {
	if x != nil {
		return x.Digest
	}
	return nil
}

type NetworkConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           string                                        `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                     // Caption: Unique ID;
	ProtocolName  string                                        `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`                                                                               // Caption: Protocol Name;
	ProtocolNum   int32                                         `protobuf:"varint,3,opt,name=protocol_num,json=protocolNum,proto3" json:"protocol_num,omitempty"`                                                                                 // Caption: Protocol Number;
	BoundaryId    enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID     `protobuf:"varint,4,opt,name=boundary_id,json=boundaryId,proto3,enum=ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID" json:"boundary_id,omitempty"`                 // Caption: Boundary ID;
	Direction     string                                        `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`                                                                                                         // Caption: Direction;
	DirectionId   enums.NETWORK_CONNECTION_INFO_DIRECTION_ID    `protobuf:"varint,6,opt,name=direction_id,json=directionId,proto3,enum=ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID" json:"direction_id,omitempty"`             // Caption: Direction ID;
	TcpFlags      int32                                         `protobuf:"varint,7,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`                                                                                          // Caption: TCP Flags;
	Boundary      string                                        `protobuf:"bytes,8,opt,name=boundary,proto3" json:"boundary,omitempty"`                                                                                                           // Caption: Boundary;
	ProtocolVer   string                                        `protobuf:"bytes,9,opt,name=protocol_ver,json=protocolVer,proto3" json:"protocol_ver,omitempty"`                                                                                  // Caption: Protocol Version;
	ProtocolVerId enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID `protobuf:"varint,10,opt,name=protocol_ver_id,json=protocolVerId,proto3,enum=ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID" json:"protocol_ver_id,omitempty"` // Caption: Protocol Version ID;
}

func (x *NetworkConnectionInfo) Reset() {
	*x = NetworkConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConnectionInfo) ProtoMessage() {}

func (x *NetworkConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConnectionInfo.ProtoReflect.Descriptor instead.
func (*NetworkConnectionInfo) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{76}
}

func (x *NetworkConnectionInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolNum() int32 {
	if x != nil {
		return x.ProtocolNum
	}
	return 0
}

func (x *NetworkConnectionInfo) GetBoundaryId() enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID {
	if x != nil {
		return x.BoundaryId
	}
	return enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID(0)
}

func (x *NetworkConnectionInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *NetworkConnectionInfo) GetDirectionId() enums.NETWORK_CONNECTION_INFO_DIRECTION_ID {
	if x != nil {
		return x.DirectionId
	}
	return enums.NETWORK_CONNECTION_INFO_DIRECTION_ID(0)
}

func (x *NetworkConnectionInfo) GetTcpFlags() int32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *NetworkConnectionInfo) GetBoundary() string {
	if x != nil {
		return x.Boundary
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolVer() string {
	if x != nil {
		return x.ProtocolVer
	}
	return ""
}

func (x *NetworkConnectionInfo) GetProtocolVerId() enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID {
	if x != nil {
		return x.ProtocolVerId
	}
	return enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID(0)
}

type Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string     `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`     // Caption: Version;
	Tactics   []*Tactic  `protobuf:"bytes,2,rep,name=tactics,proto3" json:"tactics,omitempty"`     // Caption: Tactics;
	Technique *Technique `protobuf:"bytes,3,opt,name=technique,proto3" json:"technique,omitempty"` // Caption: Technique;
}

func (x *Attack) Reset() {
	*x = Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attack) ProtoMessage() {}

func (x *Attack) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attack.ProtoReflect.Descriptor instead.
func (*Attack) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{77}
}

func (x *Attack) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Attack) GetTactics() []*Tactic {
	if x != nil {
		return x.Tactics
	}
	return nil
}

func (x *Attack) GetTechnique() *Technique {
	if x != nil {
		return x.Technique
	}
	return nil
}

type DceRpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandResponse string        `protobuf:"bytes,1,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"` // Caption: Command Response;
	Flags           []string      `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`                                            // Caption: Flags;
	RpcInterface    *RpcInterface `protobuf:"bytes,3,opt,name=rpc_interface,json=rpcInterface,proto3" json:"rpc_interface,omitempty"`          // Caption: Remote Procedure Call Interface;
	Opnum           int32         `protobuf:"varint,4,opt,name=opnum,proto3" json:"opnum,omitempty"`                                           // Caption: Opnum;
	Command         string        `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`                                        // Caption: Command;
}

func (x *DceRpc) Reset() {
	*x = DceRpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DceRpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DceRpc) ProtoMessage() {}

func (x *DceRpc) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DceRpc.ProtoReflect.Descriptor instead.
func (*DceRpc) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{78}
}

func (x *DceRpc) GetCommandResponse() string {
	if x != nil {
		return x.CommandResponse
	}
	return ""
}

func (x *DceRpc) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DceRpc) GetRpcInterface() *RpcInterface {
	if x != nil {
		return x.RpcInterface
	}
	return nil
}

func (x *DceRpc) GetOpnum() int32 {
	if x != nil {
		return x.Opnum
	}
	return 0
}

func (x *DceRpc) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Caption: Name;
	OuName string `protobuf:"bytes,2,opt,name=ou_name,json=ouName,proto3" json:"ou_name,omitempty"` // Caption: Org Unit Name;
	OuUid  string `protobuf:"bytes,3,opt,name=ou_uid,json=ouUid,proto3" json:"ou_uid,omitempty"`    // Caption: Org Unit ID;
	Uid    string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`                     // Caption: Unique ID;
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{79}
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetOuName() string {
	if x != nil {
		return x.OuName
	}
	return ""
}

func (x *Organization) GetOuUid() string {
	if x != nil {
		return x.OuUid
	}
	return ""
}

func (x *Organization) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   *Service  `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`     // Caption: Service;
	Version   string    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`     // Caption: Version;
	Operation string    `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"` // Caption: Operation;
	Request   *Request  `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`     // Caption: API Request Details;
	Response  *Response `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`   // Caption: API Response Details;
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{80}
}

func (x *Api) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Api) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Api) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Api) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Api) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Hassh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm   string       `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`     // Caption: Algorithm;
	Fingerprint *Fingerprint `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"` // Caption: Fingerprint;
}

func (x *Hassh) Reset() {
	*x = Hassh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hassh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hassh) ProtoMessage() {}

func (x *Hassh) ProtoReflect() protoreflect.Message {
	mi := &file_ocsf_v1_0_0_objects_objects_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hassh.ProtoReflect.Descriptor instead.
func (*Hassh) Descriptor() ([]byte, []int) {
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP(), []int{81}
}

func (x *Hassh) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Hassh) GetFingerprint() *Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

var File_ocsf_v1_0_0_objects_objects_proto protoreflect.FileDescriptor

var file_ocsf_v1_0_0_objects_objects_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x25, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x61, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x7a, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdd,
	0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3,
	0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x04, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x22, 0x8c, 0x02, 0x0a, 0x03, 0x43, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x76, 0x73, 0x73, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x77, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x77, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x77, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x77, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0xd9, 0x01, 0x0a, 0x09, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x70, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x70, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6b, 0x69, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6b, 0x69, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6b, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x6b, 0x69, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6b, 0x69, 0x6d, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x6b, 0x69, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6d, 0x61, 0x72, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6d, 0x61, 0x72, 0x63, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6d,
	0x61, 0x72, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x6f, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x69, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x45,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69,
	0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x0a, 0x43, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x32, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x02,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x78, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x78, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xd0, 0x01, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x72, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x72, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x10,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4d, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x08, 0x0a, 0x06, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x31, 0x0a, 0x09, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xa7, 0x02, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x0a, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xd6, 0x04, 0x0a, 0x03, 0x54, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x6a, 0x61, 0x33, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x6a, 0x61, 0x33,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x61,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e,
	0x69, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x44, 0x75, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x6a, 0x61, 0x33, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6a, 0x61, 0x33,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x0c, 0x54, 0x6c, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x60,
	0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x0b,
	0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x49, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x2e, 0x0a, 0x06, 0x54, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4d,
	0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x76, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x76, 0x65, 0x52, 0x04,
	0x63, 0x76, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x02, 0x4f, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x56, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75, 0x42, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xe4, 0x03, 0x0a, 0x0f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x22, 0xbf, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x69, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x69,
	0x64, 0x41, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a,
	0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7a, 0x0a,
	0x0a, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x08, 0x44, 0x6e,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x09, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x56,
	0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x01, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xe1, 0x03, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x2d, 0x0a, 0x03,
	0x53, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x0b,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x06, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x61, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x75,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x67, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x78, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x78, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73,
	0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x99, 0x02, 0x0a, 0x04, 0x43, 0x76, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x56, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0xdd, 0x01,
	0x0a, 0x09, 0x44, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x52, 0x07, 0x66,
	0x6c, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x90, 0x0b,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x3a, 0x0a, 0x07, 0x68, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x68, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x53, 0x0a, 0x0d, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x12, 0x54, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x64,
	0x5f, 0x61, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x69, 0x64, 0x41,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x70, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4f, 0x73, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6f, 0x72, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x22, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x69, 0x73, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x03, 0x49,
	0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x62,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x0d,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x62, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x76, 0x65, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd9, 0x02, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6d, 0x74, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6d, 0x74, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6d, 0x74, 0x70, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x22, 0x99, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x73, 0x66,
	0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x77, 0x0a,
	0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xbd, 0x02, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76,
	0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x69, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x64, 0x70, 0x52, 0x03, 0x69, 0x64, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xd4, 0x02, 0x0a, 0x10, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e,
	0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x49, 0x44, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x04, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x5f, 0x0a, 0x0b, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x52,
	0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0c, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x52, 0x07, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30,
	0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x06, 0x44, 0x63, 0x65, 0x52, 0x70, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x72,
	0x70, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x70, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x75, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x75, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x75, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x03, 0x41, 0x70,
	0x69, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x63,
	0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x05, 0x48, 0x61, 0x73, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42,
	0xc9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x0c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68,
	0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x4f, 0x56, 0x4f, 0xaa, 0x02, 0x11,
	0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x30, 0x30, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0xca, 0x02, 0x11, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30, 0x30, 0x5c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1d, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x30,
	0x30, 0x5c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31,
	0x30, 0x30, 0x3a, 0x3a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_0_0_objects_objects_proto_rawDescOnce sync.Once
	file_ocsf_v1_0_0_objects_objects_proto_rawDescData = file_ocsf_v1_0_0_objects_objects_proto_rawDesc
)

func file_ocsf_v1_0_0_objects_objects_proto_rawDescGZIP() []byte {
	file_ocsf_v1_0_0_objects_objects_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_0_0_objects_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_0_0_objects_objects_proto_rawDescData)
	})
	return file_ocsf_v1_0_0_objects_objects_proto_rawDescData
}

var file_ocsf_v1_0_0_objects_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_ocsf_v1_0_0_objects_objects_proto_goTypes = []interface{}{
	(*Service)(nil),                                 // 0: ocsf.v1_0_0.objects.Service
	(*RpcInterface)(nil),                            // 1: ocsf.v1_0_0.objects.RpcInterface
	(*Cloud)(nil),                                   // 2: ocsf.v1_0_0.objects.Cloud
	(*Observable)(nil),                              // 3: ocsf.v1_0_0.objects.Observable
	(*Job)(nil),                                     // 4: ocsf.v1_0_0.objects.Job
	(*KeyboardInfo)(nil),                            // 5: ocsf.v1_0_0.objects.KeyboardInfo
	(*Group)(nil),                                   // 6: ocsf.v1_0_0.objects.Group
	(*Session)(nil),                                 // 7: ocsf.v1_0_0.objects.Session
	(*Finding)(nil),                                 // 8: ocsf.v1_0_0.objects.Finding
	(*Metadata)(nil),                                // 9: ocsf.v1_0_0.objects.Metadata
	(*Image)(nil),                                   // 10: ocsf.v1_0_0.objects.Image
	(*Cve)(nil),                                     // 11: ocsf.v1_0_0.objects.Cve
	(*EmailAuth)(nil),                               // 12: ocsf.v1_0_0.objects.EmailAuth
	(*DeviceHwInfo)(nil),                            // 13: ocsf.v1_0_0.objects.DeviceHwInfo
	(*CisControl)(nil),                              // 14: ocsf.v1_0_0.objects.CisControl
	(*Metric)(nil),                                  // 15: ocsf.v1_0_0.objects.Metric
	(*Url)(nil),                                     // 16: ocsf.v1_0_0.objects.Url
	(*File)(nil),                                    // 17: ocsf.v1_0_0.objects.File
	(*ResourceDetails)(nil),                         // 18: ocsf.v1_0_0.objects.ResourceDetails
	(*Display)(nil),                                 // 19: ocsf.v1_0_0.objects.Display
	(*WebResource)(nil),                             // 20: ocsf.v1_0_0.objects.WebResource
	(*Extension)(nil),                               // 21: ocsf.v1_0_0.objects.Extension
	(*NetworkInterface)(nil),                        // 22: ocsf.v1_0_0.objects.NetworkInterface
	(*Object)(nil),                                  // 23: ocsf.v1_0_0.objects.Object
	(*Technique)(nil),                               // 24: ocsf.v1_0_0.objects.Technique
	(*RegistryKey)(nil),                             // 25: ocsf.v1_0_0.objects.RegistryKey
	(*Response)(nil),                                // 26: ocsf.v1_0_0.objects.Response
	(*Compliance)(nil),                              // 27: ocsf.v1_0_0.objects.Compliance
	(*Module)(nil),                                  // 28: ocsf.v1_0_0.objects.Module
	(*Analytic)(nil),                                // 29: ocsf.v1_0_0.objects.Analytic
	(*Tls)(nil),                                     // 30: ocsf.v1_0_0.objects.Tls
	(*TlsExtension)(nil),                            // 31: ocsf.v1_0_0.objects.TlsExtension
	(*Account)(nil),                                 // 32: ocsf.v1_0_0.objects.Account
	(*Authorization)(nil),                           // 33: ocsf.v1_0_0.objects.Authorization
	(*NetworkTraffic)(nil),                          // 34: ocsf.v1_0_0.objects.NetworkTraffic
	(*WinResource)(nil),                             // 35: ocsf.v1_0_0.objects.WinResource
	(*Feature)(nil),                                 // 36: ocsf.v1_0_0.objects.Feature
	(*Rule)(nil),                                    // 37: ocsf.v1_0_0.objects.Rule
	(*Tactic)(nil),                                  // 38: ocsf.v1_0_0.objects.Tactic
	(*Malware)(nil),                                 // 39: ocsf.v1_0_0.objects.Malware
	(*KernelDriver)(nil),                            // 40: ocsf.v1_0_0.objects.KernelDriver
	(*Os)(nil),                                      // 41: ocsf.v1_0_0.objects.Os
	(*NetworkEndpoint)(nil),                         // 42: ocsf.v1_0_0.objects.NetworkEndpoint
	(*Container)(nil),                               // 43: ocsf.v1_0_0.objects.Container
	(*User)(nil),                                    // 44: ocsf.v1_0_0.objects.User
	(*Policy)(nil),                                  // 45: ocsf.v1_0_0.objects.Policy
	(*Enrichment)(nil),                              // 46: ocsf.v1_0_0.objects.Enrichment
	(*DnsQuery)(nil),                                // 47: ocsf.v1_0_0.objects.DnsQuery
	(*Fingerprint)(nil),                             // 48: ocsf.v1_0_0.objects.Fingerprint
	(*Product)(nil),                                 // 49: ocsf.v1_0_0.objects.Product
	(*NetworkProxy)(nil),                            // 50: ocsf.v1_0_0.objects.NetworkProxy
	(*San)(nil),                                     // 51: ocsf.v1_0_0.objects.San
	(*HttpRequest)(nil),                             // 52: ocsf.v1_0_0.objects.HttpRequest
	(*HttpHeader)(nil),                              // 53: ocsf.v1_0_0.objects.HttpHeader
	(*Process)(nil),                                 // 54: ocsf.v1_0_0.objects.Process
	(*Cvss)(nil),                                    // 55: ocsf.v1_0_0.objects.Cvss
	(*DnsAnswer)(nil),                               // 56: ocsf.v1_0_0.objects.DnsAnswer
	(*Device)(nil),                                  // 57: ocsf.v1_0_0.objects.Device
	(*CisBenchmarkResult)(nil),                      // 58: ocsf.v1_0_0.objects.CisBenchmarkResult
	(*RelatedEvent)(nil),                            // 59: ocsf.v1_0_0.objects.RelatedEvent
	(*HttpResponse)(nil),                            // 60: ocsf.v1_0_0.objects.HttpResponse
	(*Reputation)(nil),                              // 61: ocsf.v1_0_0.objects.Reputation
	(*Idp)(nil),                                     // 62: ocsf.v1_0_0.objects.Idp
	(*RegistryValue)(nil),                           // 63: ocsf.v1_0_0.objects.RegistryValue
	(*Remediation)(nil),                             // 64: ocsf.v1_0_0.objects.Remediation
	(*Vulnerability)(nil),                           // 65: ocsf.v1_0_0.objects.Vulnerability
	(*Request)(nil),                                 // 66: ocsf.v1_0_0.objects.Request
	(*Email)(nil),                                   // 67: ocsf.v1_0_0.objects.Email
	(*Location)(nil),                                // 68: ocsf.v1_0_0.objects.Location
	(*KillChain)(nil),                               // 69: ocsf.v1_0_0.objects.KillChain
	(*Certificate)(nil),                             // 70: ocsf.v1_0_0.objects.Certificate
	(*Package)(nil),                                 // 71: ocsf.v1_0_0.objects.Package
	(*ManagedEntity)(nil),                           // 72: ocsf.v1_0_0.objects.ManagedEntity
	(*Kernel)(nil),                                  // 73: ocsf.v1_0_0.objects.Kernel
	(*Actor)(nil),                                   // 74: ocsf.v1_0_0.objects.Actor
	(*DigitalSignature)(nil),                        // 75: ocsf.v1_0_0.objects.DigitalSignature
	(*NetworkConnectionInfo)(nil),                   // 76: ocsf.v1_0_0.objects.NetworkConnectionInfo
	(*Attack)(nil),                                  // 77: ocsf.v1_0_0.objects.Attack
	(*DceRpc)(nil),                                  // 78: ocsf.v1_0_0.objects.DceRpc
	(*Organization)(nil),                            // 79: ocsf.v1_0_0.objects.Organization
	(*Api)(nil),                                     // 80: ocsf.v1_0_0.objects.Api
	(*Hassh)(nil),                                   // 81: ocsf.v1_0_0.objects.Hassh
	(enums.OBSERVABLE_TYPE_ID)(0),                   // 82: ocsf.v1_0_0.objects.enums.OBSERVABLE_TYPE_ID
	(enums.JOB_RUN_STATE_ID)(0),                     // 83: ocsf.v1_0_0.objects.enums.JOB_RUN_STATE_ID
	(enums.URL_CATEGORY_IDS)(0),                     // 84: ocsf.v1_0_0.objects.enums.URL_CATEGORY_IDS
	(enums.FILE_TYPE_ID)(0),                         // 85: ocsf.v1_0_0.objects.enums.FILE_TYPE_ID
	(enums.FILE_CONFIDENTIALITY_ID)(0),              // 86: ocsf.v1_0_0.objects.enums.FILE_CONFIDENTIALITY_ID
	(enums.NETWORK_INTERFACE_TYPE_ID)(0),            // 87: ocsf.v1_0_0.objects.enums.NETWORK_INTERFACE_TYPE_ID
	(enums.MODULE_LOAD_TYPE_ID)(0),                  // 88: ocsf.v1_0_0.objects.enums.MODULE_LOAD_TYPE_ID
	(enums.ANALYTIC_TYPE_ID)(0),                     // 89: ocsf.v1_0_0.objects.enums.ANALYTIC_TYPE_ID
	(enums.TLS_EXTENSION_TYPE_ID)(0),                // 90: ocsf.v1_0_0.objects.enums.TLS_EXTENSION_TYPE_ID
	(enums.ACCOUNT_TYPE_ID)(0),                      // 91: ocsf.v1_0_0.objects.enums.ACCOUNT_TYPE_ID
	(enums.WIN_RESOURCE_TYPE_ID)(0),                 // 92: ocsf.v1_0_0.objects.enums.WIN_RESOURCE_TYPE_ID
	(enums.MALWARE_CLASSIFICATION_IDS)(0),           // 93: ocsf.v1_0_0.objects.enums.MALWARE_CLASSIFICATION_IDS
	(enums.OS_TYPE_ID)(0),                           // 94: ocsf.v1_0_0.objects.enums.OS_TYPE_ID
	(enums.USER_TYPE_ID)(0),                         // 95: ocsf.v1_0_0.objects.enums.USER_TYPE_ID
	(enums.DNS_QUERY_OPCODE_ID)(0),                  // 96: ocsf.v1_0_0.objects.enums.DNS_QUERY_OPCODE_ID
	(enums.FINGERPRINT_ALGORITHM_ID)(0),             // 97: ocsf.v1_0_0.objects.enums.FINGERPRINT_ALGORITHM_ID
	(enums.HTTP_REQUEST_HTTP_METHOD)(0),             // 98: ocsf.v1_0_0.objects.enums.HTTP_REQUEST_HTTP_METHOD
	(enums.PROCESS_INTEGRITY_ID)(0),                 // 99: ocsf.v1_0_0.objects.enums.PROCESS_INTEGRITY_ID
	(enums.CVSS_DEPTH)(0),                           // 100: ocsf.v1_0_0.objects.enums.CVSS_DEPTH
	(enums.DNS_ANSWER_FLAG_IDS)(0),                  // 101: ocsf.v1_0_0.objects.enums.DNS_ANSWER_FLAG_IDS
	(enums.DEVICE_TYPE_ID)(0),                       // 102: ocsf.v1_0_0.objects.enums.DEVICE_TYPE_ID
	(enums.DEVICE_RISK_LEVEL_ID)(0),                 // 103: ocsf.v1_0_0.objects.enums.DEVICE_RISK_LEVEL_ID
	(enums.REPUTATION_SCORE_ID)(0),                  // 104: ocsf.v1_0_0.objects.enums.REPUTATION_SCORE_ID
	(enums.REGISTRY_VALUE_TYPE_ID)(0),               // 105: ocsf.v1_0_0.objects.enums.REGISTRY_VALUE_TYPE_ID
	(enums.KILL_CHAIN_PHASE_ID)(0),                  // 106: ocsf.v1_0_0.objects.enums.KILL_CHAIN_PHASE_ID
	(enums.KERNEL_TYPE_ID)(0),                       // 107: ocsf.v1_0_0.objects.enums.KERNEL_TYPE_ID
	(enums.DIGITAL_SIGNATURE_ALGORITHM_ID)(0),       // 108: ocsf.v1_0_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	(enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID)(0),  // 109: ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	(enums.NETWORK_CONNECTION_INFO_DIRECTION_ID)(0), // 110: ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	(enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)(0), // 111: ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
}
var file_ocsf_v1_0_0_objects_objects_proto_depIdxs = []int32{
	79,  // 0: ocsf.v1_0_0.objects.Cloud.org:type_name -> ocsf.v1_0_0.objects.Organization
	32,  // 1: ocsf.v1_0_0.objects.Cloud.account:type_name -> ocsf.v1_0_0.objects.Account
	61,  // 2: ocsf.v1_0_0.objects.Observable.reputation:type_name -> ocsf.v1_0_0.objects.Reputation
	82,  // 3: ocsf.v1_0_0.objects.Observable.type_id:type_name -> ocsf.v1_0_0.objects.enums.OBSERVABLE_TYPE_ID
	44,  // 4: ocsf.v1_0_0.objects.Job.user:type_name -> ocsf.v1_0_0.objects.User
	83,  // 5: ocsf.v1_0_0.objects.Job.run_state_id:type_name -> ocsf.v1_0_0.objects.enums.JOB_RUN_STATE_ID
	17,  // 6: ocsf.v1_0_0.objects.Job.file:type_name -> ocsf.v1_0_0.objects.File
	64,  // 7: ocsf.v1_0_0.objects.Finding.remediation:type_name -> ocsf.v1_0_0.objects.Remediation
	59,  // 8: ocsf.v1_0_0.objects.Finding.related_events:type_name -> ocsf.v1_0_0.objects.RelatedEvent
	49,  // 9: ocsf.v1_0_0.objects.Metadata.product:type_name -> ocsf.v1_0_0.objects.Product
	21,  // 10: ocsf.v1_0_0.objects.Metadata.extension:type_name -> ocsf.v1_0_0.objects.Extension
	49,  // 11: ocsf.v1_0_0.objects.Cve.product:type_name -> ocsf.v1_0_0.objects.Product
	55,  // 12: ocsf.v1_0_0.objects.Cve.cvss:type_name -> ocsf.v1_0_0.objects.Cvss
	5,   // 13: ocsf.v1_0_0.objects.DeviceHwInfo.keyboard_info:type_name -> ocsf.v1_0_0.objects.KeyboardInfo
	19,  // 14: ocsf.v1_0_0.objects.DeviceHwInfo.desktop_display:type_name -> ocsf.v1_0_0.objects.Display
	84,  // 15: ocsf.v1_0_0.objects.Url.category_ids:type_name -> ocsf.v1_0_0.objects.enums.URL_CATEGORY_IDS
	44,  // 16: ocsf.v1_0_0.objects.File.owner:type_name -> ocsf.v1_0_0.objects.User
	75,  // 17: ocsf.v1_0_0.objects.File.signature:type_name -> ocsf.v1_0_0.objects.DigitalSignature
	44,  // 18: ocsf.v1_0_0.objects.File.creator:type_name -> ocsf.v1_0_0.objects.User
	49,  // 19: ocsf.v1_0_0.objects.File.product:type_name -> ocsf.v1_0_0.objects.Product
	85,  // 20: ocsf.v1_0_0.objects.File.type_id:type_name -> ocsf.v1_0_0.objects.enums.FILE_TYPE_ID
	48,  // 21: ocsf.v1_0_0.objects.File.hashes:type_name -> ocsf.v1_0_0.objects.Fingerprint
	44,  // 22: ocsf.v1_0_0.objects.File.modifier:type_name -> ocsf.v1_0_0.objects.User
	44,  // 23: ocsf.v1_0_0.objects.File.accessor:type_name -> ocsf.v1_0_0.objects.User
	86,  // 24: ocsf.v1_0_0.objects.File.confidentiality_id:type_name -> ocsf.v1_0_0.objects.enums.FILE_CONFIDENTIALITY_ID
	23,  // 25: ocsf.v1_0_0.objects.File.xattributes:type_name -> ocsf.v1_0_0.objects.Object
	6,   // 26: ocsf.v1_0_0.objects.ResourceDetails.group:type_name -> ocsf.v1_0_0.objects.Group
	44,  // 27: ocsf.v1_0_0.objects.ResourceDetails.owner:type_name -> ocsf.v1_0_0.objects.User
	87,  // 28: ocsf.v1_0_0.objects.NetworkInterface.type_id:type_name -> ocsf.v1_0_0.objects.enums.NETWORK_INTERFACE_TYPE_ID
	17,  // 29: ocsf.v1_0_0.objects.Module.file:type_name -> ocsf.v1_0_0.objects.File
	88,  // 30: ocsf.v1_0_0.objects.Module.load_type_id:type_name -> ocsf.v1_0_0.objects.enums.MODULE_LOAD_TYPE_ID
	29,  // 31: ocsf.v1_0_0.objects.Analytic.related_analytics:type_name -> ocsf.v1_0_0.objects.Analytic
	89,  // 32: ocsf.v1_0_0.objects.Analytic.type_id:type_name -> ocsf.v1_0_0.objects.enums.ANALYTIC_TYPE_ID
	48,  // 33: ocsf.v1_0_0.objects.Tls.ja3_hash:type_name -> ocsf.v1_0_0.objects.Fingerprint
	51,  // 34: ocsf.v1_0_0.objects.Tls.sans:type_name -> ocsf.v1_0_0.objects.San
	48,  // 35: ocsf.v1_0_0.objects.Tls.ja3s_hash:type_name -> ocsf.v1_0_0.objects.Fingerprint
	31,  // 36: ocsf.v1_0_0.objects.Tls.extension_list:type_name -> ocsf.v1_0_0.objects.TlsExtension
	70,  // 37: ocsf.v1_0_0.objects.Tls.certificate:type_name -> ocsf.v1_0_0.objects.Certificate
	90,  // 38: ocsf.v1_0_0.objects.TlsExtension.type_id:type_name -> ocsf.v1_0_0.objects.enums.TLS_EXTENSION_TYPE_ID
	91,  // 39: ocsf.v1_0_0.objects.Account.type_id:type_name -> ocsf.v1_0_0.objects.enums.ACCOUNT_TYPE_ID
	45,  // 40: ocsf.v1_0_0.objects.Authorization.policy:type_name -> ocsf.v1_0_0.objects.Policy
	92,  // 41: ocsf.v1_0_0.objects.WinResource.type_id:type_name -> ocsf.v1_0_0.objects.enums.WIN_RESOURCE_TYPE_ID
	93,  // 42: ocsf.v1_0_0.objects.Malware.classification_ids:type_name -> ocsf.v1_0_0.objects.enums.MALWARE_CLASSIFICATION_IDS
	11,  // 43: ocsf.v1_0_0.objects.Malware.cves:type_name -> ocsf.v1_0_0.objects.Cve
	17,  // 44: ocsf.v1_0_0.objects.KernelDriver.file:type_name -> ocsf.v1_0_0.objects.File
	94,  // 45: ocsf.v1_0_0.objects.Os.type_id:type_name -> ocsf.v1_0_0.objects.enums.OS_TYPE_ID
	68,  // 46: ocsf.v1_0_0.objects.NetworkEndpoint.location:type_name -> ocsf.v1_0_0.objects.Location
	10,  // 47: ocsf.v1_0_0.objects.Container.image:type_name -> ocsf.v1_0_0.objects.Image
	48,  // 48: ocsf.v1_0_0.objects.Container.hash:type_name -> ocsf.v1_0_0.objects.Fingerprint
	6,   // 49: ocsf.v1_0_0.objects.User.groups:type_name -> ocsf.v1_0_0.objects.Group
	79,  // 50: ocsf.v1_0_0.objects.User.org:type_name -> ocsf.v1_0_0.objects.Organization
	95,  // 51: ocsf.v1_0_0.objects.User.type_id:type_name -> ocsf.v1_0_0.objects.enums.USER_TYPE_ID
	32,  // 52: ocsf.v1_0_0.objects.User.account:type_name -> ocsf.v1_0_0.objects.Account
	6,   // 53: ocsf.v1_0_0.objects.Policy.group:type_name -> ocsf.v1_0_0.objects.Group
	96,  // 54: ocsf.v1_0_0.objects.DnsQuery.opcode_id:type_name -> ocsf.v1_0_0.objects.enums.DNS_QUERY_OPCODE_ID
	97,  // 55: ocsf.v1_0_0.objects.Fingerprint.algorithm_id:type_name -> ocsf.v1_0_0.objects.enums.FINGERPRINT_ALGORITHM_ID
	36,  // 56: ocsf.v1_0_0.objects.Product.feature:type_name -> ocsf.v1_0_0.objects.Feature
	68,  // 57: ocsf.v1_0_0.objects.NetworkProxy.location:type_name -> ocsf.v1_0_0.objects.Location
	53,  // 58: ocsf.v1_0_0.objects.HttpRequest.http_headers:type_name -> ocsf.v1_0_0.objects.HttpHeader
	98,  // 59: ocsf.v1_0_0.objects.HttpRequest.http_method:type_name -> ocsf.v1_0_0.objects.enums.HTTP_REQUEST_HTTP_METHOD
	16,  // 60: ocsf.v1_0_0.objects.HttpRequest.url:type_name -> ocsf.v1_0_0.objects.Url
	17,  // 61: ocsf.v1_0_0.objects.Process.file:type_name -> ocsf.v1_0_0.objects.File
	99,  // 62: ocsf.v1_0_0.objects.Process.integrity_id:type_name -> ocsf.v1_0_0.objects.enums.PROCESS_INTEGRITY_ID
	6,   // 63: ocsf.v1_0_0.objects.Process.group:type_name -> ocsf.v1_0_0.objects.Group
	23,  // 64: ocsf.v1_0_0.objects.Process.xattributes:type_name -> ocsf.v1_0_0.objects.Object
	43,  // 65: ocsf.v1_0_0.objects.Process.container:type_name -> ocsf.v1_0_0.objects.Container
	7,   // 66: ocsf.v1_0_0.objects.Process.session:type_name -> ocsf.v1_0_0.objects.Session
	54,  // 67: ocsf.v1_0_0.objects.Process.parent_process:type_name -> ocsf.v1_0_0.objects.Process
	44,  // 68: ocsf.v1_0_0.objects.Process.user:type_name -> ocsf.v1_0_0.objects.User
	15,  // 69: ocsf.v1_0_0.objects.Cvss.metrics:type_name -> ocsf.v1_0_0.objects.Metric
	100, // 70: ocsf.v1_0_0.objects.Cvss.depth:type_name -> ocsf.v1_0_0.objects.enums.CVSS_DEPTH
	101, // 71: ocsf.v1_0_0.objects.DnsAnswer.flag_ids:type_name -> ocsf.v1_0_0.objects.enums.DNS_ANSWER_FLAG_IDS
	10,  // 72: ocsf.v1_0_0.objects.Device.image:type_name -> ocsf.v1_0_0.objects.Image
	13,  // 73: ocsf.v1_0_0.objects.Device.hw_info:type_name -> ocsf.v1_0_0.objects.DeviceHwInfo
	6,   // 74: ocsf.v1_0_0.objects.Device.groups:type_name -> ocsf.v1_0_0.objects.Group
	102, // 75: ocsf.v1_0_0.objects.Device.type_id:type_name -> ocsf.v1_0_0.objects.enums.DEVICE_TYPE_ID
	103, // 76: ocsf.v1_0_0.objects.Device.risk_level_id:type_name -> ocsf.v1_0_0.objects.enums.DEVICE_RISK_LEVEL_ID
	68,  // 77: ocsf.v1_0_0.objects.Device.location:type_name -> ocsf.v1_0_0.objects.Location
	22,  // 78: ocsf.v1_0_0.objects.Device.network_interfaces:type_name -> ocsf.v1_0_0.objects.NetworkInterface
	41,  // 79: ocsf.v1_0_0.objects.Device.os:type_name -> ocsf.v1_0_0.objects.Os
	79,  // 80: ocsf.v1_0_0.objects.Device.org:type_name -> ocsf.v1_0_0.objects.Organization
	37,  // 81: ocsf.v1_0_0.objects.CisBenchmarkResult.rule:type_name -> ocsf.v1_0_0.objects.Rule
	64,  // 82: ocsf.v1_0_0.objects.CisBenchmarkResult.remediation:type_name -> ocsf.v1_0_0.objects.Remediation
	104, // 83: ocsf.v1_0_0.objects.Reputation.score_id:type_name -> ocsf.v1_0_0.objects.enums.REPUTATION_SCORE_ID
	105, // 84: ocsf.v1_0_0.objects.RegistryValue.type_id:type_name -> ocsf.v1_0_0.objects.enums.REGISTRY_VALUE_TYPE_ID
	71,  // 85: ocsf.v1_0_0.objects.Vulnerability.packages:type_name -> ocsf.v1_0_0.objects.Package
	11,  // 86: ocsf.v1_0_0.objects.Vulnerability.cve:type_name -> ocsf.v1_0_0.objects.Cve
	106, // 87: ocsf.v1_0_0.objects.KillChain.phase_id:type_name -> ocsf.v1_0_0.objects.enums.KILL_CHAIN_PHASE_ID
	48,  // 88: ocsf.v1_0_0.objects.Certificate.fingerprints:type_name -> ocsf.v1_0_0.objects.Fingerprint
	107, // 89: ocsf.v1_0_0.objects.Kernel.type_id:type_name -> ocsf.v1_0_0.objects.enums.KERNEL_TYPE_ID
	44,  // 90: ocsf.v1_0_0.objects.Actor.user:type_name -> ocsf.v1_0_0.objects.User
	33,  // 91: ocsf.v1_0_0.objects.Actor.authorizations:type_name -> ocsf.v1_0_0.objects.Authorization
	62,  // 92: ocsf.v1_0_0.objects.Actor.idp:type_name -> ocsf.v1_0_0.objects.Idp
	54,  // 93: ocsf.v1_0_0.objects.Actor.process:type_name -> ocsf.v1_0_0.objects.Process
	7,   // 94: ocsf.v1_0_0.objects.Actor.session:type_name -> ocsf.v1_0_0.objects.Session
	108, // 95: ocsf.v1_0_0.objects.DigitalSignature.algorithm_id:type_name -> ocsf.v1_0_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	70,  // 96: ocsf.v1_0_0.objects.DigitalSignature.certificate:type_name -> ocsf.v1_0_0.objects.Certificate
	48,  // 97: ocsf.v1_0_0.objects.DigitalSignature.digest:type_name -> ocsf.v1_0_0.objects.Fingerprint
	109, // 98: ocsf.v1_0_0.objects.NetworkConnectionInfo.boundary_id:type_name -> ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	110, // 99: ocsf.v1_0_0.objects.NetworkConnectionInfo.direction_id:type_name -> ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	111, // 100: ocsf.v1_0_0.objects.NetworkConnectionInfo.protocol_ver_id:type_name -> ocsf.v1_0_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
	38,  // 101: ocsf.v1_0_0.objects.Attack.tactics:type_name -> ocsf.v1_0_0.objects.Tactic
	24,  // 102: ocsf.v1_0_0.objects.Attack.technique:type_name -> ocsf.v1_0_0.objects.Technique
	1,   // 103: ocsf.v1_0_0.objects.DceRpc.rpc_interface:type_name -> ocsf.v1_0_0.objects.RpcInterface
	0,   // 104: ocsf.v1_0_0.objects.Api.service:type_name -> ocsf.v1_0_0.objects.Service
	66,  // 105: ocsf.v1_0_0.objects.Api.request:type_name -> ocsf.v1_0_0.objects.Request
	26,  // 106: ocsf.v1_0_0.objects.Api.response:type_name -> ocsf.v1_0_0.objects.Response
	48,  // 107: ocsf.v1_0_0.objects.Hassh.fingerprint:type_name -> ocsf.v1_0_0.objects.Fingerprint
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_ocsf_v1_0_0_objects_objects_proto_init() }
func file_ocsf_v1_0_0_objects_objects_proto_init() {
	if File_ocsf_v1_0_0_objects_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceHwInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CisControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Technique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analytic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tactic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Malware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Os); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fingerprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*San); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cvss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CisBenchmarkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Idp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DceRpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocsf_v1_0_0_objects_objects_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hassh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_0_0_objects_objects_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_0_0_objects_objects_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_0_0_objects_objects_proto_depIdxs,
		MessageInfos:      file_ocsf_v1_0_0_objects_objects_proto_msgTypes,
	}.Build()
	File_ocsf_v1_0_0_objects_objects_proto = out.File
	file_ocsf_v1_0_0_objects_objects_proto_rawDesc = nil
	file_ocsf_v1_0_0_objects_objects_proto_goTypes = nil
	file_ocsf_v1_0_0_objects_objects_proto_depIdxs = nil
}
